
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = node.ownerDocument;
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    function create_animation(node, from, fn, params) {
        if (!from)
            return noop;
        const to = node.getBoundingClientRect();
        if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
            return noop;
        const { delay = 0, duration = 300, easing = identity, 
        // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
        start: start_time = now() + delay, 
        // @ts-ignore todo:
        end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
        let running = true;
        let started = false;
        let name;
        function start() {
            if (css) {
                name = create_rule(node, 0, 1, duration, delay, easing, css);
            }
            if (!delay) {
                started = true;
            }
        }
        function stop() {
            if (css)
                delete_rule(node, name);
            running = false;
        }
        loop(now => {
            if (!started && now >= start_time) {
                started = true;
            }
            if (started && now >= end) {
                tick(1, 0);
                stop();
            }
            if (!running) {
                return false;
            }
            if (started) {
                const p = now - start_time;
                const t = 0 + 1 * easing(p / duration);
                tick(t, 1 - t);
            }
            return true;
        });
        start();
        tick(0, 1);
        return stop;
    }
    function fix_position(node) {
        const style = getComputedStyle(node);
        if (style.position !== 'absolute' && style.position !== 'fixed') {
            const { width, height } = style;
            const a = node.getBoundingClientRect();
            node.style.position = 'absolute';
            node.style.width = width;
            node.style.height = height;
            add_transform(node, a);
        }
    }
    function add_transform(node, a) {
        const b = node.getBoundingClientRect();
        if (a.left !== b.left || a.top !== b.top) {
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            callbacks.slice().forEach(fn => fn(event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function fix_and_outro_and_destroy_block(block, lookup) {
        block.f();
        outro_and_destroy_block(block, lookup);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.32.1' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    /**
     * @module ol/util
     */
    /**
     * @return {?} Any return.
     */
    function abstract() {
        return /** @type {?} */ ((function () {
            throw new Error('Unimplemented abstract method.');
        })());
    }
    /**
     * Counter for getUid.
     * @type {number}
     * @private
     */
    var uidCounter_ = 0;
    /**
     * Gets a unique ID for an object. This mutates the object so that further calls
     * with the same object as a parameter returns the same value. Unique IDs are generated
     * as a strictly increasing sequence. Adapted from goog.getUid.
     *
     * @param {Object} obj The object to get the unique ID for.
     * @return {string} The unique ID for the object.
     * @api
     */
    function getUid(obj) {
        return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
    }
    /**
     * OpenLayers version.
     * @type {string}
     */
    var VERSION = '6.5.0';

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Error object thrown when an assertion failed. This is an ECMA-262 Error,
     * extended with a `code` property.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
     */
    var AssertionError = /** @class */ (function (_super) {
        __extends(AssertionError, _super);
        /**
         * @param {number} code Error code.
         */
        function AssertionError(code) {
            var _this = this;
            var path = 'v' + VERSION.split('-')[0];
            var message = 'Assertion failed. See https://openlayers.org/en/' +
                path +
                '/doc/errors/#' +
                code +
                ' for details.';
            _this = _super.call(this, message) || this;
            /**
             * Error code. The meaning of the code can be found on
             * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
             * the version found in the OpenLayers script's header comment if a version
             * other than the latest is used).
             * @type {number}
             * @api
             */
            _this.code = code;
            /**
             * @type {string}
             */
            _this.name = 'AssertionError';
            // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
            _this.message = message;
            return _this;
        }
        return AssertionError;
    }(Error));

    /**
     * @module ol/events/Event
     */
    /**
     * @classdesc
     * Stripped down implementation of the W3C DOM Level 2 Event interface.
     * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
     *
     * This implementation only provides `type` and `target` properties, and
     * `stopPropagation` and `preventDefault` methods. It is meant as base class
     * for higher level events defined in the library, and works with
     * {@link module:ol/events/Target~Target}.
     */
    var BaseEvent = /** @class */ (function () {
        /**
         * @param {string} type Type.
         */
        function BaseEvent(type) {
            /**
             * @type {boolean}
             */
            this.propagationStopped;
            /**
             * The event type.
             * @type {string}
             * @api
             */
            this.type = type;
            /**
             * The event target.
             * @type {Object}
             * @api
             */
            this.target = null;
        }
        /**
         * Stop event propagation.
         * @api
         */
        BaseEvent.prototype.preventDefault = function () {
            this.propagationStopped = true;
        };
        /**
         * Stop event propagation.
         * @api
         */
        BaseEvent.prototype.stopPropagation = function () {
            this.propagationStopped = true;
        };
        return BaseEvent;
    }());

    /**
     * @module ol/ObjectEventType
     */
    /**
     * @enum {string}
     */
    var ObjectEventType = {
        /**
         * Triggered when a property is changed.
         * @event module:ol/Object.ObjectEvent#propertychange
         * @api
         */
        PROPERTYCHANGE: 'propertychange',
    };

    /**
     * @module ol/Disposable
     */
    /**
     * @classdesc
     * Objects that need to clean up after themselves.
     */
    var Disposable = /** @class */ (function () {
        function Disposable() {
            /**
             * The object has already been disposed.
             * @type {boolean}
             * @protected
             */
            this.disposed = false;
        }
        /**
         * Clean up.
         */
        Disposable.prototype.dispose = function () {
            if (!this.disposed) {
                this.disposed = true;
                this.disposeInternal();
            }
        };
        /**
         * Extension point for disposable objects.
         * @protected
         */
        Disposable.prototype.disposeInternal = function () { };
        return Disposable;
    }());

    /**
     * @module ol/array
     */
    /**
     * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
     * https://github.com/darkskyapp/binary-search
     *
     * @param {Array<*>} haystack Items to search through.
     * @param {*} needle The item to look for.
     * @param {Function=} opt_comparator Comparator function.
     * @return {number} The index of the item if found, -1 if not.
     */
    function binarySearch(haystack, needle, opt_comparator) {
        var mid, cmp;
        var comparator = opt_comparator || numberSafeCompareFunction;
        var low = 0;
        var high = haystack.length;
        var found = false;
        while (low < high) {
            /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
             * to double (which gives the wrong results). */
            mid = low + ((high - low) >> 1);
            cmp = +comparator(haystack[mid], needle);
            if (cmp < 0.0) {
                /* Too low. */
                low = mid + 1;
            }
            else {
                /* Key found or too high */
                high = mid;
                found = !cmp;
            }
        }
        /* Key not found. */
        return found ? low : ~low;
    }
    /**
     * Compare function for array sort that is safe for numbers.
     * @param {*} a The first object to be compared.
     * @param {*} b The second object to be compared.
     * @return {number} A negative number, zero, or a positive number as the first
     *     argument is less than, equal to, or greater than the second.
     */
    function numberSafeCompareFunction(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
    }
    /**
     * @param {Array<number>} arr Array.
     * @param {number} target Target.
     * @param {number} direction 0 means return the nearest, > 0
     *    means return the largest nearest, < 0 means return the
     *    smallest nearest.
     * @return {number} Index.
     */
    function linearFindNearest(arr, target, direction) {
        var n = arr.length;
        if (arr[0] <= target) {
            return 0;
        }
        else if (target <= arr[n - 1]) {
            return n - 1;
        }
        else {
            var i = void 0;
            if (direction > 0) {
                for (i = 1; i < n; ++i) {
                    if (arr[i] < target) {
                        return i - 1;
                    }
                }
            }
            else if (direction < 0) {
                for (i = 1; i < n; ++i) {
                    if (arr[i] <= target) {
                        return i;
                    }
                }
            }
            else {
                for (i = 1; i < n; ++i) {
                    if (arr[i] == target) {
                        return i;
                    }
                    else if (arr[i] < target) {
                        if (arr[i - 1] - target < target - arr[i]) {
                            return i - 1;
                        }
                        else {
                            return i;
                        }
                    }
                }
            }
            return n - 1;
        }
    }
    /**
     * @param {Array<*>} arr Array.
     * @param {number} begin Begin index.
     * @param {number} end End index.
     */
    function reverseSubArray(arr, begin, end) {
        while (begin < end) {
            var tmp = arr[begin];
            arr[begin] = arr[end];
            arr[end] = tmp;
            ++begin;
            --end;
        }
    }
    /**
     * @param {Array<VALUE>} arr The array to modify.
     * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
     * @template VALUE
     */
    function extend(arr, data) {
        var extension = Array.isArray(data) ? data : [data];
        var length = extension.length;
        for (var i = 0; i < length; i++) {
            arr[arr.length] = extension[i];
        }
    }
    /**
     * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
     * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
     * @return {boolean} Whether the two arrays are equal.
     */
    function equals(arr1, arr2) {
        var len1 = arr1.length;
        if (len1 !== arr2.length) {
            return false;
        }
        for (var i = 0; i < len1; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {Array<*>} arr The array to test.
     * @param {Function=} opt_func Comparison function.
     * @param {boolean=} opt_strict Strictly sorted (default false).
     * @return {boolean} Return index.
     */
    function isSorted(arr, opt_func, opt_strict) {
        var compare = opt_func || numberSafeCompareFunction;
        return arr.every(function (currentVal, index) {
            if (index === 0) {
                return true;
            }
            var res = compare(arr[index - 1], currentVal);
            return !(res > 0 || (opt_strict && res === 0));
        });
    }

    /**
     * @module ol/functions
     */
    /**
     * Always returns true.
     * @returns {boolean} true.
     */
    function TRUE() {
        return true;
    }
    /**
     * Always returns false.
     * @returns {boolean} false.
     */
    function FALSE() {
        return false;
    }
    /**
     * A reusable function, used e.g. as a default for callbacks.
     *
     * @return {void} Nothing.
     */
    function VOID() { }
    /**
     * Wrap a function in another function that remembers the last return.  If the
     * returned function is called twice in a row with the same arguments and the same
     * this object, it will return the value from the first call in the second call.
     *
     * @param {function(...any): ReturnType} fn The function to memoize.
     * @return {function(...any): ReturnType} The memoized function.
     * @template ReturnType
     */
    function memoizeOne(fn) {
        var called = false;
        /** @type {ReturnType} */
        var lastResult;
        /** @type {Array<any>} */
        var lastArgs;
        var lastThis;
        return function () {
            var nextArgs = Array.prototype.slice.call(arguments);
            if (!called || this !== lastThis || !equals(nextArgs, lastArgs)) {
                called = true;
                lastThis = this;
                lastArgs = nextArgs;
                lastResult = fn.apply(this, arguments);
            }
            return lastResult;
        };
    }

    /**
     * @module ol/obj
     */
    /**
     * Polyfill for Object.assign().  Assigns enumerable and own properties from
     * one or more source objects to a target object.
     * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.
     *
     * @param {!Object} target The target object.
     * @param {...Object} var_sources The source object(s).
     * @return {!Object} The modified target object.
     */
    var assign$1 = typeof Object.assign === 'function'
        ? Object.assign
        : function (target, var_sources) {
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }
            var output = Object(target);
            for (var i = 1, ii = arguments.length; i < ii; ++i) {
                var source = arguments[i];
                if (source !== undefined && source !== null) {
                    for (var key in source) {
                        if (source.hasOwnProperty(key)) {
                            output[key] = source[key];
                        }
                    }
                }
            }
            return output;
        };
    /**
     * Removes all properties from an object.
     * @param {Object} object The object to clear.
     */
    function clear(object) {
        for (var property in object) {
            delete object[property];
        }
    }
    /**
     * Polyfill for Object.values().  Get an array of property values from an object.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
     *
     * @param {!Object<K,V>} object The object from which to get the values.
     * @return {!Array<V>} The property values.
     * @template K,V
     */
    var getValues = typeof Object.values === 'function'
        ? Object.values
        : function (object) {
            var values = [];
            for (var property in object) {
                values.push(object[property]);
            }
            return values;
        };
    /**
     * Determine if an object has any properties.
     * @param {Object} object The object to check.
     * @return {boolean} The object is empty.
     */
    function isEmpty(object) {
        var property;
        for (property in object) {
            return false;
        }
        return !property;
    }

    var __extends$1 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {EventTarget|Target} EventTargetLike
     */
    /**
     * @classdesc
     * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
     * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
     *
     * There are two important simplifications compared to the specification:
     *
     * 1. The handling of `useCapture` in `addEventListener` and
     *    `removeEventListener`. There is no real capture model.
     * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
     *    There is no event target hierarchy. When a listener calls
     *    `stopPropagation` or `preventDefault` on an event object, it means that no
     *    more listeners after this one will be called. Same as when the listener
     *    returns false.
     */
    var Target = /** @class */ (function (_super) {
        __extends$1(Target, _super);
        /**
         * @param {*=} opt_target Default event target for dispatched events.
         */
        function Target(opt_target) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {*}
             */
            _this.eventTarget_ = opt_target;
            /**
             * @private
             * @type {Object<string, number>}
             */
            _this.pendingRemovals_ = null;
            /**
             * @private
             * @type {Object<string, number>}
             */
            _this.dispatching_ = null;
            /**
             * @private
             * @type {Object<string, Array<import("../events.js").Listener>>}
             */
            _this.listeners_ = null;
            return _this;
        }
        /**
         * @param {string} type Type.
         * @param {import("../events.js").Listener} listener Listener.
         */
        Target.prototype.addEventListener = function (type, listener) {
            if (!type || !listener) {
                return;
            }
            var listeners = this.listeners_ || (this.listeners_ = {});
            var listenersForType = listeners[type] || (listeners[type] = []);
            if (listenersForType.indexOf(listener) === -1) {
                listenersForType.push(listener);
            }
        };
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         *
         * @param {import("./Event.js").default|string} event Event object.
         * @return {boolean|undefined} `false` if anyone called preventDefault on the
         *     event object or if any of the listeners returned false.
         * @api
         */
        Target.prototype.dispatchEvent = function (event) {
            /** @type {import("./Event.js").default|Event} */
            var evt = typeof event === 'string' ? new BaseEvent(event) : event;
            var type = evt.type;
            if (!evt.target) {
                evt.target = this.eventTarget_ || this;
            }
            var listeners = this.listeners_ && this.listeners_[type];
            var propagate;
            if (listeners) {
                var dispatching = this.dispatching_ || (this.dispatching_ = {});
                var pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});
                if (!(type in dispatching)) {
                    dispatching[type] = 0;
                    pendingRemovals[type] = 0;
                }
                ++dispatching[type];
                for (var i = 0, ii = listeners.length; i < ii; ++i) {
                    if ('handleEvent' in listeners[i]) {
                        propagate = /** @type {import("../events.js").ListenerObject} */ (listeners[i]).handleEvent(evt);
                    }
                    else {
                        propagate = /** @type {import("../events.js").ListenerFunction} */ (listeners[i]).call(this, evt);
                    }
                    if (propagate === false || evt.propagationStopped) {
                        propagate = false;
                        break;
                    }
                }
                --dispatching[type];
                if (dispatching[type] === 0) {
                    var pr = pendingRemovals[type];
                    delete pendingRemovals[type];
                    while (pr--) {
                        this.removeEventListener(type, VOID);
                    }
                    delete dispatching[type];
                }
                return propagate;
            }
        };
        /**
         * Clean up.
         */
        Target.prototype.disposeInternal = function () {
            this.listeners_ && clear(this.listeners_);
        };
        /**
         * Get the listeners for a specified event type. Listeners are returned in the
         * order that they will be called in.
         *
         * @param {string} type Type.
         * @return {Array<import("../events.js").Listener>|undefined} Listeners.
         */
        Target.prototype.getListeners = function (type) {
            return (this.listeners_ && this.listeners_[type]) || undefined;
        };
        /**
         * @param {string=} opt_type Type. If not provided,
         *     `true` will be returned if this event target has any listeners.
         * @return {boolean} Has listeners.
         */
        Target.prototype.hasListener = function (opt_type) {
            if (!this.listeners_) {
                return false;
            }
            return opt_type
                ? opt_type in this.listeners_
                : Object.keys(this.listeners_).length > 0;
        };
        /**
         * @param {string} type Type.
         * @param {import("../events.js").Listener} listener Listener.
         */
        Target.prototype.removeEventListener = function (type, listener) {
            var listeners = this.listeners_ && this.listeners_[type];
            if (listeners) {
                var index = listeners.indexOf(listener);
                if (index !== -1) {
                    if (this.pendingRemovals_ && type in this.pendingRemovals_) {
                        // make listener a no-op, and remove later in #dispatchEvent()
                        listeners[index] = VOID;
                        ++this.pendingRemovals_[type];
                    }
                    else {
                        listeners.splice(index, 1);
                        if (listeners.length === 0) {
                            delete this.listeners_[type];
                        }
                    }
                }
            }
        };
        return Target;
    }(Disposable));

    /**
     * @module ol/events/EventType
     */
    /**
     * @enum {string}
     * @const
     */
    var EventType = {
        /**
         * Generic change event. Triggered when the revision counter is increased.
         * @event module:ol/events/Event~BaseEvent#change
         * @api
         */
        CHANGE: 'change',
        /**
         * Generic error event. Triggered when an error occurs.
         * @event module:ol/events/Event~BaseEvent#error
         * @api
         */
        ERROR: 'error',
        BLUR: 'blur',
        CLEAR: 'clear',
        CONTEXTMENU: 'contextmenu',
        CLICK: 'click',
        DBLCLICK: 'dblclick',
        DRAGENTER: 'dragenter',
        DRAGOVER: 'dragover',
        DROP: 'drop',
        FOCUS: 'focus',
        KEYDOWN: 'keydown',
        KEYPRESS: 'keypress',
        LOAD: 'load',
        RESIZE: 'resize',
        TOUCHMOVE: 'touchmove',
        WHEEL: 'wheel',
    };

    /**
     * @module ol/events
     */
    /**
     * Key to use with {@link module:ol/Observable~Observable#unByKey}.
     * @typedef {Object} EventsKey
     * @property {ListenerFunction} listener
     * @property {import("./events/Target.js").EventTargetLike} target
     * @property {string} type
     * @api
     */
    /**
     * Listener function. This function is called with an event object as argument.
     * When the function returns `false`, event propagation will stop.
     *
     * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
     * @api
     */
    /**
     * @typedef {Object} ListenerObject
     * @property {ListenerFunction} handleEvent
     */
    /**
     * @typedef {ListenerFunction|ListenerObject} Listener
     */
    /**
     * Registers an event listener on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * This function efficiently binds a `listener` to a `this` object, and returns
     * a key for use with {@link module:ol/events~unlistenByKey}.
     *
     * @param {import("./events/Target.js").EventTargetLike} target Event target.
     * @param {string} type Event type.
     * @param {ListenerFunction} listener Listener.
     * @param {Object=} opt_this Object referenced by the `this` keyword in the
     *     listener. Default is the `target`.
     * @param {boolean=} opt_once If true, add the listener as one-off listener.
     * @return {EventsKey} Unique key for the listener.
     */
    function listen$1(target, type, listener, opt_this, opt_once) {
        if (opt_this && opt_this !== target) {
            listener = listener.bind(opt_this);
        }
        if (opt_once) {
            var originalListener_1 = listener;
            listener = function () {
                target.removeEventListener(type, listener);
                originalListener_1.apply(this, arguments);
            };
        }
        var eventsKey = {
            target: target,
            type: type,
            listener: listener,
        };
        target.addEventListener(type, listener);
        return eventsKey;
    }
    /**
     * Registers a one-off event listener on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * This function efficiently binds a `listener` as self-unregistering listener
     * to a `this` object, and returns a key for use with
     * {@link module:ol/events~unlistenByKey} in case the listener needs to be
     * unregistered before it is called.
     *
     * When {@link module:ol/events~listen} is called with the same arguments after this
     * function, the self-unregistering listener will be turned into a permanent
     * listener.
     *
     * @param {import("./events/Target.js").EventTargetLike} target Event target.
     * @param {string} type Event type.
     * @param {ListenerFunction} listener Listener.
     * @param {Object=} opt_this Object referenced by the `this` keyword in the
     *     listener. Default is the `target`.
     * @return {EventsKey} Key for unlistenByKey.
     */
    function listenOnce(target, type, listener, opt_this) {
        return listen$1(target, type, listener, opt_this, true);
    }
    /**
     * Unregisters event listeners on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * The argument passed to this function is the key returned from
     * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
     *
     * @param {EventsKey} key The key.
     */
    function unlistenByKey(key) {
        if (key && key.target) {
            key.target.removeEventListener(key.type, key.listener);
            clear(key);
        }
    }

    var __extends$2 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * An event target providing convenient methods for listener registration
     * and unregistration. A generic `change` event is always available through
     * {@link module:ol/Observable~Observable#changed}.
     *
     * @fires import("./events/Event.js").default
     * @api
     */
    var Observable = /** @class */ (function (_super) {
        __extends$2(Observable, _super);
        function Observable() {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {number}
             */
            _this.revision_ = 0;
            return _this;
        }
        /**
         * Increases the revision counter and dispatches a 'change' event.
         * @api
         */
        Observable.prototype.changed = function () {
            ++this.revision_;
            this.dispatchEvent(EventType.CHANGE);
        };
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         * @return {number} Revision.
         * @api
         */
        Observable.prototype.getRevision = function () {
            return this.revision_;
        };
        /**
         * Listen for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
         *     called with an array of event types as the first argument, the return
         *     will be an array of keys.
         * @api
         */
        Observable.prototype.on = function (type, listener) {
            if (Array.isArray(type)) {
                var len = type.length;
                var keys = new Array(len);
                for (var i = 0; i < len; ++i) {
                    keys[i] = listen$1(this, type[i], listener);
                }
                return keys;
            }
            else {
                return listen$1(this, /** @type {string} */ (type), listener);
            }
        };
        /**
         * Listen once for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
         *     called with an array of event types as the first argument, the return
         *     will be an array of keys.
         * @api
         */
        Observable.prototype.once = function (type, listener) {
            var key;
            if (Array.isArray(type)) {
                var len = type.length;
                key = new Array(len);
                for (var i = 0; i < len; ++i) {
                    key[i] = listenOnce(this, type[i], listener);
                }
            }
            else {
                key = listenOnce(this, /** @type {string} */ (type), listener);
            }
            /** @type {Object} */ (listener).ol_key = key;
            return key;
        };
        /**
         * Unlisten for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @api
         */
        Observable.prototype.un = function (type, listener) {
            var key = /** @type {Object} */ (listener).ol_key;
            if (key) {
                unByKey(key);
            }
            else if (Array.isArray(type)) {
                for (var i = 0, ii = type.length; i < ii; ++i) {
                    this.removeEventListener(type[i], listener);
                }
            }
            else {
                this.removeEventListener(type, listener);
            }
        };
        return Observable;
    }(Target));
    /**
     * Removes an event listener using the key returned by `on()` or `once()`.
     * @param {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} key The key returned by `on()`
     *     or `once()` (or an array of keys).
     * @api
     */
    function unByKey(key) {
        if (Array.isArray(key)) {
            for (var i = 0, ii = key.length; i < ii; ++i) {
                unlistenByKey(key[i]);
            }
        }
        else {
            unlistenByKey(/** @type {import("./events.js").EventsKey} */ (key));
        }
    }

    var __extends$3 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
     */
    var ObjectEvent = /** @class */ (function (_super) {
        __extends$3(ObjectEvent, _super);
        /**
         * @param {string} type The event type.
         * @param {string} key The property name.
         * @param {*} oldValue The old value for `key`.
         */
        function ObjectEvent(type, key, oldValue) {
            var _this = _super.call(this, type) || this;
            /**
             * The name of the property whose value is changing.
             * @type {string}
             * @api
             */
            _this.key = key;
            /**
             * The old value. To get the new value use `e.target.get(e.key)` where
             * `e` is the event object.
             * @type {*}
             * @api
             */
            _this.oldValue = oldValue;
            return _this;
        }
        return ObjectEvent;
    }(BaseEvent));
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Most non-trivial classes inherit from this.
     *
     * This extends {@link module:ol/Observable} with observable
     * properties, where each property is observable as well as the object as a
     * whole.
     *
     * Classes that inherit from this have pre-defined properties, to which you can
     * add your owns. The pre-defined properties are listed in this documentation as
     * 'Observable Properties', and have their own accessors; for example,
     * {@link module:ol/Map~Map} has a `target` property, accessed with
     * `getTarget()` and changed with `setTarget()`. Not all properties are however
     * settable. There are also general-purpose accessors `get()` and `set()`. For
     * example, `get('target')` is equivalent to `getTarget()`.
     *
     * The `set` accessors trigger a change event, and you can monitor this by
     * registering a listener. For example, {@link module:ol/View~View} has a
     * `center` property, so `view.on('change:center', function(evt) {...});` would
     * call the function whenever the value of the center property changes. Within
     * the function, `evt.target` would be the view, so `evt.target.getCenter()`
     * would return the new center.
     *
     * You can add your own observable properties with
     * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
     * You can listen for changes on that property value with
     * `object.on('change:prop', listener)`. You can get a list of all
     * properties with {@link module:ol/Object~BaseObject#getProperties}.
     *
     * Note that the observable properties are separate from standard JS properties.
     * You can, for example, give your map object a title with
     * `map.title='New title'` and with `map.set('title', 'Another title')`. The
     * first will be a `hasOwnProperty`; the second will appear in
     * `getProperties()`. Only the second is observable.
     *
     * Properties can be deleted by using the unset method. E.g.
     * object.unset('foo').
     *
     * @fires ObjectEvent
     * @api
     */
    var BaseObject = /** @class */ (function (_super) {
        __extends$3(BaseObject, _super);
        /**
         * @param {Object<string, *>=} opt_values An object with key-value pairs.
         */
        function BaseObject(opt_values) {
            var _this = _super.call(this) || this;
            // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is
            // the same as the order in which they were created.  This also helps to
            // ensure that object properties are always added in the same order, which
            // helps many JavaScript engines generate faster code.
            getUid(_this);
            /**
             * @private
             * @type {Object<string, *>}
             */
            _this.values_ = null;
            if (opt_values !== undefined) {
                _this.setProperties(opt_values);
            }
            return _this;
        }
        /**
         * Gets a value.
         * @param {string} key Key name.
         * @return {*} Value.
         * @api
         */
        BaseObject.prototype.get = function (key) {
            var value;
            if (this.values_ && this.values_.hasOwnProperty(key)) {
                value = this.values_[key];
            }
            return value;
        };
        /**
         * Get a list of object property names.
         * @return {Array<string>} List of property names.
         * @api
         */
        BaseObject.prototype.getKeys = function () {
            return (this.values_ && Object.keys(this.values_)) || [];
        };
        /**
         * Get an object of all property names and values.
         * @return {Object<string, *>} Object.
         * @api
         */
        BaseObject.prototype.getProperties = function () {
            return (this.values_ && assign$1({}, this.values_)) || {};
        };
        /**
         * @return {boolean} The object has properties.
         */
        BaseObject.prototype.hasProperties = function () {
            return !!this.values_;
        };
        /**
         * @param {string} key Key name.
         * @param {*} oldValue Old value.
         */
        BaseObject.prototype.notify = function (key, oldValue) {
            var eventType;
            eventType = getChangeEventType(key);
            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
            eventType = ObjectEventType.PROPERTYCHANGE;
            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
        };
        /**
         * Sets a value.
         * @param {string} key Key name.
         * @param {*} value Value.
         * @param {boolean=} opt_silent Update without triggering an event.
         * @api
         */
        BaseObject.prototype.set = function (key, value, opt_silent) {
            var values = this.values_ || (this.values_ = {});
            if (opt_silent) {
                values[key] = value;
            }
            else {
                var oldValue = values[key];
                values[key] = value;
                if (oldValue !== value) {
                    this.notify(key, oldValue);
                }
            }
        };
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param {Object<string, *>} values Values.
         * @param {boolean=} opt_silent Update without triggering an event.
         * @api
         */
        BaseObject.prototype.setProperties = function (values, opt_silent) {
            for (var key in values) {
                this.set(key, values[key], opt_silent);
            }
        };
        /**
         * Apply any properties from another object without triggering events.
         * @param {BaseObject} source The source object.
         * @protected
         */
        BaseObject.prototype.applyProperties = function (source) {
            if (!source.values_) {
                return;
            }
            assign$1(this.values_ || (this.values_ = {}), source.values_);
        };
        /**
         * Unsets a property.
         * @param {string} key Key name.
         * @param {boolean=} opt_silent Unset without triggering an event.
         * @api
         */
        BaseObject.prototype.unset = function (key, opt_silent) {
            if (this.values_ && key in this.values_) {
                var oldValue = this.values_[key];
                delete this.values_[key];
                if (isEmpty(this.values_)) {
                    this.values_ = null;
                }
                if (!opt_silent) {
                    this.notify(key, oldValue);
                }
            }
        };
        return BaseObject;
    }(Observable));
    /**
     * @type {Object<string, string>}
     */
    var changeEventTypeCache = {};
    /**
     * @param {string} key Key name.
     * @return {string} Change name.
     */
    function getChangeEventType(key) {
        return changeEventTypeCache.hasOwnProperty(key)
            ? changeEventTypeCache[key]
            : (changeEventTypeCache[key] = 'change:' + key);
    }

    /**
     * @module ol/CollectionEventType
     */
    /**
     * @enum {string}
     */
    var CollectionEventType = {
        /**
         * Triggered when an item is added to the collection.
         * @event module:ol/Collection.CollectionEvent#add
         * @api
         */
        ADD: 'add',
        /**
         * Triggered when an item is removed from the collection.
         * @event module:ol/Collection.CollectionEvent#remove
         * @api
         */
        REMOVE: 'remove',
    };

    var __extends$4 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @enum {string}
     * @private
     */
    var Property = {
        LENGTH: 'length',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
     * type.
     */
    var CollectionEvent = /** @class */ (function (_super) {
        __extends$4(CollectionEvent, _super);
        /**
         * @param {import("./CollectionEventType.js").default} type Type.
         * @param {*=} opt_element Element.
         * @param {number=} opt_index The index of the added or removed element.
         */
        function CollectionEvent(type, opt_element, opt_index) {
            var _this = _super.call(this, type) || this;
            /**
             * The element that is added to or removed from the collection.
             * @type {*}
             * @api
             */
            _this.element = opt_element;
            /**
             * The index of the added or removed element.
             * @type {number}
             * @api
             */
            _this.index = opt_index;
            return _this;
        }
        return CollectionEvent;
    }(BaseEvent));
    /**
     * @typedef {Object} Options
     * @property {boolean} [unique=false] Disallow the same item from being added to
     * the collection twice.
     */
    /**
     * @classdesc
     * An expanded version of standard JS Array, adding convenience methods for
     * manipulation. Add and remove changes to the Collection trigger a Collection
     * event. Note that this does not cover changes to the objects _within_ the
     * Collection; they trigger events on the appropriate object, not on the
     * Collection as a whole.
     *
     * @fires CollectionEvent
     *
     * @template T
     * @api
     */
    var Collection = /** @class */ (function (_super) {
        __extends$4(Collection, _super);
        /**
         * @param {Array<T>=} opt_array Array.
         * @param {Options=} opt_options Collection options.
         */
        function Collection(opt_array, opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options || {};
            /**
             * @private
             * @type {boolean}
             */
            _this.unique_ = !!options.unique;
            /**
             * @private
             * @type {!Array<T>}
             */
            _this.array_ = opt_array ? opt_array : [];
            if (_this.unique_) {
                for (var i = 0, ii = _this.array_.length; i < ii; ++i) {
                    _this.assertUnique_(_this.array_[i], i);
                }
            }
            _this.updateLength_();
            return _this;
        }
        /**
         * Remove all elements from the collection.
         * @api
         */
        Collection.prototype.clear = function () {
            while (this.getLength() > 0) {
                this.pop();
            }
        };
        /**
         * Add elements to the collection.  This pushes each item in the provided array
         * to the end of the collection.
         * @param {!Array<T>} arr Array.
         * @return {Collection<T>} This collection.
         * @api
         */
        Collection.prototype.extend = function (arr) {
            for (var i = 0, ii = arr.length; i < ii; ++i) {
                this.push(arr[i]);
            }
            return this;
        };
        /**
         * Iterate over each element, calling the provided callback.
         * @param {function(T, number, Array<T>): *} f The function to call
         *     for every element. This function takes 3 arguments (the element, the
         *     index and the array). The return value is ignored.
         * @api
         */
        Collection.prototype.forEach = function (f) {
            var array = this.array_;
            for (var i = 0, ii = array.length; i < ii; ++i) {
                f(array[i], i, array);
            }
        };
        /**
         * Get a reference to the underlying Array object. Warning: if the array
         * is mutated, no events will be dispatched by the collection, and the
         * collection's "length" property won't be in sync with the actual length
         * of the array.
         * @return {!Array<T>} Array.
         * @api
         */
        Collection.prototype.getArray = function () {
            return this.array_;
        };
        /**
         * Get the element at the provided index.
         * @param {number} index Index.
         * @return {T} Element.
         * @api
         */
        Collection.prototype.item = function (index) {
            return this.array_[index];
        };
        /**
         * Get the length of this collection.
         * @return {number} The length of the array.
         * @observable
         * @api
         */
        Collection.prototype.getLength = function () {
            return this.get(Property.LENGTH);
        };
        /**
         * Insert an element at the provided index.
         * @param {number} index Index.
         * @param {T} elem Element.
         * @api
         */
        Collection.prototype.insertAt = function (index, elem) {
            if (this.unique_) {
                this.assertUnique_(elem);
            }
            this.array_.splice(index, 0, elem);
            this.updateLength_();
            this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));
        };
        /**
         * Remove the last element of the collection and return it.
         * Return `undefined` if the collection is empty.
         * @return {T|undefined} Element.
         * @api
         */
        Collection.prototype.pop = function () {
            return this.removeAt(this.getLength() - 1);
        };
        /**
         * Insert the provided element at the end of the collection.
         * @param {T} elem Element.
         * @return {number} New length of the collection.
         * @api
         */
        Collection.prototype.push = function (elem) {
            if (this.unique_) {
                this.assertUnique_(elem);
            }
            var n = this.getLength();
            this.insertAt(n, elem);
            return this.getLength();
        };
        /**
         * Remove the first occurrence of an element from the collection.
         * @param {T} elem Element.
         * @return {T|undefined} The removed element or undefined if none found.
         * @api
         */
        Collection.prototype.remove = function (elem) {
            var arr = this.array_;
            for (var i = 0, ii = arr.length; i < ii; ++i) {
                if (arr[i] === elem) {
                    return this.removeAt(i);
                }
            }
            return undefined;
        };
        /**
         * Remove the element at the provided index and return it.
         * Return `undefined` if the collection does not contain this index.
         * @param {number} index Index.
         * @return {T|undefined} Value.
         * @api
         */
        Collection.prototype.removeAt = function (index) {
            var prev = this.array_[index];
            this.array_.splice(index, 1);
            this.updateLength_();
            this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
            return prev;
        };
        /**
         * Set the element at the provided index.
         * @param {number} index Index.
         * @param {T} elem Element.
         * @api
         */
        Collection.prototype.setAt = function (index, elem) {
            var n = this.getLength();
            if (index < n) {
                if (this.unique_) {
                    this.assertUnique_(elem, index);
                }
                var prev = this.array_[index];
                this.array_[index] = elem;
                this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
                this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));
            }
            else {
                for (var j = n; j < index; ++j) {
                    this.insertAt(j, undefined);
                }
                this.insertAt(index, elem);
            }
        };
        /**
         * @private
         */
        Collection.prototype.updateLength_ = function () {
            this.set(Property.LENGTH, this.array_.length);
        };
        /**
         * @private
         * @param {T} elem Element.
         * @param {number=} opt_except Optional index to ignore.
         */
        Collection.prototype.assertUnique_ = function (elem, opt_except) {
            for (var i = 0, ii = this.array_.length; i < ii; ++i) {
                if (this.array_[i] === elem && i !== opt_except) {
                    throw new AssertionError(58);
                }
            }
        };
        return Collection;
    }(BaseObject));

    /**
     * @module ol/asserts
     */
    /**
     * @param {*} assertion Assertion we expected to be truthy.
     * @param {number} errorCode Error code.
     */
    function assert(assertion, errorCode) {
        if (!assertion) {
            throw new AssertionError(errorCode);
        }
    }

    var __extends$5 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
     */
    /**
     * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
     */
    /**
     * @classdesc
     * A vector object for geographic features with a geometry and other
     * attribute properties, similar to the features in vector file formats like
     * GeoJSON.
     *
     * Features can be styled individually with `setStyle`; otherwise they use the
     * style of their vector layer.
     *
     * Note that attribute properties are set as {@link module:ol/Object} properties on
     * the feature object, so they are observable, and have get/set accessors.
     *
     * Typically, a feature has a single geometry property. You can set the
     * geometry using the `setGeometry` method and get it with `getGeometry`.
     * It is possible to store more than one geometry on a feature using attribute
     * properties. By default, the geometry used for rendering is identified by
     * the property name `geometry`. If you want to use another geometry property
     * for rendering, use the `setGeometryName` method to change the attribute
     * property associated with the geometry for the feature.  For example:
     *
     * ```js
     *
     * import Feature from 'ol/Feature';
     * import Polygon from 'ol/geom/Polygon';
     * import Point from 'ol/geom/Point';
     *
     * var feature = new Feature({
     *   geometry: new Polygon(polyCoords),
     *   labelPoint: new Point(labelCoords),
     *   name: 'My Polygon'
     * });
     *
     * // get the polygon geometry
     * var poly = feature.getGeometry();
     *
     * // Render the feature as a point using the coordinates from labelPoint
     * feature.setGeometryName('labelPoint');
     *
     * // get the point geometry
     * var point = feature.getGeometry();
     * ```
     *
     * @api
     * @template {import("./geom/Geometry.js").default} Geometry
     */
    var Feature = /** @class */ (function (_super) {
        __extends$5(Feature, _super);
        /**
         * @param {Geometry|Object<string, *>=} opt_geometryOrProperties
         *     You may pass a Geometry object directly, or an object literal containing
         *     properties. If you pass an object literal, you may include a Geometry
         *     associated with a `geometry` key.
         */
        function Feature(opt_geometryOrProperties) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {number|string|undefined}
             */
            _this.id_ = undefined;
            /**
             * @type {string}
             * @private
             */
            _this.geometryName_ = 'geometry';
            /**
             * User provided style.
             * @private
             * @type {import("./style/Style.js").StyleLike}
             */
            _this.style_ = null;
            /**
             * @private
             * @type {import("./style/Style.js").StyleFunction|undefined}
             */
            _this.styleFunction_ = undefined;
            /**
             * @private
             * @type {?import("./events.js").EventsKey}
             */
            _this.geometryChangeKey_ = null;
            _this.addEventListener(getChangeEventType(_this.geometryName_), _this.handleGeometryChanged_);
            if (opt_geometryOrProperties) {
                if (typeof (
                /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry) === 'function') {
                    var geometry = /** @type {Geometry} */ (opt_geometryOrProperties);
                    _this.setGeometry(geometry);
                }
                else {
                    /** @type {Object<string, *>} */
                    var properties = opt_geometryOrProperties;
                    _this.setProperties(properties);
                }
            }
            return _this;
        }
        /**
         * Clone this feature. If the original feature has a geometry it
         * is also cloned. The feature id is not set in the clone.
         * @return {Feature} The clone.
         * @api
         */
        Feature.prototype.clone = function () {
            var clone = new Feature(this.hasProperties() ? this.getProperties() : null);
            clone.setGeometryName(this.getGeometryName());
            var geometry = this.getGeometry();
            if (geometry) {
                clone.setGeometry(geometry.clone());
            }
            var style = this.getStyle();
            if (style) {
                clone.setStyle(style);
            }
            return clone;
        };
        /**
         * Get the feature's default geometry.  A feature may have any number of named
         * geometries.  The "default" geometry (the one that is rendered by default) is
         * set when calling {@link module:ol/Feature~Feature#setGeometry}.
         * @return {Geometry|undefined} The default geometry for the feature.
         * @api
         * @observable
         */
        Feature.prototype.getGeometry = function () {
            return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));
        };
        /**
         * Get the feature identifier.  This is a stable identifier for the feature and
         * is either set when reading data from a remote source or set explicitly by
         * calling {@link module:ol/Feature~Feature#setId}.
         * @return {number|string|undefined} Id.
         * @api
         */
        Feature.prototype.getId = function () {
            return this.id_;
        };
        /**
         * Get the name of the feature's default geometry.  By default, the default
         * geometry is named `geometry`.
         * @return {string} Get the property name associated with the default geometry
         *     for this feature.
         * @api
         */
        Feature.prototype.getGeometryName = function () {
            return this.geometryName_;
        };
        /**
         * Get the feature's style. Will return what was provided to the
         * {@link module:ol/Feature~Feature#setStyle} method.
         * @return {import("./style/Style.js").StyleLike|undefined} The feature style.
         * @api
         */
        Feature.prototype.getStyle = function () {
            return this.style_;
        };
        /**
         * Get the feature's style function.
         * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
         * representing the current style of this feature.
         * @api
         */
        Feature.prototype.getStyleFunction = function () {
            return this.styleFunction_;
        };
        /**
         * @private
         */
        Feature.prototype.handleGeometryChange_ = function () {
            this.changed();
        };
        /**
         * @private
         */
        Feature.prototype.handleGeometryChanged_ = function () {
            if (this.geometryChangeKey_) {
                unlistenByKey(this.geometryChangeKey_);
                this.geometryChangeKey_ = null;
            }
            var geometry = this.getGeometry();
            if (geometry) {
                this.geometryChangeKey_ = listen$1(geometry, EventType.CHANGE, this.handleGeometryChange_, this);
            }
            this.changed();
        };
        /**
         * Set the default geometry for the feature.  This will update the property
         * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
         * @param {Geometry|undefined} geometry The new geometry.
         * @api
         * @observable
         */
        Feature.prototype.setGeometry = function (geometry) {
            this.set(this.geometryName_, geometry);
        };
        /**
         * Set the style for the feature to override the layer style.  This can be a
         * single style object, an array of styles, or a function that takes a
         * resolution and returns an array of styles. To unset the feature style, call
         * `setStyle()` without arguments or a falsey value.
         * @param {import("./style/Style.js").StyleLike=} opt_style Style for this feature.
         * @api
         * @fires module:ol/events/Event~BaseEvent#event:change
         */
        Feature.prototype.setStyle = function (opt_style) {
            this.style_ = opt_style;
            this.styleFunction_ = !opt_style
                ? undefined
                : createStyleFunction(opt_style);
            this.changed();
        };
        /**
         * Set the feature id.  The feature id is considered stable and may be used when
         * requesting features or comparing identifiers returned from a remote source.
         * The feature id can be used with the
         * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
         * @param {number|string|undefined} id The feature id.
         * @api
         * @fires module:ol/events/Event~BaseEvent#event:change
         */
        Feature.prototype.setId = function (id) {
            this.id_ = id;
            this.changed();
        };
        /**
         * Set the property name to be used when getting the feature's default geometry.
         * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
         * this name will be returned.
         * @param {string} name The property name of the default geometry.
         * @api
         */
        Feature.prototype.setGeometryName = function (name) {
            this.removeEventListener(getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
            this.geometryName_ = name;
            this.addEventListener(getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
            this.handleGeometryChanged_();
        };
        return Feature;
    }(BaseObject));
    /**
     * Convert the provided object into a feature style function.  Functions passed
     * through unchanged.  Arrays of Style or single style objects wrapped
     * in a new feature style function.
     * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
     *     A feature style function, a single style, or an array of styles.
     * @return {import("./style/Style.js").StyleFunction} A style function.
     */
    function createStyleFunction(obj) {
        if (typeof obj === 'function') {
            return obj;
        }
        else {
            /**
             * @type {Array<import("./style/Style.js").default>}
             */
            var styles_1;
            if (Array.isArray(obj)) {
                styles_1 = obj;
            }
            else {
                assert(typeof ( /** @type {?} */(obj).getZIndex) === 'function', 41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
                var style = /** @type {import("./style/Style.js").default} */ (obj);
                styles_1 = [style];
            }
            return function () {
                return styles_1;
            };
        }
    }

    /**
     * @module ol/geom/GeometryLayout
     */
    /**
     * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
     * or measure ('M') coordinate is available. Supported values are `'XY'`,
     * `'XYZ'`, `'XYM'`, `'XYZM'`.
     * @enum {string}
     */
    var GeometryLayout = {
        XY: 'XY',
        XYZ: 'XYZ',
        XYM: 'XYM',
        XYZM: 'XYZM',
    };

    /**
     * @module ol/geom/GeometryType
     */
    /**
     * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
     * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
     * `'GeometryCollection'`, `'Circle'`.
     * @enum {string}
     */
    var GeometryType = {
        POINT: 'Point',
        LINE_STRING: 'LineString',
        LINEAR_RING: 'LinearRing',
        POLYGON: 'Polygon',
        MULTI_POINT: 'MultiPoint',
        MULTI_LINE_STRING: 'MultiLineString',
        MULTI_POLYGON: 'MultiPolygon',
        GEOMETRY_COLLECTION: 'GeometryCollection',
        CIRCLE: 'Circle',
    };

    /**
     * @module ol/proj/Units
     */
    /**
     * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
     * `'us-ft'`.
     * @enum {string}
     */
    var Units = {
        /**
         * Degrees
         * @api
         */
        DEGREES: 'degrees',
        /**
         * Feet
         * @api
         */
        FEET: 'ft',
        /**
         * Meters
         * @api
         */
        METERS: 'm',
        /**
         * Pixels
         * @api
         */
        PIXELS: 'pixels',
        /**
         * Tile Pixels
         * @api
         */
        TILE_PIXELS: 'tile-pixels',
        /**
         * US Feet
         * @api
         */
        USFEET: 'us-ft',
    };
    /**
     * Meters per unit lookup table.
     * @const
     * @type {Object<Units, number>}
     * @api
     */
    var METERS_PER_UNIT = {};
    // use the radius of the Normal sphere
    METERS_PER_UNIT[Units.DEGREES] = (2 * Math.PI * 6370997) / 360;
    METERS_PER_UNIT[Units.FEET] = 0.3048;
    METERS_PER_UNIT[Units.METERS] = 1;
    METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;

    /**
     * @module ol/transform
     */
    /**
     * An array representing an affine 2d transformation for use with
     * {@link module:ol/transform} functions. The array has 6 elements.
     * @typedef {!Array<number>} Transform
     * @api
     */
    /**
     * Collection of affine 2d transformation functions. The functions work on an
     * array of 6 elements. The element order is compatible with the [SVGMatrix
     * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
     * a subset (elements a to f) of a 3×3 matrix:
     * ```
     * [ a c e ]
     * [ b d f ]
     * [ 0 0 1 ]
     * ```
     */
    /**
     * @private
     * @type {Transform}
     */
    new Array(6);
    /**
     * Create an identity transform.
     * @return {!Transform} Identity transform.
     */
    function create() {
        return [1, 0, 0, 1, 0, 0];
    }
    /**
     * Set the transform components a-f on a given transform.
     * @param {!Transform} transform Transform.
     * @param {number} a The a component of the transform.
     * @param {number} b The b component of the transform.
     * @param {number} c The c component of the transform.
     * @param {number} d The d component of the transform.
     * @param {number} e The e component of the transform.
     * @param {number} f The f component of the transform.
     * @return {!Transform} Matrix with transform applied.
     */
    function set(transform, a, b, c, d, e, f) {
        transform[0] = a;
        transform[1] = b;
        transform[2] = c;
        transform[3] = d;
        transform[4] = e;
        transform[5] = f;
        return transform;
    }
    /**
     * Set transform on one matrix from another matrix.
     * @param {!Transform} transform1 Matrix to set transform to.
     * @param {!Transform} transform2 Matrix to set transform from.
     * @return {!Transform} transform1 with transform from transform2 applied.
     */
    function setFromArray(transform1, transform2) {
        transform1[0] = transform2[0];
        transform1[1] = transform2[1];
        transform1[2] = transform2[2];
        transform1[3] = transform2[3];
        transform1[4] = transform2[4];
        transform1[5] = transform2[5];
        return transform1;
    }
    /**
     * Transforms the given coordinate with the given transform returning the
     * resulting, transformed coordinate. The coordinate will be modified in-place.
     *
     * @param {Transform} transform The transformation.
     * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
     * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
     *     chained together.
     */
    function apply(transform, coordinate) {
        var x = coordinate[0];
        var y = coordinate[1];
        coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
        coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
        return coordinate;
    }
    /**
     * Creates a scale transform.
     * @param {!Transform} target Transform to overwrite.
     * @param {number} x Scale factor x.
     * @param {number} y Scale factor y.
     * @return {!Transform} The scale transform.
     */
    function makeScale(target, x, y) {
        return set(target, x, 0, 0, y, 0, 0);
    }
    /**
     * Creates a composite transform given an initial translation, scale, rotation, and
     * final translation (in that order only, not commutative).
     * @param {!Transform} transform The transform (will be modified in place).
     * @param {number} dx1 Initial translation x.
     * @param {number} dy1 Initial translation y.
     * @param {number} sx Scale factor x.
     * @param {number} sy Scale factor y.
     * @param {number} angle Rotation (in counter-clockwise radians).
     * @param {number} dx2 Final translation x.
     * @param {number} dy2 Final translation y.
     * @return {!Transform} The composite transform.
     */
    function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
        var sin = Math.sin(angle);
        var cos = Math.cos(angle);
        transform[0] = sx * cos;
        transform[1] = sy * sin;
        transform[2] = -sx * sin;
        transform[3] = sy * cos;
        transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
        transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
        return transform;
    }
    /**
     * Invert the given transform.
     * @param {!Transform} target Transform to be set as the inverse of
     *     the source transform.
     * @param {!Transform} source The source transform to invert.
     * @return {!Transform} The inverted (target) transform.
     */
    function makeInverse(target, source) {
        var det = determinant(source);
        assert(det !== 0, 32); // Transformation matrix cannot be inverted
        var a = source[0];
        var b = source[1];
        var c = source[2];
        var d = source[3];
        var e = source[4];
        var f = source[5];
        target[0] = d / det;
        target[1] = -b / det;
        target[2] = -c / det;
        target[3] = a / det;
        target[4] = (c * f - d * e) / det;
        target[5] = -(a * f - b * e) / det;
        return target;
    }
    /**
     * Returns the determinant of the given matrix.
     * @param {!Transform} mat Matrix.
     * @return {number} Determinant.
     */
    function determinant(mat) {
        return mat[0] * mat[3] - mat[1] * mat[2];
    }
    /**
     * A string version of the transform.  This can be used
     * for CSS transforms.
     * @param {!Transform} mat Matrix.
     * @return {string} The transform as a string.
     */
    function toString(mat) {
        return 'matrix(' + mat.join(', ') + ')';
    }

    /**
     * @module ol/extent/Corner
     */
    /**
     * Extent corner.
     * @enum {string}
     */
    var Corner = {
        BOTTOM_LEFT: 'bottom-left',
        BOTTOM_RIGHT: 'bottom-right',
        TOP_LEFT: 'top-left',
        TOP_RIGHT: 'top-right',
    };

    /**
     * @module ol/extent/Relationship
     */
    /**
     * Relationship to an extent.
     * @enum {number}
     */
    var Relationship = {
        UNKNOWN: 0,
        INTERSECTING: 1,
        ABOVE: 2,
        RIGHT: 4,
        BELOW: 8,
        LEFT: 16,
    };

    /**
     * @module ol/extent
     */
    /**
     * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
     * @typedef {Array<number>} Extent
     * @api
     */
    /**
     * Build an extent that includes all given coordinates.
     *
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @return {Extent} Bounding extent.
     * @api
     */
    function boundingExtent(coordinates) {
        var extent = createEmpty();
        for (var i = 0, ii = coordinates.length; i < ii; ++i) {
            extendCoordinate(extent, coordinates[i]);
        }
        return extent;
    }
    /**
     * Return extent increased by the provided value.
     * @param {Extent} extent Extent.
     * @param {number} value The amount by which the extent should be buffered.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     * @api
     */
    function buffer(extent, value, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = extent[0] - value;
            opt_extent[1] = extent[1] - value;
            opt_extent[2] = extent[2] + value;
            opt_extent[3] = extent[3] + value;
            return opt_extent;
        }
        else {
            return [
                extent[0] - value,
                extent[1] - value,
                extent[2] + value,
                extent[3] + value,
            ];
        }
    }
    /**
     * Creates a clone of an extent.
     *
     * @param {Extent} extent Extent to clone.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} The clone.
     */
    function clone(extent, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = extent[0];
            opt_extent[1] = extent[1];
            opt_extent[2] = extent[2];
            opt_extent[3] = extent[3];
            return opt_extent;
        }
        else {
            return extent.slice();
        }
    }
    /**
     * @param {Extent} extent Extent.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {number} Closest squared distance.
     */
    function closestSquaredDistanceXY(extent, x, y) {
        var dx, dy;
        if (x < extent[0]) {
            dx = extent[0] - x;
        }
        else if (extent[2] < x) {
            dx = x - extent[2];
        }
        else {
            dx = 0;
        }
        if (y < extent[1]) {
            dy = extent[1] - y;
        }
        else if (extent[3] < y) {
            dy = y - extent[3];
        }
        else {
            dy = 0;
        }
        return dx * dx + dy * dy;
    }
    /**
     * Check if the passed coordinate is contained or on the edge of the extent.
     *
     * @param {Extent} extent Extent.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} The coordinate is contained in the extent.
     * @api
     */
    function containsCoordinate(extent, coordinate) {
        return containsXY(extent, coordinate[0], coordinate[1]);
    }
    /**
     * Check if one extent contains another.
     *
     * An extent is deemed contained if it lies completely within the other extent,
     * including if they share one or more edges.
     *
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @return {boolean} The second extent is contained by or on the edge of the
     *     first.
     * @api
     */
    function containsExtent(extent1, extent2) {
        return (extent1[0] <= extent2[0] &&
            extent2[2] <= extent1[2] &&
            extent1[1] <= extent2[1] &&
            extent2[3] <= extent1[3]);
    }
    /**
     * Check if the passed coordinate is contained or on the edge of the extent.
     *
     * @param {Extent} extent Extent.
     * @param {number} x X coordinate.
     * @param {number} y Y coordinate.
     * @return {boolean} The x, y values are contained in the extent.
     * @api
     */
    function containsXY(extent, x, y) {
        return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
    }
    /**
     * Get the relationship between a coordinate and extent.
     * @param {Extent} extent The extent.
     * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
     * @return {import("./extent/Relationship.js").default} The relationship (bitwise compare with
     *     import("./extent/Relationship.js").Relationship).
     */
    function coordinateRelationship(extent, coordinate) {
        var minX = extent[0];
        var minY = extent[1];
        var maxX = extent[2];
        var maxY = extent[3];
        var x = coordinate[0];
        var y = coordinate[1];
        var relationship = Relationship.UNKNOWN;
        if (x < minX) {
            relationship = relationship | Relationship.LEFT;
        }
        else if (x > maxX) {
            relationship = relationship | Relationship.RIGHT;
        }
        if (y < minY) {
            relationship = relationship | Relationship.BELOW;
        }
        else if (y > maxY) {
            relationship = relationship | Relationship.ABOVE;
        }
        if (relationship === Relationship.UNKNOWN) {
            relationship = Relationship.INTERSECTING;
        }
        return relationship;
    }
    /**
     * Create an empty extent.
     * @return {Extent} Empty extent.
     * @api
     */
    function createEmpty() {
        return [Infinity, Infinity, -Infinity, -Infinity];
    }
    /**
     * Create a new extent or update the provided extent.
     * @param {number} minX Minimum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxX Maximum X.
     * @param {number} maxY Maximum Y.
     * @param {Extent=} opt_extent Destination extent.
     * @return {Extent} Extent.
     */
    function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = minX;
            opt_extent[1] = minY;
            opt_extent[2] = maxX;
            opt_extent[3] = maxY;
            return opt_extent;
        }
        else {
            return [minX, minY, maxX, maxY];
        }
    }
    /**
     * Create a new empty extent or make the provided one empty.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateEmpty(opt_extent) {
        return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);
    }
    /**
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromCoordinate(coordinate, opt_extent) {
        var x = coordinate[0];
        var y = coordinate[1];
        return createOrUpdate(x, y, x, y, opt_extent);
    }
    /**
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromCoordinates(coordinates, opt_extent) {
        var extent = createOrUpdateEmpty(opt_extent);
        return extendCoordinates(extent, coordinates);
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
        var extent = createOrUpdateEmpty(opt_extent);
        return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
    }
    /**
     * Determine if two extents are equivalent.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @return {boolean} The two extents are equivalent.
     * @api
     */
    function equals$1(extent1, extent2) {
        return (extent1[0] == extent2[0] &&
            extent1[2] == extent2[2] &&
            extent1[1] == extent2[1] &&
            extent1[3] == extent2[3]);
    }
    /**
     * Modify an extent to include another extent.
     * @param {Extent} extent1 The extent to be modified.
     * @param {Extent} extent2 The extent that will be included in the first.
     * @return {Extent} A reference to the first (extended) extent.
     * @api
     */
    function extend$1(extent1, extent2) {
        if (extent2[0] < extent1[0]) {
            extent1[0] = extent2[0];
        }
        if (extent2[2] > extent1[2]) {
            extent1[2] = extent2[2];
        }
        if (extent2[1] < extent1[1]) {
            extent1[1] = extent2[1];
        }
        if (extent2[3] > extent1[3]) {
            extent1[3] = extent2[3];
        }
        return extent1;
    }
    /**
     * @param {Extent} extent Extent.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     */
    function extendCoordinate(extent, coordinate) {
        if (coordinate[0] < extent[0]) {
            extent[0] = coordinate[0];
        }
        if (coordinate[0] > extent[2]) {
            extent[2] = coordinate[0];
        }
        if (coordinate[1] < extent[1]) {
            extent[1] = coordinate[1];
        }
        if (coordinate[1] > extent[3]) {
            extent[3] = coordinate[1];
        }
    }
    /**
     * @param {Extent} extent Extent.
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @return {Extent} Extent.
     */
    function extendCoordinates(extent, coordinates) {
        for (var i = 0, ii = coordinates.length; i < ii; ++i) {
            extendCoordinate(extent, coordinates[i]);
        }
        return extent;
    }
    /**
     * @param {Extent} extent Extent.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {Extent} Extent.
     */
    function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
        for (; offset < end; offset += stride) {
            extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
        }
        return extent;
    }
    /**
     * @param {Extent} extent Extent.
     * @param {number} x X.
     * @param {number} y Y.
     */
    function extendXY(extent, x, y) {
        extent[0] = Math.min(extent[0], x);
        extent[1] = Math.min(extent[1], y);
        extent[2] = Math.max(extent[2], x);
        extent[3] = Math.max(extent[3], y);
    }
    /**
     * This function calls `callback` for each corner of the extent. If the
     * callback returns a truthy value the function returns that value
     * immediately. Otherwise the function returns `false`.
     * @param {Extent} extent Extent.
     * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
     * @return {S|boolean} Value.
     * @template S
     */
    function forEachCorner(extent, callback) {
        var val;
        val = callback(getBottomLeft(extent));
        if (val) {
            return val;
        }
        val = callback(getBottomRight(extent));
        if (val) {
            return val;
        }
        val = callback(getTopRight(extent));
        if (val) {
            return val;
        }
        val = callback(getTopLeft(extent));
        if (val) {
            return val;
        }
        return false;
    }
    /**
     * Get the size of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Area.
     * @api
     */
    function getArea(extent) {
        var area = 0;
        if (!isEmpty$1(extent)) {
            area = getWidth(extent) * getHeight(extent);
        }
        return area;
    }
    /**
     * Get the bottom left coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
     * @api
     */
    function getBottomLeft(extent) {
        return [extent[0], extent[1]];
    }
    /**
     * Get the bottom right coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
     * @api
     */
    function getBottomRight(extent) {
        return [extent[2], extent[1]];
    }
    /**
     * Get the center coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Center.
     * @api
     */
    function getCenter(extent) {
        return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
    }
    /**
     * Get a corner coordinate of an extent.
     * @param {Extent} extent Extent.
     * @param {import("./extent/Corner.js").default} corner Corner.
     * @return {import("./coordinate.js").Coordinate} Corner coordinate.
     */
    function getCorner(extent, corner) {
        var coordinate;
        if (corner === Corner.BOTTOM_LEFT) {
            coordinate = getBottomLeft(extent);
        }
        else if (corner === Corner.BOTTOM_RIGHT) {
            coordinate = getBottomRight(extent);
        }
        else if (corner === Corner.TOP_LEFT) {
            coordinate = getTopLeft(extent);
        }
        else if (corner === Corner.TOP_RIGHT) {
            coordinate = getTopRight(extent);
        }
        else {
            assert(false, 13); // Invalid corner
        }
        return coordinate;
    }
    /**
     * @param {import("./coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("./size.js").Size} size Size.
     * @param {Extent=} opt_extent Destination extent.
     * @return {Extent} Extent.
     */
    function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
        var dx = (resolution * size[0]) / 2;
        var dy = (resolution * size[1]) / 2;
        var cosRotation = Math.cos(rotation);
        var sinRotation = Math.sin(rotation);
        var xCos = dx * cosRotation;
        var xSin = dx * sinRotation;
        var yCos = dy * cosRotation;
        var ySin = dy * sinRotation;
        var x = center[0];
        var y = center[1];
        var x0 = x - xCos + ySin;
        var x1 = x - xCos - ySin;
        var x2 = x + xCos - ySin;
        var x3 = x + xCos + ySin;
        var y0 = y - xSin - yCos;
        var y1 = y - xSin + yCos;
        var y2 = y + xSin + yCos;
        var y3 = y + xSin - yCos;
        return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);
    }
    /**
     * Get the height of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Height.
     * @api
     */
    function getHeight(extent) {
        return extent[3] - extent[1];
    }
    /**
     * Get the intersection of two extents.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @param {Extent=} opt_extent Optional extent to populate with intersection.
     * @return {Extent} Intersecting extent.
     * @api
     */
    function getIntersection(extent1, extent2, opt_extent) {
        var intersection = opt_extent ? opt_extent : createEmpty();
        if (intersects(extent1, extent2)) {
            if (extent1[0] > extent2[0]) {
                intersection[0] = extent1[0];
            }
            else {
                intersection[0] = extent2[0];
            }
            if (extent1[1] > extent2[1]) {
                intersection[1] = extent1[1];
            }
            else {
                intersection[1] = extent2[1];
            }
            if (extent1[2] < extent2[2]) {
                intersection[2] = extent1[2];
            }
            else {
                intersection[2] = extent2[2];
            }
            if (extent1[3] < extent2[3]) {
                intersection[3] = extent1[3];
            }
            else {
                intersection[3] = extent2[3];
            }
        }
        else {
            createOrUpdateEmpty(intersection);
        }
        return intersection;
    }
    /**
     * Get the top left coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Top left coordinate.
     * @api
     */
    function getTopLeft(extent) {
        return [extent[0], extent[3]];
    }
    /**
     * Get the top right coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Top right coordinate.
     * @api
     */
    function getTopRight(extent) {
        return [extent[2], extent[3]];
    }
    /**
     * Get the width of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Width.
     * @api
     */
    function getWidth(extent) {
        return extent[2] - extent[0];
    }
    /**
     * Determine if one extent intersects another.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent.
     * @return {boolean} The two extents intersect.
     * @api
     */
    function intersects(extent1, extent2) {
        return (extent1[0] <= extent2[2] &&
            extent1[2] >= extent2[0] &&
            extent1[1] <= extent2[3] &&
            extent1[3] >= extent2[1]);
    }
    /**
     * Determine if an extent is empty.
     * @param {Extent} extent Extent.
     * @return {boolean} Is empty.
     * @api
     */
    function isEmpty$1(extent) {
        return extent[2] < extent[0] || extent[3] < extent[1];
    }
    /**
     * @param {Extent} extent Extent.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function returnOrUpdate(extent, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = extent[0];
            opt_extent[1] = extent[1];
            opt_extent[2] = extent[2];
            opt_extent[3] = extent[3];
            return opt_extent;
        }
        else {
            return extent;
        }
    }
    /**
     * @param {Extent} extent Extent.
     * @param {number} value Value.
     */
    function scaleFromCenter(extent, value) {
        var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
        var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
        extent[0] -= deltaX;
        extent[2] += deltaX;
        extent[1] -= deltaY;
        extent[3] += deltaY;
    }
    /**
     * Determine if the segment between two coordinates intersects (crosses,
     * touches, or is contained by) the provided extent.
     * @param {Extent} extent The extent.
     * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
     * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
     * @return {boolean} The segment intersects the extent.
     */
    function intersectsSegment(extent, start, end) {
        var intersects = false;
        var startRel = coordinateRelationship(extent, start);
        var endRel = coordinateRelationship(extent, end);
        if (startRel === Relationship.INTERSECTING ||
            endRel === Relationship.INTERSECTING) {
            intersects = true;
        }
        else {
            var minX = extent[0];
            var minY = extent[1];
            var maxX = extent[2];
            var maxY = extent[3];
            var startX = start[0];
            var startY = start[1];
            var endX = end[0];
            var endY = end[1];
            var slope = (endY - startY) / (endX - startX);
            var x = void 0, y = void 0;
            if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {
                // potentially intersects top
                x = endX - (endY - maxY) / slope;
                intersects = x >= minX && x <= maxX;
            }
            if (!intersects &&
                !!(endRel & Relationship.RIGHT) &&
                !(startRel & Relationship.RIGHT)) {
                // potentially intersects right
                y = endY - (endX - maxX) * slope;
                intersects = y >= minY && y <= maxY;
            }
            if (!intersects &&
                !!(endRel & Relationship.BELOW) &&
                !(startRel & Relationship.BELOW)) {
                // potentially intersects bottom
                x = endX - (endY - minY) / slope;
                intersects = x >= minX && x <= maxX;
            }
            if (!intersects &&
                !!(endRel & Relationship.LEFT) &&
                !(startRel & Relationship.LEFT)) {
                // potentially intersects left
                y = endY - (endX - minX) * slope;
                intersects = y >= minY && y <= maxY;
            }
        }
        return intersects;
    }
    /**
     * Modifies the provided extent in-place to be within the real world
     * extent.
     *
     * @param {Extent} extent Extent.
     * @param {import("./proj/Projection.js").default} projection Projection
     * @return {Extent} The extent within the real world extent.
     */
    function wrapX(extent, projection) {
        var projectionExtent = projection.getExtent();
        var center = getCenter(extent);
        if (projection.canWrapX() &&
            (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {
            var worldWidth = getWidth(projectionExtent);
            var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);
            var offset = worldsAway * worldWidth;
            extent[0] -= offset;
            extent[2] -= offset;
        }
        return extent;
    }

    /**
     * @module ol/proj/Projection
     */
    /**
     * @typedef {Object} Options
     * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
     * @property {import("./Units.js").default|string} [units] Units. Required unless a
     * proj4 projection is defined for `code`.
     * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
     * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
     * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
     * @property {number} [metersPerUnit] The meters per unit for the SRS.
     * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
     * lookup table.
     * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
     * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
     * Function to determine resolution at a point. The function is called with a
     * `{number}` view resolution and an `{import("../coordinate.js").Coordinate}` as arguments, and returns
     * the `{number}` resolution in projection units at the passed coordinate. If this is `undefined`,
     * the default {@link module:ol/proj#getPointResolution} function will be used.
     */
    /**
     * @classdesc
     * Projection definition class. One of these is created for each projection
     * supported in the application and stored in the {@link module:ol/proj} namespace.
     * You can use these in applications, but this is not required, as API params
     * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
     * code will suffice.
     *
     * You can use {@link module:ol/proj~get} to retrieve the object for a particular
     * projection.
     *
     * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
     * with the following aliases:
     * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
     *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
     *     http://www.opengis.net/gml/srs/epsg.xml#4326,
     *     urn:x-ogc:def:crs:EPSG:4326
     * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
     *     urn:ogc:def:crs:EPSG:6.18:3:3857,
     *     http://www.opengis.net/gml/srs/epsg.xml#3857
     *
     * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
     * be added using `proj4.defs()`. After all required projection definitions are
     * added, call the {@link module:ol/proj/proj4~register} function.
     *
     * @api
     */
    var Projection = /** @class */ (function () {
        /**
         * @param {Options} options Projection options.
         */
        function Projection(options) {
            /**
             * @private
             * @type {string}
             */
            this.code_ = options.code;
            /**
             * Units of projected coordinates. When set to `TILE_PIXELS`, a
             * `this.extent_` and `this.worldExtent_` must be configured properly for each
             * tile.
             * @private
             * @type {import("./Units.js").default}
             */
            this.units_ = /** @type {import("./Units.js").default} */ (options.units);
            /**
             * Validity extent of the projection in projected coordinates. For projections
             * with `TILE_PIXELS` units, this is the extent of the tile in
             * tile pixel space.
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.extent_ = options.extent !== undefined ? options.extent : null;
            /**
             * Extent of the world in EPSG:4326. For projections with
             * `TILE_PIXELS` units, this is the extent of the tile in
             * projected coordinate space.
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.worldExtent_ =
                options.worldExtent !== undefined ? options.worldExtent : null;
            /**
             * @private
             * @type {string}
             */
            this.axisOrientation_ =
                options.axisOrientation !== undefined ? options.axisOrientation : 'enu';
            /**
             * @private
             * @type {boolean}
             */
            this.global_ = options.global !== undefined ? options.global : false;
            /**
             * @private
             * @type {boolean}
             */
            this.canWrapX_ = !!(this.global_ && this.extent_);
            /**
             * @private
             * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
             */
            this.getPointResolutionFunc_ = options.getPointResolution;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            this.defaultTileGrid_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.metersPerUnit_ = options.metersPerUnit;
        }
        /**
         * @return {boolean} The projection is suitable for wrapping the x-axis
         */
        Projection.prototype.canWrapX = function () {
            return this.canWrapX_;
        };
        /**
         * Get the code for this projection, e.g. 'EPSG:4326'.
         * @return {string} Code.
         * @api
         */
        Projection.prototype.getCode = function () {
            return this.code_;
        };
        /**
         * Get the validity extent for this projection.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        Projection.prototype.getExtent = function () {
            return this.extent_;
        };
        /**
         * Get the units of this projection.
         * @return {import("./Units.js").default} Units.
         * @api
         */
        Projection.prototype.getUnits = function () {
            return this.units_;
        };
        /**
         * Get the amount of meters per unit of this projection.  If the projection is
         * not configured with `metersPerUnit` or a units identifier, the return is
         * `undefined`.
         * @return {number|undefined} Meters.
         * @api
         */
        Projection.prototype.getMetersPerUnit = function () {
            return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];
        };
        /**
         * Get the world extent for this projection.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        Projection.prototype.getWorldExtent = function () {
            return this.worldExtent_;
        };
        /**
         * Get the axis orientation of this projection.
         * Example values are:
         * enu - the default easting, northing, elevation.
         * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
         *     or south orientated transverse mercator.
         * wnu - westing, northing, up - some planetary coordinate systems have
         *     "west positive" coordinate systems
         * @return {string} Axis orientation.
         * @api
         */
        Projection.prototype.getAxisOrientation = function () {
            return this.axisOrientation_;
        };
        /**
         * Is this projection a global projection which spans the whole world?
         * @return {boolean} Whether the projection is global.
         * @api
         */
        Projection.prototype.isGlobal = function () {
            return this.global_;
        };
        /**
         * Set if the projection is a global projection which spans the whole world
         * @param {boolean} global Whether the projection is global.
         * @api
         */
        Projection.prototype.setGlobal = function (global) {
            this.global_ = global;
            this.canWrapX_ = !!(global && this.extent_);
        };
        /**
         * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
         */
        Projection.prototype.getDefaultTileGrid = function () {
            return this.defaultTileGrid_;
        };
        /**
         * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
         */
        Projection.prototype.setDefaultTileGrid = function (tileGrid) {
            this.defaultTileGrid_ = tileGrid;
        };
        /**
         * Set the validity extent for this projection.
         * @param {import("../extent.js").Extent} extent Extent.
         * @api
         */
        Projection.prototype.setExtent = function (extent) {
            this.extent_ = extent;
            this.canWrapX_ = !!(this.global_ && extent);
        };
        /**
         * Set the world extent for this projection.
         * @param {import("../extent.js").Extent} worldExtent World extent
         *     [minlon, minlat, maxlon, maxlat].
         * @api
         */
        Projection.prototype.setWorldExtent = function (worldExtent) {
            this.worldExtent_ = worldExtent;
        };
        /**
         * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
         * for this projection.
         * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
         * @api
         */
        Projection.prototype.setGetPointResolution = function (func) {
            this.getPointResolutionFunc_ = func;
        };
        /**
         * Get the custom point resolution function for this projection (if set).
         * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
         * resolution function (if set).
         */
        Projection.prototype.getPointResolutionFunc = function () {
            return this.getPointResolutionFunc_;
        };
        return Projection;
    }());

    /**
     * @module ol/math
     */
    /**
     * Takes a number and clamps it to within the provided bounds.
     * @param {number} value The input number.
     * @param {number} min The minimum value to return.
     * @param {number} max The maximum value to return.
     * @return {number} The input number if it is within bounds, or the nearest
     *     number within the bounds.
     */
    function clamp(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }
    /**
     * Return the hyperbolic cosine of a given number. The method will use the
     * native `Math.cosh` function if it is available, otherwise the hyperbolic
     * cosine will be calculated via the reference implementation of the Mozilla
     * developer network.
     *
     * @param {number} x X.
     * @return {number} Hyperbolic cosine of x.
     */
    var cosh = (function () {
        // Wrapped in a iife, to save the overhead of checking for the native
        // implementation on every invocation.
        var cosh;
        if ('cosh' in Math) {
            // The environment supports the native Math.cosh function, use it…
            cosh = Math.cosh;
        }
        else {
            // … else, use the reference implementation of MDN:
            cosh = function (x) {
                var y = /** @type {Math} */ (Math).exp(x);
                return (y + 1 / y) / 2;
            };
        }
        return cosh;
    })();
    /**
     * Return the base 2 logarithm of a given number. The method will use the
     * native `Math.log2` function if it is available, otherwise the base 2
     * logarithm will be calculated via the reference implementation of the
     * Mozilla developer network.
     *
     * @param {number} x X.
     * @return {number} Base 2 logarithm of x.
     */
    var log2 = (function () {
        // Wrapped in a iife, to save the overhead of checking for the native
        // implementation on every invocation.
        var log2;
        if ('log2' in Math) {
            // The environment supports the native Math.log2 function, use it…
            log2 = Math.log2;
        }
        else {
            // … else, use the reference implementation of MDN:
            log2 = function (x) {
                return Math.log(x) * Math.LOG2E;
            };
        }
        return log2;
    })();
    /**
     * Returns the square of the closest distance between the point (x, y) and the
     * line segment (x1, y1) to (x2, y2).
     * @param {number} x X.
     * @param {number} y Y.
     * @param {number} x1 X1.
     * @param {number} y1 Y1.
     * @param {number} x2 X2.
     * @param {number} y2 Y2.
     * @return {number} Squared distance.
     */
    function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
        var dx = x2 - x1;
        var dy = y2 - y1;
        if (dx !== 0 || dy !== 0) {
            var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
            if (t > 1) {
                x1 = x2;
                y1 = y2;
            }
            else if (t > 0) {
                x1 += dx * t;
                y1 += dy * t;
            }
        }
        return squaredDistance(x, y, x1, y1);
    }
    /**
     * Returns the square of the distance between the points (x1, y1) and (x2, y2).
     * @param {number} x1 X1.
     * @param {number} y1 Y1.
     * @param {number} x2 X2.
     * @param {number} y2 Y2.
     * @return {number} Squared distance.
     */
    function squaredDistance(x1, y1, x2, y2) {
        var dx = x2 - x1;
        var dy = y2 - y1;
        return dx * dx + dy * dy;
    }
    /**
     * Solves system of linear equations using Gaussian elimination method.
     *
     * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
     *                                     in row-major order.
     * @return {Array<number>} The resulting vector.
     */
    function solveLinearSystem(mat) {
        var n = mat.length;
        for (var i = 0; i < n; i++) {
            // Find max in the i-th column (ignoring i - 1 first rows)
            var maxRow = i;
            var maxEl = Math.abs(mat[i][i]);
            for (var r = i + 1; r < n; r++) {
                var absValue = Math.abs(mat[r][i]);
                if (absValue > maxEl) {
                    maxEl = absValue;
                    maxRow = r;
                }
            }
            if (maxEl === 0) {
                return null; // matrix is singular
            }
            // Swap max row with i-th (current) row
            var tmp = mat[maxRow];
            mat[maxRow] = mat[i];
            mat[i] = tmp;
            // Subtract the i-th row to make all the remaining rows 0 in the i-th column
            for (var j = i + 1; j < n; j++) {
                var coef = -mat[j][i] / mat[i][i];
                for (var k = i; k < n + 1; k++) {
                    if (i == k) {
                        mat[j][k] = 0;
                    }
                    else {
                        mat[j][k] += coef * mat[i][k];
                    }
                }
            }
        }
        // Solve Ax=b for upper triangular matrix A (mat)
        var x = new Array(n);
        for (var l = n - 1; l >= 0; l--) {
            x[l] = mat[l][n] / mat[l][l];
            for (var m = l - 1; m >= 0; m--) {
                mat[m][n] -= mat[m][l] * x[l];
            }
        }
        return x;
    }
    /**
     * Converts radians to to degrees.
     *
     * @param {number} angleInRadians Angle in radians.
     * @return {number} Angle in degrees.
     */
    function toDegrees(angleInRadians) {
        return (angleInRadians * 180) / Math.PI;
    }
    /**
     * Converts degrees to radians.
     *
     * @param {number} angleInDegrees Angle in degrees.
     * @return {number} Angle in radians.
     */
    function toRadians(angleInDegrees) {
        return (angleInDegrees * Math.PI) / 180;
    }
    /**
     * Returns the modulo of a / b, depending on the sign of b.
     *
     * @param {number} a Dividend.
     * @param {number} b Divisor.
     * @return {number} Modulo.
     */
    function modulo(a, b) {
        var r = a % b;
        return r * b < 0 ? r + b : r;
    }
    /**
     * Calculates the linearly interpolated value of x between a and b.
     *
     * @param {number} a Number
     * @param {number} b Number
     * @param {number} x Value to be interpolated.
     * @return {number} Interpolated value.
     */
    function lerp(a, b, x) {
        return a + x * (b - a);
    }

    var __extends$6 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Radius of WGS84 sphere
     *
     * @const
     * @type {number}
     */
    var RADIUS = 6378137;
    /**
     * @const
     * @type {number}
     */
    var HALF_SIZE = Math.PI * RADIUS;
    /**
     * @const
     * @type {import("../extent.js").Extent}
     */
    var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];
    /**
     * @const
     * @type {import("../extent.js").Extent}
     */
    var WORLD_EXTENT = [-180, -85, 180, 85];
    /**
     * Maximum safe value in y direction
     * @const
     * @type {number}
     */
    var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));
    /**
     * @classdesc
     * Projection object for web/spherical Mercator (EPSG:3857).
     */
    var EPSG3857Projection = /** @class */ (function (_super) {
        __extends$6(EPSG3857Projection, _super);
        /**
         * @param {string} code Code.
         */
        function EPSG3857Projection(code) {
            return _super.call(this, {
                code: code,
                units: Units.METERS,
                extent: EXTENT,
                global: true,
                worldExtent: WORLD_EXTENT,
                getPointResolution: function (resolution, point) {
                    return resolution / cosh(point[1] / RADIUS);
                },
            }) || this;
        }
        return EPSG3857Projection;
    }(Projection));
    /**
     * Projections equal to EPSG:3857.
     *
     * @const
     * @type {Array<import("./Projection.js").default>}
     */
    var PROJECTIONS = [
        new EPSG3857Projection('EPSG:3857'),
        new EPSG3857Projection('EPSG:102100'),
        new EPSG3857Projection('EPSG:102113'),
        new EPSG3857Projection('EPSG:900913'),
        new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),
    ];
    /**
     * Transformation from EPSG:4326 to EPSG:3857.
     *
     * @param {Array<number>} input Input array of coordinate values.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension (default is `2`).
     * @return {Array<number>} Output array of coordinate values.
     */
    function fromEPSG4326(input, opt_output, opt_dimension) {
        var length = input.length;
        var dimension = opt_dimension > 1 ? opt_dimension : 2;
        var output = opt_output;
        if (output === undefined) {
            if (dimension > 2) {
                // preserve values beyond second dimension
                output = input.slice();
            }
            else {
                output = new Array(length);
            }
        }
        for (var i = 0; i < length; i += dimension) {
            output[i] = (HALF_SIZE * input[i]) / 180;
            var y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));
            if (y > MAX_SAFE_Y) {
                y = MAX_SAFE_Y;
            }
            else if (y < -MAX_SAFE_Y) {
                y = -MAX_SAFE_Y;
            }
            output[i + 1] = y;
        }
        return output;
    }
    /**
     * Transformation from EPSG:3857 to EPSG:4326.
     *
     * @param {Array<number>} input Input array of coordinate values.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension (default is `2`).
     * @return {Array<number>} Output array of coordinate values.
     */
    function toEPSG4326(input, opt_output, opt_dimension) {
        var length = input.length;
        var dimension = opt_dimension > 1 ? opt_dimension : 2;
        var output = opt_output;
        if (output === undefined) {
            if (dimension > 2) {
                // preserve values beyond second dimension
                output = input.slice();
            }
            else {
                output = new Array(length);
            }
        }
        for (var i = 0; i < length; i += dimension) {
            output[i] = (180 * input[i]) / HALF_SIZE;
            output[i + 1] =
                (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;
        }
        return output;
    }

    var __extends$7 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Semi-major radius of the WGS84 ellipsoid.
     *
     * @const
     * @type {number}
     */
    var RADIUS$1 = 6378137;
    /**
     * Extent of the EPSG:4326 projection which is the whole world.
     *
     * @const
     * @type {import("../extent.js").Extent}
     */
    var EXTENT$1 = [-180, -90, 180, 90];
    /**
     * @const
     * @type {number}
     */
    var METERS_PER_UNIT$1 = (Math.PI * RADIUS$1) / 180;
    /**
     * @classdesc
     * Projection object for WGS84 geographic coordinates (EPSG:4326).
     *
     * Note that OpenLayers does not strictly comply with the EPSG definition.
     * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
     * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
     */
    var EPSG4326Projection = /** @class */ (function (_super) {
        __extends$7(EPSG4326Projection, _super);
        /**
         * @param {string} code Code.
         * @param {string=} opt_axisOrientation Axis orientation.
         */
        function EPSG4326Projection(code, opt_axisOrientation) {
            return _super.call(this, {
                code: code,
                units: Units.DEGREES,
                extent: EXTENT$1,
                axisOrientation: opt_axisOrientation,
                global: true,
                metersPerUnit: METERS_PER_UNIT$1,
                worldExtent: EXTENT$1,
            }) || this;
        }
        return EPSG4326Projection;
    }(Projection));
    /**
     * Projections equal to EPSG:4326.
     *
     * @const
     * @type {Array<import("./Projection.js").default>}
     */
    var PROJECTIONS$1 = [
        new EPSG4326Projection('CRS:84'),
        new EPSG4326Projection('EPSG:4326', 'neu'),
        new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
        new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
        new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
    ];

    /**
     * @module ol/proj/projections
     */
    /**
     * @type {Object<string, import("./Projection.js").default>}
     */
    var cache = {};
    /**
     * Get a cached projection by code.
     * @param {string} code The code for the projection.
     * @return {import("./Projection.js").default} The projection (if cached).
     */
    function get(code) {
        return (cache[code] ||
            cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/, 'EPSG:$3')] ||
            null);
    }
    /**
     * Add a projection to the cache.
     * @param {string} code The projection code.
     * @param {import("./Projection.js").default} projection The projection to cache.
     */
    function add(code, projection) {
        cache[code] = projection;
    }

    /**
     * @module ol/proj/transforms
     */
    /**
     * @private
     * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
     */
    var transforms = {};
    /**
     * Registers a conversion function to convert coordinates from the source
     * projection to the destination projection.
     *
     * @param {import("./Projection.js").default} source Source.
     * @param {import("./Projection.js").default} destination Destination.
     * @param {import("../proj.js").TransformFunction} transformFn Transform.
     */
    function add$1(source, destination, transformFn) {
        var sourceCode = source.getCode();
        var destinationCode = destination.getCode();
        if (!(sourceCode in transforms)) {
            transforms[sourceCode] = {};
        }
        transforms[sourceCode][destinationCode] = transformFn;
    }
    /**
     * Get a transform given a source code and a destination code.
     * @param {string} sourceCode The code for the source projection.
     * @param {string} destinationCode The code for the destination projection.
     * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
     */
    function get$1(sourceCode, destinationCode) {
        var transform;
        if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
            transform = transforms[sourceCode][destinationCode];
        }
        return transform;
    }

    /**
     * @module ol/sphere
     */
    /**
     * Object literal with options for the {@link getLength} or {@link getArea}
     * functions.
     * @typedef {Object} SphereMetricOptions
     * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
     * Projection of the  geometry.  By default, the geometry is assumed to be in
     * Web Mercator.
     * @property {number} [radius=6371008.8] Sphere radius.  By default, the
     * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)
     * for the WGS84 ellipsoid is used.
     */
    /**
     * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
     * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
     * @type {number}
     */
    var DEFAULT_RADIUS = 6371008.8;
    /**
     * Get the great circle distance (in meters) between two geographic coordinates.
     * @param {Array} c1 Starting coordinate.
     * @param {Array} c2 Ending coordinate.
     * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
     *     mean radius using the WGS84 ellipsoid.
     * @return {number} The great circle distance between the points (in meters).
     * @api
     */
    function getDistance(c1, c2, opt_radius) {
        var radius = opt_radius || DEFAULT_RADIUS;
        var lat1 = toRadians(c1[1]);
        var lat2 = toRadians(c2[1]);
        var deltaLatBy2 = (lat2 - lat1) / 2;
        var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
        var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
            Math.sin(deltaLonBy2) *
                Math.sin(deltaLonBy2) *
                Math.cos(lat1) *
                Math.cos(lat2);
        return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    }
    /**
     * Returns the coordinate at the given distance and bearing from `c1`.
     *
     * @param {import("./coordinate.js").Coordinate} c1 The origin point (`[lon, lat]` in degrees).
     * @param {number} distance The great-circle distance between the origin
     *     point and the target point.
     * @param {number} bearing The bearing (in radians).
     * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
     *     mean radius using the WGS84 ellipsoid.
     * @return {import("./coordinate.js").Coordinate} The target point.
     */
    function offset(c1, distance, bearing, opt_radius) {
        var radius = opt_radius || DEFAULT_RADIUS;
        var lat1 = toRadians(c1[1]);
        var lon1 = toRadians(c1[0]);
        var dByR = distance / radius;
        var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) +
            Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
        var lon = lon1 +
            Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
        return [toDegrees(lon), toDegrees(lat)];
    }

    /**
     * @module ol/coordinate
     */
    /**
     * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
     * @typedef {Array<number>} Coordinate
     * @api
     */
    /**
     * A function that takes a {@link module:ol/coordinate~Coordinate} and
     * transforms it into a `{string}`.
     *
     * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
     * @api
     */
    /**
     * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
     * by the function.
     *
     * Example:
     *
     *     import {add} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     add(coord, [-2, 4]);
     *     // coord is now [5.85, 51.983333]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {Coordinate} delta Delta.
     * @return {Coordinate} The input coordinate adjusted by
     * the given delta.
     * @api
     */
    function add$2(coordinate, delta) {
        coordinate[0] += +delta[0];
        coordinate[1] += +delta[1];
        return coordinate;
    }
    /**
     * @param {Coordinate} coordinate1 First coordinate.
     * @param {Coordinate} coordinate2 Second coordinate.
     * @return {boolean} The two coordinates are equal.
     */
    function equals$2(coordinate1, coordinate2) {
        var equals = true;
        for (var i = coordinate1.length - 1; i >= 0; --i) {
            if (coordinate1[i] != coordinate2[i]) {
                equals = false;
                break;
            }
        }
        return equals;
    }
    /**
     * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
     * returned by the function.
     *
     * Example:
     *
     *     import {rotate} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var rotateRadians = Math.PI / 2; // 90 degrees
     *     rotate(coord, rotateRadians);
     *     // coord is now [-47.983333, 7.85]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {number} angle Angle in radian.
     * @return {Coordinate} Coordinate.
     * @api
     */
    function rotate(coordinate, angle) {
        var cosAngle = Math.cos(angle);
        var sinAngle = Math.sin(angle);
        var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
        var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
        coordinate[0] = x;
        coordinate[1] = y;
        return coordinate;
    }
    /**
     * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
     * by the function.
     *
     * Example:
     *
     *     import {scale as scaleCoordinate} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var scale = 1.2;
     *     scaleCoordinate(coord, scale);
     *     // coord is now [9.42, 57.5799996]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {number} scale Scale factor.
     * @return {Coordinate} Coordinate.
     */
    function scale(coordinate, scale) {
        coordinate[0] *= scale;
        coordinate[1] *= scale;
        return coordinate;
    }
    /**
     * Modifies the provided coordinate in-place to be within the real world
     * extent. The lower projection extent boundary is inclusive, the upper one
     * exclusive.
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {Coordinate} The coordinate within the real world extent.
     */
    function wrapX$1(coordinate, projection) {
        if (projection.canWrapX()) {
            var worldWidth = getWidth(projection.getExtent());
            var worldsAway = getWorldsAway(coordinate, projection, worldWidth);
            if (worldsAway) {
                coordinate[0] -= worldsAway * worldWidth;
            }
        }
        return coordinate;
    }
    /**
     * @param {Coordinate} coordinate Coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @param {number=} opt_sourceExtentWidth Width of the source extent.
     * @return {number} Offset in world widths.
     */
    function getWorldsAway(coordinate, projection, opt_sourceExtentWidth) {
        var projectionExtent = projection.getExtent();
        var worldsAway = 0;
        if (projection.canWrapX() &&
            (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {
            var sourceExtentWidth = opt_sourceExtentWidth || getWidth(projectionExtent);
            worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);
        }
        return worldsAway;
    }

    /**
     * @module ol/proj
     */
    /**
     * @param {Array<number>} input Input coordinate array.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension.
     * @return {Array<number>} Output coordinate array (new array, same coordinate
     *     values).
     */
    function cloneTransform(input, opt_output, opt_dimension) {
        var output;
        if (opt_output !== undefined) {
            for (var i = 0, ii = input.length; i < ii; ++i) {
                opt_output[i] = input[i];
            }
            output = opt_output;
        }
        else {
            output = input.slice();
        }
        return output;
    }
    /**
     * @param {Array<number>} input Input coordinate array.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension.
     * @return {Array<number>} Input coordinate array (same array as input).
     */
    function identityTransform(input, opt_output, opt_dimension) {
        if (opt_output !== undefined && input !== opt_output) {
            for (var i = 0, ii = input.length; i < ii; ++i) {
                opt_output[i] = input[i];
            }
            input = opt_output;
        }
        return input;
    }
    /**
     * Add a Projection object to the list of supported projections that can be
     * looked up by their code.
     *
     * @param {Projection} projection Projection instance.
     * @api
     */
    function addProjection(projection) {
        add(projection.getCode(), projection);
        add$1(projection, projection, cloneTransform);
    }
    /**
     * @param {Array<Projection>} projections Projections.
     */
    function addProjections(projections) {
        projections.forEach(addProjection);
    }
    /**
     * Fetches a Projection object for the code specified.
     *
     * @param {ProjectionLike} projectionLike Either a code string which is
     *     a combination of authority and identifier such as "EPSG:4326", or an
     *     existing projection object, or undefined.
     * @return {Projection} Projection object, or null if not in list.
     * @api
     */
    function get$2(projectionLike) {
        return typeof projectionLike === 'string'
            ? get(/** @type {string} */ (projectionLike))
            : /** @type {Projection} */ (projectionLike) || null;
    }
    /**
     * Get the resolution of the point in degrees or distance units.
     * For projections with degrees as the unit this will simply return the
     * provided resolution. For other projections the point resolution is
     * by default estimated by transforming the 'point' pixel to EPSG:4326,
     * measuring its width and height on the normal sphere,
     * and taking the average of the width and height.
     * A custom function can be provided for a specific projection, either
     * by setting the `getPointResolution` option in the
     * {@link module:ol/proj/Projection~Projection} constructor or by using
     * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
     * projection object.
     * @param {ProjectionLike} projection The projection.
     * @param {number} resolution Nominal resolution in projection units.
     * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
     * @param {import("./proj/Units.js").default=} opt_units Units to get the point resolution in.
     * Default is the projection's units.
     * @return {number} Point resolution.
     * @api
     */
    function getPointResolution(projection, resolution, point, opt_units) {
        projection = get$2(projection);
        var pointResolution;
        var getter = projection.getPointResolutionFunc();
        if (getter) {
            pointResolution = getter(resolution, point);
            if (opt_units && opt_units !== projection.getUnits()) {
                var metersPerUnit = projection.getMetersPerUnit();
                if (metersPerUnit) {
                    pointResolution =
                        (pointResolution * metersPerUnit) / METERS_PER_UNIT[opt_units];
                }
            }
        }
        else {
            var units = projection.getUnits();
            if ((units == Units.DEGREES && !opt_units) || opt_units == Units.DEGREES) {
                pointResolution = resolution;
            }
            else {
                // Estimate point resolution by transforming the center pixel to EPSG:4326,
                // measuring its width and height on the normal sphere, and taking the
                // average of the width and height.
                var toEPSG4326_1 = getTransformFromProjections(projection, get$2('EPSG:4326'));
                if (toEPSG4326_1 === identityTransform && units !== Units.DEGREES) {
                    // no transform is available
                    pointResolution = resolution * projection.getMetersPerUnit();
                }
                else {
                    var vertices = [
                        point[0] - resolution / 2,
                        point[1],
                        point[0] + resolution / 2,
                        point[1],
                        point[0],
                        point[1] - resolution / 2,
                        point[0],
                        point[1] + resolution / 2,
                    ];
                    vertices = toEPSG4326_1(vertices, vertices, 2);
                    var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
                    var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
                    pointResolution = (width + height) / 2;
                }
                var metersPerUnit = opt_units
                    ? METERS_PER_UNIT[opt_units]
                    : projection.getMetersPerUnit();
                if (metersPerUnit !== undefined) {
                    pointResolution /= metersPerUnit;
                }
            }
        }
        return pointResolution;
    }
    /**
     * Registers transformation functions that don't alter coordinates. Those allow
     * to transform between projections with equal meaning.
     *
     * @param {Array<Projection>} projections Projections.
     * @api
     */
    function addEquivalentProjections(projections) {
        addProjections(projections);
        projections.forEach(function (source) {
            projections.forEach(function (destination) {
                if (source !== destination) {
                    add$1(source, destination, cloneTransform);
                }
            });
        });
    }
    /**
     * Registers transformation functions to convert coordinates in any projection
     * in projection1 to any projection in projection2.
     *
     * @param {Array<Projection>} projections1 Projections with equal
     *     meaning.
     * @param {Array<Projection>} projections2 Projections with equal
     *     meaning.
     * @param {TransformFunction} forwardTransform Transformation from any
     *   projection in projection1 to any projection in projection2.
     * @param {TransformFunction} inverseTransform Transform from any projection
     *   in projection2 to any projection in projection1..
     */
    function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
        projections1.forEach(function (projection1) {
            projections2.forEach(function (projection2) {
                add$1(projection1, projection2, forwardTransform);
                add$1(projection2, projection1, inverseTransform);
            });
        });
    }
    /**
     * @param {Projection|string|undefined} projection Projection.
     * @param {string} defaultCode Default code.
     * @return {Projection} Projection.
     */
    function createProjection(projection, defaultCode) {
        if (!projection) {
            return get$2(defaultCode);
        }
        else if (typeof projection === 'string') {
            return get$2(projection);
        }
        else {
            return /** @type {Projection} */ (projection);
        }
    }
    /**
     * Checks if two projections are the same, that is every coordinate in one
     * projection does represent the same geographic point as the same coordinate in
     * the other projection.
     *
     * @param {Projection} projection1 Projection 1.
     * @param {Projection} projection2 Projection 2.
     * @return {boolean} Equivalent.
     * @api
     */
    function equivalent(projection1, projection2) {
        if (projection1 === projection2) {
            return true;
        }
        var equalUnits = projection1.getUnits() === projection2.getUnits();
        if (projection1.getCode() === projection2.getCode()) {
            return equalUnits;
        }
        else {
            var transformFunc = getTransformFromProjections(projection1, projection2);
            return transformFunc === cloneTransform && equalUnits;
        }
    }
    /**
     * Searches in the list of transform functions for the function for converting
     * coordinates from the source projection to the destination projection.
     *
     * @param {Projection} sourceProjection Source Projection object.
     * @param {Projection} destinationProjection Destination Projection
     *     object.
     * @return {TransformFunction} Transform function.
     */
    function getTransformFromProjections(sourceProjection, destinationProjection) {
        var sourceCode = sourceProjection.getCode();
        var destinationCode = destinationProjection.getCode();
        var transformFunc = get$1(sourceCode, destinationCode);
        if (!transformFunc) {
            transformFunc = identityTransform;
        }
        return transformFunc;
    }
    /**
     * Given the projection-like objects, searches for a transformation
     * function to convert a coordinates array from the source projection to the
     * destination projection.
     *
     * @param {ProjectionLike} source Source.
     * @param {ProjectionLike} destination Destination.
     * @return {TransformFunction} Transform function.
     * @api
     */
    function getTransform(source, destination) {
        var sourceProjection = get$2(source);
        var destinationProjection = get$2(destination);
        return getTransformFromProjections(sourceProjection, destinationProjection);
    }
    /**
     * Transforms a coordinate from source projection to destination projection.
     * This returns a new coordinate (and does not modify the original).
     *
     * See {@link module:ol/proj~transformExtent} for extent transformation.
     * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
     * subclasses for geometry transforms.
     *
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {ProjectionLike} source Source projection-like.
     * @param {ProjectionLike} destination Destination projection-like.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */
    function transform(coordinate, source, destination) {
        var transformFunc = getTransform(source, destination);
        return transformFunc(coordinate, undefined, coordinate.length);
    }
    /**
     * @type {?Projection}
     */
    var userProjection = null;
    /**
     * Get the projection for coordinates supplied from and returned by API methods.
     * Note that this method is not yet a part of the stable API.  Support for user
     * projections is not yet complete and should be considered experimental.
     * @returns {?Projection} The user projection (or null if not set).
     */
    function getUserProjection() {
        return userProjection;
    }
    /**
     * Return a coordinate transformed into the user projection.  If no user projection
     * is set, the original coordinate is returned.
     * @param {Array<number>} coordinate Input coordinate.
     * @param {ProjectionLike} sourceProjection The input coordinate projection.
     * @returns {Array<number>} The input coordinate in the user projection.
     */
    function toUserCoordinate(coordinate, sourceProjection) {
        {
            return coordinate;
        }
    }
    /**
     * Return a coordinate transformed from the user projection.  If no user projection
     * is set, the original coordinate is returned.
     * @param {Array<number>} coordinate Input coordinate.
     * @param {ProjectionLike} destProjection The destination projection.
     * @returns {Array<number>} The input coordinate transformed.
     */
    function fromUserCoordinate(coordinate, destProjection) {
        {
            return coordinate;
        }
    }
    /**
     * Return an extent transformed into the user projection.  If no user projection
     * is set, the original extent is returned.
     * @param {import("./extent.js").Extent} extent Input extent.
     * @param {ProjectionLike} sourceProjection The input extent projection.
     * @returns {import("./extent.js").Extent} The input extent in the user projection.
     */
    function toUserExtent(extent, sourceProjection) {
        {
            return extent;
        }
    }
    /**
     * Return an extent transformed from the user projection.  If no user projection
     * is set, the original extent is returned.
     * @param {import("./extent.js").Extent} extent Input extent.
     * @param {ProjectionLike} destProjection The destination projection.
     * @returns {import("./extent.js").Extent} The input extent transformed.
     */
    function fromUserExtent(extent, destProjection) {
        {
            return extent;
        }
    }
    /**
     * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
     * by when this module is executed and should only need to be called again after
     * `clearAllProjections()` is called (e.g. in tests).
     */
    function addCommon() {
        // Add transformations that don't alter coordinates to convert within set of
        // projections with equal meaning.
        addEquivalentProjections(PROJECTIONS);
        addEquivalentProjections(PROJECTIONS$1);
        // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
        // coordinates and back.
        addEquivalentTransforms(PROJECTIONS$1, PROJECTIONS, fromEPSG4326, toEPSG4326);
    }
    addCommon();

    /**
     * @module ol/geom/flat/transform
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
        var dest = opt_dest ? opt_dest : [];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            var x = flatCoordinates[j];
            var y = flatCoordinates[j + 1];
            dest[i++] = transform[0] * x + transform[2] * y + transform[4];
            dest[i++] = transform[1] * x + transform[3] * y + transform[5];
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} angle Angle.
     * @param {Array<number>} anchor Rotation anchor point.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function rotate$1(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
        var dest = opt_dest ? opt_dest : [];
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        var anchorX = anchor[0];
        var anchorY = anchor[1];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            var deltaX = flatCoordinates[j] - anchorX;
            var deltaY = flatCoordinates[j + 1] - anchorY;
            dest[i++] = anchorX + deltaX * cos - deltaY * sin;
            dest[i++] = anchorY + deltaX * sin + deltaY * cos;
            for (var k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    /**
     * Scale the coordinates.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} sx Scale factor in the x-direction.
     * @param {number} sy Scale factor in the y-direction.
     * @param {Array<number>} anchor Scale anchor point.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function scale$1(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
        var dest = opt_dest ? opt_dest : [];
        var anchorX = anchor[0];
        var anchorY = anchor[1];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            var deltaX = flatCoordinates[j] - anchorX;
            var deltaY = flatCoordinates[j + 1] - anchorY;
            dest[i++] = anchorX + sx * deltaX;
            dest[i++] = anchorY + sy * deltaY;
            for (var k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
        var dest = opt_dest ? opt_dest : [];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            dest[i++] = flatCoordinates[j] + deltaX;
            dest[i++] = flatCoordinates[j + 1] + deltaY;
            for (var k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }

    var __extends$8 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @type {import("../transform.js").Transform}
     */
    var tmpTransform = create();
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for vector geometries.
     *
     * To get notified of changes to the geometry, register a listener for the
     * generic `change` event on your geometry instance.
     *
     * @abstract
     * @api
     */
    var Geometry = /** @class */ (function (_super) {
        __extends$8(Geometry, _super);
        function Geometry() {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {import("../extent.js").Extent}
             */
            _this.extent_ = createEmpty();
            /**
             * @private
             * @type {number}
             */
            _this.extentRevision_ = -1;
            /**
             * @protected
             * @type {number}
             */
            _this.simplifiedGeometryMaxMinSquaredTolerance = 0;
            /**
             * @protected
             * @type {number}
             */
            _this.simplifiedGeometryRevision = 0;
            /**
             * Get a transformed and simplified version of the geometry.
             * @abstract
             * @param {number} revision The geometry revision.
             * @param {number} squaredTolerance Squared tolerance.
             * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
             * @return {Geometry} Simplified geometry.
             */
            _this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, opt_transform) {
                if (!opt_transform) {
                    return this.getSimplifiedGeometry(squaredTolerance);
                }
                var clone = this.clone();
                clone.applyTransform(opt_transform);
                return clone.getSimplifiedGeometry(squaredTolerance);
            });
            return _this;
        }
        /**
         * Get a transformed and simplified version of the geometry.
         * @abstract
         * @param {number} squaredTolerance Squared tolerance.
         * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
         * @return {Geometry} Simplified geometry.
         */
        Geometry.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {
            return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);
        };
        /**
         * Make a complete copy of the geometry.
         * @abstract
         * @return {!Geometry} Clone.
         */
        Geometry.prototype.clone = function () {
            return abstract();
        };
        /**
         * @abstract
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        Geometry.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            return abstract();
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        Geometry.prototype.containsXY = function (x, y) {
            var coord = this.getClosestPoint([x, y]);
            return coord[0] === x && coord[1] === y;
        };
        /**
         * Return the closest point of the geometry to the passed point as
         * {@link module:ol/coordinate~Coordinate coordinate}.
         * @param {import("../coordinate.js").Coordinate} point Point.
         * @param {import("../coordinate.js").Coordinate=} opt_closestPoint Closest point.
         * @return {import("../coordinate.js").Coordinate} Closest point.
         * @api
         */
        Geometry.prototype.getClosestPoint = function (point, opt_closestPoint) {
            var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
            this.closestPointXY(point[0], point[1], closestPoint, Infinity);
            return closestPoint;
        };
        /**
         * Returns true if this geometry includes the specified coordinate. If the
         * coordinate is on the boundary of the geometry, returns false.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @return {boolean} Contains coordinate.
         * @api
         */
        Geometry.prototype.intersectsCoordinate = function (coordinate) {
            return this.containsXY(coordinate[0], coordinate[1]);
        };
        /**
         * @abstract
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        Geometry.prototype.computeExtent = function (extent) {
            return abstract();
        };
        /**
         * Get the extent of the geometry.
         * @param {import("../extent.js").Extent=} opt_extent Extent.
         * @return {import("../extent.js").Extent} extent Extent.
         * @api
         */
        Geometry.prototype.getExtent = function (opt_extent) {
            if (this.extentRevision_ != this.getRevision()) {
                var extent = this.computeExtent(this.extent_);
                if (isNaN(extent[0]) || isNaN(extent[1])) {
                    createOrUpdateEmpty(extent);
                }
                this.extentRevision_ = this.getRevision();
            }
            return returnOrUpdate(this.extent_, opt_extent);
        };
        /**
         * Rotate the geometry around a given coordinate. This modifies the geometry
         * coordinates in place.
         * @abstract
         * @param {number} angle Rotation angle in radians.
         * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
         * @api
         */
        Geometry.prototype.rotate = function (angle, anchor) {
            abstract();
        };
        /**
         * Scale the geometry (with an optional origin).  This modifies the geometry
         * coordinates in place.
         * @abstract
         * @param {number} sx The scaling factor in the x-direction.
         * @param {number=} opt_sy The scaling factor in the y-direction (defaults to sx).
         * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
         *     of the geometry extent).
         * @api
         */
        Geometry.prototype.scale = function (sx, opt_sy, opt_anchor) {
            abstract();
        };
        /**
         * Create a simplified version of this geometry.  For linestrings, this uses
         * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
         * algorithm.  For polygons, a quantization-based
         * simplification is used to preserve topology.
         * @param {number} tolerance The tolerance distance for simplification.
         * @return {Geometry} A new, simplified version of the original geometry.
         * @api
         */
        Geometry.prototype.simplify = function (tolerance) {
            return this.getSimplifiedGeometry(tolerance * tolerance);
        };
        /**
         * Create a simplified version of this geometry using the Douglas Peucker
         * algorithm.
         * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
         * @abstract
         * @param {number} squaredTolerance Squared tolerance.
         * @return {Geometry} Simplified geometry.
         */
        Geometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {
            return abstract();
        };
        /**
         * Get the type of this geometry.
         * @abstract
         * @return {import("./GeometryType.js").default} Geometry type.
         */
        Geometry.prototype.getType = function () {
            return abstract();
        };
        /**
         * Apply a transform function to the coordinates of the geometry.
         * The geometry is modified in place.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         * @abstract
         * @param {import("../proj.js").TransformFunction} transformFn Transform function.
         * Called with a flat array of geometry coordinates.
         */
        Geometry.prototype.applyTransform = function (transformFn) {
            abstract();
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @abstract
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         */
        Geometry.prototype.intersectsExtent = function (extent) {
            return abstract();
        };
        /**
         * Translate the geometry.  This modifies the geometry coordinates in place.  If
         * instead you want a new geometry, first `clone()` this geometry.
         * @abstract
         * @param {number} deltaX Delta X.
         * @param {number} deltaY Delta Y.
         * @api
         */
        Geometry.prototype.translate = function (deltaX, deltaY) {
            abstract();
        };
        /**
         * Transform each coordinate of the geometry from one coordinate reference
         * system to another. The geometry is modified in place.
         * For example, a line will be transformed to a line and a circle to a circle.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         *
         * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
         *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
         * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
         *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
         * @return {Geometry} This geometry.  Note that original geometry is
         *     modified in place.
         * @api
         */
        Geometry.prototype.transform = function (source, destination) {
            /** @type {import("../proj/Projection.js").default} */
            var sourceProj = get$2(source);
            var transformFn = sourceProj.getUnits() == Units.TILE_PIXELS
                ? function (inCoordinates, outCoordinates, stride) {
                    var pixelExtent = sourceProj.getExtent();
                    var projectedExtent = sourceProj.getWorldExtent();
                    var scale = getHeight(projectedExtent) / getHeight(pixelExtent);
                    compose(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
                    transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);
                    return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);
                }
                : getTransform(sourceProj, destination);
            this.applyTransform(transformFn);
            return this;
        };
        return Geometry;
    }(BaseObject));

    var __extends$9 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Abstract base class; only used for creating subclasses; do not instantiate
     * in apps, as cannot be rendered.
     *
     * @abstract
     * @api
     */
    var SimpleGeometry = /** @class */ (function (_super) {
        __extends$9(SimpleGeometry, _super);
        function SimpleGeometry() {
            var _this = _super.call(this) || this;
            /**
             * @protected
             * @type {import("./GeometryLayout.js").default}
             */
            _this.layout = GeometryLayout.XY;
            /**
             * @protected
             * @type {number}
             */
            _this.stride = 2;
            /**
             * @protected
             * @type {Array<number>}
             */
            _this.flatCoordinates = null;
            return _this;
        }
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        SimpleGeometry.prototype.computeExtent = function (extent) {
            return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
        };
        /**
         * @abstract
         * @return {Array<*>} Coordinates.
         */
        SimpleGeometry.prototype.getCoordinates = function () {
            return abstract();
        };
        /**
         * Return the first coordinate of the geometry.
         * @return {import("../coordinate.js").Coordinate} First coordinate.
         * @api
         */
        SimpleGeometry.prototype.getFirstCoordinate = function () {
            return this.flatCoordinates.slice(0, this.stride);
        };
        /**
         * @return {Array<number>} Flat coordinates.
         */
        SimpleGeometry.prototype.getFlatCoordinates = function () {
            return this.flatCoordinates;
        };
        /**
         * Return the last coordinate of the geometry.
         * @return {import("../coordinate.js").Coordinate} Last point.
         * @api
         */
        SimpleGeometry.prototype.getLastCoordinate = function () {
            return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
        };
        /**
         * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
         * @return {import("./GeometryLayout.js").default} Layout.
         * @api
         */
        SimpleGeometry.prototype.getLayout = function () {
            return this.layout;
        };
        /**
         * Create a simplified version of this geometry using the Douglas Peucker algorithm.
         * @param {number} squaredTolerance Squared tolerance.
         * @return {SimpleGeometry} Simplified geometry.
         */
        SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {
            if (this.simplifiedGeometryRevision !== this.getRevision()) {
                this.simplifiedGeometryMaxMinSquaredTolerance = 0;
                this.simplifiedGeometryRevision = this.getRevision();
            }
            // If squaredTolerance is negative or if we know that simplification will not
            // have any effect then just return this.
            if (squaredTolerance < 0 ||
                (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
                    squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
                return this;
            }
            var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);
            var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
            if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
                return simplifiedGeometry;
            }
            else {
                // Simplification did not actually remove any coordinates.  We now know
                // that any calls to getSimplifiedGeometry with a squaredTolerance less
                // than or equal to the current squaredTolerance will also not have any
                // effect.  This allows us to short circuit simplification (saving CPU
                // cycles) and prevents the cache of simplified geometries from filling
                // up with useless identical copies of this geometry (saving memory).
                this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
                return this;
            }
        };
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {SimpleGeometry} Simplified geometry.
         * @protected
         */
        SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
            return this;
        };
        /**
         * @return {number} Stride.
         */
        SimpleGeometry.prototype.getStride = function () {
            return this.stride;
        };
        /**
         * @param {import("./GeometryLayout.js").default} layout Layout.
         * @param {Array<number>} flatCoordinates Flat coordinates.
         */
        SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {
            this.stride = getStrideForLayout(layout);
            this.layout = layout;
            this.flatCoordinates = flatCoordinates;
        };
        /**
         * @abstract
         * @param {!Array<*>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {
            abstract();
        };
        /**
         * @param {import("./GeometryLayout.js").default|undefined} layout Layout.
         * @param {Array<*>} coordinates Coordinates.
         * @param {number} nesting Nesting.
         * @protected
         */
        SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {
            /** @type {number} */
            var stride;
            if (layout) {
                stride = getStrideForLayout(layout);
            }
            else {
                for (var i = 0; i < nesting; ++i) {
                    if (coordinates.length === 0) {
                        this.layout = GeometryLayout.XY;
                        this.stride = 2;
                        return;
                    }
                    else {
                        coordinates = /** @type {Array} */ (coordinates[0]);
                    }
                }
                stride = coordinates.length;
                layout = getLayoutForStride(stride);
            }
            this.layout = layout;
            this.stride = stride;
        };
        /**
         * Apply a transform function to the coordinates of the geometry.
         * The geometry is modified in place.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         * @param {import("../proj.js").TransformFunction} transformFn Transform function.
         * Called with a flat array of geometry coordinates.
         * @api
         */
        SimpleGeometry.prototype.applyTransform = function (transformFn) {
            if (this.flatCoordinates) {
                transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
                this.changed();
            }
        };
        /**
         * Rotate the geometry around a given coordinate. This modifies the geometry
         * coordinates in place.
         * @param {number} angle Rotation angle in counter-clockwise radians.
         * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
         * @api
         */
        SimpleGeometry.prototype.rotate = function (angle, anchor) {
            var flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                var stride = this.getStride();
                rotate$1(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);
                this.changed();
            }
        };
        /**
         * Scale the geometry (with an optional origin).  This modifies the geometry
         * coordinates in place.
         * @param {number} sx The scaling factor in the x-direction.
         * @param {number=} opt_sy The scaling factor in the y-direction (defaults to sx).
         * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
         *     of the geometry extent).
         * @api
         */
        SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {
            var sy = opt_sy;
            if (sy === undefined) {
                sy = sx;
            }
            var anchor = opt_anchor;
            if (!anchor) {
                anchor = getCenter(this.getExtent());
            }
            var flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                var stride = this.getStride();
                scale$1(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);
                this.changed();
            }
        };
        /**
         * Translate the geometry.  This modifies the geometry coordinates in place.  If
         * instead you want a new geometry, first `clone()` this geometry.
         * @param {number} deltaX Delta X.
         * @param {number} deltaY Delta Y.
         * @api
         */
        SimpleGeometry.prototype.translate = function (deltaX, deltaY) {
            var flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                var stride = this.getStride();
                translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);
                this.changed();
            }
        };
        return SimpleGeometry;
    }(Geometry));
    /**
     * @param {number} stride Stride.
     * @return {import("./GeometryLayout.js").default} layout Layout.
     */
    function getLayoutForStride(stride) {
        var layout;
        if (stride == 2) {
            layout = GeometryLayout.XY;
        }
        else if (stride == 3) {
            layout = GeometryLayout.XYZ;
        }
        else if (stride == 4) {
            layout = GeometryLayout.XYZM;
        }
        return /** @type {import("./GeometryLayout.js").default} */ (layout);
    }
    /**
     * @param {import("./GeometryLayout.js").default} layout Layout.
     * @return {number} Stride.
     */
    function getStrideForLayout(layout) {
        var stride;
        if (layout == GeometryLayout.XY) {
            stride = 2;
        }
        else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {
            stride = 3;
        }
        else if (layout == GeometryLayout.XYZM) {
            stride = 4;
        }
        return /** @type {number} */ (stride);
    }
    /**
     * @param {SimpleGeometry} simpleGeometry Simple geometry.
     * @param {import("../transform.js").Transform} transform Transform.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed flat coordinates.
     */
    function transformGeom2D(simpleGeometry, transform, opt_dest) {
        var flatCoordinates = simpleGeometry.getFlatCoordinates();
        if (!flatCoordinates) {
            return null;
        }
        else {
            var stride = simpleGeometry.getStride();
            return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);
        }
    }

    /**
     * @module ol/geom/flat/closest
     */
    /**
     * Returns the point on the 2D line segment flatCoordinates[offset1] to
     * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
     * dimensions are linearly interpolated.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset1 Offset 1.
     * @param {number} offset2 Offset 2.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     */
    function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
        var x1 = flatCoordinates[offset1];
        var y1 = flatCoordinates[offset1 + 1];
        var dx = flatCoordinates[offset2] - x1;
        var dy = flatCoordinates[offset2 + 1] - y1;
        var offset;
        if (dx === 0 && dy === 0) {
            offset = offset1;
        }
        else {
            var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
            if (t > 1) {
                offset = offset2;
            }
            else if (t > 0) {
                for (var i = 0; i < stride; ++i) {
                    closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);
                }
                closestPoint.length = stride;
                return;
            }
            else {
                offset = offset1;
            }
        }
        for (var i = 0; i < stride; ++i) {
            closestPoint[i] = flatCoordinates[offset + i];
        }
        closestPoint.length = stride;
    }
    /**
     * Return the squared of the largest distance between any pair of consecutive
     * coordinates.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} max Max squared delta.
     * @return {number} Max squared delta.
     */
    function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
        var x1 = flatCoordinates[offset];
        var y1 = flatCoordinates[offset + 1];
        for (offset += stride; offset < end; offset += stride) {
            var x2 = flatCoordinates[offset];
            var y2 = flatCoordinates[offset + 1];
            var squaredDelta = squaredDistance(x1, y1, x2, y2);
            if (squaredDelta > max) {
                max = squaredDelta;
            }
            x1 = x2;
            y1 = y2;
        }
        return max;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} max Max squared delta.
     * @return {number} Max squared delta.
     */
    function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);
            offset = end;
        }
        return max;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} maxDelta Max delta.
     * @param {boolean} isRing Is ring.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @param {Array<number>=} opt_tmpPoint Temporary point object.
     * @return {number} Minimum squared distance.
     */
    function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
        if (offset == end) {
            return minSquaredDistance;
        }
        var i, squaredDistance$1;
        if (maxDelta === 0) {
            // All points are identical, so just test the first point.
            squaredDistance$1 = squaredDistance(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
            if (squaredDistance$1 < minSquaredDistance) {
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = flatCoordinates[offset + i];
                }
                closestPoint.length = stride;
                return squaredDistance$1;
            }
            else {
                return minSquaredDistance;
            }
        }
        var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
        var index = offset + stride;
        while (index < end) {
            assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
            squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
            if (squaredDistance$1 < minSquaredDistance) {
                minSquaredDistance = squaredDistance$1;
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = tmpPoint[i];
                }
                closestPoint.length = stride;
                index += stride;
            }
            else {
                // Skip ahead multiple points, because we know that all the skipped
                // points cannot be any closer than the closest point we have found so
                // far.  We know this because we know how close the current point is, how
                // close the closest point we have found so far is, and the maximum
                // distance between consecutive points.  For example, if we're currently
                // at distance 10, the best we've found so far is 3, and that the maximum
                // distance between consecutive points is 2, then we'll need to skip at
                // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
                // finding a closer point.  We use Math.max(..., 1) to ensure that we
                // always advance at least one point, to avoid an infinite loop.
                index +=
                    stride *
                        Math.max(((Math.sqrt(squaredDistance$1) - Math.sqrt(minSquaredDistance)) /
                            maxDelta) |
                            0, 1);
            }
        }
        if (isRing) {
            // Check the closing segment.
            assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
            squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
            if (squaredDistance$1 < minSquaredDistance) {
                minSquaredDistance = squaredDistance$1;
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = tmpPoint[i];
                }
                closestPoint.length = stride;
            }
        }
        return minSquaredDistance;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} maxDelta Max delta.
     * @param {boolean} isRing Is ring.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @param {Array<number>=} opt_tmpPoint Temporary point object.
     * @return {number} Minimum squared distance.
     */
    function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
        var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
            offset = end;
        }
        return minSquaredDistance;
    }

    /**
     * @module ol/geom/flat/deflate
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} stride Stride.
     * @return {number} offset Offset.
     */
    function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
        for (var i = 0, ii = coordinate.length; i < ii; ++i) {
            flatCoordinates[offset++] = coordinate[i];
        }
        return offset;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {number} stride Stride.
     * @return {number} offset Offset.
     */
    function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
        for (var i = 0, ii = coordinates.length; i < ii; ++i) {
            var coordinate = coordinates[i];
            for (var j = 0; j < stride; ++j) {
                flatCoordinates[offset++] = coordinate[j];
            }
        }
        return offset;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
     * @param {number} stride Stride.
     * @param {Array<number>=} opt_ends Ends.
     * @return {Array<number>} Ends.
     */
    function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
        var ends = opt_ends ? opt_ends : [];
        var i = 0;
        for (var j = 0, jj = coordinatess.length; j < jj; ++j) {
            var end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);
            ends[i++] = end;
            offset = end;
        }
        ends.length = i;
        return ends;
    }

    /**
     * @module ol/geom/flat/simplify
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @return {number} Simplified offset.
     */
    function douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
        var n = (end - offset) / stride;
        if (n < 3) {
            for (; offset < end; offset += stride) {
                simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + 1];
            }
            return simplifiedOffset;
        }
        /** @type {Array<number>} */
        var markers = new Array(n);
        markers[0] = 1;
        markers[n - 1] = 1;
        /** @type {Array<number>} */
        var stack = [offset, end - stride];
        var index = 0;
        while (stack.length > 0) {
            var last = stack.pop();
            var first = stack.pop();
            var maxSquaredDistance = 0;
            var x1 = flatCoordinates[first];
            var y1 = flatCoordinates[first + 1];
            var x2 = flatCoordinates[last];
            var y2 = flatCoordinates[last + 1];
            for (var i = first + stride; i < last; i += stride) {
                var x = flatCoordinates[i];
                var y = flatCoordinates[i + 1];
                var squaredDistance_1 = squaredSegmentDistance(x, y, x1, y1, x2, y2);
                if (squaredDistance_1 > maxSquaredDistance) {
                    index = i;
                    maxSquaredDistance = squaredDistance_1;
                }
            }
            if (maxSquaredDistance > squaredTolerance) {
                markers[(index - offset) / stride] = 1;
                if (first + stride < index) {
                    stack.push(first, index);
                }
                if (index + stride < last) {
                    stack.push(index, last);
                }
            }
        }
        for (var i = 0; i < n; ++i) {
            if (markers[i]) {
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + i * stride];
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + i * stride + 1];
            }
        }
        return simplifiedOffset;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @param {Array<number>} simplifiedEnds Simplified ends.
     * @return {number} Simplified offset.
     */
    function douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            simplifiedOffset = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);
            simplifiedEnds.push(simplifiedOffset);
            offset = end;
        }
        return simplifiedOffset;
    }
    /**
     * @param {number} value Value.
     * @param {number} tolerance Tolerance.
     * @return {number} Rounded value.
     */
    function snap(value, tolerance) {
        return tolerance * Math.round(value / tolerance);
    }
    /**
     * Simplifies a line string using an algorithm designed by Tim Schaub.
     * Coordinates are snapped to the nearest value in a virtual grid and
     * consecutive duplicate coordinates are discarded.  This effectively preserves
     * topology as the simplification of any subsection of a line string is
     * independent of the rest of the line string.  This means that, for examples,
     * the common edge between two polygons will be simplified to the same line
     * string independently in both polygons.  This implementation uses a single
     * pass over the coordinates and eliminates intermediate collinear points.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} tolerance Tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @return {number} Simplified offset.
     */
    function quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
        // do nothing if the line is empty
        if (offset == end) {
            return simplifiedOffset;
        }
        // snap the first coordinate (P1)
        var x1 = snap(flatCoordinates[offset], tolerance);
        var y1 = snap(flatCoordinates[offset + 1], tolerance);
        offset += stride;
        // add the first coordinate to the output
        simplifiedFlatCoordinates[simplifiedOffset++] = x1;
        simplifiedFlatCoordinates[simplifiedOffset++] = y1;
        // find the next coordinate that does not snap to the same value as the first
        // coordinate (P2)
        var x2, y2;
        do {
            x2 = snap(flatCoordinates[offset], tolerance);
            y2 = snap(flatCoordinates[offset + 1], tolerance);
            offset += stride;
            if (offset == end) {
                // all coordinates snap to the same value, the line collapses to a point
                // push the last snapped value anyway to ensure that the output contains
                // at least two points
                // FIXME should we really return at least two points anyway?
                simplifiedFlatCoordinates[simplifiedOffset++] = x2;
                simplifiedFlatCoordinates[simplifiedOffset++] = y2;
                return simplifiedOffset;
            }
        } while (x2 == x1 && y2 == y1);
        while (offset < end) {
            // snap the next coordinate (P3)
            var x3 = snap(flatCoordinates[offset], tolerance);
            var y3 = snap(flatCoordinates[offset + 1], tolerance);
            offset += stride;
            // skip P3 if it is equal to P2
            if (x3 == x2 && y3 == y2) {
                continue;
            }
            // calculate the delta between P1 and P2
            var dx1 = x2 - x1;
            var dy1 = y2 - y1;
            // calculate the delta between P3 and P1
            var dx2 = x3 - x1;
            var dy2 = y3 - y1;
            // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
            // P1 in the same direction then P2 is on the straight line between P1 and
            // P3
            if (dx1 * dy2 == dy1 * dx2 &&
                ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
                ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
                // discard P2 and set P2 = P3
                x2 = x3;
                y2 = y3;
                continue;
            }
            // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
            // between P3 and P1 or on the opposite half of the line to P2.  add P2,
            // and continue with P1 = P2 and P2 = P3
            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
            x1 = x2;
            y1 = y2;
            x2 = x3;
            y2 = y3;
        }
        // add the last point (P2)
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        return simplifiedOffset;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} tolerance Tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @param {Array<number>} simplifiedEnds Simplified ends.
     * @return {number} Simplified offset.
     */
    function quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);
            simplifiedEnds.push(simplifiedOffset);
            offset = end;
        }
        return simplifiedOffset;
    }

    /**
     * @module ol/geom/flat/inflate
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {Array<import("../../coordinate.js").Coordinate>=} opt_coordinates Coordinates.
     * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
     */
    function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
        var coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            coordinates[i++] = flatCoordinates.slice(j, j + stride);
        }
        coordinates.length = i;
        return coordinates;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<Array<import("../../coordinate.js").Coordinate>>=} opt_coordinatess Coordinatess.
     * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
     */
    function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
        var coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
        var i = 0;
        for (var j = 0, jj = ends.length; j < jj; ++j) {
            var end = ends[j];
            coordinatess[i++] = inflateCoordinates(flatCoordinates, offset, end, stride, coordinatess[i]);
            offset = end;
        }
        coordinatess.length = i;
        return coordinatess;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>=} opt_coordinatesss
     *     Coordinatesss.
     * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
     */
    function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
        var coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
        var i = 0;
        for (var j = 0, jj = endss.length; j < jj; ++j) {
            var ends = endss[j];
            coordinatesss[i++] = inflateCoordinatesArray(flatCoordinates, offset, ends, stride, coordinatesss[i]);
            offset = ends[ends.length - 1];
        }
        coordinatesss.length = i;
        return coordinatesss;
    }

    /**
     * @module ol/geom/flat/area
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {number} Area.
     */
    function linearRing(flatCoordinates, offset, end, stride) {
        var twiceArea = 0;
        var x1 = flatCoordinates[end - stride];
        var y1 = flatCoordinates[end - stride + 1];
        for (; offset < end; offset += stride) {
            var x2 = flatCoordinates[offset];
            var y2 = flatCoordinates[offset + 1];
            twiceArea += y1 * x2 - x1 * y2;
            x1 = x2;
            y1 = y2;
        }
        return twiceArea / 2;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @return {number} Area.
     */
    function linearRings(flatCoordinates, offset, ends, stride) {
        var area = 0;
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            area += linearRing(flatCoordinates, offset, end, stride);
            offset = end;
        }
        return area;
    }

    var __extends$a = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Linear ring geometry. Only used as part of polygon; cannot be rendered
     * on its own.
     *
     * @api
     */
    var LinearRing = /** @class */ (function (_super) {
        __extends$a(LinearRing, _super);
        /**
         * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
         *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        function LinearRing(coordinates, opt_layout) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {number}
             */
            _this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.maxDeltaRevision_ = -1;
            if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
                _this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
            }
            else {
                _this.setCoordinates(
                /** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
            }
            return _this;
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!LinearRing} Clone.
         * @api
         */
        LinearRing.prototype.clone = function () {
            return new LinearRing(this.flatCoordinates.slice(), this.layout);
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        LinearRing.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
        };
        /**
         * Return the area of the linear ring on projected plane.
         * @return {number} Area (on projected plane).
         * @api
         */
        LinearRing.prototype.getArea = function () {
            return linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        };
        /**
         * Return the coordinates of the linear ring.
         * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
         * @api
         */
        LinearRing.prototype.getCoordinates = function () {
            return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        };
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {LinearRing} Simplified LinearRing.
         * @protected
         */
        LinearRing.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
            var simplifiedFlatCoordinates = [];
            simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
            return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);
        };
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        LinearRing.prototype.getType = function () {
            return GeometryType.LINEAR_RING;
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        LinearRing.prototype.intersectsExtent = function (extent) {
            return false;
        };
        /**
         * Set the coordinates of the linear ring.
         * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        LinearRing.prototype.setCoordinates = function (coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 1);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        };
        return LinearRing;
    }(SimpleGeometry));

    var __extends$b = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Point geometry.
     *
     * @api
     */
    var Point = /** @class */ (function (_super) {
        __extends$b(Point, _super);
        /**
         * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        function Point(coordinates, opt_layout) {
            var _this = _super.call(this) || this;
            _this.setCoordinates(coordinates, opt_layout);
            return _this;
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!Point} Clone.
         * @api
         */
        Point.prototype.clone = function () {
            var point = new Point(this.flatCoordinates.slice(), this.layout);
            point.applyProperties(this);
            return point;
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        Point.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            var flatCoordinates = this.flatCoordinates;
            var squaredDistance$1 = squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
            if (squaredDistance$1 < minSquaredDistance) {
                var stride = this.stride;
                for (var i = 0; i < stride; ++i) {
                    closestPoint[i] = flatCoordinates[i];
                }
                closestPoint.length = stride;
                return squaredDistance$1;
            }
            else {
                return minSquaredDistance;
            }
        };
        /**
         * Return the coordinate of the point.
         * @return {import("../coordinate.js").Coordinate} Coordinates.
         * @api
         */
        Point.prototype.getCoordinates = function () {
            return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
        };
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        Point.prototype.computeExtent = function (extent) {
            return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
        };
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        Point.prototype.getType = function () {
            return GeometryType.POINT;
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        Point.prototype.intersectsExtent = function (extent) {
            return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
        };
        /**
         * @param {!Array<*>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        Point.prototype.setCoordinates = function (coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 0);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        };
        return Point;
    }(SimpleGeometry));

    /**
     * @module ol/geom/flat/contains
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} Contains extent.
     */
    function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
        var outside = forEachCorner(extent, 
        /**
         * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
         * @return {boolean} Contains (x, y).
         */
        function (coordinate) {
            return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
        });
        return !outside;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
        // http://geomalgorithms.com/a03-_inclusion.html
        // Copyright 2000 softSurfer, 2012 Dan Sunday
        // This code may be freely used and modified for any purpose
        // providing that this copyright notice is included with it.
        // SoftSurfer makes no warranty for this code, and cannot be held
        // liable for any real or imagined damage resulting from its use.
        // Users of this code must verify correctness for their application.
        var wn = 0;
        var x1 = flatCoordinates[end - stride];
        var y1 = flatCoordinates[end - stride + 1];
        for (; offset < end; offset += stride) {
            var x2 = flatCoordinates[offset];
            var y2 = flatCoordinates[offset + 1];
            if (y1 <= y) {
                if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {
                    wn++;
                }
            }
            else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {
                wn--;
            }
            x1 = x2;
            y1 = y2;
        }
        return wn !== 0;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
        if (ends.length === 0) {
            return false;
        }
        if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
            return false;
        }
        for (var i = 1, ii = ends.length; i < ii; ++i) {
            if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
                return false;
            }
        }
        return true;
    }

    /**
     * @module ol/geom/flat/interiorpoint
     */
    /**
     * Calculates a point that is likely to lie in the interior of the linear rings.
     * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} flatCenters Flat centers.
     * @param {number} flatCentersOffset Flat center offset.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Destination point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     */
    function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {
        var i, ii, x, x1, x2, y1, y2;
        var y = flatCenters[flatCentersOffset + 1];
        /** @type {Array<number>} */
        var intersections = [];
        // Calculate intersections with the horizontal line
        for (var r = 0, rr = ends.length; r < rr; ++r) {
            var end = ends[r];
            x1 = flatCoordinates[end - stride];
            y1 = flatCoordinates[end - stride + 1];
            for (i = offset; i < end; i += stride) {
                x2 = flatCoordinates[i];
                y2 = flatCoordinates[i + 1];
                if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
                    x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;
                    intersections.push(x);
                }
                x1 = x2;
                y1 = y2;
            }
        }
        // Find the longest segment of the horizontal line that has its center point
        // inside the linear ring.
        var pointX = NaN;
        var maxSegmentLength = -Infinity;
        intersections.sort(numberSafeCompareFunction);
        x1 = intersections[0];
        for (i = 1, ii = intersections.length; i < ii; ++i) {
            x2 = intersections[i];
            var segmentLength = Math.abs(x2 - x1);
            if (segmentLength > maxSegmentLength) {
                x = (x1 + x2) / 2;
                if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
                    pointX = x;
                    maxSegmentLength = segmentLength;
                }
            }
            x1 = x2;
        }
        if (isNaN(pointX)) {
            // There is no horizontal line that has its center point inside the linear
            // ring.  Use the center of the the linear ring's extent.
            pointX = flatCenters[flatCentersOffset];
        }
        if (opt_dest) {
            opt_dest.push(pointX, y, maxSegmentLength);
            return opt_dest;
        }
        else {
            return [pointX, y, maxSegmentLength];
        }
    }

    /**
     * @module ol/geom/flat/segments
     */
    /**
     * This function calls `callback` for each segment of the flat coordinates
     * array. If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
     *     called for each segment.
     * @return {T|boolean} Value.
     * @template T
     */
    function forEach(flatCoordinates, offset, end, stride, callback) {
        var point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
        var point2 = [];
        var ret;
        for (; offset + stride < end; offset += stride) {
            point2[0] = flatCoordinates[offset + stride];
            point2[1] = flatCoordinates[offset + stride + 1];
            ret = callback(point1, point2);
            if (ret) {
                return ret;
            }
            point1[0] = point2[0];
            point1[1] = point2[1];
        }
        return false;
    }

    /**
     * @module ol/geom/flat/intersectsextent
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
        var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);
        if (!intersects(extent, coordinatesExtent)) {
            return false;
        }
        if (containsExtent(extent, coordinatesExtent)) {
            return true;
        }
        if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {
            return true;
        }
        if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {
            return true;
        }
        return forEach(flatCoordinates, offset, end, stride, 
        /**
         * @param {import("../../coordinate.js").Coordinate} point1 Start point.
         * @param {import("../../coordinate.js").Coordinate} point2 End point.
         * @return {boolean} `true` if the segment and the extent intersect,
         *     `false` otherwise.
         */
        function (point1, point2) {
            return intersectsSegment(extent, point1, point2);
        });
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {
                return true;
            }
            offset = ends[i];
        }
        return false;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
        if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {
            return true;
        }
        if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
            return true;
        }
        if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
            return true;
        }
        if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
            return true;
        }
        if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
            return true;
        }
        return false;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
        if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
            return false;
        }
        if (ends.length === 1) {
            return true;
        }
        for (var i = 1, ii = ends.length; i < ii; ++i) {
            if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
                if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * @module ol/geom/flat/reverse
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    function coordinates(flatCoordinates, offset, end, stride) {
        while (offset < end - stride) {
            for (var i = 0; i < stride; ++i) {
                var tmp = flatCoordinates[offset + i];
                flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
                flatCoordinates[end - stride + i] = tmp;
            }
            offset += stride;
            end -= stride;
        }
    }

    /**
     * @module ol/geom/flat/orient
     */
    /**
     * Is the linear ring oriented clockwise in a coordinate system with a bottom-left
     * coordinate origin? For a coordinate system with a top-left coordinate origin,
     * the ring's orientation is clockwise when this function returns false.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {boolean} Is clockwise.
     */
    function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
        // http://tinyurl.com/clockwise-method
        // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp
        var edge = 0;
        var x1 = flatCoordinates[end - stride];
        var y1 = flatCoordinates[end - stride + 1];
        for (; offset < end; offset += stride) {
            var x2 = flatCoordinates[offset];
            var y2 = flatCoordinates[offset + 1];
            edge += (x2 - x1) * (y2 + y1);
            x1 = x2;
            y1 = y2;
        }
        return edge === 0 ? undefined : edge > 0;
    }
    /**
     * Determines if linear rings are oriented.  By default, left-hand orientation
     * is tested (first ring must be clockwise, remaining rings counter-clockwise).
     * To test for right-hand orientation, use the `opt_right` argument.
     *
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Array of end indexes.
     * @param {number} stride Stride.
     * @param {boolean=} opt_right Test for right-hand orientation
     *     (counter-clockwise exterior ring and clockwise interior rings).
     * @return {boolean} Rings are correctly oriented.
     */
    function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {
        var right = opt_right !== undefined ? opt_right : false;
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
            if (i === 0) {
                if ((right && isClockwise) || (!right && !isClockwise)) {
                    return false;
                }
            }
            else {
                if ((right && !isClockwise) || (!right && isClockwise)) {
                    return false;
                }
            }
            offset = end;
        }
        return true;
    }
    /**
     * Orient coordinates in a flat array of linear rings.  By default, rings
     * are oriented following the left-hand rule (clockwise for exterior and
     * counter-clockwise for interior rings).  To orient according to the
     * right-hand rule, use the `opt_right` argument.
     *
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {boolean=} opt_right Follow the right-hand rule for orientation.
     * @return {number} End.
     */
    function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
        var right = opt_right !== undefined ? opt_right : false;
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
            var reverse = i === 0
                ? (right && isClockwise) || (!right && !isClockwise)
                : (right && !isClockwise) || (!right && isClockwise);
            if (reverse) {
                coordinates(flatCoordinates, offset, end, stride);
            }
            offset = end;
        }
        return offset;
    }

    var __extends$c = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Polygon geometry.
     *
     * @api
     */
    var Polygon = /** @class */ (function (_super) {
        __extends$c(Polygon, _super);
        /**
         * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
         *     Array of linear rings that define the polygon. The first linear ring of the
         *     array defines the outer-boundary or surface of the polygon. Each subsequent
         *     linear ring defines a hole in the surface of the polygon. A linear ring is
         *     an array of vertices' coordinates where the first coordinate and the last are
         *     equivalent. (For internal use, flat coordinates in combination with
         *     `opt_layout` and `opt_ends` are also accepted.)
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).
         */
        function Polygon(coordinates, opt_layout, opt_ends) {
            var _this = _super.call(this) || this;
            /**
             * @type {Array<number>}
             * @private
             */
            _this.ends_ = [];
            /**
             * @private
             * @type {number}
             */
            _this.flatInteriorPointRevision_ = -1;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            _this.flatInteriorPoint_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.maxDeltaRevision_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.orientedRevision_ = -1;
            /**
             * @private
             * @type {Array<number>}
             */
            _this.orientedFlatCoordinates_ = null;
            if (opt_layout !== undefined && opt_ends) {
                _this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
                _this.ends_ = opt_ends;
            }
            else {
                _this.setCoordinates(
                /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
            }
            return _this;
        }
        /**
         * Append the passed linear ring to this polygon.
         * @param {LinearRing} linearRing Linear ring.
         * @api
         */
        Polygon.prototype.appendLinearRing = function (linearRing) {
            if (!this.flatCoordinates) {
                this.flatCoordinates = linearRing.getFlatCoordinates().slice();
            }
            else {
                extend(this.flatCoordinates, linearRing.getFlatCoordinates());
            }
            this.ends_.push(this.flatCoordinates.length);
            this.changed();
        };
        /**
         * Make a complete copy of the geometry.
         * @return {!Polygon} Clone.
         * @api
         */
        Polygon.prototype.clone = function () {
            var polygon = new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
            polygon.applyProperties(this);
            return polygon;
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        Polygon.prototype.containsXY = function (x, y) {
            return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
        };
        /**
         * Return the area of the polygon on projected plane.
         * @return {number} Area (on projected plane).
         * @api
         */
        Polygon.prototype.getArea = function () {
            return linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
        };
        /**
         * Get the coordinate array for this geometry.  This array has the structure
         * of a GeoJSON coordinate array for polygons.
         *
         * @param {boolean=} opt_right Orient coordinates according to the right-hand
         *     rule (counter-clockwise for exterior and clockwise for interior rings).
         *     If `false`, coordinates will be oriented according to the left-hand rule
         *     (clockwise for exterior and counter-clockwise for interior rings).
         *     By default, coordinate orientation will depend on how the geometry was
         *     constructed.
         * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
         * @api
         */
        Polygon.prototype.getCoordinates = function (opt_right) {
            var flatCoordinates;
            if (opt_right !== undefined) {
                flatCoordinates = this.getOrientedFlatCoordinates().slice();
                orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);
            }
            else {
                flatCoordinates = this.flatCoordinates;
            }
            return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);
        };
        /**
         * @return {Array<number>} Ends.
         */
        Polygon.prototype.getEnds = function () {
            return this.ends_;
        };
        /**
         * @return {Array<number>} Interior point.
         */
        Polygon.prototype.getFlatInteriorPoint = function () {
            if (this.flatInteriorPointRevision_ != this.getRevision()) {
                var flatCenter = getCenter(this.getExtent());
                this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);
                this.flatInteriorPointRevision_ = this.getRevision();
            }
            return this.flatInteriorPoint_;
        };
        /**
         * Return an interior point of the polygon.
         * @return {Point} Interior point as XYM coordinate, where M is the
         * length of the horizontal intersection that the point belongs to.
         * @api
         */
        Polygon.prototype.getInteriorPoint = function () {
            return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);
        };
        /**
         * Return the number of rings of the polygon,  this includes the exterior
         * ring and any interior rings.
         *
         * @return {number} Number of rings.
         * @api
         */
        Polygon.prototype.getLinearRingCount = function () {
            return this.ends_.length;
        };
        /**
         * Return the Nth linear ring of the polygon geometry. Return `null` if the
         * given index is out of range.
         * The exterior linear ring is available at index `0` and the interior rings
         * at index `1` and beyond.
         *
         * @param {number} index Index.
         * @return {LinearRing} Linear ring.
         * @api
         */
        Polygon.prototype.getLinearRing = function (index) {
            if (index < 0 || this.ends_.length <= index) {
                return null;
            }
            return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
        };
        /**
         * Return the linear rings of the polygon.
         * @return {Array<LinearRing>} Linear rings.
         * @api
         */
        Polygon.prototype.getLinearRings = function () {
            var layout = this.layout;
            var flatCoordinates = this.flatCoordinates;
            var ends = this.ends_;
            var linearRings = [];
            var offset = 0;
            for (var i = 0, ii = ends.length; i < ii; ++i) {
                var end = ends[i];
                var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);
                linearRings.push(linearRing);
                offset = end;
            }
            return linearRings;
        };
        /**
         * @return {Array<number>} Oriented flat coordinates.
         */
        Polygon.prototype.getOrientedFlatCoordinates = function () {
            if (this.orientedRevision_ != this.getRevision()) {
                var flatCoordinates = this.flatCoordinates;
                if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {
                    this.orientedFlatCoordinates_ = flatCoordinates;
                }
                else {
                    this.orientedFlatCoordinates_ = flatCoordinates.slice();
                    this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
                }
                this.orientedRevision_ = this.getRevision();
            }
            return this.orientedFlatCoordinates_;
        };
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {Polygon} Simplified Polygon.
         * @protected
         */
        Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
            var simplifiedFlatCoordinates = [];
            var simplifiedEnds = [];
            simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
            return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
        };
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        Polygon.prototype.getType = function () {
            return GeometryType.POLYGON;
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        Polygon.prototype.intersectsExtent = function (extent) {
            return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
        };
        /**
         * Set the coordinates of the polygon.
         * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 2);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
            this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
            this.changed();
        };
        return Polygon;
    }(SimpleGeometry));
    /**
     * Create an approximation of a circle on the surface of a sphere.
     * @param {import("../coordinate.js").Coordinate} center Center (`[lon, lat]` in degrees).
     * @param {number} radius The great-circle distance from the center to
     *     the polygon vertices.
     * @param {number=} opt_n Optional number of vertices for the resulting
     *     polygon. Default is `32`.
     * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to
     *     the Earth's mean radius using the WGS84 ellipsoid).
     * @return {Polygon} The "circular" polygon.
     * @api
     */
    function circular(center, radius, opt_n, opt_sphereRadius) {
        var n = opt_n ? opt_n : 32;
        /** @type {Array<number>} */
        var flatCoordinates = [];
        for (var i = 0; i < n; ++i) {
            extend(flatCoordinates, offset(center, radius, (2 * Math.PI * i) / n, opt_sphereRadius));
        }
        flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
        return new Polygon(flatCoordinates, GeometryLayout.XY, [
            flatCoordinates.length,
        ]);
    }
    /**
     * Create a polygon from an extent. The layout used is `XY`.
     * @param {import("../extent.js").Extent} extent The extent.
     * @return {Polygon} The polygon.
     * @api
     */
    function fromExtent(extent) {
        var minX = extent[0];
        var minY = extent[1];
        var maxX = extent[2];
        var maxY = extent[3];
        var flatCoordinates = [
            minX,
            minY,
            minX,
            maxY,
            maxX,
            maxY,
            maxX,
            minY,
            minX,
            minY,
        ];
        return new Polygon(flatCoordinates, GeometryLayout.XY, [
            flatCoordinates.length,
        ]);
    }

    var __extends$d = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @enum {string}
     */
    var Property$1 = {
        ACCURACY: 'accuracy',
        ACCURACY_GEOMETRY: 'accuracyGeometry',
        ALTITUDE: 'altitude',
        ALTITUDE_ACCURACY: 'altitudeAccuracy',
        HEADING: 'heading',
        POSITION: 'position',
        PROJECTION: 'projection',
        SPEED: 'speed',
        TRACKING: 'tracking',
        TRACKING_OPTIONS: 'trackingOptions',
    };
    /**
     * @classdesc
     * Events emitted on Geolocation error.
     */
    var GeolocationError = /** @class */ (function (_super) {
        __extends$d(GeolocationError, _super);
        /**
         * @param {GeolocationPositionError} error error object.
         */
        function GeolocationError(error) {
            var _this = _super.call(this, EventType.ERROR) || this;
            /**
             * @type {number}
             */
            _this.code = error.code;
            /**
             * @type {string}
             */
            _this.message = error.message;
            return _this;
        }
        return GeolocationError;
    }(BaseEvent));
    /**
     * @typedef {Object} Options
     * @property {boolean} [tracking=false] Start Tracking right after
     * instantiation.
     * @property {PositionOptions} [trackingOptions] Tracking options.
     * See http://www.w3.org/TR/geolocation-API/#position_options_interface.
     * @property {import("./proj.js").ProjectionLike} [projection] The projection the position
     * is reported in.
     */
    /**
     * @classdesc
     * Helper class for providing HTML5 Geolocation capabilities.
     * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)
     * is used to locate a user's position.
     *
     * To get notified of position changes, register a listener for the generic
     * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.
     *
     * Example:
     *
     *     var geolocation = new Geolocation({
     *       // take the projection to use from the map's view
     *       projection: view.getProjection()
     *     });
     *     // listen to changes in position
     *     geolocation.on('change', function(evt) {
     *       window.console.log(geolocation.getPosition());
     *     });
     *
     * @fires module:ol/events/Event~BaseEvent#event:error
     * @api
     */
    var Geolocation = /** @class */ (function (_super) {
        __extends$d(Geolocation, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function Geolocation(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options || {};
            /**
             * The unprojected (EPSG:4326) device position.
             * @private
             * @type {?import("./coordinate.js").Coordinate}
             */
            _this.position_ = null;
            /**
             * @private
             * @type {import("./proj.js").TransformFunction}
             */
            _this.transform_ = identityTransform;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.watchId_ = undefined;
            _this.addEventListener(getChangeEventType(Property$1.PROJECTION), _this.handleProjectionChanged_);
            _this.addEventListener(getChangeEventType(Property$1.TRACKING), _this.handleTrackingChanged_);
            if (options.projection !== undefined) {
                _this.setProjection(options.projection);
            }
            if (options.trackingOptions !== undefined) {
                _this.setTrackingOptions(options.trackingOptions);
            }
            _this.setTracking(options.tracking !== undefined ? options.tracking : false);
            return _this;
        }
        /**
         * Clean up.
         */
        Geolocation.prototype.disposeInternal = function () {
            this.setTracking(false);
            _super.prototype.disposeInternal.call(this);
        };
        /**
         * @private
         */
        Geolocation.prototype.handleProjectionChanged_ = function () {
            var projection = this.getProjection();
            if (projection) {
                this.transform_ = getTransformFromProjections(get$2('EPSG:4326'), projection);
                if (this.position_) {
                    this.set(Property$1.POSITION, this.transform_(this.position_));
                }
            }
        };
        /**
         * @private
         */
        Geolocation.prototype.handleTrackingChanged_ = function () {
            if ('geolocation' in navigator) {
                var tracking = this.getTracking();
                if (tracking && this.watchId_ === undefined) {
                    this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());
                }
                else if (!tracking && this.watchId_ !== undefined) {
                    navigator.geolocation.clearWatch(this.watchId_);
                    this.watchId_ = undefined;
                }
            }
        };
        /**
         * @private
         * @param {GeolocationPosition} position position event.
         */
        Geolocation.prototype.positionChange_ = function (position) {
            var coords = position.coords;
            this.set(Property$1.ACCURACY, coords.accuracy);
            this.set(Property$1.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);
            this.set(Property$1.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);
            this.set(Property$1.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));
            if (!this.position_) {
                this.position_ = [coords.longitude, coords.latitude];
            }
            else {
                this.position_[0] = coords.longitude;
                this.position_[1] = coords.latitude;
            }
            var projectedPosition = this.transform_(this.position_);
            this.set(Property$1.POSITION, projectedPosition);
            this.set(Property$1.SPEED, coords.speed === null ? undefined : coords.speed);
            var geometry = circular(this.position_, coords.accuracy);
            geometry.applyTransform(this.transform_);
            this.set(Property$1.ACCURACY_GEOMETRY, geometry);
            this.changed();
        };
        /**
         * @private
         * @param {GeolocationPositionError} error error object.
         */
        Geolocation.prototype.positionError_ = function (error) {
            this.dispatchEvent(new GeolocationError(error));
        };
        /**
         * Get the accuracy of the position in meters.
         * @return {number|undefined} The accuracy of the position measurement in
         *     meters.
         * @observable
         * @api
         */
        Geolocation.prototype.getAccuracy = function () {
            return /** @type {number|undefined} */ (this.get(Property$1.ACCURACY));
        };
        /**
         * Get a geometry of the position accuracy.
         * @return {?import("./geom/Polygon.js").default} A geometry of the position accuracy.
         * @observable
         * @api
         */
        Geolocation.prototype.getAccuracyGeometry = function () {
            return /** @type {?import("./geom/Polygon.js").default} */ (this.get(Property$1.ACCURACY_GEOMETRY) || null);
        };
        /**
         * Get the altitude associated with the position.
         * @return {number|undefined} The altitude of the position in meters above mean
         *     sea level.
         * @observable
         * @api
         */
        Geolocation.prototype.getAltitude = function () {
            return /** @type {number|undefined} */ (this.get(Property$1.ALTITUDE));
        };
        /**
         * Get the altitude accuracy of the position.
         * @return {number|undefined} The accuracy of the altitude measurement in
         *     meters.
         * @observable
         * @api
         */
        Geolocation.prototype.getAltitudeAccuracy = function () {
            return /** @type {number|undefined} */ (this.get(Property$1.ALTITUDE_ACCURACY));
        };
        /**
         * Get the heading as radians clockwise from North.
         * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`
         * is set to `true` in the tracking options.
         * @return {number|undefined} The heading of the device in radians from north.
         * @observable
         * @api
         */
        Geolocation.prototype.getHeading = function () {
            return /** @type {number|undefined} */ (this.get(Property$1.HEADING));
        };
        /**
         * Get the position of the device.
         * @return {import("./coordinate.js").Coordinate|undefined} The current position of the device reported
         *     in the current projection.
         * @observable
         * @api
         */
        Geolocation.prototype.getPosition = function () {
            return /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property$1.POSITION));
        };
        /**
         * Get the projection associated with the position.
         * @return {import("./proj/Projection.js").default|undefined} The projection the position is
         *     reported in.
         * @observable
         * @api
         */
        Geolocation.prototype.getProjection = function () {
            return /** @type {import("./proj/Projection.js").default|undefined} */ (this.get(Property$1.PROJECTION));
        };
        /**
         * Get the speed in meters per second.
         * @return {number|undefined} The instantaneous speed of the device in meters
         *     per second.
         * @observable
         * @api
         */
        Geolocation.prototype.getSpeed = function () {
            return /** @type {number|undefined} */ (this.get(Property$1.SPEED));
        };
        /**
         * Determine if the device location is being tracked.
         * @return {boolean} The device location is being tracked.
         * @observable
         * @api
         */
        Geolocation.prototype.getTracking = function () {
            return /** @type {boolean} */ (this.get(Property$1.TRACKING));
        };
        /**
         * Get the tracking options.
         * See http://www.w3.org/TR/geolocation-API/#position-options.
         * @return {PositionOptions|undefined} PositionOptions as defined by
         *     the [HTML5 Geolocation spec
         *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
         * @observable
         * @api
         */
        Geolocation.prototype.getTrackingOptions = function () {
            return /** @type {PositionOptions|undefined} */ (this.get(Property$1.TRACKING_OPTIONS));
        };
        /**
         * Set the projection to use for transforming the coordinates.
         * @param {import("./proj.js").ProjectionLike} projection The projection the position is
         *     reported in.
         * @observable
         * @api
         */
        Geolocation.prototype.setProjection = function (projection) {
            this.set(Property$1.PROJECTION, get$2(projection));
        };
        /**
         * Enable or disable tracking.
         * @param {boolean} tracking Enable tracking.
         * @observable
         * @api
         */
        Geolocation.prototype.setTracking = function (tracking) {
            this.set(Property$1.TRACKING, tracking);
        };
        /**
         * Set the tracking options.
         * See http://www.w3.org/TR/geolocation-API/#position-options.
         * @param {PositionOptions} options PositionOptions as defined by the
         *     [HTML5 Geolocation spec
         *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
         * @observable
         * @api
         */
        Geolocation.prototype.setTrackingOptions = function (options) {
            this.set(Property$1.TRACKING_OPTIONS, options);
        };
        return Geolocation;
    }(BaseObject));

    /**
     * @module ol/render/EventType
     */
    /**
     * @enum {string}
     */
    var RenderEventType = {
        /**
         * Triggered before a layer is rendered.
         * @event module:ol/render/Event~RenderEvent#prerender
         * @api
         */
        PRERENDER: 'prerender',
        /**
         * Triggered after a layer is rendered.
         * @event module:ol/render/Event~RenderEvent#postrender
         * @api
         */
        POSTRENDER: 'postrender',
        /**
         * Triggered before layers are rendered.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#precompose
         * @api
         */
        PRECOMPOSE: 'precompose',
        /**
         * Triggered after all layers are rendered.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#postcompose
         * @api
         */
        POSTCOMPOSE: 'postcompose',
        /**
         * Triggered when rendering is complete, i.e. all sources and tiles have
         * finished loading for the current viewport, and all tiles are faded in.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#rendercomplete
         * @api
         */
        RENDERCOMPLETE: 'rendercomplete',
    };

    /**
     * @module ol/style/Fill
     */
    /**
     * @typedef {Object} Options
     * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color=null] A color, gradient or pattern.
     * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
     * Default null; if null, the Canvas/renderer default black will be used.
     */
    /**
     * @classdesc
     * Set fill style for vector features.
     * @api
     */
    var Fill = /** @class */ (function () {
        /**
         * @param {Options=} opt_options Options.
         */
        function Fill(opt_options) {
            var options = opt_options || {};
            /**
             * @private
             * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
             */
            this.color_ = options.color !== undefined ? options.color : null;
        }
        /**
         * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
         * @return {Fill} The cloned style.
         * @api
         */
        Fill.prototype.clone = function () {
            var color = this.getColor();
            return new Fill({
                color: Array.isArray(color) ? color.slice() : color || undefined,
            });
        };
        /**
         * Get the fill color.
         * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
         * @api
         */
        Fill.prototype.getColor = function () {
            return this.color_;
        };
        /**
         * Set the color.
         *
         * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
         * @api
         */
        Fill.prototype.setColor = function (color) {
            this.color_ = color;
        };
        return Fill;
    }());

    /**
     * @module ol/geom/flat/interpolate
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} fraction Fraction.
     * @param {Array<number>=} opt_dest Destination.
     * @param {number=} opt_dimension Destination dimension (default is `2`)
     * @return {Array<number>} Destination.
     */
    function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest, opt_dimension) {
        var o, t;
        var n = (end - offset) / stride;
        if (n === 1) {
            o = offset;
        }
        else if (n === 2) {
            o = offset;
            t = fraction;
        }
        else if (n !== 0) {
            var x1 = flatCoordinates[offset];
            var y1 = flatCoordinates[offset + 1];
            var length_1 = 0;
            var cumulativeLengths = [0];
            for (var i = offset + stride; i < end; i += stride) {
                var x2 = flatCoordinates[i];
                var y2 = flatCoordinates[i + 1];
                length_1 += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                cumulativeLengths.push(length_1);
                x1 = x2;
                y1 = y2;
            }
            var target = fraction * length_1;
            var index = binarySearch(cumulativeLengths, target);
            if (index < 0) {
                t =
                    (target - cumulativeLengths[-index - 2]) /
                        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
                o = offset + (-index - 2) * stride;
            }
            else {
                o = offset + index * stride;
            }
        }
        var dimension = opt_dimension > 1 ? opt_dimension : 2;
        var dest = opt_dest ? opt_dest : new Array(dimension);
        for (var i = 0; i < dimension; ++i) {
            dest[i] =
                o === undefined
                    ? NaN
                    : t === undefined
                        ? flatCoordinates[o + i]
                        : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);
        }
        return dest;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} m M.
     * @param {boolean} extrapolate Extrapolate.
     * @return {import("../../coordinate.js").Coordinate} Coordinate.
     */
    function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
        if (end == offset) {
            return null;
        }
        var coordinate;
        if (m < flatCoordinates[offset + stride - 1]) {
            if (extrapolate) {
                coordinate = flatCoordinates.slice(offset, offset + stride);
                coordinate[stride - 1] = m;
                return coordinate;
            }
            else {
                return null;
            }
        }
        else if (flatCoordinates[end - 1] < m) {
            if (extrapolate) {
                coordinate = flatCoordinates.slice(end - stride, end);
                coordinate[stride - 1] = m;
                return coordinate;
            }
            else {
                return null;
            }
        }
        // FIXME use O(1) search
        if (m == flatCoordinates[offset + stride - 1]) {
            return flatCoordinates.slice(offset, offset + stride);
        }
        var lo = offset / stride;
        var hi = end / stride;
        while (lo < hi) {
            var mid = (lo + hi) >> 1;
            if (m < flatCoordinates[(mid + 1) * stride - 1]) {
                hi = mid;
            }
            else {
                lo = mid + 1;
            }
        }
        var m0 = flatCoordinates[lo * stride - 1];
        if (m == m0) {
            return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
        }
        var m1 = flatCoordinates[(lo + 1) * stride - 1];
        var t = (m - m0) / (m1 - m0);
        coordinate = [];
        for (var i = 0; i < stride - 1; ++i) {
            coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));
        }
        coordinate.push(m);
        return coordinate;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} m M.
     * @param {boolean} extrapolate Extrapolate.
     * @param {boolean} interpolate Interpolate.
     * @return {import("../../coordinate.js").Coordinate} Coordinate.
     */
    function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
        if (interpolate) {
            return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
        }
        var coordinate;
        if (m < flatCoordinates[stride - 1]) {
            if (extrapolate) {
                coordinate = flatCoordinates.slice(0, stride);
                coordinate[stride - 1] = m;
                return coordinate;
            }
            else {
                return null;
            }
        }
        if (flatCoordinates[flatCoordinates.length - 1] < m) {
            if (extrapolate) {
                coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
                coordinate[stride - 1] = m;
                return coordinate;
            }
            else {
                return null;
            }
        }
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            if (offset == end) {
                continue;
            }
            if (m < flatCoordinates[offset + stride - 1]) {
                return null;
            }
            else if (m <= flatCoordinates[end - 1]) {
                return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);
            }
            offset = end;
        }
        return null;
    }

    /**
     * @module ol/geom/flat/length
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {number} Length.
     */
    function lineStringLength(flatCoordinates, offset, end, stride) {
        var x1 = flatCoordinates[offset];
        var y1 = flatCoordinates[offset + 1];
        var length = 0;
        for (var i = offset + stride; i < end; i += stride) {
            var x2 = flatCoordinates[i];
            var y2 = flatCoordinates[i + 1];
            length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            x1 = x2;
            y1 = y2;
        }
        return length;
    }

    var __extends$e = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Linestring geometry.
     *
     * @api
     */
    var LineString = /** @class */ (function (_super) {
        __extends$e(LineString, _super);
        /**
         * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
         *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        function LineString(coordinates, opt_layout) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            _this.flatMidpoint_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.flatMidpointRevision_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.maxDeltaRevision_ = -1;
            if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
                _this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
            }
            else {
                _this.setCoordinates(
                /** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
            }
            return _this;
        }
        /**
         * Append the passed coordinate to the coordinates of the linestring.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @api
         */
        LineString.prototype.appendCoordinate = function (coordinate) {
            if (!this.flatCoordinates) {
                this.flatCoordinates = coordinate.slice();
            }
            else {
                extend(this.flatCoordinates, coordinate);
            }
            this.changed();
        };
        /**
         * Make a complete copy of the geometry.
         * @return {!LineString} Clone.
         * @api
         */
        LineString.prototype.clone = function () {
            var lineString = new LineString(this.flatCoordinates.slice(), this.layout);
            lineString.applyProperties(this);
            return lineString;
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
        };
        /**
         * Iterate over each segment, calling the provided callback.
         * If the callback returns a truthy value the function returns that
         * value immediately. Otherwise the function returns `false`.
         *
         * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
         *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.
         * @return {T|boolean} Value.
         * @template T,S
         * @api
         */
        LineString.prototype.forEachSegment = function (callback) {
            return forEach(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
        };
        /**
         * Returns the coordinate at `m` using linear interpolation, or `null` if no
         * such coordinate exists.
         *
         * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
         * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
         * M will return the first coordinate and Ms greater than the last M will
         * return the last coordinate.
         *
         * @param {number} m M.
         * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
         * @return {import("../coordinate.js").Coordinate} Coordinate.
         * @api
         */
        LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {
            if (this.layout != GeometryLayout.XYM &&
                this.layout != GeometryLayout.XYZM) {
                return null;
            }
            var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
            return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);
        };
        /**
         * Return the coordinates of the linestring.
         * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
         * @api
         */
        LineString.prototype.getCoordinates = function () {
            return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        };
        /**
         * Return the coordinate at the provided fraction along the linestring.
         * The `fraction` is a number between 0 and 1, where 0 is the start of the
         * linestring and 1 is the end.
         * @param {number} fraction Fraction.
         * @param {import("../coordinate.js").Coordinate=} opt_dest Optional coordinate whose values will
         *     be modified. If not provided, a new coordinate will be returned.
         * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
         * @api
         */
        LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {
            return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);
        };
        /**
         * Return the length of the linestring on projected plane.
         * @return {number} Length (on projected plane).
         * @api
         */
        LineString.prototype.getLength = function () {
            return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        };
        /**
         * @return {Array<number>} Flat midpoint.
         */
        LineString.prototype.getFlatMidpoint = function () {
            if (this.flatMidpointRevision_ != this.getRevision()) {
                this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
                this.flatMidpointRevision_ = this.getRevision();
            }
            return this.flatMidpoint_;
        };
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {LineString} Simplified LineString.
         * @protected
         */
        LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
            var simplifiedFlatCoordinates = [];
            simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
            return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);
        };
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        LineString.prototype.getType = function () {
            return GeometryType.LINE_STRING;
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        LineString.prototype.intersectsExtent = function (extent) {
            return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
        };
        /**
         * Set the coordinates of the linestring.
         * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        LineString.prototype.setCoordinates = function (coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 1);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        };
        return LineString;
    }(SimpleGeometry));

    /**
     * @module ol/style/Stroke
     */
    /**
     * @typedef {Object} Options
     * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
     * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
     * Default null; if null, the Canvas/renderer default black will be used.
     * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
     * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
     * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).
     * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
     * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
     * @property {number} [lineDashOffset=0] Line dash offset.
     * @property {number} [miterLimit=10] Miter limit.
     * @property {number} [width] Width.
     */
    /**
     * @classdesc
     * Set stroke style for vector features.
     * Note that the defaults given are the Canvas defaults, which will be used if
     * option is not defined. The `get` functions return whatever was entered in
     * the options; they will not return the default.
     * @api
     */
    var Stroke = /** @class */ (function () {
        /**
         * @param {Options=} opt_options Options.
         */
        function Stroke(opt_options) {
            var options = opt_options || {};
            /**
             * @private
             * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
             */
            this.color_ = options.color !== undefined ? options.color : null;
            /**
             * @private
             * @type {CanvasLineCap|undefined}
             */
            this.lineCap_ = options.lineCap;
            /**
             * @private
             * @type {Array<number>}
             */
            this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.lineDashOffset_ = options.lineDashOffset;
            /**
             * @private
             * @type {CanvasLineJoin|undefined}
             */
            this.lineJoin_ = options.lineJoin;
            /**
             * @private
             * @type {number|undefined}
             */
            this.miterLimit_ = options.miterLimit;
            /**
             * @private
             * @type {number|undefined}
             */
            this.width_ = options.width;
        }
        /**
         * Clones the style.
         * @return {Stroke} The cloned style.
         * @api
         */
        Stroke.prototype.clone = function () {
            var color = this.getColor();
            return new Stroke({
                color: Array.isArray(color) ? color.slice() : color || undefined,
                lineCap: this.getLineCap(),
                lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
                lineDashOffset: this.getLineDashOffset(),
                lineJoin: this.getLineJoin(),
                miterLimit: this.getMiterLimit(),
                width: this.getWidth(),
            });
        };
        /**
         * Get the stroke color.
         * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
         * @api
         */
        Stroke.prototype.getColor = function () {
            return this.color_;
        };
        /**
         * Get the line cap type for the stroke.
         * @return {CanvasLineCap|undefined} Line cap.
         * @api
         */
        Stroke.prototype.getLineCap = function () {
            return this.lineCap_;
        };
        /**
         * Get the line dash style for the stroke.
         * @return {Array<number>} Line dash.
         * @api
         */
        Stroke.prototype.getLineDash = function () {
            return this.lineDash_;
        };
        /**
         * Get the line dash offset for the stroke.
         * @return {number|undefined} Line dash offset.
         * @api
         */
        Stroke.prototype.getLineDashOffset = function () {
            return this.lineDashOffset_;
        };
        /**
         * Get the line join type for the stroke.
         * @return {CanvasLineJoin|undefined} Line join.
         * @api
         */
        Stroke.prototype.getLineJoin = function () {
            return this.lineJoin_;
        };
        /**
         * Get the miter limit for the stroke.
         * @return {number|undefined} Miter limit.
         * @api
         */
        Stroke.prototype.getMiterLimit = function () {
            return this.miterLimit_;
        };
        /**
         * Get the stroke width.
         * @return {number|undefined} Width.
         * @api
         */
        Stroke.prototype.getWidth = function () {
            return this.width_;
        };
        /**
         * Set the color.
         *
         * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
         * @api
         */
        Stroke.prototype.setColor = function (color) {
            this.color_ = color;
        };
        /**
         * Set the line cap.
         *
         * @param {CanvasLineCap|undefined} lineCap Line cap.
         * @api
         */
        Stroke.prototype.setLineCap = function (lineCap) {
            this.lineCap_ = lineCap;
        };
        /**
         * Set the line dash.
         *
         * Please note that Internet Explorer 10 and lower [do not support][mdn] the
         * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
         * property will have no visual effect in these browsers.
         *
         * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
         *
         * @param {Array<number>} lineDash Line dash.
         * @api
         */
        Stroke.prototype.setLineDash = function (lineDash) {
            this.lineDash_ = lineDash;
        };
        /**
         * Set the line dash offset.
         *
         * @param {number|undefined} lineDashOffset Line dash offset.
         * @api
         */
        Stroke.prototype.setLineDashOffset = function (lineDashOffset) {
            this.lineDashOffset_ = lineDashOffset;
        };
        /**
         * Set the line join.
         *
         * @param {CanvasLineJoin|undefined} lineJoin Line join.
         * @api
         */
        Stroke.prototype.setLineJoin = function (lineJoin) {
            this.lineJoin_ = lineJoin;
        };
        /**
         * Set the miter limit.
         *
         * @param {number|undefined} miterLimit Miter limit.
         * @api
         */
        Stroke.prototype.setMiterLimit = function (miterLimit) {
            this.miterLimit_ = miterLimit;
        };
        /**
         * Set the width.
         *
         * @param {number|undefined} width Width.
         * @api
         */
        Stroke.prototype.setWidth = function (width) {
            this.width_ = width;
        };
        return Stroke;
    }());

    /**
     * @module ol/ImageState
     */
    /**
     * @enum {number}
     */
    var ImageState = {
        IDLE: 0,
        LOADING: 1,
        LOADED: 2,
        ERROR: 3,
        EMPTY: 4,
    };

    /**
     * @module ol/size
     */
    /**
     * Determines if a size has a positive area.
     * @param {Size} size The size to test.
     * @return {boolean} The size has a positive area.
     */
    function hasArea(size) {
        return size[0] > 0 && size[1] > 0;
    }
    /**
     * Returns a size scaled by a ratio. The result will be an array of integers.
     * @param {Size} size Size.
     * @param {number} ratio Ratio.
     * @param {Size=} opt_size Optional reusable size array.
     * @return {Size} The scaled size.
     */
    function scale$2(size, ratio, opt_size) {
        if (opt_size === undefined) {
            opt_size = [0, 0];
        }
        opt_size[0] = (size[0] * ratio + 0.5) | 0;
        opt_size[1] = (size[1] * ratio + 0.5) | 0;
        return opt_size;
    }
    /**
     * Returns an `Size` array for the passed in number (meaning: square) or
     * `Size` array.
     * (meaning: non-square),
     * @param {number|Size} size Width and height.
     * @param {Size=} opt_size Optional reusable size array.
     * @return {Size} Size.
     * @api
     */
    function toSize(size, opt_size) {
        if (Array.isArray(size)) {
            return size;
        }
        else {
            if (opt_size === undefined) {
                opt_size = [size, size];
            }
            else {
                opt_size[0] = size;
                opt_size[1] = size;
            }
            return opt_size;
        }
    }

    /**
     * @module ol/style/Image
     */
    /**
     * @typedef {Object} Options
     * @property {number} opacity
     * @property {boolean} rotateWithView
     * @property {number} rotation
     * @property {number|import("../size.js").Size} scale
     * @property {Array<number>} displacement
     */
    /**
     * @classdesc
     * A base class used for creating subclasses and not instantiated in
     * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
     * {@link module:ol/style/RegularShape~RegularShape}.
     * @abstract
     * @api
     */
    var ImageStyle = /** @class */ (function () {
        /**
         * @param {Options} options Options.
         */
        function ImageStyle(options) {
            /**
             * @private
             * @type {number}
             */
            this.opacity_ = options.opacity;
            /**
             * @private
             * @type {boolean}
             */
            this.rotateWithView_ = options.rotateWithView;
            /**
             * @private
             * @type {number}
             */
            this.rotation_ = options.rotation;
            /**
             * @private
             * @type {number|import("../size.js").Size}
             */
            this.scale_ = options.scale;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.scaleArray_ = toSize(options.scale);
            /**
             * @private
             * @type {Array<number>}
             */
            this.displacement_ = options.displacement;
        }
        /**
         * Clones the style.
         * @return {ImageStyle} The cloned style.
         * @api
         */
        ImageStyle.prototype.clone = function () {
            var scale = this.getScale();
            return new ImageStyle({
                opacity: this.getOpacity(),
                scale: Array.isArray(scale) ? scale.slice() : scale,
                rotation: this.getRotation(),
                rotateWithView: this.getRotateWithView(),
                displacement: this.getDisplacement().slice(),
            });
        };
        /**
         * Get the symbolizer opacity.
         * @return {number} Opacity.
         * @api
         */
        ImageStyle.prototype.getOpacity = function () {
            return this.opacity_;
        };
        /**
         * Determine whether the symbolizer rotates with the map.
         * @return {boolean} Rotate with map.
         * @api
         */
        ImageStyle.prototype.getRotateWithView = function () {
            return this.rotateWithView_;
        };
        /**
         * Get the symoblizer rotation.
         * @return {number} Rotation.
         * @api
         */
        ImageStyle.prototype.getRotation = function () {
            return this.rotation_;
        };
        /**
         * Get the symbolizer scale.
         * @return {number|import("../size.js").Size} Scale.
         * @api
         */
        ImageStyle.prototype.getScale = function () {
            return this.scale_;
        };
        /**
         * Get the symbolizer scale array.
         * @return {import("../size.js").Size} Scale array.
         */
        ImageStyle.prototype.getScaleArray = function () {
            return this.scaleArray_;
        };
        /**
         * Get the displacement of the shape
         * @return {Array<number>} Shape's center displacement
         * @api
         */
        ImageStyle.prototype.getDisplacement = function () {
            return this.displacement_;
        };
        /**
         * Get the anchor point in pixels. The anchor determines the center point for the
         * symbolizer.
         * @abstract
         * @return {Array<number>} Anchor.
         */
        ImageStyle.prototype.getAnchor = function () {
            return abstract();
        };
        /**
         * Get the image element for the symbolizer.
         * @abstract
         * @param {number} pixelRatio Pixel ratio.
         * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
         */
        ImageStyle.prototype.getImage = function (pixelRatio) {
            return abstract();
        };
        /**
         * @abstract
         * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
         */
        ImageStyle.prototype.getHitDetectionImage = function () {
            return abstract();
        };
        /*
         * Get the image pixel ratio.
         * @param {number} pixelRatio Pixel ratio.
         * */
        ImageStyle.prototype.getPixelRatio = function (pixelRatio) {
            return 1;
        };
        /**
         * @abstract
         * @return {import("../ImageState.js").default} Image state.
         */
        ImageStyle.prototype.getImageState = function () {
            return abstract();
        };
        /**
         * @abstract
         * @return {import("../size.js").Size} Image size.
         */
        ImageStyle.prototype.getImageSize = function () {
            return abstract();
        };
        /**
         * @abstract
         * @return {import("../size.js").Size} Size of the hit-detection image.
         */
        ImageStyle.prototype.getHitDetectionImageSize = function () {
            return abstract();
        };
        /**
         * Get the origin of the symbolizer.
         * @abstract
         * @return {Array<number>} Origin.
         */
        ImageStyle.prototype.getOrigin = function () {
            return abstract();
        };
        /**
         * Get the size of the symbolizer (in pixels).
         * @abstract
         * @return {import("../size.js").Size} Size.
         */
        ImageStyle.prototype.getSize = function () {
            return abstract();
        };
        /**
         * Set the opacity.
         *
         * @param {number} opacity Opacity.
         * @api
         */
        ImageStyle.prototype.setOpacity = function (opacity) {
            this.opacity_ = opacity;
        };
        /**
         * Set whether to rotate the style with the view.
         *
         * @param {boolean} rotateWithView Rotate with map.
         * @api
         */
        ImageStyle.prototype.setRotateWithView = function (rotateWithView) {
            this.rotateWithView_ = rotateWithView;
        };
        /**
         * Set the rotation.
         *
         * @param {number} rotation Rotation.
         * @api
         */
        ImageStyle.prototype.setRotation = function (rotation) {
            this.rotation_ = rotation;
        };
        /**
         * Set the scale.
         *
         * @param {number|import("../size.js").Size} scale Scale.
         * @api
         */
        ImageStyle.prototype.setScale = function (scale) {
            this.scale_ = scale;
            this.scaleArray_ = toSize(scale);
        };
        /**
         * @abstract
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        ImageStyle.prototype.listenImageChange = function (listener) {
            abstract();
        };
        /**
         * Load not yet loaded URI.
         * @abstract
         */
        ImageStyle.prototype.load = function () {
            abstract();
        };
        /**
         * @abstract
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        ImageStyle.prototype.unlistenImageChange = function (listener) {
            abstract();
        };
        return ImageStyle;
    }());

    /**
     * @module ol/color
     */
    /**
     * A color represented as a short array [red, green, blue, alpha].
     * red, green, and blue should be integers in the range 0..255 inclusive.
     * alpha should be a float in the range 0..1 inclusive. If no alpha value is
     * given then `1` will be used.
     * @typedef {Array<number>} Color
     * @api
     */
    /**
     * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
     * @const
     * @type {RegExp}
     * @private
     */
    var HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;
    /**
     * Regular expression for matching potential named color style strings.
     * @const
     * @type {RegExp}
     * @private
     */
    var NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\(.*\)$/i;
    /**
     * Return the color as an rgba string.
     * @param {Color|string} color Color.
     * @return {string} Rgba string.
     * @api
     */
    function asString(color) {
        if (typeof color === 'string') {
            return color;
        }
        else {
            return toString$1(color);
        }
    }
    /**
     * Return named color as an rgba string.
     * @param {string} color Named color.
     * @return {string} Rgb string.
     */
    function fromNamed(color) {
        var el = document.createElement('div');
        el.style.color = color;
        if (el.style.color !== '') {
            document.body.appendChild(el);
            var rgb = getComputedStyle(el).color;
            document.body.removeChild(el);
            return rgb;
        }
        else {
            return '';
        }
    }
    /**
     * @param {string} s String.
     * @return {Color} Color.
     */
    var fromString = (function () {
        // We maintain a small cache of parsed strings.  To provide cheap LRU-like
        // semantics, whenever the cache grows too large we simply delete an
        // arbitrary 25% of the entries.
        /**
         * @const
         * @type {number}
         */
        var MAX_CACHE_SIZE = 1024;
        /**
         * @type {Object<string, Color>}
         */
        var cache = {};
        /**
         * @type {number}
         */
        var cacheSize = 0;
        return (
        /**
         * @param {string} s String.
         * @return {Color} Color.
         */
        function (s) {
            var color;
            if (cache.hasOwnProperty(s)) {
                color = cache[s];
            }
            else {
                if (cacheSize >= MAX_CACHE_SIZE) {
                    var i = 0;
                    for (var key in cache) {
                        if ((i++ & 3) === 0) {
                            delete cache[key];
                            --cacheSize;
                        }
                    }
                }
                color = fromStringInternal_(s);
                cache[s] = color;
                ++cacheSize;
            }
            return color;
        });
    })();
    /**
     * Return the color as an array. This function maintains a cache of calculated
     * arrays which means the result should not be modified.
     * @param {Color|string} color Color.
     * @return {Color} Color.
     * @api
     */
    function asArray(color) {
        if (Array.isArray(color)) {
            return color;
        }
        else {
            return fromString(color);
        }
    }
    /**
     * @param {string} s String.
     * @private
     * @return {Color} Color.
     */
    function fromStringInternal_(s) {
        var r, g, b, a, color;
        if (NAMED_COLOR_RE_.exec(s)) {
            s = fromNamed(s);
        }
        if (HEX_COLOR_RE_.exec(s)) {
            // hex
            var n = s.length - 1; // number of hex digits
            var d = // number of digits per channel
             void 0; // number of digits per channel
            if (n <= 4) {
                d = 1;
            }
            else {
                d = 2;
            }
            var hasAlpha = n === 4 || n === 8;
            r = parseInt(s.substr(1 + 0 * d, d), 16);
            g = parseInt(s.substr(1 + 1 * d, d), 16);
            b = parseInt(s.substr(1 + 2 * d, d), 16);
            if (hasAlpha) {
                a = parseInt(s.substr(1 + 3 * d, d), 16);
            }
            else {
                a = 255;
            }
            if (d == 1) {
                r = (r << 4) + r;
                g = (g << 4) + g;
                b = (b << 4) + b;
                if (hasAlpha) {
                    a = (a << 4) + a;
                }
            }
            color = [r, g, b, a / 255];
        }
        else if (s.indexOf('rgba(') == 0) {
            // rgba()
            color = s.slice(5, -1).split(',').map(Number);
            normalize(color);
        }
        else if (s.indexOf('rgb(') == 0) {
            // rgb()
            color = s.slice(4, -1).split(',').map(Number);
            color.push(1);
            normalize(color);
        }
        else {
            assert(false, 14); // Invalid color
        }
        return color;
    }
    /**
     * TODO this function is only used in the test, we probably shouldn't export it
     * @param {Color} color Color.
     * @return {Color} Clamped color.
     */
    function normalize(color) {
        color[0] = clamp((color[0] + 0.5) | 0, 0, 255);
        color[1] = clamp((color[1] + 0.5) | 0, 0, 255);
        color[2] = clamp((color[2] + 0.5) | 0, 0, 255);
        color[3] = clamp(color[3], 0, 1);
        return color;
    }
    /**
     * @param {Color} color Color.
     * @return {string} String.
     */
    function toString$1(color) {
        var r = color[0];
        if (r != (r | 0)) {
            r = (r + 0.5) | 0;
        }
        var g = color[1];
        if (g != (g | 0)) {
            g = (g + 0.5) | 0;
        }
        var b = color[2];
        if (b != (b | 0)) {
            b = (b + 0.5) | 0;
        }
        var a = color[3] === undefined ? 1 : color[3];
        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
    }

    /**
     * @module ol/colorlike
     */
    /**
     * A type accepted by CanvasRenderingContext2D.fillStyle
     * or CanvasRenderingContext2D.strokeStyle.
     * Represents a color, pattern, or gradient. The origin for patterns and
     * gradients as fill style is an increment of 512 css pixels from map coordinate
     * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
     * must be a factor of two (2, 4, 8, ..., 512).
     *
     * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
     * @api
     */
    /**
     * @param {import("./color.js").Color|ColorLike} color Color.
     * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
     * @api
     */
    function asColorLike(color) {
        if (Array.isArray(color)) {
            return toString$1(color);
        }
        else {
            return color;
        }
    }

    /**
     * @module ol/has
     */
    var ua = typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'
        ? navigator.userAgent.toLowerCase()
        : '';
    /**
     * User agent string says we are dealing with Firefox as browser.
     * @type {boolean}
     */
    var FIREFOX = ua.indexOf('firefox') !== -1;
    /**
     * User agent string says we are dealing with Safari as browser.
     * @type {boolean}
     */
    ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;
    /**
     * User agent string says we are dealing with a WebKit engine.
     * @type {boolean}
     */
    var WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;
    /**
     * User agent string says we are dealing with a Mac as platform.
     * @type {boolean}
     */
    var MAC = ua.indexOf('macintosh') !== -1;
    /**
     * The ratio between physical pixels and device-independent pixels
     * (dips) on the device (`window.devicePixelRatio`).
     * @const
     * @type {number}
     * @api
     */
    var DEVICE_PIXEL_RATIO = typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;
    /**
     * The execution context is a worker with OffscreenCanvas available.
     * @const
     * @type {boolean}
     */
    var WORKER_OFFSCREEN_CANVAS = typeof WorkerGlobalScope !== 'undefined' &&
        typeof OffscreenCanvas !== 'undefined' &&
        self instanceof WorkerGlobalScope; //eslint-disable-line
    /**
     * Image.prototype.decode() is supported.
     * @type {boolean}
     */
    var IMAGE_DECODE = typeof Image !== 'undefined' && Image.prototype.decode;
    /**
     * @type {boolean}
     */
    var PASSIVE_EVENT_LISTENERS = (function () {
        var passive = false;
        try {
            var options = Object.defineProperty({}, 'passive', {
                get: function () {
                    passive = true;
                },
            });
            window.addEventListener('_', null, options);
            window.removeEventListener('_', null, options);
        }
        catch (error) {
            // passive not supported
        }
        return passive;
    })();

    /**
     * @module ol/dom
     */
    //FIXME Move this function to the canvas module
    /**
     * Create an html canvas element and returns its 2d context.
     * @param {number=} opt_width Canvas width.
     * @param {number=} opt_height Canvas height.
     * @param {Array<HTMLCanvasElement>=} opt_canvasPool Canvas pool to take existing canvas from.
     * @return {CanvasRenderingContext2D} The context.
     */
    function createCanvasContext2D(opt_width, opt_height, opt_canvasPool) {
        var canvas = opt_canvasPool && opt_canvasPool.length
            ? opt_canvasPool.shift()
            : WORKER_OFFSCREEN_CANVAS
                ? new OffscreenCanvas(opt_width || 300, opt_height || 300)
                : document.createElement('canvas');
        if (opt_width) {
            canvas.width = opt_width;
        }
        if (opt_height) {
            canvas.height = opt_height;
        }
        //FIXME Allow OffscreenCanvasRenderingContext2D as return type
        return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
    }
    /**
     * @param {Node} newNode Node to replace old node
     * @param {Node} oldNode The node to be replaced
     */
    function replaceNode(newNode, oldNode) {
        var parent = oldNode.parentNode;
        if (parent) {
            parent.replaceChild(newNode, oldNode);
        }
    }
    /**
     * @param {Node} node The node to remove.
     * @returns {Node} The node that was removed or null.
     */
    function removeNode(node) {
        return node && node.parentNode ? node.parentNode.removeChild(node) : null;
    }
    /**
     * @param {Node} node The node to remove the children from.
     */
    function removeChildren(node) {
        while (node.lastChild) {
            node.removeChild(node.lastChild);
        }
    }
    /**
     * Transform the children of a parent node so they match the
     * provided list of children.  This function aims to efficiently
     * remove, add, and reorder child nodes while maintaining a simple
     * implementation (it is not guaranteed to minimize DOM operations).
     * @param {Node} node The parent node whose children need reworking.
     * @param {Array<Node>} children The desired children.
     */
    function replaceChildren(node, children) {
        var oldChildren = node.childNodes;
        for (var i = 0; true; ++i) {
            var oldChild = oldChildren[i];
            var newChild = children[i];
            // check if our work is done
            if (!oldChild && !newChild) {
                break;
            }
            // check if children match
            if (oldChild === newChild) {
                continue;
            }
            // check if a new child needs to be added
            if (!oldChild) {
                node.appendChild(newChild);
                continue;
            }
            // check if an old child needs to be removed
            if (!newChild) {
                node.removeChild(oldChild);
                --i;
                continue;
            }
            // reorder
            node.insertBefore(newChild, oldChild);
        }
    }

    /**
     * @module ol/css
     */
    /**
     * @typedef {Object} FontParameters
     * @property {string} style
     * @property {string} variant
     * @property {string} weight
     * @property {string} size
     * @property {string} lineHeight
     * @property {string} family
     * @property {Array<string>} families
     */
    /**
     * The CSS class for hidden feature.
     *
     * @const
     * @type {string}
     */
    var CLASS_HIDDEN = 'ol-hidden';
    /**
     * The CSS class that we'll give the DOM elements to have them unselectable.
     *
     * @const
     * @type {string}
     */
    var CLASS_UNSELECTABLE = 'ol-unselectable';
    /**
     * The CSS class for controls.
     *
     * @const
     * @type {string}
     */
    var CLASS_CONTROL = 'ol-control';
    /**
     * The CSS class that we'll give the DOM elements that are collapsed, i.e.
     * to those elements which usually can be expanded.
     *
     * @const
     * @type {string}
     */
    var CLASS_COLLAPSED = 'ol-collapsed';
    /**
     * From http://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font
     * @type {RegExp}
     */
    var fontRegEx = new RegExp([
        '^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)',
        '(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)',
        '(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',
        '(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?',
        '(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))',
        '(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))',
        '?\\s*([-,\\"\\\'\\sa-z]+?)\\s*$',
    ].join(''), 'i');
    var fontRegExMatchIndex = [
        'style',
        'variant',
        'weight',
        'size',
        'lineHeight',
        'family',
    ];
    /**
     * Get the list of font families from a font spec.  Note that this doesn't work
     * for font families that have commas in them.
     * @param {string} fontSpec The CSS font property.
     * @return {FontParameters} The font parameters (or null if the input spec is invalid).
     */
    var getFontParameters = function (fontSpec) {
        var match = fontSpec.match(fontRegEx);
        if (!match) {
            return null;
        }
        var style = /** @type {FontParameters} */ ({
            lineHeight: 'normal',
            size: '1.2em',
            style: 'normal',
            weight: 'normal',
            variant: 'normal',
        });
        for (var i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {
            var value = match[i + 1];
            if (value !== undefined) {
                style[fontRegExMatchIndex[i]] = value;
            }
        }
        style.families = style.family.split(/,\s?/);
        return style;
    };

    /**
     * @module ol/render/canvas
     */
    /**
     * @typedef {Object} FillState
     * @property {import("../colorlike.js").ColorLike} fillStyle
     */
    /**
     * @typedef Label
     * @property {number} width
     * @property {number} height
     * @property {Array<string|number>} contextInstructions
     */
    /**
     * @typedef {Object} FillStrokeState
     * @property {import("../colorlike.js").ColorLike} [currentFillStyle]
     * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle]
     * @property {CanvasLineCap} [currentLineCap]
     * @property {Array<number>} currentLineDash
     * @property {number} [currentLineDashOffset]
     * @property {CanvasLineJoin} [currentLineJoin]
     * @property {number} [currentLineWidth]
     * @property {number} [currentMiterLimit]
     * @property {number} [lastStroke]
     * @property {import("../colorlike.js").ColorLike} [fillStyle]
     * @property {import("../colorlike.js").ColorLike} [strokeStyle]
     * @property {CanvasLineCap} [lineCap]
     * @property {Array<number>} lineDash
     * @property {number} [lineDashOffset]
     * @property {CanvasLineJoin} [lineJoin]
     * @property {number} [lineWidth]
     * @property {number} [miterLimit]
     */
    /**
     * @typedef {Object} StrokeState
     * @property {CanvasLineCap} lineCap
     * @property {Array<number>} lineDash
     * @property {number} lineDashOffset
     * @property {CanvasLineJoin} lineJoin
     * @property {number} lineWidth
     * @property {number} miterLimit
     * @property {import("../colorlike.js").ColorLike} strokeStyle
     */
    /**
     * @typedef {Object} TextState
     * @property {string} font
     * @property {string} [textAlign]
     * @property {string} textBaseline
     * @property {string} [placement]
     * @property {number} [maxAngle]
     * @property {boolean} [overflow]
     * @property {import("../style/Fill.js").default} [backgroundFill]
     * @property {import("../style/Stroke.js").default} [backgroundStroke]
     * @property {import("../size.js").Size} [scale]
     * @property {Array<number>} [padding]
     */
    /**
     * @typedef {Object} SerializableInstructions
     * @property {Array<*>} instructions The rendering instructions.
     * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
     * @property {Array<number>} coordinates The array of all coordinates.
     * @property {!Object<string, TextState>} [textStates] The text states (decluttering).
     * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).
     * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).
     */
    /**
     * @typedef {Object<number, import("./canvas/Executor.js").ReplayImageOrLabelArgs>} DeclutterImageWithText
     */
    /**
     * @const
     * @type {string}
     */
    var defaultFont = '10px sans-serif';
    /**
     * @const
     * @type {import("../colorlike.js").ColorLike}
     */
    var defaultFillStyle = '#000';
    /**
     * @const
     * @type {CanvasLineCap}
     */
    var defaultLineCap = 'round';
    /**
     * @const
     * @type {Array<number>}
     */
    var defaultLineDash = [];
    /**
     * @const
     * @type {number}
     */
    var defaultLineDashOffset = 0;
    /**
     * @const
     * @type {CanvasLineJoin}
     */
    var defaultLineJoin = 'round';
    /**
     * @const
     * @type {number}
     */
    var defaultMiterLimit = 10;
    /**
     * @const
     * @type {import("../colorlike.js").ColorLike}
     */
    var defaultStrokeStyle = '#000';
    /**
     * @const
     * @type {string}
     */
    var defaultTextAlign = 'center';
    /**
     * @const
     * @type {string}
     */
    var defaultTextBaseline = 'middle';
    /**
     * @const
     * @type {Array<number>}
     */
    var defaultPadding = [0, 0, 0, 0];
    /**
     * @const
     * @type {number}
     */
    var defaultLineWidth = 1;
    /**
     * @type {BaseObject}
     */
    var checkedFonts = new BaseObject();
    /**
     * The label cache for text rendering. To change the default cache size of 2048
     * entries, use {@link module:ol/structs/LRUCache#setSize}.
     * Deprecated - there is no label cache any more.
     * @type {?}
     * @api
     * @deprecated
     */
    var labelCache = new Target();
    labelCache.setSize = function () {
        console.warn('labelCache is deprecated.'); //eslint-disable-line
    };
    /**
     * @type {CanvasRenderingContext2D}
     */
    var measureContext = null;
    /**
     * @type {string}
     */
    var measureFont;
    /**
     * @type {!Object<string, number>}
     */
    var textHeights = {};
    /**
     * Clears the label cache when a font becomes available.
     * @param {string} fontSpec CSS font spec.
     */
    var registerFont = (function () {
        var retries = 100;
        var size = '32px ';
        var referenceFonts = ['monospace', 'serif'];
        var len = referenceFonts.length;
        var text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
        var interval, referenceWidth;
        /**
         * @param {string} fontStyle Css font-style
         * @param {string} fontWeight Css font-weight
         * @param {*} fontFamily Css font-family
         * @return {boolean} Font with style and weight is available
         */
        function isAvailable(fontStyle, fontWeight, fontFamily) {
            var available = true;
            for (var i = 0; i < len; ++i) {
                var referenceFont = referenceFonts[i];
                referenceWidth = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + referenceFont, text);
                if (fontFamily != referenceFont) {
                    var width = measureTextWidth(fontStyle +
                        ' ' +
                        fontWeight +
                        ' ' +
                        size +
                        fontFamily +
                        ',' +
                        referenceFont, text);
                    // If width and referenceWidth are the same, then the fallback was used
                    // instead of the font we wanted, so the font is not available.
                    available = available && width != referenceWidth;
                }
            }
            if (available) {
                return true;
            }
            return false;
        }
        function check() {
            var done = true;
            var fonts = checkedFonts.getKeys();
            for (var i = 0, ii = fonts.length; i < ii; ++i) {
                var font = fonts[i];
                if (checkedFonts.get(font) < retries) {
                    if (isAvailable.apply(this, font.split('\n'))) {
                        clear(textHeights);
                        // Make sure that loaded fonts are picked up by Safari
                        measureContext = null;
                        measureFont = undefined;
                        checkedFonts.set(font, retries);
                    }
                    else {
                        checkedFonts.set(font, checkedFonts.get(font) + 1, true);
                        done = false;
                    }
                }
            }
            if (done) {
                clearInterval(interval);
                interval = undefined;
            }
        }
        return function (fontSpec) {
            var font = getFontParameters(fontSpec);
            if (!font) {
                return;
            }
            var families = font.families;
            for (var i = 0, ii = families.length; i < ii; ++i) {
                var family = families[i];
                var key = font.style + '\n' + font.weight + '\n' + family;
                if (checkedFonts.get(key) === undefined) {
                    checkedFonts.set(key, retries, true);
                    if (!isAvailable(font.style, font.weight, family)) {
                        checkedFonts.set(key, 0, true);
                        if (interval === undefined) {
                            interval = setInterval(check, 32);
                        }
                    }
                }
            }
        };
    })();
    /**
     * @param {string} font Font to use for measuring.
     * @return {import("../size.js").Size} Measurement.
     */
    var measureTextHeight = (function () {
        /**
         * @type {HTMLDivElement}
         */
        var div;
        return function (fontSpec) {
            var height = textHeights[fontSpec];
            if (height == undefined) {
                if (WORKER_OFFSCREEN_CANVAS) {
                    var font = getFontParameters(fontSpec);
                    var metrics = measureText(fontSpec, 'Žg');
                    var lineHeight = isNaN(Number(font.lineHeight))
                        ? 1.2
                        : Number(font.lineHeight);
                    height =
                        lineHeight *
                            (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
                }
                else {
                    if (!div) {
                        div = document.createElement('div');
                        div.innerHTML = 'M';
                        div.style.margin = '0 !important';
                        div.style.padding = '0 !important';
                        div.style.position = 'absolute !important';
                        div.style.left = '-99999px !important';
                    }
                    div.style.font = fontSpec;
                    document.body.appendChild(div);
                    height = div.offsetHeight;
                    document.body.removeChild(div);
                }
                textHeights[fontSpec] = height;
            }
            return height;
        };
    })();
    /**
     * @param {string} font Font.
     * @param {string} text Text.
     * @return {TextMetrics} Text metrics.
     */
    function measureText(font, text) {
        if (!measureContext) {
            measureContext = createCanvasContext2D(1, 1);
        }
        if (font != measureFont) {
            measureContext.font = font;
            measureFont = measureContext.font;
        }
        return measureContext.measureText(text);
    }
    /**
     * @param {string} font Font.
     * @param {string} text Text.
     * @return {number} Width.
     */
    function measureTextWidth(font, text) {
        return measureText(font, text).width;
    }
    /**
     * Measure text width using a cache.
     * @param {string} font The font.
     * @param {string} text The text to measure.
     * @param {Object<string, number>} cache A lookup of cached widths by text.
     * @returns {number} The text width.
     */
    function measureAndCacheTextWidth(font, text, cache) {
        if (text in cache) {
            return cache[text];
        }
        var width = measureTextWidth(font, text);
        cache[text] = width;
        return width;
    }
    /**
     * @param {string} font Font to use for measuring.
     * @param {Array<string>} lines Lines to measure.
     * @param {Array<number>} widths Array will be populated with the widths of
     * each line.
     * @return {number} Width of the whole text.
     */
    function measureTextWidths(font, lines, widths) {
        var numLines = lines.length;
        var width = 0;
        for (var i = 0; i < numLines; ++i) {
            var currentWidth = measureTextWidth(font, lines[i]);
            width = Math.max(width, currentWidth);
            widths.push(currentWidth);
        }
        return width;
    }
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} rotation Rotation.
     * @param {number} offsetX X offset.
     * @param {number} offsetY Y offset.
     */
    function rotateAtOffset(context, rotation, offsetX, offsetY) {
        if (rotation !== 0) {
            context.translate(offsetX, offsetY);
            context.rotate(rotation);
            context.translate(-offsetX, -offsetY);
        }
    }
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../transform.js").Transform|null} transform Transform.
     * @param {number} opacity Opacity.
     * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.
     * @param {number} originX Origin X.
     * @param {number} originY Origin Y.
     * @param {number} w Width.
     * @param {number} h Height.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../size.js").Size} scale Scale.
     */
    function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {
        context.save();
        if (opacity !== 1) {
            context.globalAlpha *= opacity;
        }
        if (transform) {
            context.setTransform.apply(context, transform);
        }
        if ( /** @type {*} */(labelOrImage).contextInstructions) {
            // label
            context.translate(x, y);
            context.scale(scale[0], scale[1]);
            executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);
        }
        else if (scale[0] < 0 || scale[1] < 0) {
            // flipped image
            context.translate(x, y);
            context.scale(scale[0], scale[1]);
            context.drawImage(
            /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (labelOrImage), originX, originY, w, h, 0, 0, w, h);
        }
        else {
            // if image not flipped translate and scale can be avoided
            context.drawImage(
            /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (labelOrImage), originX, originY, w, h, x, y, w * scale[0], h * scale[1]);
        }
        context.restore();
    }
    /**
     * @param {Label} label Label.
     * @param {CanvasRenderingContext2D} context Context.
     */
    function executeLabelInstructions(label, context) {
        var contextInstructions = label.contextInstructions;
        for (var i = 0, ii = contextInstructions.length; i < ii; i += 2) {
            if (Array.isArray(contextInstructions[i + 1])) {
                context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);
            }
            else {
                context[contextInstructions[i]] = contextInstructions[i + 1];
            }
        }
    }
    /**
     * @type {HTMLCanvasElement}
     * @private
     */
    var createTransformStringCanvas = null;
    /**
     * @param {import("../transform.js").Transform} transform Transform.
     * @return {string} CSS transform.
     */
    function createTransformString(transform) {
        if (WORKER_OFFSCREEN_CANVAS) {
            return toString(transform);
        }
        else {
            if (!createTransformStringCanvas) {
                createTransformStringCanvas = createCanvasContext2D(1, 1).canvas;
            }
            createTransformStringCanvas.style.transform = toString(transform);
            return createTransformStringCanvas.style.transform;
        }
    }

    /**
     * @module ol/style/RegularShape
     */
    var __extends$f = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Specify radius for regular polygons, or radius1 and radius2 for stars.
     * @typedef {Object} Options
     * @property {import("./Fill.js").default} [fill] Fill style.
     * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
     * is the number of sides.
     * @property {number} [radius] Radius of a regular polygon.
     * @property {number} [radius1] Outer radius of a star.
     * @property {number} [radius2] Inner radius of a star.
     * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
     * @property {Array<number>} [displacement=[0,0]] Displacement of the shape
     * @property {import("./Stroke.js").default} [stroke] Stroke style.
     * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
     * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
     * @property {number|import("../size.js").Size} [scale=1] Scale. Unless two dimensional scaling is required a better
     * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.
     */
    /**
     * @typedef {Object} RenderOptions
     * @property {import("../colorlike.js").ColorLike} [strokeStyle]
     * @property {number} strokeWidth
     * @property {number} size
     * @property {CanvasLineCap} lineCap
     * @property {Array<number>} lineDash
     * @property {number} lineDashOffset
     * @property {CanvasLineJoin} lineJoin
     * @property {number} miterLimit
     */
    /**
     * @classdesc
     * Set regular shape style for vector features. The resulting shape will be
     * a regular polygon when `radius` is provided, or a star when `radius1` and
     * `radius2` are provided.
     * @api
     */
    var RegularShape = /** @class */ (function (_super) {
        __extends$f(RegularShape, _super);
        /**
         * @param {Options} options Options.
         */
        function RegularShape(options) {
            var _this = this;
            /**
             * @type {boolean}
             */
            var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;
            _this = _super.call(this, {
                opacity: 1,
                rotateWithView: rotateWithView,
                rotation: options.rotation !== undefined ? options.rotation : 0,
                scale: options.scale !== undefined ? options.scale : 1,
                displacement: options.displacement !== undefined ? options.displacement : [0, 0],
            }) || this;
            /**
             * @private
             * @type {Object<number, HTMLCanvasElement>}
             */
            _this.canvas_ = {};
            /**
             * @private
             * @type {HTMLCanvasElement}
             */
            _this.hitDetectionCanvas_ = null;
            /**
             * @private
             * @type {import("./Fill.js").default}
             */
            _this.fill_ = options.fill !== undefined ? options.fill : null;
            /**
             * @private
             * @type {Array<number>}
             */
            _this.origin_ = [0, 0];
            /**
             * @private
             * @type {number}
             */
            _this.points_ = options.points;
            /**
             * @protected
             * @type {number}
             */
            _this.radius_ =
                options.radius !== undefined ? options.radius : options.radius1;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.radius2_ = options.radius2;
            /**
             * @private
             * @type {number}
             */
            _this.angle_ = options.angle !== undefined ? options.angle : 0;
            /**
             * @private
             * @type {import("./Stroke.js").default}
             */
            _this.stroke_ = options.stroke !== undefined ? options.stroke : null;
            /**
             * @private
             * @type {Array<number>}
             */
            _this.anchor_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            _this.size_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            _this.imageSize_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            _this.hitDetectionImageSize_ = null;
            _this.render();
            return _this;
        }
        /**
         * Clones the style.
         * @return {RegularShape} The cloned style.
         * @api
         */
        RegularShape.prototype.clone = function () {
            var scale = this.getScale();
            var style = new RegularShape({
                fill: this.getFill() ? this.getFill().clone() : undefined,
                points: this.getPoints(),
                radius: this.getRadius(),
                radius2: this.getRadius2(),
                angle: this.getAngle(),
                stroke: this.getStroke() ? this.getStroke().clone() : undefined,
                rotation: this.getRotation(),
                rotateWithView: this.getRotateWithView(),
                scale: Array.isArray(scale) ? scale.slice() : scale,
                displacement: this.getDisplacement().slice(),
            });
            style.setOpacity(this.getOpacity());
            return style;
        };
        /**
         * Get the anchor point in pixels. The anchor determines the center point for the
         * symbolizer.
         * @return {Array<number>} Anchor.
         * @api
         */
        RegularShape.prototype.getAnchor = function () {
            return this.anchor_;
        };
        /**
         * Get the angle used in generating the shape.
         * @return {number} Shape's rotation in radians.
         * @api
         */
        RegularShape.prototype.getAngle = function () {
            return this.angle_;
        };
        /**
         * Get the fill style for the shape.
         * @return {import("./Fill.js").default} Fill style.
         * @api
         */
        RegularShape.prototype.getFill = function () {
            return this.fill_;
        };
        /**
         * @return {HTMLCanvasElement} Image element.
         */
        RegularShape.prototype.getHitDetectionImage = function () {
            if (!this.hitDetectionCanvas_) {
                var renderOptions = this.createRenderOptions();
                this.createHitDetectionCanvas_(renderOptions);
            }
            return this.hitDetectionCanvas_;
        };
        /**
         * Get the image icon.
         * @param {number} pixelRatio Pixel ratio.
         * @return {HTMLCanvasElement} Image or Canvas element.
         * @api
         */
        RegularShape.prototype.getImage = function (pixelRatio) {
            if (!this.canvas_[pixelRatio || 1]) {
                var renderOptions = this.createRenderOptions();
                var context = createCanvasContext2D(renderOptions.size * pixelRatio || 1, renderOptions.size * pixelRatio || 1);
                this.draw_(renderOptions, context, 0, 0, pixelRatio || 1);
                this.canvas_[pixelRatio || 1] = context.canvas;
            }
            return this.canvas_[pixelRatio || 1];
        };
        /*
         * Get the image pixel ratio.
         * @param {number} pixelRatio Pixel ratio.
         * */
        RegularShape.prototype.getPixelRatio = function (pixelRatio) {
            return pixelRatio;
        };
        /**
         * @return {import("../size.js").Size} Image size.
         */
        RegularShape.prototype.getImageSize = function () {
            return this.imageSize_;
        };
        /**
         * @return {import("../size.js").Size} Size of the hit-detection image.
         */
        RegularShape.prototype.getHitDetectionImageSize = function () {
            return this.hitDetectionImageSize_;
        };
        /**
         * @return {import("../ImageState.js").default} Image state.
         */
        RegularShape.prototype.getImageState = function () {
            return ImageState.LOADED;
        };
        /**
         * Get the origin of the symbolizer.
         * @return {Array<number>} Origin.
         * @api
         */
        RegularShape.prototype.getOrigin = function () {
            return this.origin_;
        };
        /**
         * Get the number of points for generating the shape.
         * @return {number} Number of points for stars and regular polygons.
         * @api
         */
        RegularShape.prototype.getPoints = function () {
            return this.points_;
        };
        /**
         * Get the (primary) radius for the shape.
         * @return {number} Radius.
         * @api
         */
        RegularShape.prototype.getRadius = function () {
            return this.radius_;
        };
        /**
         * Get the secondary radius for the shape.
         * @return {number|undefined} Radius2.
         * @api
         */
        RegularShape.prototype.getRadius2 = function () {
            return this.radius2_;
        };
        /**
         * Get the size of the symbolizer (in pixels).
         * @return {import("../size.js").Size} Size.
         * @api
         */
        RegularShape.prototype.getSize = function () {
            return this.size_;
        };
        /**
         * Get the stroke style for the shape.
         * @return {import("./Stroke.js").default} Stroke style.
         * @api
         */
        RegularShape.prototype.getStroke = function () {
            return this.stroke_;
        };
        /**
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        RegularShape.prototype.listenImageChange = function (listener) { };
        /**
         * Load not yet loaded URI.
         */
        RegularShape.prototype.load = function () { };
        /**
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        RegularShape.prototype.unlistenImageChange = function (listener) { };
        /**
         * @returns {RenderOptions}  The render options
         * @protected
         */
        RegularShape.prototype.createRenderOptions = function () {
            var lineCap = defaultLineCap;
            var lineJoin = defaultLineJoin;
            var miterLimit = 0;
            var lineDash = null;
            var lineDashOffset = 0;
            var strokeStyle;
            var strokeWidth = 0;
            if (this.stroke_) {
                strokeStyle = this.stroke_.getColor();
                if (strokeStyle === null) {
                    strokeStyle = defaultStrokeStyle;
                }
                strokeStyle = asColorLike(strokeStyle);
                strokeWidth = this.stroke_.getWidth();
                if (strokeWidth === undefined) {
                    strokeWidth = defaultLineWidth;
                }
                lineDash = this.stroke_.getLineDash();
                lineDashOffset = this.stroke_.getLineDashOffset();
                lineJoin = this.stroke_.getLineJoin();
                if (lineJoin === undefined) {
                    lineJoin = defaultLineJoin;
                }
                lineCap = this.stroke_.getLineCap();
                if (lineCap === undefined) {
                    lineCap = defaultLineCap;
                }
                miterLimit = this.stroke_.getMiterLimit();
                if (miterLimit === undefined) {
                    miterLimit = defaultMiterLimit;
                }
            }
            var size = 2 * (this.radius_ + strokeWidth) + 1;
            return {
                strokeStyle: strokeStyle,
                strokeWidth: strokeWidth,
                size: size,
                lineCap: lineCap,
                lineDash: lineDash,
                lineDashOffset: lineDashOffset,
                lineJoin: lineJoin,
                miterLimit: miterLimit,
            };
        };
        /**
         * @protected
         */
        RegularShape.prototype.render = function () {
            var renderOptions = this.createRenderOptions();
            var context = createCanvasContext2D(renderOptions.size, renderOptions.size);
            this.draw_(renderOptions, context, 0, 0, 1);
            this.canvas_ = {};
            this.canvas_[1] = context.canvas;
            // canvas.width and height are rounded to the closest integer
            var size = context.canvas.width;
            var imageSize = size;
            var displacement = this.getDisplacement();
            this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];
            this.createHitDetectionCanvas_(renderOptions);
            this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];
            this.size_ = [size, size];
            this.imageSize_ = [imageSize, imageSize];
        };
        /**
         * @private
         * @param {RenderOptions} renderOptions Render options.
         * @param {CanvasRenderingContext2D} context The rendering context.
         * @param {number} x The origin for the symbol (x).
         * @param {number} y The origin for the symbol (y).
         * @param {number} pixelRatio The pixel ratio.
         */
        RegularShape.prototype.draw_ = function (renderOptions, context, x, y, pixelRatio) {
            var i, angle0, radiusC;
            // reset transform
            context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
            // then move to (x, y)
            context.translate(x, y);
            context.beginPath();
            var points = this.points_;
            if (points === Infinity) {
                context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);
            }
            else {
                var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;
                if (radius2 !== this.radius_) {
                    points = 2 * points;
                }
                for (i = 0; i <= points; i++) {
                    angle0 = (i * 2 * Math.PI) / points - Math.PI / 2 + this.angle_;
                    radiusC = i % 2 === 0 ? this.radius_ : radius2;
                    context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));
                }
            }
            if (this.fill_) {
                var color = this.fill_.getColor();
                if (color === null) {
                    color = defaultFillStyle;
                }
                context.fillStyle = asColorLike(color);
                context.fill();
            }
            if (this.stroke_) {
                context.strokeStyle = renderOptions.strokeStyle;
                context.lineWidth = renderOptions.strokeWidth;
                if (context.setLineDash && renderOptions.lineDash) {
                    context.setLineDash(renderOptions.lineDash);
                    context.lineDashOffset = renderOptions.lineDashOffset;
                }
                context.lineCap = renderOptions.lineCap;
                context.lineJoin = renderOptions.lineJoin;
                context.miterLimit = renderOptions.miterLimit;
                context.stroke();
            }
            context.closePath();
        };
        /**
         * @private
         * @param {RenderOptions} renderOptions Render options.
         */
        RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {
            this.hitDetectionCanvas_ = this.getImage(1);
            if (this.fill_) {
                var color = this.fill_.getColor();
                // determine if fill is transparent (or pattern or gradient)
                var opacity = 0;
                if (typeof color === 'string') {
                    color = asArray(color);
                }
                if (color === null) {
                    opacity = 1;
                }
                else if (Array.isArray(color)) {
                    opacity = color.length === 4 ? color[3] : 1;
                }
                if (opacity === 0) {
                    // if a transparent fill style is set, create an extra hit-detection image
                    // with a default fill style
                    var context = createCanvasContext2D(renderOptions.size, renderOptions.size);
                    this.hitDetectionCanvas_ = context.canvas;
                    this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);
                }
            }
        };
        /**
         * @private
         * @param {RenderOptions} renderOptions Render options.
         * @param {CanvasRenderingContext2D} context The context.
         * @param {number} x The origin for the symbol (x).
         * @param {number} y The origin for the symbol (y).
         */
        RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context, x, y) {
            // move to (x, y)
            context.translate(x, y);
            context.beginPath();
            var points = this.points_;
            if (points === Infinity) {
                context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);
            }
            else {
                var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;
                if (radius2 !== this.radius_) {
                    points = 2 * points;
                }
                var i = void 0, radiusC = void 0, angle0 = void 0;
                for (i = 0; i <= points; i++) {
                    angle0 = (i * 2 * Math.PI) / points - Math.PI / 2 + this.angle_;
                    radiusC = i % 2 === 0 ? this.radius_ : radius2;
                    context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));
                }
            }
            context.fillStyle = defaultFillStyle;
            context.fill();
            if (this.stroke_) {
                context.strokeStyle = renderOptions.strokeStyle;
                context.lineWidth = renderOptions.strokeWidth;
                if (renderOptions.lineDash) {
                    context.setLineDash(renderOptions.lineDash);
                    context.lineDashOffset = renderOptions.lineDashOffset;
                }
                context.stroke();
            }
            context.closePath();
        };
        return RegularShape;
    }(ImageStyle));

    /**
     * @module ol/style/Circle
     */
    var __extends$g = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Fill.js").default} [fill] Fill style.
     * @property {number} radius Circle radius.
     * @property {import("./Stroke.js").default} [stroke] Stroke style.
     * @property {Array<number>} [displacement=[0,0]] displacement
     * @property {number|import("../size.js").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.
     * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.
     * @property {number} [rotation=0] Rotation in radians
     * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).
     * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view
     * (meaningful only when used in conjunction with a two dimensional scale).
     */
    /**
     * @classdesc
     * Set circle style for vector features.
     * @api
     */
    var CircleStyle = /** @class */ (function (_super) {
        __extends$g(CircleStyle, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function CircleStyle(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                points: Infinity,
                fill: options.fill,
                radius: options.radius,
                stroke: options.stroke,
                scale: options.scale !== undefined ? options.scale : 1,
                rotation: options.rotation !== undefined ? options.rotation : 0,
                rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,
                displacement: options.displacement !== undefined ? options.displacement : [0, 0],
            }) || this;
            return _this;
        }
        /**
         * Clones the style.
         * @return {CircleStyle} The cloned style.
         * @api
         */
        CircleStyle.prototype.clone = function () {
            var scale = this.getScale();
            var style = new CircleStyle({
                fill: this.getFill() ? this.getFill().clone() : undefined,
                stroke: this.getStroke() ? this.getStroke().clone() : undefined,
                radius: this.getRadius(),
                scale: Array.isArray(scale) ? scale.slice() : scale,
                rotation: this.getRotation(),
                rotateWithView: this.getRotateWithView(),
                displacement: this.getDisplacement().slice(),
            });
            style.setOpacity(this.getOpacity());
            return style;
        };
        /**
         * Set the circle radius.
         *
         * @param {number} radius Circle radius.
         * @api
         */
        CircleStyle.prototype.setRadius = function (radius) {
            this.radius_ = radius;
            this.render();
        };
        return CircleStyle;
    }(RegularShape));

    /**
     * @module ol/style/Style
     */
    /**
     * A function that takes an {@link module:ol/Feature} and a `{number}`
     * representing the view's resolution. The function should return a
     * {@link module:ol/style/Style} or an array of them. This way e.g. a
     * vector layer can be styled. If the function returns `undefined`, the
     * feature will not be rendered.
     *
     * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction
     */
    /**
     * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
     * @typedef {Style|Array<Style>|StyleFunction} StyleLike
     */
    /**
     * A function that takes an {@link module:ol/Feature} as argument and returns an
     * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.
     *
     * @typedef {function(import("../Feature.js").FeatureLike):
     *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
     */
    /**
     * Custom renderer function. Takes two arguments:
     *
     * 1. The pixel coordinates of the geometry in GeoJSON notation.
     * 2. The {@link module:ol/render~State} of the layer renderer.
     *
     * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State): void}
     * RenderFunction
     */
    /**
     * @typedef {Object} Options
     * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
     * or function returning a geometry to render for this style.
     * @property {import("./Fill.js").default} [fill] Fill style.
     * @property {import("./Image.js").default} [image] Image style.
     * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
     * ignored, and the provided function will be called with each render frame for each geometry.
     * @property {import("./Stroke.js").default} [stroke] Stroke style.
     * @property {import("./Text.js").default} [text] Text style.
     * @property {number} [zIndex] Z index.
     */
    /**
     * @classdesc
     * Container for vector feature rendering styles. Any changes made to the style
     * or its children through `set*()` methods will not take effect until the
     * feature or layer that uses the style is re-rendered.
     *
     * ## Feature styles
     *
     * If no style is defined, the following default style is used:
     * ```js
     *  import {Fill, Stroke, Circle, Style} from 'ol/style';
     *
     *  var fill = new Fill({
     *    color: 'rgba(255,255,255,0.4)'
     *  });
     *  var stroke = new Stroke({
     *    color: '#3399CC',
     *    width: 1.25
     *  });
     *  var styles = [
     *    new Style({
     *      image: new Circle({
     *        fill: fill,
     *        stroke: stroke,
     *        radius: 5
     *      }),
     *      fill: fill,
     *      stroke: stroke
     *    })
     *  ];
     * ```
     *
     * A separate editing style has the following defaults:
     * ```js
     *  import {Fill, Stroke, Circle, Style} from 'ol/style';
     *  import GeometryType from 'ol/geom/GeometryType';
     *
     *  var white = [255, 255, 255, 1];
     *  var blue = [0, 153, 255, 1];
     *  var width = 3;
     *  styles[GeometryType.POLYGON] = [
     *    new Style({
     *      fill: new Fill({
     *        color: [255, 255, 255, 0.5]
     *      })
     *    })
     *  ];
     *  styles[GeometryType.MULTI_POLYGON] =
     *      styles[GeometryType.POLYGON];
     *  styles[GeometryType.LINE_STRING] = [
     *    new Style({
     *      stroke: new Stroke({
     *        color: white,
     *        width: width + 2
     *      })
     *    }),
     *    new Style({
     *      stroke: new Stroke({
     *        color: blue,
     *        width: width
     *      })
     *    })
     *  ];
     *  styles[GeometryType.MULTI_LINE_STRING] =
     *      styles[GeometryType.LINE_STRING];
     *  styles[GeometryType.POINT] = [
     *    new Style({
     *      image: new Circle({
     *        radius: width * 2,
     *        fill: new Fill({
     *          color: blue
     *        }),
     *        stroke: new Stroke({
     *          color: white,
     *          width: width / 2
     *        })
     *      }),
     *      zIndex: Infinity
     *    })
     *  ];
     *  styles[GeometryType.MULTI_POINT] =
     *      styles[GeometryType.POINT];
     *  styles[GeometryType.GEOMETRY_COLLECTION] =
     *      styles[GeometryType.POLYGON].concat(
     *          styles[GeometryType.LINE_STRING],
     *          styles[GeometryType.POINT]
     *      );
     * ```
     *
     * @api
     */
    var Style = /** @class */ (function () {
        /**
         * @param {Options=} opt_options Style options.
         */
        function Style(opt_options) {
            var options = opt_options || {};
            /**
             * @private
             * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
             */
            this.geometry_ = null;
            /**
             * @private
             * @type {!GeometryFunction}
             */
            this.geometryFunction_ = defaultGeometryFunction;
            if (options.geometry !== undefined) {
                this.setGeometry(options.geometry);
            }
            /**
             * @private
             * @type {import("./Fill.js").default}
             */
            this.fill_ = options.fill !== undefined ? options.fill : null;
            /**
             * @private
             * @type {import("./Image.js").default}
             */
            this.image_ = options.image !== undefined ? options.image : null;
            /**
             * @private
             * @type {RenderFunction|null}
             */
            this.renderer_ = options.renderer !== undefined ? options.renderer : null;
            /**
             * @private
             * @type {import("./Stroke.js").default}
             */
            this.stroke_ = options.stroke !== undefined ? options.stroke : null;
            /**
             * @private
             * @type {import("./Text.js").default}
             */
            this.text_ = options.text !== undefined ? options.text : null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.zIndex_ = options.zIndex;
        }
        /**
         * Clones the style.
         * @return {Style} The cloned style.
         * @api
         */
        Style.prototype.clone = function () {
            var geometry = this.getGeometry();
            if (geometry && typeof geometry === 'object') {
                geometry = /** @type {import("../geom/Geometry.js").default} */ (geometry).clone();
            }
            return new Style({
                geometry: geometry,
                fill: this.getFill() ? this.getFill().clone() : undefined,
                image: this.getImage() ? this.getImage().clone() : undefined,
                stroke: this.getStroke() ? this.getStroke().clone() : undefined,
                text: this.getText() ? this.getText().clone() : undefined,
                zIndex: this.getZIndex(),
            });
        };
        /**
         * Get the custom renderer function that was configured with
         * {@link #setRenderer} or the `renderer` constructor option.
         * @return {RenderFunction|null} Custom renderer function.
         * @api
         */
        Style.prototype.getRenderer = function () {
            return this.renderer_;
        };
        /**
         * Sets a custom renderer function for this style. When set, `fill`, `stroke`
         * and `image` options of the style will be ignored.
         * @param {RenderFunction|null} renderer Custom renderer function.
         * @api
         */
        Style.prototype.setRenderer = function (renderer) {
            this.renderer_ = renderer;
        };
        /**
         * Get the geometry to be rendered.
         * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
         * Feature property or geometry or function that returns the geometry that will
         * be rendered with this style.
         * @api
         */
        Style.prototype.getGeometry = function () {
            return this.geometry_;
        };
        /**
         * Get the function used to generate a geometry for rendering.
         * @return {!GeometryFunction} Function that is called with a feature
         * and returns the geometry to render instead of the feature's geometry.
         * @api
         */
        Style.prototype.getGeometryFunction = function () {
            return this.geometryFunction_;
        };
        /**
         * Get the fill style.
         * @return {import("./Fill.js").default} Fill style.
         * @api
         */
        Style.prototype.getFill = function () {
            return this.fill_;
        };
        /**
         * Set the fill style.
         * @param {import("./Fill.js").default} fill Fill style.
         * @api
         */
        Style.prototype.setFill = function (fill) {
            this.fill_ = fill;
        };
        /**
         * Get the image style.
         * @return {import("./Image.js").default} Image style.
         * @api
         */
        Style.prototype.getImage = function () {
            return this.image_;
        };
        /**
         * Set the image style.
         * @param {import("./Image.js").default} image Image style.
         * @api
         */
        Style.prototype.setImage = function (image) {
            this.image_ = image;
        };
        /**
         * Get the stroke style.
         * @return {import("./Stroke.js").default} Stroke style.
         * @api
         */
        Style.prototype.getStroke = function () {
            return this.stroke_;
        };
        /**
         * Set the stroke style.
         * @param {import("./Stroke.js").default} stroke Stroke style.
         * @api
         */
        Style.prototype.setStroke = function (stroke) {
            this.stroke_ = stroke;
        };
        /**
         * Get the text style.
         * @return {import("./Text.js").default} Text style.
         * @api
         */
        Style.prototype.getText = function () {
            return this.text_;
        };
        /**
         * Set the text style.
         * @param {import("./Text.js").default} text Text style.
         * @api
         */
        Style.prototype.setText = function (text) {
            this.text_ = text;
        };
        /**
         * Get the z-index for the style.
         * @return {number|undefined} ZIndex.
         * @api
         */
        Style.prototype.getZIndex = function () {
            return this.zIndex_;
        };
        /**
         * Set a geometry that is rendered instead of the feature's geometry.
         *
         * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
         *     Feature property or geometry or function returning a geometry to render
         *     for this style.
         * @api
         */
        Style.prototype.setGeometry = function (geometry) {
            if (typeof geometry === 'function') {
                this.geometryFunction_ = geometry;
            }
            else if (typeof geometry === 'string') {
                this.geometryFunction_ = function (feature) {
                    return /** @type {import("../geom/Geometry.js").default} */ (feature.get(geometry));
                };
            }
            else if (!geometry) {
                this.geometryFunction_ = defaultGeometryFunction;
            }
            else if (geometry !== undefined) {
                this.geometryFunction_ = function () {
                    return /** @type {import("../geom/Geometry.js").default} */ (geometry);
                };
            }
            this.geometry_ = geometry;
        };
        /**
         * Set the z-index.
         *
         * @param {number|undefined} zIndex ZIndex.
         * @api
         */
        Style.prototype.setZIndex = function (zIndex) {
            this.zIndex_ = zIndex;
        };
        return Style;
    }());
    /**
     * Convert the provided object into a style function.  Functions passed through
     * unchanged.  Arrays of Style or single style objects wrapped in a
     * new style function.
     * @param {StyleFunction|Array<Style>|Style} obj
     *     A style function, a single style, or an array of styles.
     * @return {StyleFunction} A style function.
     */
    function toFunction(obj) {
        var styleFunction;
        if (typeof obj === 'function') {
            styleFunction = obj;
        }
        else {
            /**
             * @type {Array<Style>}
             */
            var styles_1;
            if (Array.isArray(obj)) {
                styles_1 = obj;
            }
            else {
                assert(typeof ( /** @type {?} */(obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`
                var style = /** @type {Style} */ (obj);
                styles_1 = [style];
            }
            styleFunction = function () {
                return styles_1;
            };
        }
        return styleFunction;
    }
    /**
     * @type {Array<Style>}
     */
    var defaultStyles = null;
    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} resolution Resolution.
     * @return {Array<Style>} Style.
     */
    function createDefaultStyle(feature, resolution) {
        // We don't use an immediately-invoked function
        // and a closure so we don't get an error at script evaluation time in
        // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
        // canvas.getContext('2d') at construction time, which will cause an.error
        // in such browsers.)
        if (!defaultStyles) {
            var fill = new Fill({
                color: 'rgba(255,255,255,0.4)',
            });
            var stroke = new Stroke({
                color: '#3399CC',
                width: 1.25,
            });
            defaultStyles = [
                new Style({
                    image: new CircleStyle({
                        fill: fill,
                        stroke: stroke,
                        radius: 5,
                    }),
                    fill: fill,
                    stroke: stroke,
                }),
            ];
        }
        return defaultStyles;
    }
    /**
     * Function that is called with a feature and returns its default geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
     * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
     */
    function defaultGeometryFunction(feature) {
        return feature.getGeometry();
    }

    /**
     * @module ol/style/TextPlacement
     */
    /**
     * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
     * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
     * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
     * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
     * @enum {string}
     */
    var TextPlacement = {
        POINT: 'point',
        LINE: 'line',
    };

    /**
     * @module ol/layer/Property
     */
    /**
     * @enum {string}
     */
    var LayerProperty = {
        OPACITY: 'opacity',
        VISIBLE: 'visible',
        EXTENT: 'extent',
        Z_INDEX: 'zIndex',
        MAX_RESOLUTION: 'maxResolution',
        MIN_RESOLUTION: 'minResolution',
        MAX_ZOOM: 'maxZoom',
        MIN_ZOOM: 'minZoom',
        SOURCE: 'source',
    };

    var __extends$h = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
     * the options is set as a {@link module:ol/Object} property on the layer object, so
     * is observable, and has get/set accessors.
     *
     * @api
     */
    var BaseLayer = /** @class */ (function (_super) {
        __extends$h(BaseLayer, _super);
        /**
         * @param {Options} options Layer options.
         */
        function BaseLayer(options) {
            var _this = _super.call(this) || this;
            /**
             * @type {Object<string, *>}
             */
            var properties = assign$1({}, options);
            properties[LayerProperty.OPACITY] =
                options.opacity !== undefined ? options.opacity : 1;
            assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number
            properties[LayerProperty.VISIBLE] =
                options.visible !== undefined ? options.visible : true;
            properties[LayerProperty.Z_INDEX] = options.zIndex;
            properties[LayerProperty.MAX_RESOLUTION] =
                options.maxResolution !== undefined ? options.maxResolution : Infinity;
            properties[LayerProperty.MIN_RESOLUTION] =
                options.minResolution !== undefined ? options.minResolution : 0;
            properties[LayerProperty.MIN_ZOOM] =
                options.minZoom !== undefined ? options.minZoom : -Infinity;
            properties[LayerProperty.MAX_ZOOM] =
                options.maxZoom !== undefined ? options.maxZoom : Infinity;
            /**
             * @type {string}
             * @private
             */
            _this.className_ =
                properties.className !== undefined ? options.className : 'ol-layer';
            delete properties.className;
            _this.setProperties(properties);
            /**
             * @type {import("./Layer.js").State}
             * @private
             */
            _this.state_ = null;
            return _this;
        }
        /**
         * @return {string} CSS class name.
         */
        BaseLayer.prototype.getClassName = function () {
            return this.className_;
        };
        /**
         * This method is not meant to be called by layers or layer renderers because the state
         * is incorrect if the layer is included in a layer group.
         *
         * @param {boolean=} opt_managed Layer is managed.
         * @return {import("./Layer.js").State} Layer state.
         */
        BaseLayer.prototype.getLayerState = function (opt_managed) {
            /** @type {import("./Layer.js").State} */
            var state = this.state_ ||
                /** @type {?} */ ({
                    layer: this,
                    managed: opt_managed === undefined ? true : opt_managed,
                });
            var zIndex = this.getZIndex();
            state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
            state.sourceState = this.getSourceState();
            state.visible = this.getVisible();
            state.extent = this.getExtent();
            state.zIndex =
                zIndex !== undefined ? zIndex : state.managed === false ? Infinity : 0;
            state.maxResolution = this.getMaxResolution();
            state.minResolution = Math.max(this.getMinResolution(), 0);
            state.minZoom = this.getMinZoom();
            state.maxZoom = this.getMaxZoom();
            this.state_ = state;
            return state;
        };
        /**
         * @abstract
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be
         *     modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        BaseLayer.prototype.getLayersArray = function (opt_array) {
            return abstract();
        };
        /**
         * @abstract
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer
         *     states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        BaseLayer.prototype.getLayerStatesArray = function (opt_states) {
            return abstract();
        };
        /**
         * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
         * will be visible regardless of extent.
         * @return {import("../extent.js").Extent|undefined} The layer extent.
         * @observable
         * @api
         */
        BaseLayer.prototype.getExtent = function () {
            return /** @type {import("../extent.js").Extent|undefined} */ (this.get(LayerProperty.EXTENT));
        };
        /**
         * Return the maximum resolution of the layer.
         * @return {number} The maximum resolution of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getMaxResolution = function () {
            return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
        };
        /**
         * Return the minimum resolution of the layer.
         * @return {number} The minimum resolution of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getMinResolution = function () {
            return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
        };
        /**
         * Return the minimum zoom level of the layer.
         * @return {number} The minimum zoom level of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getMinZoom = function () {
            return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));
        };
        /**
         * Return the maximum zoom level of the layer.
         * @return {number} The maximum zoom level of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getMaxZoom = function () {
            return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));
        };
        /**
         * Return the opacity of the layer (between 0 and 1).
         * @return {number} The opacity of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getOpacity = function () {
            return /** @type {number} */ (this.get(LayerProperty.OPACITY));
        };
        /**
         * @abstract
         * @return {import("../source/State.js").default} Source state.
         */
        BaseLayer.prototype.getSourceState = function () {
            return abstract();
        };
        /**
         * Return the visibility of the layer (`true` or `false`).
         * @return {boolean} The visibility of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getVisible = function () {
            return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
        };
        /**
         * Return the Z-index of the layer, which is used to order layers before
         * rendering. The default Z-index is 0.
         * @return {number} The Z-index of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getZIndex = function () {
            return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));
        };
        /**
         * Set the extent at which the layer is visible.  If `undefined`, the layer
         * will be visible at all extents.
         * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setExtent = function (extent) {
            this.set(LayerProperty.EXTENT, extent);
        };
        /**
         * Set the maximum resolution at which the layer is visible.
         * @param {number} maxResolution The maximum resolution of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setMaxResolution = function (maxResolution) {
            this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
        };
        /**
         * Set the minimum resolution at which the layer is visible.
         * @param {number} minResolution The minimum resolution of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setMinResolution = function (minResolution) {
            this.set(LayerProperty.MIN_RESOLUTION, minResolution);
        };
        /**
         * Set the maximum zoom (exclusive) at which the layer is visible.
         * Note that the zoom levels for layer visibility are based on the
         * view zoom level, which may be different from a tile source zoom level.
         * @param {number} maxZoom The maximum zoom of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setMaxZoom = function (maxZoom) {
            this.set(LayerProperty.MAX_ZOOM, maxZoom);
        };
        /**
         * Set the minimum zoom (inclusive) at which the layer is visible.
         * Note that the zoom levels for layer visibility are based on the
         * view zoom level, which may be different from a tile source zoom level.
         * @param {number} minZoom The minimum zoom of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setMinZoom = function (minZoom) {
            this.set(LayerProperty.MIN_ZOOM, minZoom);
        };
        /**
         * Set the opacity of the layer, allowed values range from 0 to 1.
         * @param {number} opacity The opacity of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setOpacity = function (opacity) {
            assert(typeof opacity === 'number', 64); // Layer opacity must be a number
            this.set(LayerProperty.OPACITY, opacity);
        };
        /**
         * Set the visibility of the layer (`true` or `false`).
         * @param {boolean} visible The visibility of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setVisible = function (visible) {
            this.set(LayerProperty.VISIBLE, visible);
        };
        /**
         * Set Z-index of the layer, which is used to order layers before rendering.
         * The default Z-index is 0.
         * @param {number} zindex The z-index of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setZIndex = function (zindex) {
            this.set(LayerProperty.Z_INDEX, zindex);
        };
        /**
         * Clean up.
         */
        BaseLayer.prototype.disposeInternal = function () {
            if (this.state_) {
                this.state_.layer = null;
                this.state_ = null;
            }
            _super.prototype.disposeInternal.call(this);
        };
        return BaseLayer;
    }(BaseObject));

    /**
     * @module ol/source/State
     */
    /**
     * @enum {string}
     * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
     */
    var SourceState = {
        UNDEFINED: 'undefined',
        LOADING: 'loading',
        READY: 'ready',
        ERROR: 'error',
    };

    var __extends$i = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {function(import("../PluggableMap.js").FrameState):HTMLElement} RenderFunction
     */
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {import("../source/Source.js").default} [source] Source for this layer.  If not provided to the constructor,
     * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
     * construction.
     * @property {import("../PluggableMap.js").default} [map] Map.
     * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
     * HTML element. Will overwrite the default rendering for the layer.
     */
    /**
     * @typedef {Object} State
     * @property {import("./Layer.js").default} layer
     * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
     * @property {import("../source/State.js").default} sourceState
     * @property {boolean} visible
     * @property {boolean} managed
     * @property {import("../extent.js").Extent} [extent]
     * @property {number} zIndex
     * @property {number} maxResolution
     * @property {number} minResolution
     * @property {number} minZoom
     * @property {number} maxZoom
     */
    /**
     * @classdesc
     * Base class from which all layer types are derived. This should only be instantiated
     * in the case where a custom layer is be added to the map with a custom `render` function.
     * Such a function can be specified in the `options` object, and is expected to return an HTML element.
     *
     * A visual representation of raster or vector map data.
     * Layers group together those properties that pertain to how the data is to be
     * displayed, irrespective of the source of that data.
     *
     * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
     * like {@link module:ol/interaction/Select~Select} use unmanaged layers
     * internally. These unmanaged layers are associated with the map using
     * {@link module:ol/layer/Layer~Layer#setMap} instead.
     *
     * A generic `change` event is fired when the state of the source changes.
     *
     * Please note that for performance reasons several layers might get rendered to
     * the same HTML element, which will cause {@link module:ol/Map~Map#forEachLayerAtPixel} to
     * give false positives. To avoid this, apply different `className` properties to the
     * layers at creation time.
     *
     * @fires import("../render/Event.js").RenderEvent#prerender
     * @fires import("../render/Event.js").RenderEvent#postrender
     *
     * @template {import("../source/Source.js").default} SourceType
     * @api
     */
    var Layer = /** @class */ (function (_super) {
        __extends$i(Layer, _super);
        /**
         * @param {Options} options Layer options.
         */
        function Layer(options) {
            var _this = this;
            var baseOptions = assign$1({}, options);
            delete baseOptions.source;
            _this = _super.call(this, baseOptions) || this;
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            _this.mapPrecomposeKey_ = null;
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            _this.mapRenderKey_ = null;
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            _this.sourceChangeKey_ = null;
            /**
             * @private
             * @type {import("../renderer/Layer.js").default}
             */
            _this.renderer_ = null;
            // Overwrite default render method with a custom one
            if (options.render) {
                _this.render = options.render;
            }
            if (options.map) {
                _this.setMap(options.map);
            }
            _this.addEventListener(getChangeEventType(LayerProperty.SOURCE), _this.handleSourcePropertyChange_);
            var source = options.source
                ? /** @type {SourceType} */ (options.source)
                : null;
            _this.setSource(source);
            return _this;
        }
        /**
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        Layer.prototype.getLayersArray = function (opt_array) {
            var array = opt_array ? opt_array : [];
            array.push(this);
            return array;
        };
        /**
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        Layer.prototype.getLayerStatesArray = function (opt_states) {
            var states = opt_states ? opt_states : [];
            states.push(this.getLayerState());
            return states;
        };
        /**
         * Get the layer source.
         * @return {SourceType} The layer source (or `null` if not yet set).
         * @observable
         * @api
         */
        Layer.prototype.getSource = function () {
            return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;
        };
        /**
         * @return {import("../source/State.js").default} Source state.
         */
        Layer.prototype.getSourceState = function () {
            var source = this.getSource();
            return !source ? SourceState.UNDEFINED : source.getState();
        };
        /**
         * @private
         */
        Layer.prototype.handleSourceChange_ = function () {
            this.changed();
        };
        /**
         * @private
         */
        Layer.prototype.handleSourcePropertyChange_ = function () {
            if (this.sourceChangeKey_) {
                unlistenByKey(this.sourceChangeKey_);
                this.sourceChangeKey_ = null;
            }
            var source = this.getSource();
            if (source) {
                this.sourceChangeKey_ = listen$1(source, EventType.CHANGE, this.handleSourceChange_, this);
            }
            this.changed();
        };
        /**
         * @param {import("../pixel").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
         * an array of features.
         */
        Layer.prototype.getFeatures = function (pixel) {
            return this.renderer_.getFeatures(pixel);
        };
        /**
         * In charge to manage the rendering of the layer. One layer type is
         * bounded with one layer renderer.
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target which the renderer may (but need not) use
         * for rendering its content.
         * @return {HTMLElement} The rendered element.
         */
        Layer.prototype.render = function (frameState, target) {
            var layerRenderer = this.getRenderer();
            if (layerRenderer.prepareFrame(frameState)) {
                return layerRenderer.renderFrame(frameState, target);
            }
        };
        /**
         * Sets the layer to be rendered on top of other layers on a map. The map will
         * not manage this layer in its layers collection, and the callback in
         * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
         * is useful for temporary layers. To remove an unmanaged layer from the map,
         * use `#setMap(null)`.
         *
         * To add the layer to a map and have it managed by the map, use
         * {@link module:ol/Map#addLayer} instead.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        Layer.prototype.setMap = function (map) {
            if (this.mapPrecomposeKey_) {
                unlistenByKey(this.mapPrecomposeKey_);
                this.mapPrecomposeKey_ = null;
            }
            if (!map) {
                this.changed();
            }
            if (this.mapRenderKey_) {
                unlistenByKey(this.mapRenderKey_);
                this.mapRenderKey_ = null;
            }
            if (map) {
                this.mapPrecomposeKey_ = listen$1(map, RenderEventType.PRECOMPOSE, function (evt) {
                    var renderEvent = /** @type {import("../render/Event.js").default} */ (evt);
                    var layerStatesArray = renderEvent.frameState.layerStatesArray;
                    var layerState = this.getLayerState(false);
                    // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.
                    assert(!layerStatesArray.some(function (arrayLayerState) {
                        return arrayLayerState.layer === layerState.layer;
                    }), 67);
                    layerStatesArray.push(layerState);
                }, this);
                this.mapRenderKey_ = listen$1(this, EventType.CHANGE, map.render, map);
                this.changed();
            }
        };
        /**
         * Set the layer source.
         * @param {SourceType} source The layer source.
         * @observable
         * @api
         */
        Layer.prototype.setSource = function (source) {
            this.set(LayerProperty.SOURCE, source);
        };
        /**
         * Get the renderer for this layer.
         * @return {import("../renderer/Layer.js").default} The layer renderer.
         */
        Layer.prototype.getRenderer = function () {
            if (!this.renderer_) {
                this.renderer_ = this.createRenderer();
            }
            return this.renderer_;
        };
        /**
         * @return {boolean} The layer has a renderer.
         */
        Layer.prototype.hasRenderer = function () {
            return !!this.renderer_;
        };
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         * @protected
         */
        Layer.prototype.createRenderer = function () {
            return null;
        };
        /**
         * Clean up.
         */
        Layer.prototype.disposeInternal = function () {
            this.setSource(null);
            _super.prototype.disposeInternal.call(this);
        };
        return Layer;
    }(BaseLayer));
    /**
     * Return `true` if the layer is visible and if the provided view state
     * has resolution and zoom levels that are in range of the layer's min/max.
     * @param {State} layerState Layer state.
     * @param {import("../View.js").State} viewState View state.
     * @return {boolean} The layer is visible at the given view state.
     */
    function inView(layerState, viewState) {
        if (!layerState.visible) {
            return false;
        }
        var resolution = viewState.resolution;
        if (resolution < layerState.minResolution ||
            resolution >= layerState.maxResolution) {
            return false;
        }
        var zoom = viewState.zoom;
        return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var rbush_min = createCommonjsModule(function (module, exports) {
    !function(t,i){module.exports=i();}(commonjsGlobal,function(){function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h);}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--;}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1);}}(t,r,e||0,a||t.length-1,h||n);}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r;}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear();};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return -1}function a(t,i){h(t,0,t.children.length,i,t);}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h);}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return (t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return {children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r);}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h));}i=e.pop();}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return !1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return !0;n.push(e);}}i=n.pop();}return !1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else {if(this.data.height<n.height){var r=this.data;this.data=n,n=r;}this._insert(n,this.data.height-n.height-1,!0);}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0]);}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1));}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s);}i=h||i.children[0];}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i);},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o);},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox);},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p);}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r);},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a);}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s);}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t);},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox);},r});
    });

    var __extends$j = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
     * features before rendering. By default features are drawn in the order that they are created. Use
     * `null` to avoid the sort, but get an undefined draw order.
     * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
     * renderer when getting features from the vector source for the rendering or hit-detection.
     * Recommended value: the size of the largest symbol, line width or label.
     * @property {import("../source/Vector.js").default} [source] Source.
     * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
     * this layer in its layers collection, and the layer will be rendered on top. This is useful for
     * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
     * use {@link module:ol/Map#addLayer}.
     * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
     * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
     * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
     * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
     * higher priority.
     * @property {import("../style/Style.js").StyleLike|null} [style] Layer style. When set to `null`, only
     * features that have their own style will be rendered. See {@link module:ol/style} for default style
     * which will be used if this is not set.
     * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
     * be recreated during animations. This means that no vectors will be shown clipped, but the
     * setting will have a performance impact for large amounts of vector data. When set to `false`,
     * batches will be recreated when no animation is active.
     * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
     * be recreated during interactions. See also `updateWhileAnimating`.
     */
    /**
     * @enum {string}
     * @private
     */
    var Property$2 = {
        RENDER_ORDER: 'renderOrder',
    };
    /**
     * @classdesc
     * Vector data that is rendered client-side.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
     * @extends {Layer<VectorSourceType>}
     * @api
     */
    var BaseVectorLayer = /** @class */ (function (_super) {
        __extends$j(BaseVectorLayer, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function BaseVectorLayer(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var baseOptions = assign$1({}, options);
            delete baseOptions.style;
            delete baseOptions.renderBuffer;
            delete baseOptions.updateWhileAnimating;
            delete baseOptions.updateWhileInteracting;
            _this = _super.call(this, baseOptions) || this;
            /**
             * @private
             * @type {boolean}
             */
            _this.declutter_ =
                options.declutter !== undefined ? options.declutter : false;
            /**
             * @type {number}
             * @private
             */
            _this.renderBuffer_ =
                options.renderBuffer !== undefined ? options.renderBuffer : 100;
            /**
             * User provided style.
             * @type {import("../style/Style.js").StyleLike}
             * @private
             */
            _this.style_ = null;
            /**
             * Style function for use within the library.
             * @type {import("../style/Style.js").StyleFunction|undefined}
             * @private
             */
            _this.styleFunction_ = undefined;
            _this.setStyle(options.style);
            /**
             * @type {boolean}
             * @private
             */
            _this.updateWhileAnimating_ =
                options.updateWhileAnimating !== undefined
                    ? options.updateWhileAnimating
                    : false;
            /**
             * @type {boolean}
             * @private
             */
            _this.updateWhileInteracting_ =
                options.updateWhileInteracting !== undefined
                    ? options.updateWhileInteracting
                    : false;
            return _this;
        }
        /**
         * @return {boolean} Declutter.
         */
        BaseVectorLayer.prototype.getDeclutter = function () {
            return this.declutter_;
        };
        /**
         * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
         * that resolves with an array of features. The array will either contain the topmost feature
         * when a hit was detected, or it will be empty.
         *
         * The hit detection algorithm used for this method is optimized for performance, but is less
         * accurate than the one used in {@link import("../PluggableMap.js").default#getFeaturesAtPixel}: Text
         * is not considered, and icons are only represented by their bounding box instead of the exact
         * image.
         *
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with an array of features.
         * @api
         */
        BaseVectorLayer.prototype.getFeatures = function (pixel) {
            return _super.prototype.getFeatures.call(this, pixel);
        };
        /**
         * @return {number|undefined} Render buffer.
         */
        BaseVectorLayer.prototype.getRenderBuffer = function () {
            return this.renderBuffer_;
        };
        /**
         * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
         *     order.
         */
        BaseVectorLayer.prototype.getRenderOrder = function () {
            return /** @type {import("../render.js").OrderFunction|null|undefined} */ (this.get(Property$2.RENDER_ORDER));
        };
        /**
         * Get the style for features.  This returns whatever was passed to the `style`
         * option at construction or to the `setStyle` method.
         * @return {import("../style/Style.js").StyleLike|null|undefined} Layer style.
         * @api
         */
        BaseVectorLayer.prototype.getStyle = function () {
            return this.style_;
        };
        /**
         * Get the style function.
         * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
         * @api
         */
        BaseVectorLayer.prototype.getStyleFunction = function () {
            return this.styleFunction_;
        };
        /**
         * @return {boolean} Whether the rendered layer should be updated while
         *     animating.
         */
        BaseVectorLayer.prototype.getUpdateWhileAnimating = function () {
            return this.updateWhileAnimating_;
        };
        /**
         * @return {boolean} Whether the rendered layer should be updated while
         *     interacting.
         */
        BaseVectorLayer.prototype.getUpdateWhileInteracting = function () {
            return this.updateWhileInteracting_;
        };
        /**
         * Render declutter items for this layer
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        BaseVectorLayer.prototype.renderDeclutter = function (frameState) {
            if (!frameState.declutterTree) {
                frameState.declutterTree = new rbush_min(9);
            }
            /** @type {*} */ (this.getRenderer()).renderDeclutter(frameState);
        };
        /**
         * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
         *     Render order.
         */
        BaseVectorLayer.prototype.setRenderOrder = function (renderOrder) {
            this.set(Property$2.RENDER_ORDER, renderOrder);
        };
        /**
         * Set the style for features.  This can be a single style object, an array
         * of styles, or a function that takes a feature and resolution and returns
         * an array of styles. If set to `null`, the layer has no style (a `null` style),
         * so only features that have their own styles will be rendered in the layer. Call
         * `setStyle()` without arguments to reset to the default style. See
         * {@link module:ol/style} for information on the default style.
         * @param {(import("../style/Style.js").StyleLike|null)=} opt_style Layer style.
         * @api
         */
        BaseVectorLayer.prototype.setStyle = function (opt_style) {
            this.style_ = opt_style !== undefined ? opt_style : createDefaultStyle;
            this.styleFunction_ =
                opt_style === null ? undefined : toFunction(this.style_);
            this.changed();
        };
        return BaseVectorLayer;
    }(Layer));

    /**
     * @module ol/render/canvas/Instruction
     */
    /**
     * @enum {number}
     */
    var Instruction = {
        BEGIN_GEOMETRY: 0,
        BEGIN_PATH: 1,
        CIRCLE: 2,
        CLOSE_PATH: 3,
        CUSTOM: 4,
        DRAW_CHARS: 5,
        DRAW_IMAGE: 6,
        END_GEOMETRY: 7,
        FILL: 8,
        MOVE_TO_LINE_TO: 9,
        SET_FILL_STYLE: 10,
        SET_STROKE_STYLE: 11,
        STROKE: 12,
    };
    /**
     * @type {Array<Instruction>}
     */
    var fillInstruction = [Instruction.FILL];
    /**
     * @type {Array<Instruction>}
     */
    var strokeInstruction = [Instruction.STROKE];
    /**
     * @type {Array<Instruction>}
     */
    var beginPathInstruction = [Instruction.BEGIN_PATH];
    /**
     * @type {Array<Instruction>}
     */
    var closePathInstruction = [Instruction.CLOSE_PATH];

    /**
     * @module ol/render/VectorContext
     */
    /**
     * @classdesc
     * Context for drawing geometries.  A vector context is available on render
     * events and does not need to be constructed directly.
     * @api
     */
    var VectorContext = /** @class */ (function () {
        function VectorContext() {
        }
        /**
         * Render a geometry with a custom renderer.
         *
         * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         * @param {Function} renderer Renderer.
         */
        VectorContext.prototype.drawCustom = function (geometry, feature, renderer) { };
        /**
         * Render a geometry.
         *
         * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
         */
        VectorContext.prototype.drawGeometry = function (geometry) { };
        /**
         * Set the rendering style.
         *
         * @param {import("../style/Style.js").default} style The rendering style.
         */
        VectorContext.prototype.setStyle = function (style) { };
        /**
         * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
         * @param {import("../Feature.js").default} feature Feature.
         */
        VectorContext.prototype.drawCircle = function (circleGeometry, feature) { };
        /**
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("../style/Style.js").default} style Style.
         */
        VectorContext.prototype.drawFeature = function (feature, style) { };
        /**
         * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
         * @param {import("../Feature.js").default} feature Feature.
         */
        VectorContext.prototype.drawGeometryCollection = function (geometryCollectionGeometry, feature) { };
        /**
         * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        VectorContext.prototype.drawLineString = function (lineStringGeometry, feature) { };
        /**
         * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        VectorContext.prototype.drawMultiLineString = function (multiLineStringGeometry, feature) { };
        /**
         * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        VectorContext.prototype.drawMultiPoint = function (multiPointGeometry, feature) { };
        /**
         * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        VectorContext.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) { };
        /**
         * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        VectorContext.prototype.drawPoint = function (pointGeometry, feature) { };
        /**
         * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        VectorContext.prototype.drawPolygon = function (polygonGeometry, feature) { };
        /**
         * @param {import("../geom/SimpleGeometry.js").default|import("./Feature.js").default} geometry Geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        VectorContext.prototype.drawText = function (geometry, feature) { };
        /**
         * @param {import("../style/Fill.js").default} fillStyle Fill style.
         * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
         */
        VectorContext.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) { };
        /**
         * @param {import("../style/Image.js").default} imageStyle Image style.
         * @param {import("../render/canvas.js").DeclutterImageWithText=} opt_declutterImageWithText Shared data for combined decluttering with a text style.
         */
        VectorContext.prototype.setImageStyle = function (imageStyle, opt_declutterImageWithText) { };
        /**
         * @param {import("../style/Text.js").default} textStyle Text style.
         * @param {import("../render/canvas.js").DeclutterImageWithText=} opt_declutterImageWithText Shared data for combined decluttering with an image style.
         */
        VectorContext.prototype.setTextStyle = function (textStyle, opt_declutterImageWithText) { };
        return VectorContext;
    }());

    var __extends$k = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var CanvasBuilder = /** @class */ (function (_super) {
        __extends$k(CanvasBuilder, _super);
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        function CanvasBuilder(tolerance, maxExtent, resolution, pixelRatio) {
            var _this = _super.call(this) || this;
            /**
             * @protected
             * @type {number}
             */
            _this.tolerance = tolerance;
            /**
             * @protected
             * @const
             * @type {import("../../extent.js").Extent}
             */
            _this.maxExtent = maxExtent;
            /**
             * @protected
             * @type {number}
             */
            _this.pixelRatio = pixelRatio;
            /**
             * @protected
             * @type {number}
             */
            _this.maxLineWidth = 0;
            /**
             * @protected
             * @const
             * @type {number}
             */
            _this.resolution = resolution;
            /**
             * @private
             * @type {Array<*>}
             */
            _this.beginGeometryInstruction1_ = null;
            /**
             * @private
             * @type {Array<*>}
             */
            _this.beginGeometryInstruction2_ = null;
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            _this.bufferedMaxExtent_ = null;
            /**
             * @protected
             * @type {Array<*>}
             */
            _this.instructions = [];
            /**
             * @protected
             * @type {Array<number>}
             */
            _this.coordinates = [];
            /**
             * @private
             * @type {import("../../coordinate.js").Coordinate}
             */
            _this.tmpCoordinate_ = [];
            /**
             * @protected
             * @type {Array<*>}
             */
            _this.hitDetectionInstructions = [];
            /**
             * @protected
             * @type {import("../canvas.js").FillStrokeState}
             */
            _this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});
            return _this;
        }
        /**
         * @protected
         * @param {Array<number>} dashArray Dash array.
         * @return {Array<number>} Dash array with pixel ratio applied
         */
        CanvasBuilder.prototype.applyPixelRatio = function (dashArray) {
            var pixelRatio = this.pixelRatio;
            return pixelRatio == 1
                ? dashArray
                : dashArray.map(function (dash) {
                    return dash * pixelRatio;
                });
        };
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} stride Stride.
         * @protected
         * @return {number} My end
         */
        CanvasBuilder.prototype.appendFlatPointCoordinates = function (flatCoordinates, stride) {
            var extent = this.getBufferedMaxExtent();
            var tmpCoord = this.tmpCoordinate_;
            var coordinates = this.coordinates;
            var myEnd = coordinates.length;
            for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
                tmpCoord[0] = flatCoordinates[i];
                tmpCoord[1] = flatCoordinates[i + 1];
                if (containsCoordinate(extent, tmpCoord)) {
                    coordinates[myEnd++] = tmpCoord[0];
                    coordinates[myEnd++] = tmpCoord[1];
                }
            }
            return myEnd;
        };
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @param {boolean} closed Last input coordinate equals first.
         * @param {boolean} skipFirst Skip first coordinate.
         * @protected
         * @return {number} My end.
         */
        CanvasBuilder.prototype.appendFlatLineCoordinates = function (flatCoordinates, offset, end, stride, closed, skipFirst) {
            var coordinates = this.coordinates;
            var myEnd = coordinates.length;
            var extent = this.getBufferedMaxExtent();
            if (skipFirst) {
                offset += stride;
            }
            var lastXCoord = flatCoordinates[offset];
            var lastYCoord = flatCoordinates[offset + 1];
            var nextCoord = this.tmpCoordinate_;
            var skipped = true;
            var i, lastRel, nextRel;
            for (i = offset + stride; i < end; i += stride) {
                nextCoord[0] = flatCoordinates[i];
                nextCoord[1] = flatCoordinates[i + 1];
                nextRel = coordinateRelationship(extent, nextCoord);
                if (nextRel !== lastRel) {
                    if (skipped) {
                        coordinates[myEnd++] = lastXCoord;
                        coordinates[myEnd++] = lastYCoord;
                        skipped = false;
                    }
                    coordinates[myEnd++] = nextCoord[0];
                    coordinates[myEnd++] = nextCoord[1];
                }
                else if (nextRel === Relationship.INTERSECTING) {
                    coordinates[myEnd++] = nextCoord[0];
                    coordinates[myEnd++] = nextCoord[1];
                    skipped = false;
                }
                else {
                    skipped = true;
                }
                lastXCoord = nextCoord[0];
                lastYCoord = nextCoord[1];
                lastRel = nextRel;
            }
            // Last coordinate equals first or only one point to append:
            if ((closed && skipped) || i === offset + stride) {
                coordinates[myEnd++] = lastXCoord;
                coordinates[myEnd++] = lastYCoord;
            }
            return myEnd;
        };
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {Array<number>} ends Ends.
         * @param {number} stride Stride.
         * @param {Array<number>} builderEnds Builder ends.
         * @return {number} Offset.
         */
        CanvasBuilder.prototype.drawCustomCoordinates_ = function (flatCoordinates, offset, ends, stride, builderEnds) {
            for (var i = 0, ii = ends.length; i < ii; ++i) {
                var end = ends[i];
                var builderEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);
                builderEnds.push(builderEnd);
                offset = end;
            }
            return offset;
        };
        /**
         * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @param {Function} renderer Renderer.
         */
        CanvasBuilder.prototype.drawCustom = function (geometry, feature, renderer) {
            this.beginGeometry(geometry, feature);
            var type = geometry.getType();
            var stride = geometry.getStride();
            var builderBegin = this.coordinates.length;
            var flatCoordinates, builderEnd, builderEnds, builderEndss;
            var offset;
            if (type == GeometryType.MULTI_POLYGON) {
                flatCoordinates = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getOrientedFlatCoordinates();
                builderEndss = [];
                var endss = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getEndss();
                offset = 0;
                for (var i = 0, ii = endss.length; i < ii; ++i) {
                    var myEnds = [];
                    offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
                    builderEndss.push(myEnds);
                }
                this.instructions.push([
                    Instruction.CUSTOM,
                    builderBegin,
                    builderEndss,
                    geometry,
                    renderer,
                    inflateMultiCoordinatesArray,
                ]);
            }
            else if (type == GeometryType.POLYGON ||
                type == GeometryType.MULTI_LINE_STRING) {
                builderEnds = [];
                flatCoordinates =
                    type == GeometryType.POLYGON
                        ? /** @type {import("../../geom/Polygon.js").default} */ (geometry).getOrientedFlatCoordinates()
                        : geometry.getFlatCoordinates();
                offset = this.drawCustomCoordinates_(flatCoordinates, 0, 
                /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (geometry).getEnds(), stride, builderEnds);
                this.instructions.push([
                    Instruction.CUSTOM,
                    builderBegin,
                    builderEnds,
                    geometry,
                    renderer,
                    inflateCoordinatesArray,
                ]);
            }
            else if (type == GeometryType.LINE_STRING ||
                type == GeometryType.CIRCLE) {
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
                this.instructions.push([
                    Instruction.CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer,
                    inflateCoordinates,
                ]);
            }
            else if (type == GeometryType.MULTI_POINT) {
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
                if (builderEnd > builderBegin) {
                    this.instructions.push([
                        Instruction.CUSTOM,
                        builderBegin,
                        builderEnd,
                        geometry,
                        renderer,
                        inflateCoordinates,
                    ]);
                }
            }
            else if (type == GeometryType.POINT) {
                flatCoordinates = geometry.getFlatCoordinates();
                this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
                builderEnd = this.coordinates.length;
                this.instructions.push([
                    Instruction.CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer,
                ]);
            }
            this.endGeometry(feature);
        };
        /**
         * @protected
         * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasBuilder.prototype.beginGeometry = function (geometry, feature) {
            this.beginGeometryInstruction1_ = [
                Instruction.BEGIN_GEOMETRY,
                feature,
                0,
                geometry,
            ];
            this.instructions.push(this.beginGeometryInstruction1_);
            this.beginGeometryInstruction2_ = [
                Instruction.BEGIN_GEOMETRY,
                feature,
                0,
                geometry,
            ];
            this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
        };
        /**
         * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
         */
        CanvasBuilder.prototype.finish = function () {
            return {
                instructions: this.instructions,
                hitDetectionInstructions: this.hitDetectionInstructions,
                coordinates: this.coordinates,
            };
        };
        /**
         * Reverse the hit detection instructions.
         */
        CanvasBuilder.prototype.reverseHitDetectionInstructions = function () {
            var hitDetectionInstructions = this.hitDetectionInstructions;
            // step 1 - reverse array
            hitDetectionInstructions.reverse();
            // step 2 - reverse instructions within geometry blocks
            var i;
            var n = hitDetectionInstructions.length;
            var instruction;
            var type;
            var begin = -1;
            for (i = 0; i < n; ++i) {
                instruction = hitDetectionInstructions[i];
                type = /** @type {import("./Instruction.js").default} */ (instruction[0]);
                if (type == Instruction.END_GEOMETRY) {
                    begin = i;
                }
                else if (type == Instruction.BEGIN_GEOMETRY) {
                    instruction[2] = i;
                    reverseSubArray(this.hitDetectionInstructions, begin, i);
                    begin = -1;
                }
            }
        };
        /**
         * @param {import("../../style/Fill.js").default} fillStyle Fill style.
         * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
         */
        CanvasBuilder.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {
            var state = this.state;
            if (fillStyle) {
                var fillStyleColor = fillStyle.getColor();
                state.fillStyle = asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle);
            }
            else {
                state.fillStyle = undefined;
            }
            if (strokeStyle) {
                var strokeStyleColor = strokeStyle.getColor();
                state.strokeStyle = asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle);
                var strokeStyleLineCap = strokeStyle.getLineCap();
                state.lineCap =
                    strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;
                var strokeStyleLineDash = strokeStyle.getLineDash();
                state.lineDash = strokeStyleLineDash
                    ? strokeStyleLineDash.slice()
                    : defaultLineDash;
                var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
                state.lineDashOffset = strokeStyleLineDashOffset
                    ? strokeStyleLineDashOffset
                    : defaultLineDashOffset;
                var strokeStyleLineJoin = strokeStyle.getLineJoin();
                state.lineJoin =
                    strokeStyleLineJoin !== undefined
                        ? strokeStyleLineJoin
                        : defaultLineJoin;
                var strokeStyleWidth = strokeStyle.getWidth();
                state.lineWidth =
                    strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;
                var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
                state.miterLimit =
                    strokeStyleMiterLimit !== undefined
                        ? strokeStyleMiterLimit
                        : defaultMiterLimit;
                if (state.lineWidth > this.maxLineWidth) {
                    this.maxLineWidth = state.lineWidth;
                    // invalidate the buffered max extent cache
                    this.bufferedMaxExtent_ = null;
                }
            }
            else {
                state.strokeStyle = undefined;
                state.lineCap = undefined;
                state.lineDash = null;
                state.lineDashOffset = undefined;
                state.lineJoin = undefined;
                state.lineWidth = undefined;
                state.miterLimit = undefined;
            }
        };
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         * @return {Array<*>} Fill instruction.
         */
        CanvasBuilder.prototype.createFill = function (state) {
            var fillStyle = state.fillStyle;
            /** @type {Array<*>} */
            var fillInstruction = [Instruction.SET_FILL_STYLE, fillStyle];
            if (typeof fillStyle !== 'string') {
                // Fill is a pattern or gradient - align it!
                fillInstruction.push(true);
            }
            return fillInstruction;
        };
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         */
        CanvasBuilder.prototype.applyStroke = function (state) {
            this.instructions.push(this.createStroke(state));
        };
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         * @return {Array<*>} Stroke instruction.
         */
        CanvasBuilder.prototype.createStroke = function (state) {
            return [
                Instruction.SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth * this.pixelRatio,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                this.applyPixelRatio(state.lineDash),
                state.lineDashOffset * this.pixelRatio,
            ];
        };
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
         */
        CanvasBuilder.prototype.updateFillStyle = function (state, createFill) {
            var fillStyle = state.fillStyle;
            if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
                if (fillStyle !== undefined) {
                    this.instructions.push(createFill.call(this, state));
                }
                state.currentFillStyle = fillStyle;
            }
        };
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
         */
        CanvasBuilder.prototype.updateStrokeStyle = function (state, applyStroke) {
            var strokeStyle = state.strokeStyle;
            var lineCap = state.lineCap;
            var lineDash = state.lineDash;
            var lineDashOffset = state.lineDashOffset;
            var lineJoin = state.lineJoin;
            var lineWidth = state.lineWidth;
            var miterLimit = state.miterLimit;
            if (state.currentStrokeStyle != strokeStyle ||
                state.currentLineCap != lineCap ||
                (lineDash != state.currentLineDash &&
                    !equals(state.currentLineDash, lineDash)) ||
                state.currentLineDashOffset != lineDashOffset ||
                state.currentLineJoin != lineJoin ||
                state.currentLineWidth != lineWidth ||
                state.currentMiterLimit != miterLimit) {
                if (strokeStyle !== undefined) {
                    applyStroke.call(this, state);
                }
                state.currentStrokeStyle = strokeStyle;
                state.currentLineCap = lineCap;
                state.currentLineDash = lineDash;
                state.currentLineDashOffset = lineDashOffset;
                state.currentLineJoin = lineJoin;
                state.currentLineWidth = lineWidth;
                state.currentMiterLimit = miterLimit;
            }
        };
        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasBuilder.prototype.endGeometry = function (feature) {
            this.beginGeometryInstruction1_[2] = this.instructions.length;
            this.beginGeometryInstruction1_ = null;
            this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
            this.beginGeometryInstruction2_ = null;
            var endGeometryInstruction = [Instruction.END_GEOMETRY, feature];
            this.instructions.push(endGeometryInstruction);
            this.hitDetectionInstructions.push(endGeometryInstruction);
        };
        /**
         * Get the buffered rendering extent.  Rendering will be clipped to the extent
         * provided to the constructor.  To account for symbolizers that may intersect
         * this extent, we calculate a buffered extent (e.g. based on stroke width).
         * @return {import("../../extent.js").Extent} The buffered rendering extent.
         * @protected
         */
        CanvasBuilder.prototype.getBufferedMaxExtent = function () {
            if (!this.bufferedMaxExtent_) {
                this.bufferedMaxExtent_ = clone(this.maxExtent);
                if (this.maxLineWidth > 0) {
                    var width = (this.resolution * (this.maxLineWidth + 1)) / 2;
                    buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
                }
            }
            return this.bufferedMaxExtent_;
        };
        return CanvasBuilder;
    }(VectorContext));

    var __extends$l = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var CanvasImageBuilder = /** @class */ (function (_super) {
        __extends$l(CanvasImageBuilder, _super);
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        function CanvasImageBuilder(tolerance, maxExtent, resolution, pixelRatio) {
            var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
             */
            _this.hitDetectionImage_ = null;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
             */
            _this.image_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.imagePixelRatio_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.anchorX_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.anchorY_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.height_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.opacity_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.originX_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.originY_ = undefined;
            /**
             * @private
             * @type {boolean|undefined}
             */
            _this.rotateWithView_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.rotation_ = undefined;
            /**
             * @private
             * @type {import("../../size.js").Size|undefined}
             */
            _this.scale_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.width_ = undefined;
            /**
             * Data shared with a text builder for combined decluttering.
             * @private
             * @type {import("../canvas.js").DeclutterImageWithText}
             */
            _this.declutterImageWithText_ = undefined;
            return _this;
        }
        /**
         * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasImageBuilder.prototype.drawPoint = function (pointGeometry, feature) {
            if (!this.image_) {
                return;
            }
            this.beginGeometry(pointGeometry, feature);
            var flatCoordinates = pointGeometry.getFlatCoordinates();
            var stride = pointGeometry.getStride();
            var myBegin = this.coordinates.length;
            var myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
            this.instructions.push([
                Instruction.DRAW_IMAGE,
                myBegin,
                myEnd,
                this.image_,
                // Remaining arguments to DRAW_IMAGE are in alphabetical order
                this.anchorX_ * this.imagePixelRatio_,
                this.anchorY_ * this.imagePixelRatio_,
                Math.ceil(this.height_ * this.imagePixelRatio_),
                this.opacity_,
                this.originX_,
                this.originY_,
                this.rotateWithView_,
                this.rotation_,
                [
                    (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
                    (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
                ],
                Math.ceil(this.width_ * this.imagePixelRatio_),
                this.declutterImageWithText_,
            ]);
            this.hitDetectionInstructions.push([
                Instruction.DRAW_IMAGE,
                myBegin,
                myEnd,
                this.hitDetectionImage_,
                // Remaining arguments to DRAW_IMAGE are in alphabetical order
                this.anchorX_,
                this.anchorY_,
                this.height_,
                this.opacity_,
                this.originX_,
                this.originY_,
                this.rotateWithView_,
                this.rotation_,
                this.scale_,
                this.width_,
                this.declutterImageWithText_,
            ]);
            this.endGeometry(feature);
        };
        /**
         * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasImageBuilder.prototype.drawMultiPoint = function (multiPointGeometry, feature) {
            if (!this.image_) {
                return;
            }
            this.beginGeometry(multiPointGeometry, feature);
            var flatCoordinates = multiPointGeometry.getFlatCoordinates();
            var stride = multiPointGeometry.getStride();
            var myBegin = this.coordinates.length;
            var myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
            this.instructions.push([
                Instruction.DRAW_IMAGE,
                myBegin,
                myEnd,
                this.image_,
                // Remaining arguments to DRAW_IMAGE are in alphabetical order
                this.anchorX_ * this.imagePixelRatio_,
                this.anchorY_ * this.imagePixelRatio_,
                Math.ceil(this.height_ * this.imagePixelRatio_),
                this.opacity_,
                this.originX_,
                this.originY_,
                this.rotateWithView_,
                this.rotation_,
                [
                    (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
                    (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
                ],
                Math.ceil(this.width_ * this.imagePixelRatio_),
                this.declutterImageWithText_,
            ]);
            this.hitDetectionInstructions.push([
                Instruction.DRAW_IMAGE,
                myBegin,
                myEnd,
                this.hitDetectionImage_,
                // Remaining arguments to DRAW_IMAGE are in alphabetical order
                this.anchorX_,
                this.anchorY_,
                this.height_,
                this.opacity_,
                this.originX_,
                this.originY_,
                this.rotateWithView_,
                this.rotation_,
                this.scale_,
                this.width_,
                this.declutterImageWithText_,
            ]);
            this.endGeometry(feature);
        };
        /**
         * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
         */
        CanvasImageBuilder.prototype.finish = function () {
            this.reverseHitDetectionInstructions();
            // FIXME this doesn't really protect us against further calls to draw*Geometry
            this.anchorX_ = undefined;
            this.anchorY_ = undefined;
            this.hitDetectionImage_ = null;
            this.image_ = null;
            this.imagePixelRatio_ = undefined;
            this.height_ = undefined;
            this.scale_ = undefined;
            this.opacity_ = undefined;
            this.originX_ = undefined;
            this.originY_ = undefined;
            this.rotateWithView_ = undefined;
            this.rotation_ = undefined;
            this.width_ = undefined;
            return _super.prototype.finish.call(this);
        };
        /**
         * @param {import("../../style/Image.js").default} imageStyle Image style.
         * @param {Object=} opt_sharedData Shared data.
         */
        CanvasImageBuilder.prototype.setImageStyle = function (imageStyle, opt_sharedData) {
            var anchor = imageStyle.getAnchor();
            var size = imageStyle.getSize();
            var hitDetectionImage = imageStyle.getHitDetectionImage();
            var image = imageStyle.getImage(this.pixelRatio);
            var origin = imageStyle.getOrigin();
            this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);
            this.anchorX_ = anchor[0];
            this.anchorY_ = anchor[1];
            this.hitDetectionImage_ = hitDetectionImage;
            this.image_ = image;
            this.height_ = size[1];
            this.opacity_ = imageStyle.getOpacity();
            this.originX_ = origin[0];
            this.originY_ = origin[1];
            this.rotateWithView_ = imageStyle.getRotateWithView();
            this.rotation_ = imageStyle.getRotation();
            this.scale_ = imageStyle.getScaleArray();
            this.width_ = size[0];
            this.declutterImageWithText_ = opt_sharedData;
        };
        return CanvasImageBuilder;
    }(CanvasBuilder));

    var __extends$m = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var CanvasLineStringBuilder = /** @class */ (function (_super) {
        __extends$m(CanvasLineStringBuilder, _super);
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        function CanvasLineStringBuilder(tolerance, maxExtent, resolution, pixelRatio) {
            return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @private
         * @return {number} end.
         */
        CanvasLineStringBuilder.prototype.drawFlatCoordinates_ = function (flatCoordinates, offset, end, stride) {
            var myBegin = this.coordinates.length;
            var myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);
            var moveToLineToInstruction = [
                Instruction.MOVE_TO_LINE_TO,
                myBegin,
                myEnd,
            ];
            this.instructions.push(moveToLineToInstruction);
            this.hitDetectionInstructions.push(moveToLineToInstruction);
            return end;
        };
        /**
         * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasLineStringBuilder.prototype.drawLineString = function (lineStringGeometry, feature) {
            var state = this.state;
            var strokeStyle = state.strokeStyle;
            var lineWidth = state.lineWidth;
            if (strokeStyle === undefined || lineWidth === undefined) {
                return;
            }
            this.updateStrokeStyle(state, this.applyStroke);
            this.beginGeometry(lineStringGeometry, feature);
            this.hitDetectionInstructions.push([
                Instruction.SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                state.lineDash,
                state.lineDashOffset,
            ], beginPathInstruction);
            var flatCoordinates = lineStringGeometry.getFlatCoordinates();
            var stride = lineStringGeometry.getStride();
            this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
            this.hitDetectionInstructions.push(strokeInstruction);
            this.endGeometry(feature);
        };
        /**
         * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasLineStringBuilder.prototype.drawMultiLineString = function (multiLineStringGeometry, feature) {
            var state = this.state;
            var strokeStyle = state.strokeStyle;
            var lineWidth = state.lineWidth;
            if (strokeStyle === undefined || lineWidth === undefined) {
                return;
            }
            this.updateStrokeStyle(state, this.applyStroke);
            this.beginGeometry(multiLineStringGeometry, feature);
            this.hitDetectionInstructions.push([
                Instruction.SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                state.lineDash,
                state.lineDashOffset,
            ], beginPathInstruction);
            var ends = multiLineStringGeometry.getEnds();
            var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
            var stride = multiLineStringGeometry.getStride();
            var offset = 0;
            for (var i = 0, ii = ends.length; i < ii; ++i) {
                offset = this.drawFlatCoordinates_(flatCoordinates, offset, 
                /** @type {number} */ (ends[i]), stride);
            }
            this.hitDetectionInstructions.push(strokeInstruction);
            this.endGeometry(feature);
        };
        /**
         * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
         */
        CanvasLineStringBuilder.prototype.finish = function () {
            var state = this.state;
            if (state.lastStroke != undefined &&
                state.lastStroke != this.coordinates.length) {
                this.instructions.push(strokeInstruction);
            }
            this.reverseHitDetectionInstructions();
            this.state = null;
            return _super.prototype.finish.call(this);
        };
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         */
        CanvasLineStringBuilder.prototype.applyStroke = function (state) {
            if (state.lastStroke != undefined &&
                state.lastStroke != this.coordinates.length) {
                this.instructions.push(strokeInstruction);
                state.lastStroke = this.coordinates.length;
            }
            state.lastStroke = 0;
            _super.prototype.applyStroke.call(this, state);
            this.instructions.push(beginPathInstruction);
        };
        return CanvasLineStringBuilder;
    }(CanvasBuilder));

    var __extends$n = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var CanvasPolygonBuilder = /** @class */ (function (_super) {
        __extends$n(CanvasPolygonBuilder, _super);
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        function CanvasPolygonBuilder(tolerance, maxExtent, resolution, pixelRatio) {
            return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {Array<number>} ends Ends.
         * @param {number} stride Stride.
         * @private
         * @return {number} End.
         */
        CanvasPolygonBuilder.prototype.drawFlatCoordinatess_ = function (flatCoordinates, offset, ends, stride) {
            var state = this.state;
            var fill = state.fillStyle !== undefined;
            var stroke = state.strokeStyle !== undefined;
            var numEnds = ends.length;
            this.instructions.push(beginPathInstruction);
            this.hitDetectionInstructions.push(beginPathInstruction);
            for (var i = 0; i < numEnds; ++i) {
                var end = ends[i];
                var myBegin = this.coordinates.length;
                var myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
                var moveToLineToInstruction = [
                    Instruction.MOVE_TO_LINE_TO,
                    myBegin,
                    myEnd,
                ];
                this.instructions.push(moveToLineToInstruction);
                this.hitDetectionInstructions.push(moveToLineToInstruction);
                if (stroke) {
                    // Performance optimization: only call closePath() when we have a stroke.
                    // Otherwise the ring is closed already (see appendFlatLineCoordinates above).
                    this.instructions.push(closePathInstruction);
                    this.hitDetectionInstructions.push(closePathInstruction);
                }
                offset = end;
            }
            if (fill) {
                this.instructions.push(fillInstruction);
                this.hitDetectionInstructions.push(fillInstruction);
            }
            if (stroke) {
                this.instructions.push(strokeInstruction);
                this.hitDetectionInstructions.push(strokeInstruction);
            }
            return offset;
        };
        /**
         * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.
         * @param {import("../../Feature.js").default} feature Feature.
         */
        CanvasPolygonBuilder.prototype.drawCircle = function (circleGeometry, feature) {
            var state = this.state;
            var fillStyle = state.fillStyle;
            var strokeStyle = state.strokeStyle;
            if (fillStyle === undefined && strokeStyle === undefined) {
                return;
            }
            this.setFillStrokeStyles_();
            this.beginGeometry(circleGeometry, feature);
            if (state.fillStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction.SET_FILL_STYLE,
                    defaultFillStyle,
                ]);
            }
            if (state.strokeStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction.SET_STROKE_STYLE,
                    state.strokeStyle,
                    state.lineWidth,
                    state.lineCap,
                    state.lineJoin,
                    state.miterLimit,
                    state.lineDash,
                    state.lineDashOffset,
                ]);
            }
            var flatCoordinates = circleGeometry.getFlatCoordinates();
            var stride = circleGeometry.getStride();
            var myBegin = this.coordinates.length;
            this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
            var circleInstruction = [Instruction.CIRCLE, myBegin];
            this.instructions.push(beginPathInstruction, circleInstruction);
            this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
            if (state.fillStyle !== undefined) {
                this.instructions.push(fillInstruction);
                this.hitDetectionInstructions.push(fillInstruction);
            }
            if (state.strokeStyle !== undefined) {
                this.instructions.push(strokeInstruction);
                this.hitDetectionInstructions.push(strokeInstruction);
            }
            this.endGeometry(feature);
        };
        /**
         * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasPolygonBuilder.prototype.drawPolygon = function (polygonGeometry, feature) {
            var state = this.state;
            var fillStyle = state.fillStyle;
            var strokeStyle = state.strokeStyle;
            if (fillStyle === undefined && strokeStyle === undefined) {
                return;
            }
            this.setFillStrokeStyles_();
            this.beginGeometry(polygonGeometry, feature);
            if (state.fillStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction.SET_FILL_STYLE,
                    defaultFillStyle,
                ]);
            }
            if (state.strokeStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction.SET_STROKE_STYLE,
                    state.strokeStyle,
                    state.lineWidth,
                    state.lineCap,
                    state.lineJoin,
                    state.miterLimit,
                    state.lineDash,
                    state.lineDashOffset,
                ]);
            }
            var ends = polygonGeometry.getEnds();
            var flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
            var stride = polygonGeometry.getStride();
            this.drawFlatCoordinatess_(flatCoordinates, 0, 
            /** @type {Array<number>} */ (ends), stride);
            this.endGeometry(feature);
        };
        /**
         * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasPolygonBuilder.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) {
            var state = this.state;
            var fillStyle = state.fillStyle;
            var strokeStyle = state.strokeStyle;
            if (fillStyle === undefined && strokeStyle === undefined) {
                return;
            }
            this.setFillStrokeStyles_();
            this.beginGeometry(multiPolygonGeometry, feature);
            if (state.fillStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction.SET_FILL_STYLE,
                    defaultFillStyle,
                ]);
            }
            if (state.strokeStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction.SET_STROKE_STYLE,
                    state.strokeStyle,
                    state.lineWidth,
                    state.lineCap,
                    state.lineJoin,
                    state.miterLimit,
                    state.lineDash,
                    state.lineDashOffset,
                ]);
            }
            var endss = multiPolygonGeometry.getEndss();
            var flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
            var stride = multiPolygonGeometry.getStride();
            var offset = 0;
            for (var i = 0, ii = endss.length; i < ii; ++i) {
                offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
            }
            this.endGeometry(feature);
        };
        /**
         * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
         */
        CanvasPolygonBuilder.prototype.finish = function () {
            this.reverseHitDetectionInstructions();
            this.state = null;
            // We want to preserve topology when drawing polygons.  Polygons are
            // simplified using quantization and point elimination. However, we might
            // have received a mix of quantized and non-quantized geometries, so ensure
            // that all are quantized by quantizing all coordinates in the batch.
            var tolerance = this.tolerance;
            if (tolerance !== 0) {
                var coordinates = this.coordinates;
                for (var i = 0, ii = coordinates.length; i < ii; ++i) {
                    coordinates[i] = snap(coordinates[i], tolerance);
                }
            }
            return _super.prototype.finish.call(this);
        };
        /**
         * @private
         */
        CanvasPolygonBuilder.prototype.setFillStrokeStyles_ = function () {
            var state = this.state;
            var fillStyle = state.fillStyle;
            if (fillStyle !== undefined) {
                this.updateFillStyle(state, this.createFill);
            }
            if (state.strokeStyle !== undefined) {
                this.updateStrokeStyle(state, this.applyStroke);
            }
        };
        return CanvasPolygonBuilder;
    }(CanvasBuilder));

    /**
     * @module ol/geom/flat/straightchunk
     */
    /**
     * @param {number} maxAngle Maximum acceptable angle delta between segments.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {Array<number>} Start and end of the first suitable chunk of the
     * given `flatCoordinates`.
     */
    function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
        var chunkStart = offset;
        var chunkEnd = offset;
        var chunkM = 0;
        var m = 0;
        var start = offset;
        var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
        for (i = offset; i < end; i += stride) {
            var x2 = flatCoordinates[i];
            var y2 = flatCoordinates[i + 1];
            if (x1 !== undefined) {
                x23 = x2 - x1;
                y23 = y2 - y1;
                m23 = Math.sqrt(x23 * x23 + y23 * y23);
                if (x12 !== undefined) {
                    m += m12;
                    acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
                    if (acos > maxAngle) {
                        if (m > chunkM) {
                            chunkM = m;
                            chunkStart = start;
                            chunkEnd = i;
                        }
                        m = 0;
                        start = i - stride;
                    }
                }
                m12 = m23;
                x12 = x23;
                y12 = y23;
            }
            x1 = x2;
            y1 = y2;
        }
        m += m23;
        return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
    }

    var __extends$o = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @const
     * @enum {number}
     */
    var TEXT_ALIGN = {
        'left': 0,
        'end': 0,
        'center': 0.5,
        'right': 1,
        'start': 1,
        'top': 0,
        'middle': 0.5,
        'hanging': 0.2,
        'alphabetic': 0.8,
        'ideographic': 0.8,
        'bottom': 1,
    };
    var CanvasTextBuilder = /** @class */ (function (_super) {
        __extends$o(CanvasTextBuilder, _super);
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        function CanvasTextBuilder(tolerance, maxExtent, resolution, pixelRatio) {
            var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
            /**
             * @private
             * @type {Array<HTMLCanvasElement>}
             */
            _this.labels_ = null;
            /**
             * @private
             * @type {string}
             */
            _this.text_ = '';
            /**
             * @private
             * @type {number}
             */
            _this.textOffsetX_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.textOffsetY_ = 0;
            /**
             * @private
             * @type {boolean|undefined}
             */
            _this.textRotateWithView_ = undefined;
            /**
             * @private
             * @type {number}
             */
            _this.textRotation_ = 0;
            /**
             * @private
             * @type {?import("../canvas.js").FillState}
             */
            _this.textFillState_ = null;
            /**
             * @type {!Object<string, import("../canvas.js").FillState>}
             */
            _this.fillStates = {};
            /**
             * @private
             * @type {?import("../canvas.js").StrokeState}
             */
            _this.textStrokeState_ = null;
            /**
             * @type {!Object<string, import("../canvas.js").StrokeState>}
             */
            _this.strokeStates = {};
            /**
             * @private
             * @type {import("../canvas.js").TextState}
             */
            _this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});
            /**
             * @type {!Object<string, import("../canvas.js").TextState>}
             */
            _this.textStates = {};
            /**
             * @private
             * @type {string}
             */
            _this.textKey_ = '';
            /**
             * @private
             * @type {string}
             */
            _this.fillKey_ = '';
            /**
             * @private
             * @type {string}
             */
            _this.strokeKey_ = '';
            /**
             * Data shared with an image builder for combined decluttering.
             * @private
             * @type {import("../canvas.js").DeclutterImageWithText}
             */
            _this.declutterImageWithText_ = undefined;
            return _this;
        }
        /**
         * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
         */
        CanvasTextBuilder.prototype.finish = function () {
            var instructions = _super.prototype.finish.call(this);
            instructions.textStates = this.textStates;
            instructions.fillStates = this.fillStates;
            instructions.strokeStates = this.strokeStates;
            return instructions;
        };
        /**
         * @param {import("../../geom/SimpleGeometry.js").default|import("../Feature.js").default} geometry Geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        CanvasTextBuilder.prototype.drawText = function (geometry, feature) {
            var fillState = this.textFillState_;
            var strokeState = this.textStrokeState_;
            var textState = this.textState_;
            if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
                return;
            }
            var coordinates = this.coordinates;
            var begin = coordinates.length;
            var geometryType = geometry.getType();
            var flatCoordinates = null;
            var stride = geometry.getStride();
            if (textState.placement === TextPlacement.LINE &&
                (geometryType == GeometryType.LINE_STRING ||
                    geometryType == GeometryType.MULTI_LINE_STRING ||
                    geometryType == GeometryType.POLYGON ||
                    geometryType == GeometryType.MULTI_POLYGON)) {
                if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {
                    return;
                }
                var ends = void 0;
                flatCoordinates = geometry.getFlatCoordinates();
                if (geometryType == GeometryType.LINE_STRING) {
                    ends = [flatCoordinates.length];
                }
                else if (geometryType == GeometryType.MULTI_LINE_STRING) {
                    ends = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getEnds();
                }
                else if (geometryType == GeometryType.POLYGON) {
                    ends = /** @type {import("../../geom/Polygon.js").default} */ (geometry)
                        .getEnds()
                        .slice(0, 1);
                }
                else if (geometryType == GeometryType.MULTI_POLYGON) {
                    var endss = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getEndss();
                    ends = [];
                    for (var i = 0, ii = endss.length; i < ii; ++i) {
                        ends.push(endss[i][0]);
                    }
                }
                this.beginGeometry(geometry, feature);
                var textAlign = textState.textAlign;
                var flatOffset = 0;
                var flatEnd = void 0;
                for (var o = 0, oo = ends.length; o < oo; ++o) {
                    if (textAlign == undefined) {
                        var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
                        flatOffset = range[0];
                        flatEnd = range[1];
                    }
                    else {
                        flatEnd = ends[o];
                    }
                    for (var i = flatOffset; i < flatEnd; i += stride) {
                        coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
                    }
                    var end = coordinates.length;
                    flatOffset = ends[o];
                    this.drawChars_(begin, end);
                    begin = end;
                }
                this.endGeometry(feature);
            }
            else {
                var geometryWidths = textState.overflow ? null : [];
                switch (geometryType) {
                    case GeometryType.POINT:
                    case GeometryType.MULTI_POINT:
                        flatCoordinates = /** @type {import("../../geom/MultiPoint.js").default} */ (geometry).getFlatCoordinates();
                        break;
                    case GeometryType.LINE_STRING:
                        flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
                        break;
                    case GeometryType.CIRCLE:
                        flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
                        break;
                    case GeometryType.MULTI_LINE_STRING:
                        flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
                        stride = 2;
                        break;
                    case GeometryType.POLYGON:
                        flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
                        if (!textState.overflow) {
                            geometryWidths.push(flatCoordinates[2] / this.resolution);
                        }
                        stride = 3;
                        break;
                    case GeometryType.MULTI_POLYGON:
                        var interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
                        flatCoordinates = [];
                        for (var i = 0, ii = interiorPoints.length; i < ii; i += 3) {
                            if (!textState.overflow) {
                                geometryWidths.push(interiorPoints[i + 2] / this.resolution);
                            }
                            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
                        }
                        if (flatCoordinates.length === 0) {
                            return;
                        }
                        stride = 2;
                        break;
                }
                var end = this.appendFlatPointCoordinates(flatCoordinates, stride);
                if (end === begin) {
                    return;
                }
                this.saveTextStates_();
                if (textState.backgroundFill || textState.backgroundStroke) {
                    this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
                    if (textState.backgroundFill) {
                        this.updateFillStyle(this.state, this.createFill);
                        this.hitDetectionInstructions.push(this.createFill(this.state));
                    }
                    if (textState.backgroundStroke) {
                        this.updateStrokeStyle(this.state, this.applyStroke);
                        this.hitDetectionInstructions.push(this.createStroke(this.state));
                    }
                }
                this.beginGeometry(geometry, feature);
                // adjust padding for negative scale
                var padding = textState.padding;
                if (padding != defaultPadding &&
                    (textState.scale[0] < 0 || textState.scale[1] < 0)) {
                    var p0 = textState.padding[0];
                    var p1 = textState.padding[1];
                    var p2 = textState.padding[2];
                    var p3 = textState.padding[3];
                    if (textState.scale[0] < 0) {
                        p1 = -p1;
                        p3 = -p3;
                    }
                    if (textState.scale[1] < 0) {
                        p0 = -p0;
                        p2 = -p2;
                    }
                    padding = [p0, p1, p2, p3];
                }
                // The image is unknown at this stage so we pass null; it will be computed at render time.
                // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
                // render time.
                var pixelRatio_1 = this.pixelRatio;
                this.instructions.push([
                    Instruction.DRAW_IMAGE,
                    begin,
                    end,
                    null,
                    NaN,
                    NaN,
                    NaN,
                    1,
                    0,
                    0,
                    this.textRotateWithView_,
                    this.textRotation_,
                    [1, 1],
                    NaN,
                    this.declutterImageWithText_,
                    padding == defaultPadding
                        ? defaultPadding
                        : padding.map(function (p) {
                            return p * pixelRatio_1;
                        }),
                    !!textState.backgroundFill,
                    !!textState.backgroundStroke,
                    this.text_,
                    this.textKey_,
                    this.strokeKey_,
                    this.fillKey_,
                    this.textOffsetX_,
                    this.textOffsetY_,
                    geometryWidths,
                ]);
                var scale = 1 / pixelRatio_1;
                this.hitDetectionInstructions.push([
                    Instruction.DRAW_IMAGE,
                    begin,
                    end,
                    null,
                    NaN,
                    NaN,
                    NaN,
                    1,
                    0,
                    0,
                    this.textRotateWithView_,
                    this.textRotation_,
                    [scale, scale],
                    NaN,
                    this.declutterImageWithText_,
                    padding,
                    !!textState.backgroundFill,
                    !!textState.backgroundStroke,
                    this.text_,
                    this.textKey_,
                    this.strokeKey_,
                    this.fillKey_,
                    this.textOffsetX_,
                    this.textOffsetY_,
                    geometryWidths,
                ]);
                this.endGeometry(feature);
            }
        };
        /**
         * @private
         */
        CanvasTextBuilder.prototype.saveTextStates_ = function () {
            var strokeState = this.textStrokeState_;
            var textState = this.textState_;
            var fillState = this.textFillState_;
            var strokeKey = this.strokeKey_;
            if (strokeState) {
                if (!(strokeKey in this.strokeStates)) {
                    this.strokeStates[strokeKey] = {
                        strokeStyle: strokeState.strokeStyle,
                        lineCap: strokeState.lineCap,
                        lineDashOffset: strokeState.lineDashOffset,
                        lineWidth: strokeState.lineWidth,
                        lineJoin: strokeState.lineJoin,
                        miterLimit: strokeState.miterLimit,
                        lineDash: strokeState.lineDash,
                    };
                }
            }
            var textKey = this.textKey_;
            if (!(textKey in this.textStates)) {
                this.textStates[textKey] = {
                    font: textState.font,
                    textAlign: textState.textAlign || defaultTextAlign,
                    textBaseline: textState.textBaseline || defaultTextBaseline,
                    scale: textState.scale,
                };
            }
            var fillKey = this.fillKey_;
            if (fillState) {
                if (!(fillKey in this.fillStates)) {
                    this.fillStates[fillKey] = {
                        fillStyle: fillState.fillStyle,
                    };
                }
            }
        };
        /**
         * @private
         * @param {number} begin Begin.
         * @param {number} end End.
         */
        CanvasTextBuilder.prototype.drawChars_ = function (begin, end) {
            var strokeState = this.textStrokeState_;
            var textState = this.textState_;
            var strokeKey = this.strokeKey_;
            var textKey = this.textKey_;
            var fillKey = this.fillKey_;
            this.saveTextStates_();
            var pixelRatio = this.pixelRatio;
            var baseline = TEXT_ALIGN[textState.textBaseline];
            var offsetY = this.textOffsetY_ * pixelRatio;
            var text = this.text_;
            var strokeWidth = strokeState
                ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2
                : 0;
            this.instructions.push([
                Instruction.DRAW_CHARS,
                begin,
                end,
                baseline,
                textState.overflow,
                fillKey,
                textState.maxAngle,
                pixelRatio,
                offsetY,
                strokeKey,
                strokeWidth * pixelRatio,
                text,
                textKey,
                1,
            ]);
            this.hitDetectionInstructions.push([
                Instruction.DRAW_CHARS,
                begin,
                end,
                baseline,
                textState.overflow,
                fillKey,
                textState.maxAngle,
                1,
                offsetY,
                strokeKey,
                strokeWidth,
                text,
                textKey,
                1 / pixelRatio,
            ]);
        };
        /**
         * @param {import("../../style/Text.js").default} textStyle Text style.
         * @param {Object=} opt_sharedData Shared data.
         */
        CanvasTextBuilder.prototype.setTextStyle = function (textStyle, opt_sharedData) {
            var textState, fillState, strokeState;
            if (!textStyle) {
                this.text_ = '';
            }
            else {
                var textFillStyle = textStyle.getFill();
                if (!textFillStyle) {
                    fillState = null;
                    this.textFillState_ = fillState;
                }
                else {
                    fillState = this.textFillState_;
                    if (!fillState) {
                        fillState = /** @type {import("../canvas.js").FillState} */ ({});
                        this.textFillState_ = fillState;
                    }
                    fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);
                }
                var textStrokeStyle = textStyle.getStroke();
                if (!textStrokeStyle) {
                    strokeState = null;
                    this.textStrokeState_ = strokeState;
                }
                else {
                    strokeState = this.textStrokeState_;
                    if (!strokeState) {
                        strokeState = /** @type {import("../canvas.js").StrokeState} */ ({});
                        this.textStrokeState_ = strokeState;
                    }
                    var lineDash = textStrokeStyle.getLineDash();
                    var lineDashOffset = textStrokeStyle.getLineDashOffset();
                    var lineWidth = textStrokeStyle.getWidth();
                    var miterLimit = textStrokeStyle.getMiterLimit();
                    strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;
                    strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;
                    strokeState.lineDashOffset =
                        lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;
                    strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;
                    strokeState.lineWidth =
                        lineWidth === undefined ? defaultLineWidth : lineWidth;
                    strokeState.miterLimit =
                        miterLimit === undefined ? defaultMiterLimit : miterLimit;
                    strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);
                }
                textState = this.textState_;
                var font = textStyle.getFont() || defaultFont;
                registerFont(font);
                var textScale = textStyle.getScaleArray();
                textState.overflow = textStyle.getOverflow();
                textState.font = font;
                textState.maxAngle = textStyle.getMaxAngle();
                textState.placement = textStyle.getPlacement();
                textState.textAlign = textStyle.getTextAlign();
                textState.textBaseline =
                    textStyle.getTextBaseline() || defaultTextBaseline;
                textState.backgroundFill = textStyle.getBackgroundFill();
                textState.backgroundStroke = textStyle.getBackgroundStroke();
                textState.padding = textStyle.getPadding() || defaultPadding;
                textState.scale = textScale === undefined ? [1, 1] : textScale;
                var textOffsetX = textStyle.getOffsetX();
                var textOffsetY = textStyle.getOffsetY();
                var textRotateWithView = textStyle.getRotateWithView();
                var textRotation = textStyle.getRotation();
                this.text_ = textStyle.getText() || '';
                this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
                this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
                this.textRotateWithView_ =
                    textRotateWithView === undefined ? false : textRotateWithView;
                this.textRotation_ = textRotation === undefined ? 0 : textRotation;
                this.strokeKey_ = strokeState
                    ? (typeof strokeState.strokeStyle == 'string'
                        ? strokeState.strokeStyle
                        : getUid(strokeState.strokeStyle)) +
                        strokeState.lineCap +
                        strokeState.lineDashOffset +
                        '|' +
                        strokeState.lineWidth +
                        strokeState.lineJoin +
                        strokeState.miterLimit +
                        '[' +
                        strokeState.lineDash.join() +
                        ']'
                    : '';
                this.textKey_ =
                    textState.font +
                        textState.scale +
                        (textState.textAlign || '?') +
                        (textState.textBaseline || '?');
                this.fillKey_ = fillState
                    ? typeof fillState.fillStyle == 'string'
                        ? fillState.fillStyle
                        : '|' + getUid(fillState.fillStyle)
                    : '';
            }
            this.declutterImageWithText_ = opt_sharedData;
        };
        return CanvasTextBuilder;
    }(CanvasBuilder));

    /**
     * @module ol/render/canvas/BuilderGroup
     */
    /**
     * @type {Object<import("./BuilderType").default, typeof Builder>}
     */
    var BATCH_CONSTRUCTORS = {
        'Circle': CanvasPolygonBuilder,
        'Default': CanvasBuilder,
        'Image': CanvasImageBuilder,
        'LineString': CanvasLineStringBuilder,
        'Polygon': CanvasPolygonBuilder,
        'Text': CanvasTextBuilder,
    };
    var BuilderGroup = /** @class */ (function () {
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Max extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        function BuilderGroup(tolerance, maxExtent, resolution, pixelRatio) {
            /**
             * @private
             * @type {number}
             */
            this.tolerance_ = tolerance;
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            this.maxExtent_ = maxExtent;
            /**
             * @private
             * @type {number}
             */
            this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {number}
             */
            this.resolution_ = resolution;
            /**
             * @private
             * @type {!Object<string, !Object<import("./BuilderType").default, Builder>>}
             */
            this.buildersByZIndex_ = {};
        }
        /**
         * @return {!Object<string, !Object<import("./BuilderType").default, import("./Builder.js").SerializableInstructions>>} The serializable instructions
         */
        BuilderGroup.prototype.finish = function () {
            var builderInstructions = {};
            for (var zKey in this.buildersByZIndex_) {
                builderInstructions[zKey] = builderInstructions[zKey] || {};
                var builders = this.buildersByZIndex_[zKey];
                for (var builderKey in builders) {
                    var builderInstruction = builders[builderKey].finish();
                    builderInstructions[zKey][builderKey] = builderInstruction;
                }
            }
            return builderInstructions;
        };
        /**
         * @param {number|undefined} zIndex Z index.
         * @param {import("./BuilderType.js").default} builderType Replay type.
         * @return {import("../VectorContext.js").default} Replay.
         */
        BuilderGroup.prototype.getBuilder = function (zIndex, builderType) {
            var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
            var replays = this.buildersByZIndex_[zIndexKey];
            if (replays === undefined) {
                replays = {};
                this.buildersByZIndex_[zIndexKey] = replays;
            }
            var replay = replays[builderType];
            if (replay === undefined) {
                var Constructor = BATCH_CONSTRUCTORS[builderType];
                replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);
                replays[builderType] = replay;
            }
            return replay;
        };
        return BuilderGroup;
    }());

    var __extends$p = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @template {import("../layer/Layer.js").default} LayerType
     */
    var LayerRenderer = /** @class */ (function (_super) {
        __extends$p(LayerRenderer, _super);
        /**
         * @param {LayerType} layer Layer.
         */
        function LayerRenderer(layer) {
            var _this = _super.call(this) || this;
            /** @private */
            _this.boundHandleImageChange_ = _this.handleImageChange_.bind(_this);
            /**
             * @protected
             * @type {LayerType}
             */
            _this.layer_ = layer;
            /**
             * @type {import("../render/canvas/ExecutorGroup").default}
             */
            _this.declutterExecutorGroup = null;
            return _this;
        }
        /**
         * Asynchronous layer level hit detection.
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
         * an array of features.
         */
        LayerRenderer.prototype.getFeatures = function (pixel) {
            return abstract();
        };
        /**
         * Determine whether render should be called.
         * @abstract
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        LayerRenderer.prototype.prepareFrame = function (frameState) {
            return abstract();
        };
        /**
         * Render the layer.
         * @abstract
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        LayerRenderer.prototype.renderFrame = function (frameState, target) {
            return abstract();
        };
        /**
         * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @param {number} zoom Zoom level.
         * @param {import("../Tile.js").default} tile Tile.
         * @return {boolean|void} If `false`, the tile will not be considered loaded.
         */
        LayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {
            if (!tiles[zoom]) {
                tiles[zoom] = {};
            }
            tiles[zoom][tile.tileCoord.toString()] = tile;
            return undefined;
        };
        /**
         * Create a function that adds loaded tiles to the tile lookup.
         * @param {import("../source/Tile.js").default} source Tile source.
         * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
         * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
         *     called with a zoom level and a tile range to add loaded tiles to the lookup.
         * @protected
         */
        LayerRenderer.prototype.createLoadedTileFinder = function (source, projection, tiles) {
            return (
            /**
             * @param {number} zoom Zoom level.
             * @param {import("../TileRange.js").default} tileRange Tile range.
             * @return {boolean} The tile range is fully loaded.
             * @this {LayerRenderer}
             */
            function (zoom, tileRange) {
                var callback = this.loadedTileCallback.bind(this, tiles, zoom);
                return source.forEachLoadedTile(projection, zoom, tileRange, callback);
            }.bind(this));
        };
        /**
         * @abstract
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
         * @param {Array<import("./Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
         * @return {T|undefined} Callback result.
         * @template T
         */
        LayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {
            return undefined;
        };
        /**
         * @abstract
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
         *    location, null will be returned.  If there is data, but pixel values cannot be
         *    returned, and empty array will be returned.
         */
        LayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {
            return abstract();
        };
        /**
         * @return {LayerType} Layer.
         */
        LayerRenderer.prototype.getLayer = function () {
            return this.layer_;
        };
        /**
         * Perform action necessary to get the layer rendered after new fonts have loaded
         * @abstract
         */
        LayerRenderer.prototype.handleFontsChanged = function () { };
        /**
         * Handle changes in image state.
         * @param {import("../events/Event.js").default} event Image change event.
         * @private
         */
        LayerRenderer.prototype.handleImageChange_ = function (event) {
            var image = /** @type {import("../Image.js").default} */ (event.target);
            if (image.getState() === ImageState.LOADED) {
                this.renderIfReadyAndVisible();
            }
        };
        /**
         * Load the image if not already loaded, and register the image change
         * listener if needed.
         * @param {import("../ImageBase.js").default} image Image.
         * @return {boolean} `true` if the image is already loaded, `false` otherwise.
         * @protected
         */
        LayerRenderer.prototype.loadImage = function (image) {
            var imageState = image.getState();
            if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
                image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);
            }
            if (imageState == ImageState.IDLE) {
                image.load();
                imageState = image.getState();
            }
            return imageState == ImageState.LOADED;
        };
        /**
         * @protected
         */
        LayerRenderer.prototype.renderIfReadyAndVisible = function () {
            var layer = this.getLayer();
            if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {
                layer.changed();
            }
        };
        return LayerRenderer;
    }(Observable));

    /**
     * @module ol/render/Event
     */
    var __extends$q = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var RenderEvent = /** @class */ (function (_super) {
        __extends$q(RenderEvent, _super);
        /**
         * @param {import("./EventType.js").default} type Type.
         * @param {import("../transform.js").Transform=} opt_inversePixelTransform Transform for
         *     CSS pixels to rendered pixels.
         * @param {import("../PluggableMap.js").FrameState=} opt_frameState Frame state.
         * @param {?CanvasRenderingContext2D=} opt_context Context.
         */
        function RenderEvent(type, opt_inversePixelTransform, opt_frameState, opt_context) {
            var _this = _super.call(this, type) || this;
            /**
             * Transform from CSS pixels (relative to the top-left corner of the map viewport)
             * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.
             * @type {import("../transform.js").Transform|undefined}
             * @api
             */
            _this.inversePixelTransform = opt_inversePixelTransform;
            /**
             * An object representing the current render frame state.
             * @type {import("../PluggableMap.js").FrameState|undefined}
             * @api
             */
            _this.frameState = opt_frameState;
            /**
             * Canvas context. Not available when the event is dispatched by the map. Only available
             * when a Canvas renderer is used, null otherwise.
             * @type {CanvasRenderingContext2D|null|undefined}
             * @api
             */
            _this.context = opt_context;
            return _this;
        }
        return RenderEvent;
    }(BaseEvent));

    var __extends$r = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @abstract
     * @template {import("../../layer/Layer.js").default} LayerType
     */
    var CanvasLayerRenderer = /** @class */ (function (_super) {
        __extends$r(CanvasLayerRenderer, _super);
        /**
         * @param {LayerType} layer Layer.
         */
        function CanvasLayerRenderer(layer) {
            var _this = _super.call(this, layer) || this;
            /**
             * @protected
             * @type {HTMLElement}
             */
            _this.container = null;
            /**
             * @protected
             * @type {number}
             */
            _this.renderedResolution;
            /**
             * A temporary transform.  The values in this transform should only be used in a
             * function that sets the values.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            _this.tempTransform = create();
            /**
             * The transform for rendered pixels to viewport CSS pixels.  This transform must
             * be set when rendering a frame and may be used by other functions after rendering.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            _this.pixelTransform = create();
            /**
             * The transform for viewport CSS pixels to rendered pixels.  This transform must
             * be set when rendering a frame and may be used by other functions after rendering.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            _this.inversePixelTransform = create();
            /**
             * @type {CanvasRenderingContext2D}
             */
            _this.context = null;
            /**
             * @type {boolean}
             */
            _this.containerReused = false;
            return _this;
        }
        /**
         * Get a rendering container from an existing target, if compatible.
         * @param {HTMLElement} target Potential render target.
         * @param {string} transform CSS Transform.
         * @param {number} opacity Opacity.
         */
        CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity) {
            var layerClassName = this.getLayer().getClassName();
            var container, context;
            if (target &&
                target.style.opacity === '' &&
                target.className === layerClassName) {
                var canvas = target.firstElementChild;
                if (canvas instanceof HTMLCanvasElement) {
                    context = canvas.getContext('2d');
                }
            }
            if (context &&
                (context.canvas.width === 0 ||
                    context.canvas.style.transform === transform)) {
                // Container of the previous layer renderer can be used.
                this.container = target;
                this.context = context;
                this.containerReused = true;
            }
            else if (this.containerReused) {
                // Previously reused container cannot be used any more.
                this.container = null;
                this.context = null;
                this.containerReused = false;
            }
            if (!this.container) {
                container = document.createElement('div');
                container.className = layerClassName;
                var style = container.style;
                style.position = 'absolute';
                style.width = '100%';
                style.height = '100%';
                context = createCanvasContext2D();
                var canvas = context.canvas;
                container.appendChild(canvas);
                style = canvas.style;
                style.position = 'absolute';
                style.left = '0';
                style.transformOrigin = 'top left';
                this.container = container;
                this.context = context;
            }
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../extent.js").Extent} extent Clip extent.
         * @protected
         */
        CanvasLayerRenderer.prototype.clip = function (context, frameState, extent) {
            var pixelRatio = frameState.pixelRatio;
            var halfWidth = (frameState.size[0] * pixelRatio) / 2;
            var halfHeight = (frameState.size[1] * pixelRatio) / 2;
            var rotation = frameState.viewState.rotation;
            var topLeft = getTopLeft(extent);
            var topRight = getTopRight(extent);
            var bottomRight = getBottomRight(extent);
            var bottomLeft = getBottomLeft(extent);
            apply(frameState.coordinateToPixelTransform, topLeft);
            apply(frameState.coordinateToPixelTransform, topRight);
            apply(frameState.coordinateToPixelTransform, bottomRight);
            apply(frameState.coordinateToPixelTransform, bottomLeft);
            context.save();
            rotateAtOffset(context, -rotation, halfWidth, halfHeight);
            context.beginPath();
            context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
            context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
            context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
            context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
            context.clip();
            rotateAtOffset(context, rotation, halfWidth, halfHeight);
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../extent.js").Extent} extent Clip extent.
         * @protected
         */
        CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {
            var topLeft = getTopLeft(extent);
            var topRight = getTopRight(extent);
            var bottomRight = getBottomRight(extent);
            var bottomLeft = getBottomLeft(extent);
            apply(frameState.coordinateToPixelTransform, topLeft);
            apply(frameState.coordinateToPixelTransform, topRight);
            apply(frameState.coordinateToPixelTransform, bottomRight);
            apply(frameState.coordinateToPixelTransform, bottomLeft);
            var inverted = this.inversePixelTransform;
            apply(inverted, topLeft);
            apply(inverted, topRight);
            apply(inverted, bottomRight);
            apply(inverted, bottomLeft);
            context.save();
            context.beginPath();
            context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
            context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
            context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
            context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
            context.clip();
        };
        /**
         * @param {import("../../render/EventType.js").default} type Event type.
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @private
         */
        CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {
            var layer = this.getLayer();
            if (layer.hasListener(type)) {
                var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);
                layer.dispatchEvent(event_1);
            }
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        CanvasLayerRenderer.prototype.preRender = function (context, frameState) {
            this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        CanvasLayerRenderer.prototype.postRender = function (context, frameState) {
            this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);
        };
        /**
         * Creates a transform for rendering to an element that will be rotated after rendering.
         * @param {import("../../coordinate.js").Coordinate} center Center.
         * @param {number} resolution Resolution.
         * @param {number} rotation Rotation.
         * @param {number} pixelRatio Pixel ratio.
         * @param {number} width Width of the rendered element (in pixels).
         * @param {number} height Height of the rendered element (in pixels).
         * @param {number} offsetX Offset on the x-axis in view coordinates.
         * @protected
         * @return {!import("../../transform.js").Transform} Transform.
         */
        CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {
            var dx1 = width / 2;
            var dy1 = height / 2;
            var sx = pixelRatio / resolution;
            var sy = -sx;
            var dx2 = -center[0] + offsetX;
            var dy2 = -center[1];
            return compose(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);
        };
        /**
         * @param {import("../../pixel.js").Pixel} pixel Pixel.
         * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
         *    location, null will be returned.  If there is data, but pixel values cannot be
         *    returned, and empty array will be returned.
         */
        CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {
            var renderPixel = apply(this.inversePixelTransform, pixel.slice());
            var context = this.context;
            var layer = this.getLayer();
            var layerExtent = layer.getExtent();
            if (layerExtent) {
                var renderCoordinate = apply(frameState.pixelToCoordinateTransform, pixel.slice());
                /** get only data inside of the layer extent */
                if (!containsCoordinate(layerExtent, renderCoordinate)) {
                    return null;
                }
            }
            var data;
            try {
                var x = Math.round(renderPixel[0]);
                var y = Math.round(renderPixel[1]);
                var newCanvas = document.createElement('canvas');
                var newContext = newCanvas.getContext('2d');
                newCanvas.width = 1;
                newCanvas.height = 1;
                newContext.clearRect(0, 0, 1, 1);
                newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);
                data = newContext.getImageData(0, 0, 1, 1).data;
            }
            catch (err) {
                if (err.name === 'SecurityError') {
                    // tainted canvas, we assume there is data at the given pixel (although there might not be)
                    return new Uint8Array();
                }
                return data;
            }
            if (data[3] === 0) {
                return null;
            }
            return data;
        };
        return CanvasLayerRenderer;
    }(LayerRenderer));

    /**
     * @module ol/render/canvas/BuilderType
     */
    /**
     * @enum {string}
     */
    var ReplayType = {
        CIRCLE: 'Circle',
        DEFAULT: 'Default',
        IMAGE: 'Image',
        LINE_STRING: 'LineString',
        POLYGON: 'Polygon',
        TEXT: 'Text',
    };

    /**
     * @module ol/geom/flat/textpath
     */
    /**
     * @param {Array<number>} flatCoordinates Path to put text on.
     * @param {number} offset Start offset of the `flatCoordinates`.
     * @param {number} end End offset of the `flatCoordinates`.
     * @param {number} stride Stride.
     * @param {string} text Text to place on the path.
     * @param {number} startM m along the path where the text starts.
     * @param {number} maxAngle Max angle between adjacent chars in radians.
     * @param {number} scale The product of the text scale and the device pixel ratio.
     * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.
     * @param {string} font The font.
     * @param {Object<string, number>} cache A cache of measured widths.
     * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.
     * @return {Array<Array<*>>} The result array (or null if `maxAngle` was
     * exceeded). Entries of the array are x, y, anchorX, angle, chunk.
     */
    function drawTextOnPath(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache, rotation) {
        var x2 = flatCoordinates[offset];
        var y2 = flatCoordinates[offset + 1];
        var x1 = 0;
        var y1 = 0;
        var segmentLength = 0;
        var segmentM = 0;
        function advance() {
            x1 = x2;
            y1 = y2;
            offset += stride;
            x2 = flatCoordinates[offset];
            y2 = flatCoordinates[offset + 1];
            segmentM += segmentLength;
            segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        }
        do {
            advance();
        } while (offset < end - stride && segmentM + segmentLength < startM);
        var interpolate = (startM - segmentM) / segmentLength;
        var beginX = lerp(x1, x2, interpolate);
        var beginY = lerp(y1, y2, interpolate);
        var startOffset = offset - stride;
        var startLength = segmentM;
        var endM = startM + scale * measureAndCacheTextWidth(font, text, cache);
        while (offset < end - stride && segmentM + segmentLength < endM) {
            advance();
        }
        interpolate = (endM - segmentM) / segmentLength;
        var endX = lerp(x1, x2, interpolate);
        var endY = lerp(y1, y2, interpolate);
        // Keep text upright
        var reverse;
        if (rotation) {
            var flat = [beginX, beginY, endX, endY];
            rotate$1(flat, 0, 4, 2, rotation, flat, flat);
            reverse = flat[0] > flat[2];
        }
        else {
            reverse = beginX > endX;
        }
        var PI = Math.PI;
        var result = [];
        var singleSegment = startOffset + stride === offset;
        offset = startOffset;
        segmentLength = 0;
        segmentM = startLength;
        x2 = flatCoordinates[offset];
        y2 = flatCoordinates[offset + 1];
        // All on the same segment
        if (singleSegment) {
            advance();
            var previousAngle_1 = Math.atan2(y2 - y1, x2 - x1);
            if (reverse) {
                previousAngle_1 += previousAngle_1 > 0 ? -PI : PI;
            }
            var x = (endX + beginX) / 2;
            var y = (endY + beginY) / 2;
            result[0] = [x, y, (endM - startM) / 2, previousAngle_1, text];
            return result;
        }
        var previousAngle;
        for (var i = 0, ii = text.length; i < ii;) {
            advance();
            var angle = Math.atan2(y2 - y1, x2 - x1);
            if (reverse) {
                angle += angle > 0 ? -PI : PI;
            }
            if (previousAngle !== undefined) {
                var delta = angle - previousAngle;
                delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;
                if (Math.abs(delta) > maxAngle) {
                    return null;
                }
            }
            previousAngle = angle;
            var iStart = i;
            var charLength = 0;
            for (; i < ii; ++i) {
                var index = reverse ? ii - i - 1 : i;
                var len = scale * measureAndCacheTextWidth(font, text[index], cache);
                if (offset + stride < end &&
                    segmentM + segmentLength < startM + charLength + len / 2) {
                    break;
                }
                charLength += len;
            }
            if (i === iStart) {
                continue;
            }
            var chars = reverse
                ? text.substring(ii - iStart, ii - i)
                : text.substring(iStart, i);
            interpolate = (startM + charLength / 2 - segmentM) / segmentLength;
            var x = lerp(x1, x2, interpolate);
            var y = lerp(y1, y2, interpolate);
            result.push([x, y, charLength / 2, angle, chars]);
            startM += charLength;
        }
        return result;
    }

    /**
     * @module ol/render/canvas/Executor
     */
    /**
     * @typedef {Object} BBox
     * @property {number} minX
     * @property {number} minY
     * @property {number} maxX
     * @property {number} maxY
     * @property {*} value
     */
    /**
     * @typedef {Object} ImageOrLabelDimensions
     * @property {number} drawImageX
     * @property {number} drawImageY
     * @property {number} drawImageW
     * @property {number} drawImageH
     * @property {number} originX
     * @property {number} originY
     * @property {Array<number>} scale
     * @property {BBox} declutterBox
     * @property {import("../../transform.js").Transform} canvasTransform
     */
    /**
     * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs
     */
    /**
     * @template T
     * @typedef {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default): T} FeatureCallback
     */
    /**
     * @type {import("../../extent.js").Extent}
     */
    var tmpExtent = createEmpty();
    /** @type {import("../../coordinate.js").Coordinate} */
    var p1 = [];
    /** @type {import("../../coordinate.js").Coordinate} */
    var p2 = [];
    /** @type {import("../../coordinate.js").Coordinate} */
    var p3 = [];
    /** @type {import("../../coordinate.js").Coordinate} */
    var p4 = [];
    /**
     * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel
     * @return {BBox} Declutter bbox.
     */
    function getDeclutterBox(replayImageOrLabelArgs) {
        return replayImageOrLabelArgs[3].declutterBox;
    }
    var rtlRegEx = new RegExp(
    /* eslint-disable prettier/prettier */
    '[' +
        String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +
        String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +
        String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +
        String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +
        String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +
        ']'
    /* eslint-enable prettier/prettier */
    );
    /**
     * @param {string} text Text.
     * @param {string} align Alignment.
     * @return {number} Text alignment.
     */
    function horizontalTextAlign(text, align) {
        if ((align === 'start' || align === 'end') && !rtlRegEx.test(text)) {
            align = align === 'start' ? 'left' : 'right';
        }
        return TEXT_ALIGN[align];
    }
    var Executor = /** @class */ (function () {
        /**
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {boolean} overlaps The replay can have overlapping geometries.
         * @param {import("../canvas.js").SerializableInstructions} instructions The serializable instructions
         * @param {import("../../size.js").Size} renderBuffer Render buffer (width/height) in pixels.
         */
        function Executor(resolution, pixelRatio, overlaps, instructions, renderBuffer) {
            /**
             * @protected
             * @type {boolean}
             */
            this.overlaps = overlaps;
            /**
             * @protected
             * @type {number}
             */
            this.pixelRatio = pixelRatio;
            /**
             * @protected
             * @const
             * @type {number}
             */
            this.resolution = resolution;
            /**
             * @private
             * @type {boolean}
             */
            this.alignFill_;
            /**
             * @protected
             * @type {Array<*>}
             */
            this.instructions = instructions.instructions;
            /**
             * @protected
             * @type {Array<number>}
             */
            this.coordinates = instructions.coordinates;
            /**
             * @private
             * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
             */
            this.coordinateCache_ = {};
            /**
             * @private
             * @type {import("../../size.js").Size}
             */
            this.renderBuffer_ = renderBuffer;
            /**
             * @private
             * @type {!import("../../transform.js").Transform}
             */
            this.renderedTransform_ = create();
            /**
             * @protected
             * @type {Array<*>}
             */
            this.hitDetectionInstructions = instructions.hitDetectionInstructions;
            /**
             * @private
             * @type {Array<number>}
             */
            this.pixelCoordinates_ = null;
            /**
             * @private
             * @type {number}
             */
            this.viewRotation_ = 0;
            /**
             * @type {!Object<string, import("../canvas.js").FillState>}
             */
            this.fillStates = instructions.fillStates || {};
            /**
             * @type {!Object<string, import("../canvas.js").StrokeState>}
             */
            this.strokeStates = instructions.strokeStates || {};
            /**
             * @type {!Object<string, import("../canvas.js").TextState>}
             */
            this.textStates = instructions.textStates || {};
            /**
             * @private
             * @type {Object<string, Object<string, number>>}
             */
            this.widths_ = {};
            /**
             * @private
             * @type {Object<string, import("../canvas.js").Label>}
             */
            this.labels_ = {};
        }
        /**
         * @param {string} text Text.
         * @param {string} textKey Text style key.
         * @param {string} fillKey Fill style key.
         * @param {string} strokeKey Stroke style key.
         * @return {import("../canvas.js").Label} Label.
         */
        Executor.prototype.createLabel = function (text, textKey, fillKey, strokeKey) {
            var key = text + textKey + fillKey + strokeKey;
            if (this.labels_[key]) {
                return this.labels_[key];
            }
            var strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
            var fillState = fillKey ? this.fillStates[fillKey] : null;
            var textState = this.textStates[textKey];
            var pixelRatio = this.pixelRatio;
            var scale = [
                textState.scale[0] * pixelRatio,
                textState.scale[1] * pixelRatio,
            ];
            var align = horizontalTextAlign(text, textState.textAlign || defaultTextAlign);
            var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
            var lines = text.split('\n');
            var numLines = lines.length;
            var widths = [];
            var width = measureTextWidths(textState.font, lines, widths);
            var lineHeight = measureTextHeight(textState.font);
            var height = lineHeight * numLines;
            var renderWidth = width + strokeWidth;
            var contextInstructions = [];
            // make canvas 2 pixels wider to account for italic text width measurement errors
            var w = (renderWidth + 2) * scale[0];
            var h = (height + strokeWidth) * scale[1];
            /** @type {import("../canvas.js").Label} */
            var label = {
                width: w < 0 ? Math.floor(w) : Math.ceil(w),
                height: h < 0 ? Math.floor(h) : Math.ceil(h),
                contextInstructions: contextInstructions,
            };
            if (scale[0] != 1 || scale[1] != 1) {
                contextInstructions.push('scale', scale);
            }
            contextInstructions.push('font', textState.font);
            if (strokeKey) {
                contextInstructions.push('strokeStyle', strokeState.strokeStyle);
                contextInstructions.push('lineWidth', strokeWidth);
                contextInstructions.push('lineCap', strokeState.lineCap);
                contextInstructions.push('lineJoin', strokeState.lineJoin);
                contextInstructions.push('miterLimit', strokeState.miterLimit);
                // eslint-disable-next-line
                var Context = WORKER_OFFSCREEN_CANVAS ? OffscreenCanvasRenderingContext2D : CanvasRenderingContext2D;
                if (Context.prototype.setLineDash) {
                    contextInstructions.push('setLineDash', [strokeState.lineDash]);
                    contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);
                }
            }
            if (fillKey) {
                contextInstructions.push('fillStyle', fillState.fillStyle);
            }
            contextInstructions.push('textBaseline', 'middle');
            contextInstructions.push('textAlign', 'center');
            var leftRight = 0.5 - align;
            var x = align * renderWidth + leftRight * strokeWidth;
            var i;
            if (strokeKey) {
                for (i = 0; i < numLines; ++i) {
                    contextInstructions.push('strokeText', [
                        lines[i],
                        x + leftRight * widths[i],
                        0.5 * (strokeWidth + lineHeight) + i * lineHeight,
                    ]);
                }
            }
            if (fillKey) {
                for (i = 0; i < numLines; ++i) {
                    contextInstructions.push('fillText', [
                        lines[i],
                        x + leftRight * widths[i],
                        0.5 * (strokeWidth + lineHeight) + i * lineHeight,
                    ]);
                }
            }
            this.labels_[key] = label;
            return label;
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
         * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
         * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
         * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
         * @param {Array<*>} fillInstruction Fill instruction.
         * @param {Array<*>} strokeInstruction Stroke instruction.
         */
        Executor.prototype.replayTextBackground_ = function (context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {
            context.beginPath();
            context.moveTo.apply(context, p1);
            context.lineTo.apply(context, p2);
            context.lineTo.apply(context, p3);
            context.lineTo.apply(context, p4);
            context.lineTo.apply(context, p1);
            if (fillInstruction) {
                this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);
                this.fill_(context);
            }
            if (strokeInstruction) {
                this.setStrokeStyle_(context, 
                /** @type {Array<*>} */ (strokeInstruction));
                context.stroke();
            }
        };
        /**
         * @private
         * @param {number} sheetWidth Width of the sprite sheet.
         * @param {number} sheetHeight Height of the sprite sheet.
         * @param {number} centerX X.
         * @param {number} centerY Y.
         * @param {number} width Width.
         * @param {number} height Height.
         * @param {number} anchorX Anchor X.
         * @param {number} anchorY Anchor Y.
         * @param {number} originX Origin X.
         * @param {number} originY Origin Y.
         * @param {number} rotation Rotation.
         * @param {import("../../size.js").Size} scale Scale.
         * @param {boolean} snapToPixel Snap to pixel.
         * @param {Array<number>} padding Padding.
         * @param {boolean} fillStroke Background fill or stroke.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
         */
        Executor.prototype.calculateImageOrLabelDimensions_ = function (sheetWidth, sheetHeight, centerX, centerY, width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, fillStroke, feature) {
            anchorX *= scale[0];
            anchorY *= scale[1];
            var x = centerX - anchorX;
            var y = centerY - anchorY;
            var w = width + originX > sheetWidth ? sheetWidth - originX : width;
            var h = height + originY > sheetHeight ? sheetHeight - originY : height;
            var boxW = padding[3] + w * scale[0] + padding[1];
            var boxH = padding[0] + h * scale[1] + padding[2];
            var boxX = x - padding[3];
            var boxY = y - padding[0];
            if (fillStroke || rotation !== 0) {
                p1[0] = boxX;
                p4[0] = boxX;
                p1[1] = boxY;
                p2[1] = boxY;
                p2[0] = boxX + boxW;
                p3[0] = p2[0];
                p3[1] = boxY + boxH;
                p4[1] = p3[1];
            }
            var transform;
            if (rotation !== 0) {
                transform = compose(create(), centerX, centerY, 1, 1, rotation, -centerX, -centerY);
                apply(transform, p1);
                apply(transform, p2);
                apply(transform, p3);
                apply(transform, p4);
                createOrUpdate(Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]), tmpExtent);
            }
            else {
                createOrUpdate(Math.min(boxX, boxX + boxW), Math.min(boxY, boxY + boxH), Math.max(boxX, boxX + boxW), Math.max(boxY, boxY + boxH), tmpExtent);
            }
            if (snapToPixel) {
                x = Math.round(x);
                y = Math.round(y);
            }
            return {
                drawImageX: x,
                drawImageY: y,
                drawImageW: w,
                drawImageH: h,
                originX: originX,
                originY: originY,
                declutterBox: {
                    minX: tmpExtent[0],
                    minY: tmpExtent[1],
                    maxX: tmpExtent[2],
                    maxY: tmpExtent[3],
                    value: feature,
                },
                canvasTransform: transform,
                scale: scale,
            };
        };
        /**
         * @private
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} contextScale Scale of the context.
         * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
         * @param {ImageOrLabelDimensions} dimensions Dimensions.
         * @param {number} opacity Opacity.
         * @param {Array<*>} fillInstruction Fill instruction.
         * @param {Array<*>} strokeInstruction Stroke instruction.
         * @return {boolean} The image or label was rendered.
         */
        Executor.prototype.replayImageOrLabel_ = function (context, contextScale, imageOrLabel, dimensions, opacity, fillInstruction, strokeInstruction) {
            var fillStroke = !!(fillInstruction || strokeInstruction);
            var box = dimensions.declutterBox;
            var canvas = context.canvas;
            var strokePadding = strokeInstruction
                ? (strokeInstruction[2] * dimensions.scale[0]) / 2
                : 0;
            var intersects = box.minX - strokePadding <= canvas.width / contextScale &&
                box.maxX + strokePadding >= 0 &&
                box.minY - strokePadding <= canvas.height / contextScale &&
                box.maxY + strokePadding >= 0;
            if (intersects) {
                if (fillStroke) {
                    this.replayTextBackground_(context, p1, p2, p3, p4, 
                    /** @type {Array<*>} */ (fillInstruction), 
                    /** @type {Array<*>} */ (strokeInstruction));
                }
                drawImageOrLabel(context, dimensions.canvasTransform, opacity, imageOrLabel, dimensions.originX, dimensions.originY, dimensions.drawImageW, dimensions.drawImageH, dimensions.drawImageX, dimensions.drawImageY, dimensions.scale);
            }
            return true;
        };
        /**
         * @private
         * @param {CanvasRenderingContext2D} context Context.
         */
        Executor.prototype.fill_ = function (context) {
            if (this.alignFill_) {
                var origin_1 = apply(this.renderedTransform_, [0, 0]);
                var repeatSize = 512 * this.pixelRatio;
                context.save();
                context.translate(origin_1[0] % repeatSize, origin_1[1] % repeatSize);
                context.rotate(this.viewRotation_);
            }
            context.fill();
            if (this.alignFill_) {
                context.restore();
            }
        };
        /**
         * @private
         * @param {CanvasRenderingContext2D} context Context.
         * @param {Array<*>} instruction Instruction.
         */
        Executor.prototype.setStrokeStyle_ = function (context, instruction) {
            context['strokeStyle'] = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
            context.lineWidth = /** @type {number} */ (instruction[2]);
            context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
            context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
            context.miterLimit = /** @type {number} */ (instruction[5]);
            if (context.setLineDash) {
                context.lineDashOffset = /** @type {number} */ (instruction[7]);
                context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
            }
        };
        /**
         * @private
         * @param {string} text The text to draw.
         * @param {string} textKey The key of the text state.
         * @param {string} strokeKey The key for the stroke state.
         * @param {string} fillKey The key for the fill state.
         * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
         */
        Executor.prototype.drawLabelWithPointPlacement_ = function (text, textKey, strokeKey, fillKey) {
            var textState = this.textStates[textKey];
            var label = this.createLabel(text, textKey, fillKey, strokeKey);
            var strokeState = this.strokeStates[strokeKey];
            var pixelRatio = this.pixelRatio;
            var align = horizontalTextAlign(text, textState.textAlign || defaultTextAlign);
            var baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];
            var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;
            // Remove the 2 pixels we added in createLabel() for the anchor
            var width = label.width / pixelRatio - 2 * textState.scale[0];
            var anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
            var anchorY = (baseline * label.height) / pixelRatio +
                2 * (0.5 - baseline) * strokeWidth;
            return {
                label: label,
                anchorX: anchorX,
                anchorY: anchorY,
            };
        };
        /**
         * @private
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} contextScale Scale of the context.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {Array<*>} instructions Instructions array.
         * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
         * @param {FeatureCallback<T>=} opt_featureCallback Feature callback.
         * @param {import("../../extent.js").Extent=} opt_hitExtent Only check
         *     features that intersect this extent.
         * @param {import("rbush").default=} opt_declutterTree Declutter tree.
         * @return {T|undefined} Callback result.
         * @template T
         */
        Executor.prototype.execute_ = function (context, contextScale, transform, instructions, snapToPixel, opt_featureCallback, opt_hitExtent, opt_declutterTree) {
            /** @type {Array<number>} */
            var pixelCoordinates;
            if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {
                pixelCoordinates = this.pixelCoordinates_;
            }
            else {
                if (!this.pixelCoordinates_) {
                    this.pixelCoordinates_ = [];
                }
                pixelCoordinates = transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
                setFromArray(this.renderedTransform_, transform);
            }
            var i = 0; // instruction index
            var ii = instructions.length; // end of instructions
            var d = 0; // data index
            var dd; // end of per-instruction data
            var anchorX, anchorY, prevX, prevY, roundX, roundY, image, text, textKey, strokeKey, fillKey;
            var pendingFill = 0;
            var pendingStroke = 0;
            var lastFillInstruction = null;
            var lastStrokeInstruction = null;
            var coordinateCache = this.coordinateCache_;
            var viewRotation = this.viewRotation_;
            var viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;
            var state = /** @type {import("../../render.js").State} */ ({
                context: context,
                pixelRatio: this.pixelRatio,
                resolution: this.resolution,
                rotation: viewRotation,
            });
            // When the batch size gets too big, performance decreases. 200 is a good
            // balance between batch size and number of fill/stroke instructions.
            var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
            var /** @type {import("../../Feature.js").FeatureLike} */ feature;
            var x, y, currentGeometry;
            while (i < ii) {
                var instruction = instructions[i];
                var type = /** @type {import("./Instruction.js").default} */ (instruction[0]);
                switch (type) {
                    case Instruction.BEGIN_GEOMETRY:
                        feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
                        currentGeometry = instruction[3];
                        if (!feature.getGeometry()) {
                            i = /** @type {number} */ (instruction[2]);
                        }
                        else if (opt_hitExtent !== undefined &&
                            !intersects(opt_hitExtent, currentGeometry.getExtent())) {
                            i = /** @type {number} */ (instruction[2]) + 1;
                        }
                        else {
                            ++i;
                        }
                        break;
                    case Instruction.BEGIN_PATH:
                        if (pendingFill > batchSize) {
                            this.fill_(context);
                            pendingFill = 0;
                        }
                        if (pendingStroke > batchSize) {
                            context.stroke();
                            pendingStroke = 0;
                        }
                        if (!pendingFill && !pendingStroke) {
                            context.beginPath();
                            prevX = NaN;
                            prevY = NaN;
                        }
                        ++i;
                        break;
                    case Instruction.CIRCLE:
                        d = /** @type {number} */ (instruction[1]);
                        var x1 = pixelCoordinates[d];
                        var y1 = pixelCoordinates[d + 1];
                        var x2 = pixelCoordinates[d + 2];
                        var y2 = pixelCoordinates[d + 3];
                        var dx = x2 - x1;
                        var dy = y2 - y1;
                        var r = Math.sqrt(dx * dx + dy * dy);
                        context.moveTo(x1 + r, y1);
                        context.arc(x1, y1, r, 0, 2 * Math.PI, true);
                        ++i;
                        break;
                    case Instruction.CLOSE_PATH:
                        context.closePath();
                        ++i;
                        break;
                    case Instruction.CUSTOM:
                        d = /** @type {number} */ (instruction[1]);
                        dd = instruction[2];
                        var geometry = /** @type {import("../../geom/SimpleGeometry.js").default} */ (instruction[3]);
                        var renderer = instruction[4];
                        var fn = instruction.length == 6 ? instruction[5] : undefined;
                        state.geometry = geometry;
                        state.feature = feature;
                        if (!(i in coordinateCache)) {
                            coordinateCache[i] = [];
                        }
                        var coords = coordinateCache[i];
                        if (fn) {
                            fn(pixelCoordinates, d, dd, 2, coords);
                        }
                        else {
                            coords[0] = pixelCoordinates[d];
                            coords[1] = pixelCoordinates[d + 1];
                            coords.length = 2;
                        }
                        renderer(coords, state);
                        ++i;
                        break;
                    case Instruction.DRAW_IMAGE:
                        d = /** @type {number} */ (instruction[1]);
                        dd = /** @type {number} */ (instruction[2]);
                        image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (instruction[3]);
                        // Remaining arguments in DRAW_IMAGE are in alphabetical order
                        anchorX = /** @type {number} */ (instruction[4]);
                        anchorY = /** @type {number} */ (instruction[5]);
                        var height = /** @type {number} */ (instruction[6]);
                        var opacity = /** @type {number} */ (instruction[7]);
                        var originX = /** @type {number} */ (instruction[8]);
                        var originY = /** @type {number} */ (instruction[9]);
                        var rotateWithView = /** @type {boolean} */ (instruction[10]);
                        var rotation = /** @type {number} */ (instruction[11]);
                        var scale = /** @type {import("../../size.js").Size} */ (instruction[12]);
                        var width = /** @type {number} */ (instruction[13]);
                        var declutterImageWithText = /** @type {import("../canvas.js").DeclutterImageWithText} */ (instruction[14]);
                        if (!image && instruction.length >= 19) {
                            // create label images
                            text = /** @type {string} */ (instruction[18]);
                            textKey = /** @type {string} */ (instruction[19]);
                            strokeKey = /** @type {string} */ (instruction[20]);
                            fillKey = /** @type {string} */ (instruction[21]);
                            var labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);
                            image = labelWithAnchor.label;
                            instruction[3] = image;
                            var textOffsetX = /** @type {number} */ (instruction[22]);
                            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
                            instruction[4] = anchorX;
                            var textOffsetY = /** @type {number} */ (instruction[23]);
                            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
                            instruction[5] = anchorY;
                            height = image.height;
                            instruction[6] = height;
                            width = image.width;
                            instruction[13] = width;
                        }
                        var geometryWidths = void 0;
                        if (instruction.length > 24) {
                            geometryWidths = /** @type {number} */ (instruction[24]);
                        }
                        var padding = void 0, backgroundFill = void 0, backgroundStroke = void 0;
                        if (instruction.length > 16) {
                            padding = /** @type {Array<number>} */ (instruction[15]);
                            backgroundFill = /** @type {boolean} */ (instruction[16]);
                            backgroundStroke = /** @type {boolean} */ (instruction[17]);
                        }
                        else {
                            padding = defaultPadding;
                            backgroundFill = false;
                            backgroundStroke = false;
                        }
                        if (rotateWithView && viewRotationFromTransform) {
                            // Canvas is expected to be rotated to reverse view rotation.
                            rotation += viewRotation;
                        }
                        else if (!rotateWithView && !viewRotationFromTransform) {
                            // Canvas is not rotated, images need to be rotated back to be north-up.
                            rotation -= viewRotation;
                        }
                        var widthIndex = 0;
                        for (; d < dd; d += 2) {
                            if (geometryWidths &&
                                geometryWidths[widthIndex++] < width / this.pixelRatio) {
                                continue;
                            }
                            var dimensions = this.calculateImageOrLabelDimensions_(image.width, image.height, pixelCoordinates[d], pixelCoordinates[d + 1], width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, backgroundFill || backgroundStroke, feature);
                            /** @type {ReplayImageOrLabelArgs} */
                            var args = [
                                context,
                                contextScale,
                                image,
                                dimensions,
                                opacity,
                                backgroundFill
                                    ? /** @type {Array<*>} */ (lastFillInstruction)
                                    : null,
                                backgroundStroke
                                    ? /** @type {Array<*>} */ (lastStrokeInstruction)
                                    : null,
                            ];
                            var imageArgs = void 0;
                            var imageDeclutterBox = void 0;
                            if (opt_declutterTree && declutterImageWithText) {
                                if (!declutterImageWithText[d]) {
                                    // We now have the image for an image+text combination.
                                    declutterImageWithText[d] = args;
                                    // Don't render anything for now, wait for the text.
                                    continue;
                                }
                                imageArgs = declutterImageWithText[d];
                                delete declutterImageWithText[d];
                                imageDeclutterBox = getDeclutterBox(imageArgs);
                                if (opt_declutterTree.collides(imageDeclutterBox)) {
                                    continue;
                                }
                            }
                            if (opt_declutterTree &&
                                opt_declutterTree.collides(dimensions.declutterBox)) {
                                continue;
                            }
                            if (imageArgs) {
                                // We now have image and text for an image+text combination.
                                if (opt_declutterTree) {
                                    opt_declutterTree.insert(imageDeclutterBox);
                                }
                                // Render the image before we render the text.
                                this.replayImageOrLabel_.apply(this, imageArgs);
                            }
                            if (opt_declutterTree) {
                                opt_declutterTree.insert(dimensions.declutterBox);
                            }
                            this.replayImageOrLabel_.apply(this, args);
                        }
                        ++i;
                        break;
                    case Instruction.DRAW_CHARS:
                        var begin = /** @type {number} */ (instruction[1]);
                        var end = /** @type {number} */ (instruction[2]);
                        var baseline = /** @type {number} */ (instruction[3]);
                        var overflow = /** @type {number} */ (instruction[4]);
                        fillKey = /** @type {string} */ (instruction[5]);
                        var maxAngle = /** @type {number} */ (instruction[6]);
                        var measurePixelRatio = /** @type {number} */ (instruction[7]);
                        var offsetY = /** @type {number} */ (instruction[8]);
                        strokeKey = /** @type {string} */ (instruction[9]);
                        var strokeWidth = /** @type {number} */ (instruction[10]);
                        text = /** @type {string} */ (instruction[11]);
                        textKey = /** @type {string} */ (instruction[12]);
                        var pixelRatioScale = [
                            /** @type {number} */ (instruction[13]),
                            /** @type {number} */ (instruction[13]),
                        ];
                        var textState = this.textStates[textKey];
                        var font = textState.font;
                        var textScale = [
                            textState.scale[0] * measurePixelRatio,
                            textState.scale[1] * measurePixelRatio,
                        ];
                        var cachedWidths = void 0;
                        if (font in this.widths_) {
                            cachedWidths = this.widths_[font];
                        }
                        else {
                            cachedWidths = {};
                            this.widths_[font] = cachedWidths;
                        }
                        var pathLength = lineStringLength(pixelCoordinates, begin, end, 2);
                        var textLength = Math.abs(textScale[0]) *
                            measureAndCacheTextWidth(font, text, cachedWidths);
                        if (overflow || textLength <= pathLength) {
                            var textAlign = this.textStates[textKey].textAlign;
                            var startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];
                            var parts = drawTextOnPath(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), measureAndCacheTextWidth, font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_);
                            drawChars: if (parts) {
                                /** @type {Array<ReplayImageOrLabelArgs>} */
                                var replayImageOrLabelArgs = [];
                                var c = void 0, cc = void 0, chars = void 0, label = void 0, part = void 0;
                                if (strokeKey) {
                                    for (c = 0, cc = parts.length; c < cc; ++c) {
                                        part = parts[c]; // x, y, anchorX, rotation, chunk
                                        chars = /** @type {string} */ (part[4]);
                                        label = this.createLabel(chars, textKey, '', strokeKey);
                                        anchorX =
                                            /** @type {number} */ (part[2]) +
                                                (textScale[0] < 0 ? -strokeWidth : strokeWidth);
                                        anchorY =
                                            baseline * label.height +
                                                ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /
                                                    textScale[0] -
                                                offsetY;
                                        var dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, defaultPadding, false, feature);
                                        if (opt_declutterTree &&
                                            opt_declutterTree.collides(dimensions.declutterBox)) {
                                            break drawChars;
                                        }
                                        replayImageOrLabelArgs.push([
                                            context,
                                            contextScale,
                                            label,
                                            dimensions,
                                            1,
                                            null,
                                            null,
                                        ]);
                                    }
                                }
                                if (fillKey) {
                                    for (c = 0, cc = parts.length; c < cc; ++c) {
                                        part = parts[c]; // x, y, anchorX, rotation, chunk
                                        chars = /** @type {string} */ (part[4]);
                                        label = this.createLabel(chars, textKey, fillKey, '');
                                        anchorX = /** @type {number} */ (part[2]);
                                        anchorY = baseline * label.height - offsetY;
                                        var dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, defaultPadding, false, feature);
                                        if (opt_declutterTree &&
                                            opt_declutterTree.collides(dimensions.declutterBox)) {
                                            break drawChars;
                                        }
                                        replayImageOrLabelArgs.push([
                                            context,
                                            contextScale,
                                            label,
                                            dimensions,
                                            1,
                                            null,
                                            null,
                                        ]);
                                    }
                                }
                                if (opt_declutterTree) {
                                    opt_declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));
                                }
                                for (var i_1 = 0, ii_1 = replayImageOrLabelArgs.length; i_1 < ii_1; ++i_1) {
                                    this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i_1]);
                                }
                            }
                        }
                        ++i;
                        break;
                    case Instruction.END_GEOMETRY:
                        if (opt_featureCallback !== undefined) {
                            feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
                            var result = opt_featureCallback(feature, currentGeometry);
                            if (result) {
                                return result;
                            }
                        }
                        ++i;
                        break;
                    case Instruction.FILL:
                        if (batchSize) {
                            pendingFill++;
                        }
                        else {
                            this.fill_(context);
                        }
                        ++i;
                        break;
                    case Instruction.MOVE_TO_LINE_TO:
                        d = /** @type {number} */ (instruction[1]);
                        dd = /** @type {number} */ (instruction[2]);
                        x = pixelCoordinates[d];
                        y = pixelCoordinates[d + 1];
                        roundX = (x + 0.5) | 0;
                        roundY = (y + 0.5) | 0;
                        if (roundX !== prevX || roundY !== prevY) {
                            context.moveTo(x, y);
                            prevX = roundX;
                            prevY = roundY;
                        }
                        for (d += 2; d < dd; d += 2) {
                            x = pixelCoordinates[d];
                            y = pixelCoordinates[d + 1];
                            roundX = (x + 0.5) | 0;
                            roundY = (y + 0.5) | 0;
                            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                                context.lineTo(x, y);
                                prevX = roundX;
                                prevY = roundY;
                            }
                        }
                        ++i;
                        break;
                    case Instruction.SET_FILL_STYLE:
                        lastFillInstruction = instruction;
                        this.alignFill_ = instruction[2];
                        if (pendingFill) {
                            this.fill_(context);
                            pendingFill = 0;
                            if (pendingStroke) {
                                context.stroke();
                                pendingStroke = 0;
                            }
                        }
                        context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
                        ++i;
                        break;
                    case Instruction.SET_STROKE_STYLE:
                        lastStrokeInstruction = instruction;
                        if (pendingStroke) {
                            context.stroke();
                            pendingStroke = 0;
                        }
                        this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
                        ++i;
                        break;
                    case Instruction.STROKE:
                        if (batchSize) {
                            pendingStroke++;
                        }
                        else {
                            context.stroke();
                        }
                        ++i;
                        break;
                    default:
                        ++i; // consume the instruction anyway, to avoid an infinite loop
                        break;
                }
            }
            if (pendingFill) {
                this.fill_(context);
            }
            if (pendingStroke) {
                context.stroke();
            }
            return undefined;
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} contextScale Scale of the context.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {number} viewRotation View rotation.
         * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
         * @param {import("rbush").default=} opt_declutterTree Declutter tree.
         */
        Executor.prototype.execute = function (context, contextScale, transform, viewRotation, snapToPixel, opt_declutterTree) {
            this.viewRotation_ = viewRotation;
            this.execute_(context, contextScale, transform, this.instructions, snapToPixel, undefined, undefined, opt_declutterTree);
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {number} viewRotation View rotation.
         * @param {FeatureCallback<T>=} opt_featureCallback Feature callback.
         * @param {import("../../extent.js").Extent=} opt_hitExtent Only check
         *     features that intersect this extent.
         * @return {T|undefined} Callback result.
         * @template T
         */
        Executor.prototype.executeHitDetection = function (context, transform, viewRotation, opt_featureCallback, opt_hitExtent) {
            this.viewRotation_ = viewRotation;
            return this.execute_(context, 1, transform, this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);
        };
        return Executor;
    }());

    /**
     * @module ol/render/canvas/ExecutorGroup
     */
    /**
     * @const
     * @type {Array<import("./BuilderType.js").default>}
     */
    var ORDER = [
        ReplayType.POLYGON,
        ReplayType.CIRCLE,
        ReplayType.LINE_STRING,
        ReplayType.IMAGE,
        ReplayType.TEXT,
        ReplayType.DEFAULT,
    ];
    var ExecutorGroup = /** @class */ (function () {
        /**
         * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
         * `maxExtent` was set on the Buillder for this executor group, the same `maxExtent`
         * should be set here, unless the target context does not exceet that extent (which
         * can be the case when rendering to tiles).
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {boolean} overlaps The executor group can have overlapping geometries.
         * @param {!Object<string, !Object<import("./BuilderType.js").default, import("../canvas.js").SerializableInstructions>>} allInstructions
         * The serializable instructions.
         * @param {number=} opt_renderBuffer Optional rendering buffer.
         */
        function ExecutorGroup(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            this.maxExtent_ = maxExtent;
            /**
             * @private
             * @type {boolean}
             */
            this.overlaps_ = overlaps;
            /**
             * @private
             * @type {number}
             */
            this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {number}
             */
            this.resolution_ = resolution;
            /**
             * @private
             * @type {number|undefined}
             */
            this.renderBuffer_ = opt_renderBuffer;
            /**
             * @private
             * @type {!Object<string, !Object<import("./BuilderType.js").default, import("./Executor").default>>}
             */
            this.executorsByZIndex_ = {};
            /**
             * @private
             * @type {CanvasRenderingContext2D}
             */
            this.hitDetectionContext_ = null;
            /**
             * @private
             * @type {import("../../transform.js").Transform}
             */
            this.hitDetectionTransform_ = create();
            this.createExecutors_(allInstructions);
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../transform.js").Transform} transform Transform.
         */
        ExecutorGroup.prototype.clip = function (context, transform) {
            var flatClipCoords = this.getClipCoords(transform);
            context.beginPath();
            context.moveTo(flatClipCoords[0], flatClipCoords[1]);
            context.lineTo(flatClipCoords[2], flatClipCoords[3]);
            context.lineTo(flatClipCoords[4], flatClipCoords[5]);
            context.lineTo(flatClipCoords[6], flatClipCoords[7]);
            context.clip();
        };
        /**
         * Create executors and populate them using the provided instructions.
         * @private
         * @param {!Object<string, !Object<import("./BuilderType.js").default, import("../canvas.js").SerializableInstructions>>} allInstructions The serializable instructions
         */
        ExecutorGroup.prototype.createExecutors_ = function (allInstructions) {
            for (var zIndex in allInstructions) {
                var executors = this.executorsByZIndex_[zIndex];
                if (executors === undefined) {
                    executors = {};
                    this.executorsByZIndex_[zIndex] = executors;
                }
                var instructionByZindex = allInstructions[zIndex];
                var renderBuffer = [this.renderBuffer_ || 0, this.renderBuffer_ || 0];
                for (var builderType in instructionByZindex) {
                    var instructions = instructionByZindex[builderType];
                    executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions, renderBuffer);
                }
            }
        };
        /**
         * @param {Array<import("./BuilderType.js").default>} executors Executors.
         * @return {boolean} Has executors of the provided types.
         */
        ExecutorGroup.prototype.hasExecutors = function (executors) {
            for (var zIndex in this.executorsByZIndex_) {
                var candidates = this.executorsByZIndex_[zIndex];
                for (var i = 0, ii = executors.length; i < ii; ++i) {
                    if (executors[i] in candidates) {
                        return true;
                    }
                }
            }
            return false;
        };
        /**
         * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {number} resolution Resolution.
         * @param {number} rotation Rotation.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, number): T} callback Feature callback.
         * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
         * @return {T|undefined} Callback result.
         * @template T
         */
        ExecutorGroup.prototype.forEachFeatureAtCoordinate = function (coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {
            hitTolerance = Math.round(hitTolerance);
            var contextSize = hitTolerance * 2 + 1;
            var transform = compose(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);
            var newContext = !this.hitDetectionContext_;
            if (newContext) {
                this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);
            }
            var context = this.hitDetectionContext_;
            if (context.canvas.width !== contextSize ||
                context.canvas.height !== contextSize) {
                context.canvas.width = contextSize;
                context.canvas.height = contextSize;
            }
            else if (!newContext) {
                context.clearRect(0, 0, contextSize, contextSize);
            }
            /**
             * @type {import("../../extent.js").Extent}
             */
            var hitExtent;
            if (this.renderBuffer_ !== undefined) {
                hitExtent = createEmpty();
                extendCoordinate(hitExtent, coordinate);
                buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
            }
            var indexes = getPixelIndexArray(hitTolerance);
            var builderType;
            /**
             * @param {import("../../Feature.js").FeatureLike} feature Feature.
             * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
             * @return {T|undefined} Callback result.
             */
            function featureCallback(feature, geometry) {
                var imageData = context.getImageData(0, 0, contextSize, contextSize)
                    .data;
                for (var i_1 = 0, ii = indexes.length; i_1 < ii; i_1++) {
                    if (imageData[indexes[i_1]] > 0) {
                        if (!declutteredFeatures ||
                            (builderType !== ReplayType.IMAGE &&
                                builderType !== ReplayType.TEXT) ||
                            declutteredFeatures.indexOf(feature) !== -1) {
                            var idx = (indexes[i_1] - 3) / 4;
                            var x = hitTolerance - (idx % contextSize);
                            var y = hitTolerance - ((idx / contextSize) | 0);
                            var result_1 = callback(feature, geometry, x * x + y * y);
                            if (result_1) {
                                return result_1;
                            }
                        }
                        context.clearRect(0, 0, contextSize, contextSize);
                        break;
                    }
                }
                return undefined;
            }
            /** @type {Array<number>} */
            var zs = Object.keys(this.executorsByZIndex_).map(Number);
            zs.sort(numberSafeCompareFunction);
            var i, j, executors, executor, result;
            for (i = zs.length - 1; i >= 0; --i) {
                var zIndexKey = zs[i].toString();
                executors = this.executorsByZIndex_[zIndexKey];
                for (j = ORDER.length - 1; j >= 0; --j) {
                    builderType = ORDER[j];
                    executor = executors[builderType];
                    if (executor !== undefined) {
                        result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return undefined;
        };
        /**
         * @param {import("../../transform.js").Transform} transform Transform.
         * @return {Array<number>} Clip coordinates.
         */
        ExecutorGroup.prototype.getClipCoords = function (transform) {
            var maxExtent = this.maxExtent_;
            if (!maxExtent) {
                return null;
            }
            var minX = maxExtent[0];
            var minY = maxExtent[1];
            var maxX = maxExtent[2];
            var maxY = maxExtent[3];
            var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
            transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
            return flatClipCoords;
        };
        /**
         * @return {boolean} Is empty.
         */
        ExecutorGroup.prototype.isEmpty = function () {
            return isEmpty(this.executorsByZIndex_);
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} contextScale Scale of the context.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {number} viewRotation View rotation.
         * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
         * @param {Array<import("./BuilderType.js").default>=} opt_builderTypes Ordered replay types to replay.
         *     Default is {@link module:ol/render/replay~ORDER}
         * @param {import("rbush").default=} opt_declutterTree Declutter tree.
         */
        ExecutorGroup.prototype.execute = function (context, contextScale, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterTree) {
            /** @type {Array<number>} */
            var zs = Object.keys(this.executorsByZIndex_).map(Number);
            zs.sort(numberSafeCompareFunction);
            // setup clipping so that the parts of over-simplified geometries are not
            // visible outside the current extent when panning
            if (this.maxExtent_) {
                context.save();
                this.clip(context, transform);
            }
            var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;
            var i, ii, j, jj, replays, replay;
            if (opt_declutterTree) {
                zs.reverse();
            }
            for (i = 0, ii = zs.length; i < ii; ++i) {
                var zIndexKey = zs[i].toString();
                replays = this.executorsByZIndex_[zIndexKey];
                for (j = 0, jj = builderTypes.length; j < jj; ++j) {
                    var builderType = builderTypes[j];
                    replay = replays[builderType];
                    if (replay !== undefined) {
                        replay.execute(context, contextScale, transform, viewRotation, snapToPixel, opt_declutterTree);
                    }
                }
            }
            if (this.maxExtent_) {
                context.restore();
            }
        };
        return ExecutorGroup;
    }());
    /**
     * This cache is used to store arrays of indexes for calculated pixel circles
     * to increase performance.
     * It is a static property to allow each Replaygroup to access it.
     * @type {Object<number, Array<number>>}
     */
    var circlePixelIndexArrayCache = {};
    /**
     * This methods creates an array with indexes of all pixels within a circle,
     * ordered by how close they are to the center.
     * A cache is used to increase performance.
     * @param {number} radius Radius.
     * @returns {Array<number>} An array with indexes within a circle.
     */
    function getPixelIndexArray(radius) {
        if (circlePixelIndexArrayCache[radius] !== undefined) {
            return circlePixelIndexArrayCache[radius];
        }
        var size = radius * 2 + 1;
        var maxDistanceSq = radius * radius;
        var distances = new Array(maxDistanceSq + 1);
        for (var i = 0; i <= radius; ++i) {
            for (var j = 0; j <= radius; ++j) {
                var distanceSq = i * i + j * j;
                if (distanceSq > maxDistanceSq) {
                    break;
                }
                var distance = distances[distanceSq];
                if (!distance) {
                    distance = [];
                    distances[distanceSq] = distance;
                }
                distance.push(((radius + i) * size + (radius + j)) * 4 + 3);
                if (i > 0) {
                    distance.push(((radius - i) * size + (radius + j)) * 4 + 3);
                }
                if (j > 0) {
                    distance.push(((radius + i) * size + (radius - j)) * 4 + 3);
                    if (i > 0) {
                        distance.push(((radius - i) * size + (radius - j)) * 4 + 3);
                    }
                }
            }
        }
        var pixelIndex = [];
        for (var i = 0, ii = distances.length; i < ii; ++i) {
            if (distances[i]) {
                pixelIndex.push.apply(pixelIndex, distances[i]);
            }
        }
        circlePixelIndexArrayCache[radius] = pixelIndex;
        return pixelIndex;
    }

    /**
     * @module ol/ViewHint
     */
    /**
     * @enum {number}
     */
    var ViewHint = {
        ANIMATING: 0,
        INTERACTING: 1,
    };

    /**
     * @module ol/render/canvas/Immediate
     */
    // FIXME test, especially polygons with holes and multipolygons
    // FIXME need to handle large thick features (where pixel size matters)
    // FIXME add offset and end to ol/geom/flat/transform~transform2D?
    var __extends$s = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * A concrete subclass of {@link module:ol/render/VectorContext} that implements
     * direct rendering of features and geometries to an HTML5 Canvas context.
     * Instances of this class are created internally by the library and
     * provided to application code as vectorContext member of the
     * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
     * render events emitted by layers and maps.
     */
    var CanvasImmediateRenderer = /** @class */ (function (_super) {
        __extends$s(CanvasImmediateRenderer, _super);
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../../extent.js").Extent} extent Extent.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {number} viewRotation View rotation.
         * @param {number=} opt_squaredTolerance Optional squared tolerance for simplification.
         * @param {import("../../proj.js").TransformFunction=} opt_userTransform Transform from user to view projection.
         */
        function CanvasImmediateRenderer(context, pixelRatio, extent, transform, viewRotation, opt_squaredTolerance, opt_userTransform) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {CanvasRenderingContext2D}
             */
            _this.context_ = context;
            /**
             * @private
             * @type {number}
             */
            _this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            _this.extent_ = extent;
            /**
             * @private
             * @type {import("../../transform.js").Transform}
             */
            _this.transform_ = transform;
            /**
             * @private
             * @type {number}
             */
            _this.viewRotation_ = viewRotation;
            /**
             * @private
             * @type {number}
             */
            _this.squaredTolerance_ = opt_squaredTolerance;
            /**
             * @private
             * @type {import("../../proj.js").TransformFunction}
             */
            _this.userTransform_ = opt_userTransform;
            /**
             * @private
             * @type {?import("../canvas.js").FillState}
             */
            _this.contextFillState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").StrokeState}
             */
            _this.contextStrokeState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").TextState}
             */
            _this.contextTextState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").FillState}
             */
            _this.fillState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").StrokeState}
             */
            _this.strokeState_ = null;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
             */
            _this.image_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.imageAnchorX_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.imageAnchorY_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.imageHeight_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.imageOpacity_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.imageOriginX_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.imageOriginY_ = 0;
            /**
             * @private
             * @type {boolean}
             */
            _this.imageRotateWithView_ = false;
            /**
             * @private
             * @type {number}
             */
            _this.imageRotation_ = 0;
            /**
             * @private
             * @type {import("../../size.js").Size}
             */
            _this.imageScale_ = [0, 0];
            /**
             * @private
             * @type {number}
             */
            _this.imageWidth_ = 0;
            /**
             * @private
             * @type {string}
             */
            _this.text_ = '';
            /**
             * @private
             * @type {number}
             */
            _this.textOffsetX_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.textOffsetY_ = 0;
            /**
             * @private
             * @type {boolean}
             */
            _this.textRotateWithView_ = false;
            /**
             * @private
             * @type {number}
             */
            _this.textRotation_ = 0;
            /**
             * @private
             * @type {import("../../size.js").Size}
             */
            _this.textScale_ = [0, 0];
            /**
             * @private
             * @type {?import("../canvas.js").FillState}
             */
            _this.textFillState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").StrokeState}
             */
            _this.textStrokeState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").TextState}
             */
            _this.textState_ = null;
            /**
             * @private
             * @type {Array<number>}
             */
            _this.pixelCoordinates_ = [];
            /**
             * @private
             * @type {import("../../transform.js").Transform}
             */
            _this.tmpLocalTransform_ = create();
            return _this;
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @private
         */
        CanvasImmediateRenderer.prototype.drawImages_ = function (flatCoordinates, offset, end, stride) {
            if (!this.image_) {
                return;
            }
            var pixelCoordinates = transform2D(flatCoordinates, offset, end, 2, this.transform_, this.pixelCoordinates_);
            var context = this.context_;
            var localTransform = this.tmpLocalTransform_;
            var alpha = context.globalAlpha;
            if (this.imageOpacity_ != 1) {
                context.globalAlpha = alpha * this.imageOpacity_;
            }
            var rotation = this.imageRotation_;
            if (this.imageRotateWithView_) {
                rotation += this.viewRotation_;
            }
            for (var i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
                var x = pixelCoordinates[i] - this.imageAnchorX_;
                var y = pixelCoordinates[i + 1] - this.imageAnchorY_;
                if (rotation !== 0 ||
                    this.imageScale_[0] != 1 ||
                    this.imageScale_[1] != 1) {
                    var centerX = x + this.imageAnchorX_;
                    var centerY = y + this.imageAnchorY_;
                    compose(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
                    context.setTransform.apply(context, localTransform);
                    context.translate(centerX, centerY);
                    context.scale(this.imageScale_[0], this.imageScale_[1]);
                    context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, -this.imageAnchorX_, -this.imageAnchorY_, this.imageWidth_, this.imageHeight_);
                    context.setTransform(1, 0, 0, 1, 0, 0);
                }
                else {
                    context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);
                }
            }
            if (this.imageOpacity_ != 1) {
                context.globalAlpha = alpha;
            }
        };
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @private
         */
        CanvasImmediateRenderer.prototype.drawText_ = function (flatCoordinates, offset, end, stride) {
            if (!this.textState_ || this.text_ === '') {
                return;
            }
            if (this.textFillState_) {
                this.setContextFillState_(this.textFillState_);
            }
            if (this.textStrokeState_) {
                this.setContextStrokeState_(this.textStrokeState_);
            }
            this.setContextTextState_(this.textState_);
            var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
            var context = this.context_;
            var rotation = this.textRotation_;
            if (this.textRotateWithView_) {
                rotation += this.viewRotation_;
            }
            for (; offset < end; offset += stride) {
                var x = pixelCoordinates[offset] + this.textOffsetX_;
                var y = pixelCoordinates[offset + 1] + this.textOffsetY_;
                if (rotation !== 0 ||
                    this.textScale_[0] != 1 ||
                    this.textScale_[1] != 1) {
                    var localTransform = compose(this.tmpLocalTransform_, x, y, 1, 1, rotation, -x, -y);
                    context.setTransform.apply(context, localTransform);
                    context.translate(x, y);
                    context.scale(this.textScale_[0], this.textScale_[1]);
                    if (this.textStrokeState_) {
                        context.strokeText(this.text_, 0, 0);
                    }
                    if (this.textFillState_) {
                        context.fillText(this.text_, 0, 0);
                    }
                    context.setTransform(1, 0, 0, 1, 0, 0);
                }
                else {
                    if (this.textStrokeState_) {
                        context.strokeText(this.text_, x, y);
                    }
                    if (this.textFillState_) {
                        context.fillText(this.text_, x, y);
                    }
                }
            }
        };
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @param {boolean} close Close.
         * @private
         * @return {number} end End.
         */
        CanvasImmediateRenderer.prototype.moveToLineTo_ = function (flatCoordinates, offset, end, stride, close) {
            var context = this.context_;
            var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
            context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
            var length = pixelCoordinates.length;
            if (close) {
                length -= 2;
            }
            for (var i = 2; i < length; i += 2) {
                context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
            }
            if (close) {
                context.closePath();
            }
            return end;
        };
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {Array<number>} ends Ends.
         * @param {number} stride Stride.
         * @private
         * @return {number} End.
         */
        CanvasImmediateRenderer.prototype.drawRings_ = function (flatCoordinates, offset, ends, stride) {
            for (var i = 0, ii = ends.length; i < ii; ++i) {
                offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
            }
            return offset;
        };
        /**
         * Render a circle geometry into the canvas.  Rendering is immediate and uses
         * the current fill and stroke styles.
         *
         * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
         * @api
         */
        CanvasImmediateRenderer.prototype.drawCircle = function (geometry) {
            if (!intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            if (this.fillState_ || this.strokeState_) {
                if (this.fillState_) {
                    this.setContextFillState_(this.fillState_);
                }
                if (this.strokeState_) {
                    this.setContextStrokeState_(this.strokeState_);
                }
                var pixelCoordinates = transformGeom2D(geometry, this.transform_, this.pixelCoordinates_);
                var dx = pixelCoordinates[2] - pixelCoordinates[0];
                var dy = pixelCoordinates[3] - pixelCoordinates[1];
                var radius = Math.sqrt(dx * dx + dy * dy);
                var context = this.context_;
                context.beginPath();
                context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
                if (this.fillState_) {
                    context.fill();
                }
                if (this.strokeState_) {
                    context.stroke();
                }
            }
            if (this.text_ !== '') {
                this.drawText_(geometry.getCenter(), 0, 2, 2);
            }
        };
        /**
         * Set the rendering style.  Note that since this is an immediate rendering API,
         * any `zIndex` on the provided style will be ignored.
         *
         * @param {import("../../style/Style.js").default} style The rendering style.
         * @api
         */
        CanvasImmediateRenderer.prototype.setStyle = function (style) {
            this.setFillStrokeStyle(style.getFill(), style.getStroke());
            this.setImageStyle(style.getImage());
            this.setTextStyle(style.getText());
        };
        /**
         * @param {import("../../transform.js").Transform} transform Transform.
         */
        CanvasImmediateRenderer.prototype.setTransform = function (transform) {
            this.transform_ = transform;
        };
        /**
         * Render a geometry into the canvas.  Call
         * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.
         *
         * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
         * @api
         */
        CanvasImmediateRenderer.prototype.drawGeometry = function (geometry) {
            var type = geometry.getType();
            switch (type) {
                case GeometryType.POINT:
                    this.drawPoint(
                    /** @type {import("../../geom/Point.js").default} */ (geometry));
                    break;
                case GeometryType.LINE_STRING:
                    this.drawLineString(
                    /** @type {import("../../geom/LineString.js").default} */ (geometry));
                    break;
                case GeometryType.POLYGON:
                    this.drawPolygon(
                    /** @type {import("../../geom/Polygon.js").default} */ (geometry));
                    break;
                case GeometryType.MULTI_POINT:
                    this.drawMultiPoint(
                    /** @type {import("../../geom/MultiPoint.js").default} */ (geometry));
                    break;
                case GeometryType.MULTI_LINE_STRING:
                    this.drawMultiLineString(
                    /** @type {import("../../geom/MultiLineString.js").default} */ (geometry));
                    break;
                case GeometryType.MULTI_POLYGON:
                    this.drawMultiPolygon(
                    /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry));
                    break;
                case GeometryType.GEOMETRY_COLLECTION:
                    this.drawGeometryCollection(
                    /** @type {import("../../geom/GeometryCollection.js").default} */ (geometry));
                    break;
                case GeometryType.CIRCLE:
                    this.drawCircle(
                    /** @type {import("../../geom/Circle.js").default} */ (geometry));
                    break;
            }
        };
        /**
         * Render a feature into the canvas.  Note that any `zIndex` on the provided
         * style will be ignored - features are rendered immediately in the order that
         * this method is called.  If you need `zIndex` support, you should be using an
         * {@link module:ol/layer/Vector~VectorLayer} instead.
         *
         * @param {import("../../Feature.js").default} feature Feature.
         * @param {import("../../style/Style.js").default} style Style.
         * @api
         */
        CanvasImmediateRenderer.prototype.drawFeature = function (feature, style) {
            var geometry = style.getGeometryFunction()(feature);
            if (!geometry || !intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            this.setStyle(style);
            this.drawGeometry(geometry);
        };
        /**
         * Render a GeometryCollection to the canvas.  Rendering is immediate and
         * uses the current styles appropriate for each geometry in the collection.
         *
         * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
         */
        CanvasImmediateRenderer.prototype.drawGeometryCollection = function (geometry) {
            var geometries = geometry.getGeometriesArray();
            for (var i = 0, ii = geometries.length; i < ii; ++i) {
                this.drawGeometry(geometries[i]);
            }
        };
        /**
         * Render a Point geometry into the canvas.  Rendering is immediate and uses
         * the current style.
         *
         * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
         */
        CanvasImmediateRenderer.prototype.drawPoint = function (geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/Point.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            var flatCoordinates = geometry.getFlatCoordinates();
            var stride = geometry.getStride();
            if (this.image_) {
                this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
            }
            if (this.text_ !== '') {
                this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
            }
        };
        /**
         * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
         * uses the current style.
         *
         * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
         */
        CanvasImmediateRenderer.prototype.drawMultiPoint = function (geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/MultiPoint.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            var flatCoordinates = geometry.getFlatCoordinates();
            var stride = geometry.getStride();
            if (this.image_) {
                this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
            }
            if (this.text_ !== '') {
                this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
            }
        };
        /**
         * Render a LineString into the canvas.  Rendering is immediate and uses
         * the current style.
         *
         * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
         */
        CanvasImmediateRenderer.prototype.drawLineString = function (geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/LineString.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            if (!intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            if (this.strokeState_) {
                this.setContextStrokeState_(this.strokeState_);
                var context = this.context_;
                var flatCoordinates = geometry.getFlatCoordinates();
                context.beginPath();
                this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);
                context.stroke();
            }
            if (this.text_ !== '') {
                var flatMidpoint = geometry.getFlatMidpoint();
                this.drawText_(flatMidpoint, 0, 2, 2);
            }
        };
        /**
         * Render a MultiLineString geometry into the canvas.  Rendering is immediate
         * and uses the current style.
         *
         * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
         */
        CanvasImmediateRenderer.prototype.drawMultiLineString = function (geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            var geometryExtent = geometry.getExtent();
            if (!intersects(this.extent_, geometryExtent)) {
                return;
            }
            if (this.strokeState_) {
                this.setContextStrokeState_(this.strokeState_);
                var context = this.context_;
                var flatCoordinates = geometry.getFlatCoordinates();
                var offset = 0;
                var ends = /** @type {Array<number>} */ (geometry.getEnds());
                var stride = geometry.getStride();
                context.beginPath();
                for (var i = 0, ii = ends.length; i < ii; ++i) {
                    offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
                }
                context.stroke();
            }
            if (this.text_ !== '') {
                var flatMidpoints = geometry.getFlatMidpoints();
                this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
            }
        };
        /**
         * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
         * the current style.
         *
         * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
         */
        CanvasImmediateRenderer.prototype.drawPolygon = function (geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/Polygon.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            if (!intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            if (this.strokeState_ || this.fillState_) {
                if (this.fillState_) {
                    this.setContextFillState_(this.fillState_);
                }
                if (this.strokeState_) {
                    this.setContextStrokeState_(this.strokeState_);
                }
                var context = this.context_;
                context.beginPath();
                this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, 
                /** @type {Array<number>} */ (geometry.getEnds()), geometry.getStride());
                if (this.fillState_) {
                    context.fill();
                }
                if (this.strokeState_) {
                    context.stroke();
                }
            }
            if (this.text_ !== '') {
                var flatInteriorPoint = geometry.getFlatInteriorPoint();
                this.drawText_(flatInteriorPoint, 0, 2, 2);
            }
        };
        /**
         * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
         * uses the current style.
         * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
         */
        CanvasImmediateRenderer.prototype.drawMultiPolygon = function (geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            if (!intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            if (this.strokeState_ || this.fillState_) {
                if (this.fillState_) {
                    this.setContextFillState_(this.fillState_);
                }
                if (this.strokeState_) {
                    this.setContextStrokeState_(this.strokeState_);
                }
                var context = this.context_;
                var flatCoordinates = geometry.getOrientedFlatCoordinates();
                var offset = 0;
                var endss = geometry.getEndss();
                var stride = geometry.getStride();
                context.beginPath();
                for (var i = 0, ii = endss.length; i < ii; ++i) {
                    var ends = endss[i];
                    offset = this.drawRings_(flatCoordinates, offset, ends, stride);
                }
                if (this.fillState_) {
                    context.fill();
                }
                if (this.strokeState_) {
                    context.stroke();
                }
            }
            if (this.text_ !== '') {
                var flatInteriorPoints = geometry.getFlatInteriorPoints();
                this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
            }
        };
        /**
         * @param {import("../canvas.js").FillState} fillState Fill state.
         * @private
         */
        CanvasImmediateRenderer.prototype.setContextFillState_ = function (fillState) {
            var context = this.context_;
            var contextFillState = this.contextFillState_;
            if (!contextFillState) {
                context.fillStyle = fillState.fillStyle;
                this.contextFillState_ = {
                    fillStyle: fillState.fillStyle,
                };
            }
            else {
                if (contextFillState.fillStyle != fillState.fillStyle) {
                    contextFillState.fillStyle = fillState.fillStyle;
                    context.fillStyle = fillState.fillStyle;
                }
            }
        };
        /**
         * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
         * @private
         */
        CanvasImmediateRenderer.prototype.setContextStrokeState_ = function (strokeState) {
            var context = this.context_;
            var contextStrokeState = this.contextStrokeState_;
            if (!contextStrokeState) {
                context.lineCap = strokeState.lineCap;
                if (context.setLineDash) {
                    context.setLineDash(strokeState.lineDash);
                    context.lineDashOffset = strokeState.lineDashOffset;
                }
                context.lineJoin = strokeState.lineJoin;
                context.lineWidth = strokeState.lineWidth;
                context.miterLimit = strokeState.miterLimit;
                context.strokeStyle = strokeState.strokeStyle;
                this.contextStrokeState_ = {
                    lineCap: strokeState.lineCap,
                    lineDash: strokeState.lineDash,
                    lineDashOffset: strokeState.lineDashOffset,
                    lineJoin: strokeState.lineJoin,
                    lineWidth: strokeState.lineWidth,
                    miterLimit: strokeState.miterLimit,
                    strokeStyle: strokeState.strokeStyle,
                };
            }
            else {
                if (contextStrokeState.lineCap != strokeState.lineCap) {
                    contextStrokeState.lineCap = strokeState.lineCap;
                    context.lineCap = strokeState.lineCap;
                }
                if (context.setLineDash) {
                    if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {
                        context.setLineDash((contextStrokeState.lineDash = strokeState.lineDash));
                    }
                    if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
                        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
                        context.lineDashOffset = strokeState.lineDashOffset;
                    }
                }
                if (contextStrokeState.lineJoin != strokeState.lineJoin) {
                    contextStrokeState.lineJoin = strokeState.lineJoin;
                    context.lineJoin = strokeState.lineJoin;
                }
                if (contextStrokeState.lineWidth != strokeState.lineWidth) {
                    contextStrokeState.lineWidth = strokeState.lineWidth;
                    context.lineWidth = strokeState.lineWidth;
                }
                if (contextStrokeState.miterLimit != strokeState.miterLimit) {
                    contextStrokeState.miterLimit = strokeState.miterLimit;
                    context.miterLimit = strokeState.miterLimit;
                }
                if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
                    contextStrokeState.strokeStyle = strokeState.strokeStyle;
                    context.strokeStyle = strokeState.strokeStyle;
                }
            }
        };
        /**
         * @param {import("../canvas.js").TextState} textState Text state.
         * @private
         */
        CanvasImmediateRenderer.prototype.setContextTextState_ = function (textState) {
            var context = this.context_;
            var contextTextState = this.contextTextState_;
            var textAlign = textState.textAlign
                ? textState.textAlign
                : defaultTextAlign;
            if (!contextTextState) {
                context.font = textState.font;
                context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
                context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
                this.contextTextState_ = {
                    font: textState.font,
                    textAlign: textAlign,
                    textBaseline: textState.textBaseline,
                };
            }
            else {
                if (contextTextState.font != textState.font) {
                    contextTextState.font = textState.font;
                    context.font = textState.font;
                }
                if (contextTextState.textAlign != textAlign) {
                    contextTextState.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
                    context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
                }
                if (contextTextState.textBaseline != textState.textBaseline) {
                    contextTextState.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
                    context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
                }
            }
        };
        /**
         * Set the fill and stroke style for subsequent draw operations.  To clear
         * either fill or stroke styles, pass null for the appropriate parameter.
         *
         * @param {import("../../style/Fill.js").default} fillStyle Fill style.
         * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
         */
        CanvasImmediateRenderer.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {
            if (!fillStyle) {
                this.fillState_ = null;
            }
            else {
                var fillStyleColor = fillStyle.getColor();
                this.fillState_ = {
                    fillStyle: asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle),
                };
            }
            if (!strokeStyle) {
                this.strokeState_ = null;
            }
            else {
                var strokeStyleColor = strokeStyle.getColor();
                var strokeStyleLineCap = strokeStyle.getLineCap();
                var strokeStyleLineDash = strokeStyle.getLineDash();
                var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
                var strokeStyleLineJoin = strokeStyle.getLineJoin();
                var strokeStyleWidth = strokeStyle.getWidth();
                var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
                this.strokeState_ = {
                    lineCap: strokeStyleLineCap !== undefined
                        ? strokeStyleLineCap
                        : defaultLineCap,
                    lineDash: strokeStyleLineDash ? strokeStyleLineDash : defaultLineDash,
                    lineDashOffset: strokeStyleLineDashOffset
                        ? strokeStyleLineDashOffset
                        : defaultLineDashOffset,
                    lineJoin: strokeStyleLineJoin !== undefined
                        ? strokeStyleLineJoin
                        : defaultLineJoin,
                    lineWidth: this.pixelRatio_ *
                        (strokeStyleWidth !== undefined
                            ? strokeStyleWidth
                            : defaultLineWidth),
                    miterLimit: strokeStyleMiterLimit !== undefined
                        ? strokeStyleMiterLimit
                        : defaultMiterLimit,
                    strokeStyle: asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle),
                };
            }
        };
        /**
         * Set the image style for subsequent draw operations.  Pass null to remove
         * the image style.
         *
         * @param {import("../../style/Image.js").default} imageStyle Image style.
         */
        CanvasImmediateRenderer.prototype.setImageStyle = function (imageStyle) {
            if (!imageStyle) {
                this.image_ = null;
            }
            else {
                var imageSize = imageStyle.getSize();
                if (!imageSize) {
                    this.image_ = null;
                }
                else {
                    var imageAnchor = imageStyle.getAnchor();
                    // FIXME pixel ratio
                    var imageImage = imageStyle.getImage(1);
                    var imageOrigin = imageStyle.getOrigin();
                    var imageScale = imageStyle.getScaleArray();
                    this.imageAnchorX_ = imageAnchor[0];
                    this.imageAnchorY_ = imageAnchor[1];
                    this.imageHeight_ = imageSize[1];
                    this.image_ = imageImage;
                    this.imageOpacity_ = imageStyle.getOpacity();
                    this.imageOriginX_ = imageOrigin[0];
                    this.imageOriginY_ = imageOrigin[1];
                    this.imageRotateWithView_ = imageStyle.getRotateWithView();
                    this.imageRotation_ = imageStyle.getRotation();
                    this.imageScale_ = [
                        this.pixelRatio_ * imageScale[0],
                        this.pixelRatio_ * imageScale[1],
                    ];
                    this.imageWidth_ = imageSize[0];
                }
            }
        };
        /**
         * Set the text style for subsequent draw operations.  Pass null to
         * remove the text style.
         *
         * @param {import("../../style/Text.js").default} textStyle Text style.
         */
        CanvasImmediateRenderer.prototype.setTextStyle = function (textStyle) {
            if (!textStyle) {
                this.text_ = '';
            }
            else {
                var textFillStyle = textStyle.getFill();
                if (!textFillStyle) {
                    this.textFillState_ = null;
                }
                else {
                    var textFillStyleColor = textFillStyle.getColor();
                    this.textFillState_ = {
                        fillStyle: asColorLike(textFillStyleColor ? textFillStyleColor : defaultFillStyle),
                    };
                }
                var textStrokeStyle = textStyle.getStroke();
                if (!textStrokeStyle) {
                    this.textStrokeState_ = null;
                }
                else {
                    var textStrokeStyleColor = textStrokeStyle.getColor();
                    var textStrokeStyleLineCap = textStrokeStyle.getLineCap();
                    var textStrokeStyleLineDash = textStrokeStyle.getLineDash();
                    var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
                    var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
                    var textStrokeStyleWidth = textStrokeStyle.getWidth();
                    var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
                    this.textStrokeState_ = {
                        lineCap: textStrokeStyleLineCap !== undefined
                            ? textStrokeStyleLineCap
                            : defaultLineCap,
                        lineDash: textStrokeStyleLineDash
                            ? textStrokeStyleLineDash
                            : defaultLineDash,
                        lineDashOffset: textStrokeStyleLineDashOffset
                            ? textStrokeStyleLineDashOffset
                            : defaultLineDashOffset,
                        lineJoin: textStrokeStyleLineJoin !== undefined
                            ? textStrokeStyleLineJoin
                            : defaultLineJoin,
                        lineWidth: textStrokeStyleWidth !== undefined
                            ? textStrokeStyleWidth
                            : defaultLineWidth,
                        miterLimit: textStrokeStyleMiterLimit !== undefined
                            ? textStrokeStyleMiterLimit
                            : defaultMiterLimit,
                        strokeStyle: asColorLike(textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle),
                    };
                }
                var textFont = textStyle.getFont();
                var textOffsetX = textStyle.getOffsetX();
                var textOffsetY = textStyle.getOffsetY();
                var textRotateWithView = textStyle.getRotateWithView();
                var textRotation = textStyle.getRotation();
                var textScale = textStyle.getScaleArray();
                var textText = textStyle.getText();
                var textTextAlign = textStyle.getTextAlign();
                var textTextBaseline = textStyle.getTextBaseline();
                this.textState_ = {
                    font: textFont !== undefined ? textFont : defaultFont,
                    textAlign: textTextAlign !== undefined ? textTextAlign : defaultTextAlign,
                    textBaseline: textTextBaseline !== undefined
                        ? textTextBaseline
                        : defaultTextBaseline,
                };
                this.text_ = textText !== undefined ? textText : '';
                this.textOffsetX_ =
                    textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;
                this.textOffsetY_ =
                    textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;
                this.textRotateWithView_ =
                    textRotateWithView !== undefined ? textRotateWithView : false;
                this.textRotation_ = textRotation !== undefined ? textRotation : 0;
                this.textScale_ = [
                    this.pixelRatio_ * textScale[0],
                    this.pixelRatio_ * textScale[1],
                ];
            }
        };
        return CanvasImmediateRenderer;
    }(VectorContext));

    /**
     * @module ol/style/IconAnchorUnits
     */
    /**
     * Icon anchor units. One of 'fraction', 'pixels'.
     * @enum {string}
     */
    var IconAnchorUnits = {
        /**
         * Anchor is a fraction
         * @api
         */
        FRACTION: 'fraction',
        /**
         * Anchor is in pixels
         * @api
         */
        PIXELS: 'pixels',
    };

    /**
     * @module ol/style/IconOrigin
     */
    /**
     * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
     * @enum {string}
     */
    var IconOrigin = {
        /**
         * Origin is at bottom left
         * @api
         */
        BOTTOM_LEFT: 'bottom-left',
        /**
         * Origin is at bottom right
         * @api
         */
        BOTTOM_RIGHT: 'bottom-right',
        /**
         * Origin is at top left
         * @api
         */
        TOP_LEFT: 'top-left',
        /**
         * Origin is at top right
         * @api
         */
        TOP_RIGHT: 'top-right',
    };

    /**
     * @module ol/style/IconImageCache
     */
    /**
     * @classdesc
     * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
     */
    var IconImageCache = /** @class */ (function () {
        function IconImageCache() {
            /**
             * @type {!Object<string, import("./IconImage.js").default>}
             * @private
             */
            this.cache_ = {};
            /**
             * @type {number}
             * @private
             */
            this.cacheSize_ = 0;
            /**
             * @type {number}
             * @private
             */
            this.maxCacheSize_ = 32;
        }
        /**
         * FIXME empty description for jsdoc
         */
        IconImageCache.prototype.clear = function () {
            this.cache_ = {};
            this.cacheSize_ = 0;
        };
        /**
         * @return {boolean} Can expire cache.
         */
        IconImageCache.prototype.canExpireCache = function () {
            return this.cacheSize_ > this.maxCacheSize_;
        };
        /**
         * FIXME empty description for jsdoc
         */
        IconImageCache.prototype.expire = function () {
            if (this.canExpireCache()) {
                var i = 0;
                for (var key in this.cache_) {
                    var iconImage = this.cache_[key];
                    if ((i++ & 3) === 0 && !iconImage.hasListener()) {
                        delete this.cache_[key];
                        --this.cacheSize_;
                    }
                }
            }
        };
        /**
         * @param {string} src Src.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../color.js").Color} color Color.
         * @return {import("./IconImage.js").default} Icon image.
         */
        IconImageCache.prototype.get = function (src, crossOrigin, color) {
            var key = getKey(src, crossOrigin, color);
            return key in this.cache_ ? this.cache_[key] : null;
        };
        /**
         * @param {string} src Src.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../color.js").Color} color Color.
         * @param {import("./IconImage.js").default} iconImage Icon image.
         */
        IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {
            var key = getKey(src, crossOrigin, color);
            this.cache_[key] = iconImage;
            ++this.cacheSize_;
        };
        /**
         * Set the cache size of the icon cache. Default is `32`. Change this value when
         * your map uses more than 32 different icon images and you are not caching icon
         * styles on the application level.
         * @param {number} maxCacheSize Cache max size.
         * @api
         */
        IconImageCache.prototype.setSize = function (maxCacheSize) {
            this.maxCacheSize_ = maxCacheSize;
            this.expire();
        };
        return IconImageCache;
    }());
    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color} color Color.
     * @return {string} Cache key.
     */
    function getKey(src, crossOrigin, color) {
        var colorString = color ? asString(color) : 'null';
        return crossOrigin + ':' + src + ':' + colorString;
    }
    /**
     * The {@link module:ol/style/IconImageCache~IconImageCache} for
     * {@link module:ol/style/Icon~Icon} images.
     * @api
     */
    var shared = new IconImageCache();

    var __extends$t = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @abstract
     */
    var ImageBase = /** @class */ (function (_super) {
        __extends$t(ImageBase, _super);
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number|undefined} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./ImageState.js").default} state State.
         */
        function ImageBase(extent, resolution, pixelRatio, state) {
            var _this = _super.call(this) || this;
            /**
             * @protected
             * @type {import("./extent.js").Extent}
             */
            _this.extent = extent;
            /**
             * @private
             * @type {number}
             */
            _this.pixelRatio_ = pixelRatio;
            /**
             * @protected
             * @type {number|undefined}
             */
            _this.resolution = resolution;
            /**
             * @protected
             * @type {import("./ImageState.js").default}
             */
            _this.state = state;
            return _this;
        }
        /**
         * @protected
         */
        ImageBase.prototype.changed = function () {
            this.dispatchEvent(EventType.CHANGE);
        };
        /**
         * @return {import("./extent.js").Extent} Extent.
         */
        ImageBase.prototype.getExtent = function () {
            return this.extent;
        };
        /**
         * @abstract
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         */
        ImageBase.prototype.getImage = function () {
            return abstract();
        };
        /**
         * @return {number} PixelRatio.
         */
        ImageBase.prototype.getPixelRatio = function () {
            return this.pixelRatio_;
        };
        /**
         * @return {number} Resolution.
         */
        ImageBase.prototype.getResolution = function () {
            return /** @type {number} */ (this.resolution);
        };
        /**
         * @return {import("./ImageState.js").default} State.
         */
        ImageBase.prototype.getState = function () {
            return this.state;
        };
        /**
         * Load not yet loaded URI.
         * @abstract
         */
        ImageBase.prototype.load = function () {
            abstract();
        };
        return ImageBase;
    }(Target));

    var __extends$u = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that takes an {@link module:ol/Image~Image} for the image and a
     * `{string}` for the src as arguments. It is supposed to make it so the
     * underlying image {@link module:ol/Image~Image#getImage} is assigned the
     * content specified by the src. If not specified, the default is
     *
     *     function(image, src) {
     *       image.getImage().src = src;
     *     }
     *
     * Providing a custom `imageLoadFunction` can be useful to load images with
     * post requests or - in general - through XHR requests, where the src of the
     * image element would be set to a data URI when the content is loaded.
     *
     * @typedef {function(ImageWrapper, string): void} LoadFunction
     * @api
     */
    /** @class */ ((function (_super) {
        __extends$u(ImageWrapper, _super);
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number|undefined} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {string} src Image source URI.
         * @param {?string} crossOrigin Cross origin.
         * @param {LoadFunction} imageLoadFunction Image load function.
         */
        function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {
            var _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE) || this;
            /**
             * @private
             * @type {string}
             */
            _this.src_ = src;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
             */
            _this.image_ = new Image();
            if (crossOrigin !== null) {
                _this.image_.crossOrigin = crossOrigin;
            }
            /**
             * @private
             * @type {?function():void}
             */
            _this.unlisten_ = null;
            /**
             * @protected
             * @type {import("./ImageState.js").default}
             */
            _this.state = ImageState.IDLE;
            /**
             * @private
             * @type {LoadFunction}
             */
            _this.imageLoadFunction_ = imageLoadFunction;
            return _this;
        }
        /**
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @api
         */
        ImageWrapper.prototype.getImage = function () {
            return this.image_;
        };
        /**
         * Tracks loading or read errors.
         *
         * @private
         */
        ImageWrapper.prototype.handleImageError_ = function () {
            this.state = ImageState.ERROR;
            this.unlistenImage_();
            this.changed();
        };
        /**
         * Tracks successful image load.
         *
         * @private
         */
        ImageWrapper.prototype.handleImageLoad_ = function () {
            if (this.resolution === undefined) {
                this.resolution = getHeight(this.extent) / this.image_.height;
            }
            this.state = ImageState.LOADED;
            this.unlistenImage_();
            this.changed();
        };
        /**
         * Load the image or retry if loading previously failed.
         * Loading is taken care of by the tile queue, and calling this method is
         * only needed for preloading or for reloading in case of an error.
         * @api
         */
        ImageWrapper.prototype.load = function () {
            if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {
                this.state = ImageState.LOADING;
                this.changed();
                this.imageLoadFunction_(this, this.src_);
                this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
            }
        };
        /**
         * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
         */
        ImageWrapper.prototype.setImage = function (image) {
            this.image_ = image;
        };
        /**
         * Discards event handlers which listen for load completion or errors.
         *
         * @private
         */
        ImageWrapper.prototype.unlistenImage_ = function () {
            if (this.unlisten_) {
                this.unlisten_();
                this.unlisten_ = null;
            }
        };
        return ImageWrapper;
    })(ImageBase));
    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.
     * @param {function():any} loadHandler Load callback function.
     * @param {function():any} errorHandler Error callback function.
     * @return {function():void} Callback to stop listening.
     */
    function listenImage(image, loadHandler, errorHandler) {
        var img = /** @type {HTMLImageElement} */ (image);
        if (img.src && IMAGE_DECODE) {
            var promise = img.decode();
            var listening_1 = true;
            var unlisten = function () {
                listening_1 = false;
            };
            promise
                .then(function () {
                if (listening_1) {
                    loadHandler();
                }
            })
                .catch(function (error) {
                if (listening_1) {
                    // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:
                    //        https://bugs.webkit.org/show_bug.cgi?id=198527
                    if (error.name === 'EncodingError' &&
                        error.message === 'Invalid image type.') {
                        loadHandler();
                    }
                    else {
                        errorHandler();
                    }
                }
            });
            return unlisten;
        }
        var listenerKeys = [
            listenOnce(img, EventType.LOAD, loadHandler),
            listenOnce(img, EventType.ERROR, errorHandler),
        ];
        return function unlisten() {
            listenerKeys.forEach(unlistenByKey);
        };
    }

    /**
     * @module ol/style/IconImage
     */
    var __extends$v = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @type {CanvasRenderingContext2D}
     */
    var taintedTestContext = null;
    var IconImage = /** @class */ (function (_super) {
        __extends$v(IconImage, _super);
        /**
         * @param {HTMLImageElement|HTMLCanvasElement} image Image.
         * @param {string|undefined} src Src.
         * @param {import("../size.js").Size} size Size.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../ImageState.js").default} imageState Image state.
         * @param {import("../color.js").Color} color Color.
         */
        function IconImage(image, src, size, crossOrigin, imageState, color) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            _this.hitDetectionImage_ = null;
            /**
             * @private
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            _this.image_ = !image ? new Image() : image;
            if (crossOrigin !== null) {
                /** @type {HTMLImageElement} */ (_this.image_).crossOrigin = crossOrigin;
            }
            /**
             * @private
             * @type {Object<number, HTMLCanvasElement>}
             */
            _this.canvas_ = {};
            /**
             * @private
             * @type {import("../color.js").Color}
             */
            _this.color_ = color;
            /**
             * @private
             * @type {?function():void}
             */
            _this.unlisten_ = null;
            /**
             * @private
             * @type {import("../ImageState.js").default}
             */
            _this.imageState_ = imageState;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            _this.size_ = size;
            /**
             * @private
             * @type {string|undefined}
             */
            _this.src_ = src;
            /**
             * @private
             */
            _this.tainted_;
            return _this;
        }
        /**
         * @private
         * @return {boolean} The image canvas is tainted.
         */
        IconImage.prototype.isTainted_ = function () {
            if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {
                if (!taintedTestContext) {
                    taintedTestContext = createCanvasContext2D(1, 1);
                }
                taintedTestContext.drawImage(this.image_, 0, 0);
                try {
                    taintedTestContext.getImageData(0, 0, 1, 1);
                    this.tainted_ = false;
                }
                catch (e) {
                    taintedTestContext = null;
                    this.tainted_ = true;
                }
            }
            return this.tainted_ === true;
        };
        /**
         * @private
         */
        IconImage.prototype.dispatchChangeEvent_ = function () {
            this.dispatchEvent(EventType.CHANGE);
        };
        /**
         * @private
         */
        IconImage.prototype.handleImageError_ = function () {
            this.imageState_ = ImageState.ERROR;
            this.unlistenImage_();
            this.dispatchChangeEvent_();
        };
        /**
         * @private
         */
        IconImage.prototype.handleImageLoad_ = function () {
            this.imageState_ = ImageState.LOADED;
            if (this.size_) {
                this.image_.width = this.size_[0];
                this.image_.height = this.size_[1];
            }
            else {
                this.size_ = [this.image_.width, this.image_.height];
            }
            this.unlistenImage_();
            this.dispatchChangeEvent_();
        };
        /**
         * @param {number} pixelRatio Pixel ratio.
         * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
         */
        IconImage.prototype.getImage = function (pixelRatio) {
            this.replaceColor_(pixelRatio);
            return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;
        };
        /**
         * @param {number} pixelRatio Pixel ratio.
         * @return {number} Image or Canvas element.
         */
        IconImage.prototype.getPixelRatio = function (pixelRatio) {
            this.replaceColor_(pixelRatio);
            return this.canvas_[pixelRatio] ? pixelRatio : 1;
        };
        /**
         * @return {import("../ImageState.js").default} Image state.
         */
        IconImage.prototype.getImageState = function () {
            return this.imageState_;
        };
        /**
         * @return {HTMLImageElement|HTMLCanvasElement} Image element.
         */
        IconImage.prototype.getHitDetectionImage = function () {
            if (!this.hitDetectionImage_) {
                if (this.isTainted_()) {
                    var width = this.size_[0];
                    var height = this.size_[1];
                    var context = createCanvasContext2D(width, height);
                    context.fillRect(0, 0, width, height);
                    this.hitDetectionImage_ = context.canvas;
                }
                else {
                    this.hitDetectionImage_ = this.image_;
                }
            }
            return this.hitDetectionImage_;
        };
        /**
         * Get the size of the icon (in pixels).
         * @return {import("../size.js").Size} Image size.
         */
        IconImage.prototype.getSize = function () {
            return this.size_;
        };
        /**
         * @return {string|undefined} Image src.
         */
        IconImage.prototype.getSrc = function () {
            return this.src_;
        };
        /**
         * Load not yet loaded URI.
         */
        IconImage.prototype.load = function () {
            if (this.imageState_ == ImageState.IDLE) {
                this.imageState_ = ImageState.LOADING;
                try {
                    /** @type {HTMLImageElement} */ (this.image_).src = this.src_;
                }
                catch (e) {
                    this.handleImageError_();
                }
                this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
            }
        };
        /**
         * @param {number} pixelRatio Pixel ratio.
         * @private
         */
        IconImage.prototype.replaceColor_ = function (pixelRatio) {
            if (!this.color_ || this.canvas_[pixelRatio]) {
                return;
            }
            var canvas = document.createElement('canvas');
            this.canvas_[pixelRatio] = canvas;
            canvas.width = Math.ceil(this.image_.width * pixelRatio);
            canvas.height = Math.ceil(this.image_.height * pixelRatio);
            var ctx = canvas.getContext('2d');
            ctx.scale(pixelRatio, pixelRatio);
            ctx.drawImage(this.image_, 0, 0);
            ctx.globalCompositeOperation = 'multiply';
            // Internet Explorer 11 does not support the multiply operation.
            // If the canvas is tainted in Internet Explorer this still produces
            // a solid color image with the shape of the icon.
            if (ctx.globalCompositeOperation === 'multiply' || this.isTainted_()) {
                ctx.fillStyle = asString(this.color_);
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.globalCompositeOperation = 'destination-in';
                ctx.drawImage(this.image_, 0, 0);
            }
            else {
                var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                var data = imgData.data;
                var r = this.color_[0] / 255.0;
                var g = this.color_[1] / 255.0;
                var b = this.color_[2] / 255.0;
                var a = this.color_[3];
                for (var i = 0, ii = data.length; i < ii; i += 4) {
                    data[i] *= r;
                    data[i + 1] *= g;
                    data[i + 2] *= b;
                    data[i + 3] *= a;
                }
                ctx.putImageData(imgData, 0, 0);
            }
        };
        /**
         * Discards event handlers which listen for load completion or errors.
         *
         * @private
         */
        IconImage.prototype.unlistenImage_ = function () {
            if (this.unlisten_) {
                this.unlisten_();
                this.unlisten_ = null;
            }
        };
        return IconImage;
    }(Target));
    /**
     * @param {HTMLImageElement|HTMLCanvasElement} image Image.
     * @param {string} src Src.
     * @param {import("../size.js").Size} size Size.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../ImageState.js").default} imageState Image state.
     * @param {import("../color.js").Color} color Color.
     * @return {IconImage} Icon image.
     */
    function get$3(image, src, size, crossOrigin, imageState, color) {
        var iconImage = shared.get(src, crossOrigin, color);
        if (!iconImage) {
            iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);
            shared.set(src, crossOrigin, color, iconImage);
        }
        return iconImage;
    }

    var __extends$w = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
     * @property {import("./IconOrigin.js").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
     * `top-left` or `top-right`.
     * @property {import("./IconAnchorUnits.js").default} [anchorXUnits='fraction'] Units in which the anchor x value is
     * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
     * the x value in pixels.
     * @property {import("./IconAnchorUnits.js").default} [anchorYUnits='fraction'] Units in which the anchor y value is
     * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
     * the y value in pixels.
     * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
     * the icon will be left as is.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
     * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
     * provided image must already be loaded. And in that case, it is required
     * to provide the size of the image, with the `imgSize` option.
     * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the
     * sub-rectangle to use from the original icon image.
     * @property {Array<number>} [displacement=[0,0]] Displacement the icon
     * @property {import("./IconOrigin.js").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
     * `top-left` or `top-right`.
     * @property {number} [opacity=1] Opacity of the icon.
     * @property {number|import("../size.js").Size} [scale=1] Scale.
     * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
     * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
     * @property {import("../size.js").Size} [size] Icon size in pixel. Can be used together with `offset` to define the
     * sub-rectangle to use from the origin (sprite) icon image.
     * @property {import("../size.js").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and
     * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.
     * @property {string} [src] Image source URI.
     */
    /**
     * @classdesc
     * Set icon style for vector features.
     * @api
     */
    var Icon = /** @class */ (function (_super) {
        __extends$w(Icon, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function Icon(opt_options) {
            var _this = this;
            var options = opt_options || {};
            /**
             * @type {number}
             */
            var opacity = options.opacity !== undefined ? options.opacity : 1;
            /**
             * @type {number}
             */
            var rotation = options.rotation !== undefined ? options.rotation : 0;
            /**
             * @type {number|import("../size.js").Size}
             */
            var scale = options.scale !== undefined ? options.scale : 1;
            /**
             * @type {boolean}
             */
            var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;
            _this = _super.call(this, {
                opacity: opacity,
                rotation: rotation,
                scale: scale,
                displacement: options.displacement !== undefined ? options.displacement : [0, 0],
                rotateWithView: rotateWithView,
            }) || this;
            /**
             * @private
             * @type {Array<number>}
             */
            _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];
            /**
             * @private
             * @type {Array<number>}
             */
            _this.normalizedAnchor_ = null;
            /**
             * @private
             * @type {import("./IconOrigin.js").default}
             */
            _this.anchorOrigin_ =
                options.anchorOrigin !== undefined
                    ? options.anchorOrigin
                    : IconOrigin.TOP_LEFT;
            /**
             * @private
             * @type {import("./IconAnchorUnits.js").default}
             */
            _this.anchorXUnits_ =
                options.anchorXUnits !== undefined
                    ? options.anchorXUnits
                    : IconAnchorUnits.FRACTION;
            /**
             * @private
             * @type {import("./IconAnchorUnits.js").default}
             */
            _this.anchorYUnits_ =
                options.anchorYUnits !== undefined
                    ? options.anchorYUnits
                    : IconAnchorUnits.FRACTION;
            /**
             * @private
             * @type {?string}
             */
            _this.crossOrigin_ =
                options.crossOrigin !== undefined ? options.crossOrigin : null;
            /**
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            var image = options.img !== undefined ? options.img : null;
            /**
             * @type {import("../size.js").Size}
             */
            var imgSize = options.imgSize !== undefined ? options.imgSize : null;
            /**
             * @type {string|undefined}
             */
            var src = options.src;
            assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time
            assert(!image || (image && imgSize), 5); // `imgSize` must be set when `image` is provided
            if ((src === undefined || src.length === 0) && image) {
                src = /** @type {HTMLImageElement} */ (image).src || getUid(image);
            }
            assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided
            /**
             * @type {import("../ImageState.js").default}
             */
            var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;
            /**
             * @private
             * @type {import("../color.js").Color}
             */
            _this.color_ = options.color !== undefined ? asArray(options.color) : null;
            /**
             * @private
             * @type {import("./IconImage.js").default}
             */
            _this.iconImage_ = get$3(image, 
            /** @type {string} */ (src), imgSize, _this.crossOrigin_, imageState, _this.color_);
            /**
             * @private
             * @type {Array<number>}
             */
            _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];
            /**
             * @private
             * @type {import("./IconOrigin.js").default}
             */
            _this.offsetOrigin_ =
                options.offsetOrigin !== undefined
                    ? options.offsetOrigin
                    : IconOrigin.TOP_LEFT;
            /**
             * @private
             * @type {Array<number>}
             */
            _this.origin_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            _this.size_ = options.size !== undefined ? options.size : null;
            return _this;
        }
        /**
         * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
         * @return {Icon} The cloned style.
         * @api
         */
        Icon.prototype.clone = function () {
            var scale = this.getScale();
            return new Icon({
                anchor: this.anchor_.slice(),
                anchorOrigin: this.anchorOrigin_,
                anchorXUnits: this.anchorXUnits_,
                anchorYUnits: this.anchorYUnits_,
                crossOrigin: this.crossOrigin_,
                color: this.color_ && this.color_.slice
                    ? this.color_.slice()
                    : this.color_ || undefined,
                src: this.getSrc(),
                offset: this.offset_.slice(),
                offsetOrigin: this.offsetOrigin_,
                size: this.size_ !== null ? this.size_.slice() : undefined,
                opacity: this.getOpacity(),
                scale: Array.isArray(scale) ? scale.slice() : scale,
                rotation: this.getRotation(),
                rotateWithView: this.getRotateWithView(),
            });
        };
        /**
         * Get the anchor point in pixels. The anchor determines the center point for the
         * symbolizer.
         * @return {Array<number>} Anchor.
         * @api
         */
        Icon.prototype.getAnchor = function () {
            if (this.normalizedAnchor_) {
                return this.normalizedAnchor_;
            }
            var anchor = this.anchor_;
            var size = this.getSize();
            if (this.anchorXUnits_ == IconAnchorUnits.FRACTION ||
                this.anchorYUnits_ == IconAnchorUnits.FRACTION) {
                if (!size) {
                    return null;
                }
                anchor = this.anchor_.slice();
                if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {
                    anchor[0] *= size[0];
                }
                if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {
                    anchor[1] *= size[1];
                }
            }
            if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {
                if (!size) {
                    return null;
                }
                if (anchor === this.anchor_) {
                    anchor = this.anchor_.slice();
                }
                if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||
                    this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {
                    anchor[0] = -anchor[0] + size[0];
                }
                if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||
                    this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {
                    anchor[1] = -anchor[1] + size[1];
                }
            }
            this.normalizedAnchor_ = anchor;
            return this.normalizedAnchor_;
        };
        /**
         * Set the anchor point. The anchor determines the center point for the
         * symbolizer.
         *
         * @param {Array<number>} anchor Anchor.
         * @api
         */
        Icon.prototype.setAnchor = function (anchor) {
            this.anchor_ = anchor;
            this.normalizedAnchor_ = null;
        };
        /**
         * Get the icon color.
         * @return {import("../color.js").Color} Color.
         * @api
         */
        Icon.prototype.getColor = function () {
            return this.color_;
        };
        /**
         * Get the image icon.
         * @param {number} pixelRatio Pixel ratio.
         * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
         * @api
         */
        Icon.prototype.getImage = function (pixelRatio) {
            return this.iconImage_.getImage(pixelRatio);
        };
        /**
         * Get the pixel ratio.
         * @param {number} pixelRatio Pixel ratio.
         * @return {number} The pixel ration of the image.
         * @api
         */
        Icon.prototype.getPixelRatio = function (pixelRatio) {
            return this.iconImage_.getPixelRatio(pixelRatio);
        };
        /**
         * @return {import("../size.js").Size} Image size.
         */
        Icon.prototype.getImageSize = function () {
            return this.iconImage_.getSize();
        };
        /**
         * @return {import("../size.js").Size} Size of the hit-detection image.
         */
        Icon.prototype.getHitDetectionImageSize = function () {
            return this.getImageSize();
        };
        /**
         * @return {import("../ImageState.js").default} Image state.
         */
        Icon.prototype.getImageState = function () {
            return this.iconImage_.getImageState();
        };
        /**
         * @return {HTMLImageElement|HTMLCanvasElement} Image element.
         */
        Icon.prototype.getHitDetectionImage = function () {
            return this.iconImage_.getHitDetectionImage();
        };
        /**
         * Get the origin of the symbolizer.
         * @return {Array<number>} Origin.
         * @api
         */
        Icon.prototype.getOrigin = function () {
            if (this.origin_) {
                return this.origin_;
            }
            var offset = this.offset_;
            var displacement = this.getDisplacement();
            if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {
                var size = this.getSize();
                var iconImageSize = this.iconImage_.getSize();
                if (!size || !iconImageSize) {
                    return null;
                }
                offset = offset.slice();
                if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||
                    this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {
                    offset[0] = iconImageSize[0] - size[0] - offset[0];
                }
                if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||
                    this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {
                    offset[1] = iconImageSize[1] - size[1] - offset[1];
                }
            }
            offset[0] += displacement[0];
            offset[1] += displacement[1];
            this.origin_ = offset;
            return this.origin_;
        };
        /**
         * Get the image URL.
         * @return {string|undefined} Image src.
         * @api
         */
        Icon.prototype.getSrc = function () {
            return this.iconImage_.getSrc();
        };
        /**
         * Get the size of the icon (in pixels).
         * @return {import("../size.js").Size} Image size.
         * @api
         */
        Icon.prototype.getSize = function () {
            return !this.size_ ? this.iconImage_.getSize() : this.size_;
        };
        /**
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        Icon.prototype.listenImageChange = function (listener) {
            this.iconImage_.addEventListener(EventType.CHANGE, listener);
        };
        /**
         * Load not yet loaded URI.
         * When rendering a feature with an icon style, the vector renderer will
         * automatically call this method. However, you might want to call this
         * method yourself for preloading or other purposes.
         * @api
         */
        Icon.prototype.load = function () {
            this.iconImage_.load();
        };
        /**
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        Icon.prototype.unlistenImageChange = function (listener) {
            this.iconImage_.removeEventListener(EventType.CHANGE, listener);
        };
        return Icon;
    }(ImageStyle));

    /**
     * @module ol/render/canvas/hitdetect
     */
    /**
     * @param {import("../../size.js").Size} size Canvas size in css pixels.
     * @param {Array<import("../../transform.js").Transform>} transforms Transforms
     * for rendering features to all worlds of the viewport, from coordinates to css
     * pixels.
     * @param {Array<import("../../Feature.js").FeatureLike>} features
     * Features to consider for hit detection.
     * @param {import("../../style/Style.js").StyleFunction|undefined} styleFunction
     * Layer style function.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @return {ImageData} Hit detection image data.
     */
    function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {
        var width = size[0] / 2;
        var height = size[1] / 2;
        var context = createCanvasContext2D(width, height);
        context.imageSmoothingEnabled = false;
        var canvas = context.canvas;
        var renderer = new CanvasImmediateRenderer(context, 0.5, extent, null, rotation);
        var featureCount = features.length;
        // Stretch hit detection index to use the whole available color range
        var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);
        var featuresByZIndex = {};
        for (var i = 1; i <= featureCount; ++i) {
            var feature = features[i - 1];
            var featureStyleFunction = feature.getStyleFunction() || styleFunction;
            if (!styleFunction) {
                continue;
            }
            var styles = featureStyleFunction(feature, resolution);
            if (!styles) {
                continue;
            }
            if (!Array.isArray(styles)) {
                styles = [styles];
            }
            var index = i * indexFactor;
            var color = '#' + ('000000' + index.toString(16)).slice(-6);
            for (var j = 0, jj = styles.length; j < jj; ++j) {
                var originalStyle = styles[j];
                var style = originalStyle.clone();
                var fill = style.getFill();
                if (fill) {
                    fill.setColor(color);
                }
                var stroke = style.getStroke();
                if (stroke) {
                    stroke.setColor(color);
                }
                style.setText(undefined);
                var image = originalStyle.getImage();
                if (image) {
                    var imgSize = image.getImageSize();
                    if (!imgSize) {
                        continue;
                    }
                    var canvas_1 = document.createElement('canvas');
                    canvas_1.width = imgSize[0];
                    canvas_1.height = imgSize[1];
                    var imgContext = canvas_1.getContext('2d', { alpha: false });
                    imgContext.fillStyle = color;
                    var img = imgContext.canvas;
                    imgContext.fillRect(0, 0, img.width, img.height);
                    var width_1 = imgSize ? imgSize[0] : img.width;
                    var height_1 = imgSize ? imgSize[1] : img.height;
                    var iconContext = createCanvasContext2D(width_1, height_1);
                    iconContext.drawImage(img, 0, 0);
                    style.setImage(new Icon({
                        img: img,
                        imgSize: imgSize,
                        anchor: image.getAnchor(),
                        anchorXUnits: IconAnchorUnits.PIXELS,
                        anchorYUnits: IconAnchorUnits.PIXELS,
                        offset: image.getOrigin(),
                        size: image.getSize(),
                        opacity: image.getOpacity(),
                        scale: image.getScale(),
                        rotation: image.getRotation(),
                        rotateWithView: image.getRotateWithView(),
                    }));
                }
                var zIndex = Number(style.getZIndex());
                var byGeometryType = featuresByZIndex[zIndex];
                if (!byGeometryType) {
                    byGeometryType = {};
                    featuresByZIndex[zIndex] = byGeometryType;
                    byGeometryType[GeometryType.POLYGON] = [];
                    byGeometryType[GeometryType.CIRCLE] = [];
                    byGeometryType[GeometryType.LINE_STRING] = [];
                    byGeometryType[GeometryType.POINT] = [];
                }
                var geometry = style.getGeometryFunction()(feature);
                if (geometry && intersects(extent, geometry.getExtent())) {
                    byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);
                }
            }
        }
        var zIndexKeys = Object.keys(featuresByZIndex)
            .map(Number)
            .sort(numberSafeCompareFunction);
        for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {
            var byGeometryType = featuresByZIndex[zIndexKeys[i]];
            for (var type in byGeometryType) {
                var geomAndStyle = byGeometryType[type];
                for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {
                    renderer.setStyle(geomAndStyle[j + 1]);
                    for (var k = 0, kk = transforms.length; k < kk; ++k) {
                        renderer.setTransform(transforms[k]);
                        renderer.drawGeometry(geomAndStyle[j]);
                    }
                }
            }
        }
        return context.getImageData(0, 0, canvas.width, canvas.height);
    }
    /**
     * @param {import("../../pixel").Pixel} pixel Pixel coordinate on the hit
     * detection canvas in css pixels.
     * @param {Array<import("../../Feature").FeatureLike>} features Features. Has to
     * match the `features` array that was passed to `createHitDetectionImageData()`.
     * @param {ImageData} imageData Hit detection image data generated by
     * `createHitDetectionImageData()`.
     * @return {Array<import("../../Feature").FeatureLike>} features Features.
     */
    function hitDetect(pixel, features, imageData) {
        var resultFeatures = [];
        if (imageData) {
            var index = (Math.round(pixel[0] / 2) + Math.round(pixel[1] / 2) * imageData.width) *
                4;
            var r = imageData.data[index];
            var g = imageData.data[index + 1];
            var b = imageData.data[index + 2];
            var i = b + 256 * (g + 256 * r);
            var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);
            if (i && i % indexFactor === 0) {
                resultFeatures.push(features[i / indexFactor - 1]);
            }
        }
        return resultFeatures;
    }

    /**
     * @module ol/renderer/vector
     */
    /**
     * Feature callback. The callback will be called with three arguments. The first
     * argument is one {@link module:ol/Feature feature} or {@link module:ol/render/Feature render feature}
     * at the pixel, the second is the {@link module:ol/layer/Layer layer} of the feature and will be null for
     * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry} of the feature. For features
     * with a GeometryCollection geometry, it will be the first detected geometry from the collection.
     * @template T
     * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default, import("../geom/SimpleGeometry.js").default): T} FeatureCallback
     */
    /**
     * Tolerance for geometry simplification in device pixels.
     * @type {number}
     */
    var SIMPLIFY_TOLERANCE = 0.5;
    /**
     * @const
     * @type {Object<import("../geom/GeometryType.js").default,
     *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
     *                         import("../style/Style.js").default, Object): void>}
     */
    var GEOMETRY_RENDERERS = {
        'Point': renderPointGeometry,
        'LineString': renderLineStringGeometry,
        'Polygon': renderPolygonGeometry,
        'MultiPoint': renderMultiPointGeometry,
        'MultiLineString': renderMultiLineStringGeometry,
        'MultiPolygon': renderMultiPolygonGeometry,
        'GeometryCollection': renderGeometryCollectionGeometry,
        'Circle': renderCircleGeometry,
    };
    /**
     * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
     * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
     * @return {number} Order.
     */
    function defaultOrder(feature1, feature2) {
        return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);
    }
    /**
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Squared pixel tolerance.
     */
    function getSquaredTolerance(resolution, pixelRatio) {
        var tolerance = getTolerance(resolution, pixelRatio);
        return tolerance * tolerance;
    }
    /**
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Pixel tolerance.
     */
    function getTolerance(resolution, pixelRatio) {
        return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderCircleGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
        var fillStyle = style.getFill();
        var strokeStyle = style.getStroke();
        if (fillStyle || strokeStyle) {
            var circleReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.CIRCLE);
            circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
            circleReplay.drawCircle(geometry, feature);
        }
        var textStyle = style.getText();
        if (textStyle && textStyle.getText()) {
            var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), ReplayType.TEXT);
            textReplay.setTextStyle(textStyle);
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../style/Style.js").default} style Style.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     * @param {import("../proj.js").TransformFunction} [opt_transform] Transform from user to view projection.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     * @return {boolean} `true` if style is loading.
     */
    function renderFeature(replayGroup, feature, style, squaredTolerance, listener, opt_transform, opt_declutterBuilderGroup) {
        var loading = false;
        var imageStyle = style.getImage();
        if (imageStyle) {
            var imageState = imageStyle.getImageState();
            if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {
                imageStyle.unlistenImageChange(listener);
            }
            else {
                if (imageState == ImageState.IDLE) {
                    imageStyle.load();
                }
                imageState = imageStyle.getImageState();
                imageStyle.listenImageChange(listener);
                loading = true;
            }
        }
        renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup);
        return loading;
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../style/Style.js").default} style Style.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup) {
        var geometry = style.getGeometryFunction()(feature);
        if (!geometry) {
            return;
        }
        var simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);
        var renderer = style.getRenderer();
        if (renderer) {
            renderGeometry(replayGroup, simplifiedGeometry, style, feature);
        }
        else {
            var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
            geometryRenderer(replayGroup, simplifiedGeometry, style, feature, opt_declutterBuilderGroup);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
     * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    function renderGeometry(replayGroup, geometry, style, feature) {
        if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {
            var geometries = /** @type {import("../geom/GeometryCollection.js").default} */ (geometry).getGeometries();
            for (var i = 0, ii = geometries.length; i < ii; ++i) {
                renderGeometry(replayGroup, geometries[i], style, feature);
            }
            return;
        }
        var replay = replayGroup.getBuilder(style.getZIndex(), ReplayType.DEFAULT);
        replay.drawCustom(
        /** @type {import("../geom/SimpleGeometry.js").default} */ (geometry), feature, style.getRenderer());
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, opt_declutterBuilderGroup) {
        var geometries = geometry.getGeometriesArray();
        var i, ii;
        for (i = 0, ii = geometries.length; i < ii; ++i) {
            var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];
            geometryRenderer(replayGroup, geometries[i], style, feature, opt_declutterBuilderGroup);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
        var strokeStyle = style.getStroke();
        if (strokeStyle) {
            var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.LINE_STRING);
            lineStringReplay.setFillStrokeStyle(null, strokeStyle);
            lineStringReplay.drawLineString(geometry, feature);
        }
        var textStyle = style.getText();
        if (textStyle && textStyle.getText()) {
            var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), ReplayType.TEXT);
            textReplay.setTextStyle(textStyle);
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderMultiLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
        var strokeStyle = style.getStroke();
        if (strokeStyle) {
            var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.LINE_STRING);
            lineStringReplay.setFillStrokeStyle(null, strokeStyle);
            lineStringReplay.drawMultiLineString(geometry, feature);
        }
        var textStyle = style.getText();
        if (textStyle && textStyle.getText()) {
            var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), ReplayType.TEXT);
            textReplay.setTextStyle(textStyle);
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderMultiPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
        var fillStyle = style.getFill();
        var strokeStyle = style.getStroke();
        if (strokeStyle || fillStyle) {
            var polygonReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.POLYGON);
            polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
            polygonReplay.drawMultiPolygon(geometry, feature);
        }
        var textStyle = style.getText();
        if (textStyle && textStyle.getText()) {
            var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), ReplayType.TEXT);
            textReplay.setTextStyle(textStyle);
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
        var imageStyle = style.getImage();
        var textStyle = style.getText();
        /** @type {import("../render/canvas.js").DeclutterImageWithText} */
        var declutterImageWithText;
        if (opt_declutterBuilderGroup) {
            builderGroup = opt_declutterBuilderGroup;
            declutterImageWithText =
                imageStyle && textStyle && textStyle.getText() ? {} : undefined;
        }
        if (imageStyle) {
            if (imageStyle.getImageState() != ImageState.LOADED) {
                return;
            }
            var imageReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.IMAGE);
            imageReplay.setImageStyle(imageStyle, declutterImageWithText);
            imageReplay.drawPoint(geometry, feature);
        }
        if (textStyle && textStyle.getText()) {
            var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
            textReplay.setTextStyle(textStyle, declutterImageWithText);
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderMultiPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
        var imageStyle = style.getImage();
        var textStyle = style.getText();
        /** @type {import("../render/canvas.js").DeclutterImageWithText} */
        var declutterImageWithText;
        if (opt_declutterBuilderGroup) {
            builderGroup = opt_declutterBuilderGroup;
            declutterImageWithText =
                imageStyle && textStyle && textStyle.getText() ? {} : undefined;
        }
        if (imageStyle) {
            if (imageStyle.getImageState() != ImageState.LOADED) {
                return;
            }
            var imageReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.IMAGE);
            imageReplay.setImageStyle(imageStyle, declutterImageWithText);
            imageReplay.drawMultiPoint(geometry, feature);
        }
        if (textStyle && textStyle.getText()) {
            var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), ReplayType.TEXT);
            textReplay.setTextStyle(textStyle, declutterImageWithText);
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
     */
    function renderPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
        var fillStyle = style.getFill();
        var strokeStyle = style.getStroke();
        if (fillStyle || strokeStyle) {
            var polygonReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.POLYGON);
            polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
            polygonReplay.drawPolygon(geometry, feature);
        }
        var textStyle = style.getText();
        if (textStyle && textStyle.getText()) {
            var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), ReplayType.TEXT);
            textReplay.setTextStyle(textStyle);
            textReplay.drawText(geometry, feature);
        }
    }

    var __extends$x = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Canvas renderer for vector layers.
     * @api
     */
    var CanvasVectorLayerRenderer = /** @class */ (function (_super) {
        __extends$x(CanvasVectorLayerRenderer, _super);
        /**
         * @param {import("../../layer/Vector.js").default} vectorLayer Vector layer.
         */
        function CanvasVectorLayerRenderer(vectorLayer) {
            var _this = _super.call(this, vectorLayer) || this;
            /** @private */
            _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);
            /**
             * @type {boolean}
             */
            _this.animatingOrInteracting_;
            /**
             * @private
             * @type {boolean}
             */
            _this.dirty_ = false;
            /**
             * @type {ImageData}
             */
            _this.hitDetectionImageData_ = null;
            /**
             * @type {Array<import("../../Feature.js").default>}
             */
            _this.renderedFeatures_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.renderedRevision_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.renderedResolution_ = NaN;
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            _this.renderedExtent_ = createEmpty();
            /**
             * @private
             * @type {number}
             */
            _this.renderedRotation_;
            /**
             * @private
             * @type {import("../../coordinate").Coordinate}
             */
            _this.renderedCenter_ = null;
            /**
             * @private
             * @type {import("../../proj/Projection").default}
             */
            _this.renderedProjection_ = null;
            /**
             * @private
             * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
             */
            _this.renderedRenderOrder_ = null;
            /**
             * @private
             * @type {import("../../render/canvas/ExecutorGroup").default}
             */
            _this.replayGroup_ = null;
            /**
             * A new replay group had to be created by `prepareFrame()`
             * @type {boolean}
             */
            _this.replayGroupChanged = true;
            /**
             * @type {import("../../render/canvas/ExecutorGroup").default}
             */
            _this.declutterExecutorGroup = null;
            /**
             * Clipping to be performed by `renderFrame()`
             * @type {boolean}
             */
            _this.clipping = true;
            return _this;
        }
        /**
         * Get a rendering container from an existing target, if compatible.
         * @param {HTMLElement} target Potential render target.
         * @param {string} transform CSS Transform.
         * @param {number} opacity Opacity.
         */
        CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {
            if (opacity < 1) {
                target = null;
            }
            _super.prototype.useContainer.call(this, target, transform, opacity);
        };
        /**
         * @param {ExecutorGroup} executorGroup Executor group.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("rbush").default=} opt_declutterTree Declutter tree.
         */
        CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {
            var extent = frameState.extent;
            var viewState = frameState.viewState;
            var center = viewState.center;
            var resolution = viewState.resolution;
            var projection = viewState.projection;
            var rotation = viewState.rotation;
            var projectionExtent = projection.getExtent();
            var vectorSource = this.getLayer().getSource();
            var pixelRatio = frameState.pixelRatio;
            var viewHints = frameState.viewHints;
            var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
            var context = this.context;
            var width = Math.round(frameState.size[0] * pixelRatio);
            var height = Math.round(frameState.size[1] * pixelRatio);
            var multiWorld = vectorSource.getWrapX() && projection.canWrapX();
            var worldWidth = multiWorld ? getWidth(projectionExtent) : null;
            var endWorld = multiWorld
                ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1
                : 1;
            var world = multiWorld
                ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)
                : 0;
            do {
                var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);
                executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);
            } while (++world < endWorld);
        };
        /**
         * Render declutter items for this layer
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         */
        CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {
            if (this.declutterExecutorGroup) {
                this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);
            }
        };
        /**
         * Render the layer.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {
            var pixelRatio = frameState.pixelRatio;
            var layerState = frameState.layerStatesArray[frameState.layerIndex];
            // set forward and inverse pixel transforms
            makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);
            makeInverse(this.inversePixelTransform, this.pixelTransform);
            var canvasTransform = toString(this.pixelTransform);
            this.useContainer(target, canvasTransform, layerState.opacity);
            var context = this.context;
            var canvas = context.canvas;
            var replayGroup = this.replayGroup_;
            var declutterExecutorGroup = this.declutterExecutorGroup;
            if ((!replayGroup || replayGroup.isEmpty()) &&
                (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {
                if (!this.containerReused && canvas.width > 0) {
                    canvas.width = 0;
                }
                return this.container;
            }
            // resize and clear
            var width = Math.round(frameState.size[0] * pixelRatio);
            var height = Math.round(frameState.size[1] * pixelRatio);
            if (canvas.width != width || canvas.height != height) {
                canvas.width = width;
                canvas.height = height;
                if (canvas.style.transform !== canvasTransform) {
                    canvas.style.transform = canvasTransform;
                }
            }
            else if (!this.containerReused) {
                context.clearRect(0, 0, width, height);
            }
            this.preRender(context, frameState);
            var viewState = frameState.viewState;
            viewState.projection;
            // clipped rendering if layer extent is set
            var clipped = false;
            if (layerState.extent && this.clipping) {
                var layerExtent = fromUserExtent(layerState.extent);
                clipped =
                    !containsExtent(layerExtent, frameState.extent) &&
                        intersects(layerExtent, frameState.extent);
                if (clipped) {
                    this.clipUnrotated(context, frameState, layerExtent);
                }
            }
            this.renderWorlds(replayGroup, frameState);
            if (clipped) {
                context.restore();
            }
            this.postRender(context, frameState);
            var opacity = layerState.opacity;
            var container = this.container;
            if (opacity !== parseFloat(container.style.opacity)) {
                container.style.opacity = opacity === 1 ? '' : String(opacity);
            }
            if (this.renderedRotation_ !== viewState.rotation) {
                this.renderedRotation_ = viewState.rotation;
                this.hitDetectionImageData_ = null;
            }
            return this.container;
        };
        /**
         * Asynchronous layer level hit detection.
         * @param {import("../../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../../Feature").default>>} Promise that resolves with an array of features.
         */
        CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {
            return new Promise(
            /**
             * @param {function(Array<import("../../Feature").default|import("../../render/Feature").default>): void} resolve Resolver function.
             * @this {CanvasVectorLayerRenderer}
             */
            function (resolve) {
                if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
                    var size = [this.context.canvas.width, this.context.canvas.height];
                    apply(this.pixelTransform, size);
                    var center = this.renderedCenter_;
                    var resolution = this.renderedResolution_;
                    var rotation = this.renderedRotation_;
                    var projection = this.renderedProjection_;
                    var extent = this.renderedExtent_;
                    var layer = this.getLayer();
                    var transforms = [];
                    var width = size[0] / 2;
                    var height = size[1] / 2;
                    transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, 0).slice());
                    var source = layer.getSource();
                    var projectionExtent = projection.getExtent();
                    if (source.getWrapX() &&
                        projection.canWrapX() &&
                        !containsExtent(projectionExtent, extent)) {
                        var startX = extent[0];
                        var worldWidth = getWidth(projectionExtent);
                        var world = 0;
                        var offsetX = void 0;
                        while (startX < projectionExtent[0]) {
                            --world;
                            offsetX = worldWidth * world;
                            transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());
                            startX += worldWidth;
                        }
                        world = 0;
                        startX = extent[2];
                        while (startX > projectionExtent[2]) {
                            ++world;
                            offsetX = worldWidth * world;
                            transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());
                            startX -= worldWidth;
                        }
                    }
                    this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);
                }
                resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));
            }.bind(this));
        };
        /**
         * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
         * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
         * @return {T|undefined} Callback result.
         * @template T
         */
        CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {
            var _this = this;
            if (!this.replayGroup_) {
                return undefined;
            }
            var resolution = frameState.viewState.resolution;
            var rotation = frameState.viewState.rotation;
            var layer = this.getLayer();
            /** @type {!Object<string, import("../Map.js").HitMatch<T>|true>} */
            var features = {};
            /**
             * @param {import("../../Feature.js").FeatureLike} feature Feature.
             * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
             * @param {number} distanceSq The squared distance to the click position
             * @return {T|undefined} Callback result.
             */
            var featureCallback = function (feature, geometry, distanceSq) {
                var key = getUid(feature);
                var match = features[key];
                if (!match) {
                    if (distanceSq === 0) {
                        features[key] = true;
                        return callback(feature, layer, geometry);
                    }
                    matches.push((features[key] = {
                        feature: feature,
                        layer: layer,
                        geometry: geometry,
                        distanceSq: distanceSq,
                        callback: callback,
                    }));
                }
                else if (match !== true && distanceSq < match.distanceSq) {
                    if (distanceSq === 0) {
                        features[key] = true;
                        matches.splice(matches.lastIndexOf(match), 1);
                        return callback(feature, layer, geometry);
                    }
                    match.geometry = geometry;
                    match.distanceSq = distanceSq;
                }
                return undefined;
            };
            var result;
            var executorGroups = [this.replayGroup_];
            if (this.declutterExecutorGroup) {
                executorGroups.push(this.declutterExecutorGroup);
            }
            executorGroups.some(function (executorGroup) {
                return (result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup
                    ? frameState.declutterTree.all().map(function (item) { return item.value; })
                    : null));
            });
            return result;
        };
        /**
         * Perform action necessary to get the layer rendered after new fonts have loaded
         */
        CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {
            var layer = this.getLayer();
            if (layer.getVisible() && this.replayGroup_) {
                layer.changed();
            }
        };
        /**
         * Handle changes in image style state.
         * @param {import("../../events/Event.js").default} event Image style change event.
         * @private
         */
        CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {
            this.renderIfReadyAndVisible();
        };
        /**
         * Determine whether render should be called.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {
            var vectorLayer = this.getLayer();
            var vectorSource = vectorLayer.getSource();
            if (!vectorSource) {
                return false;
            }
            var animating = frameState.viewHints[ViewHint.ANIMATING];
            var interacting = frameState.viewHints[ViewHint.INTERACTING];
            var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
            var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();
            if ((!this.dirty_ && !updateWhileAnimating && animating) ||
                (!updateWhileInteracting && interacting)) {
                this.animatingOrInteracting_ = true;
                return true;
            }
            this.animatingOrInteracting_ = false;
            var frameStateExtent = frameState.extent;
            var viewState = frameState.viewState;
            var projection = viewState.projection;
            var resolution = viewState.resolution;
            var pixelRatio = frameState.pixelRatio;
            var vectorLayerRevision = vectorLayer.getRevision();
            var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
            var vectorLayerRenderOrder = vectorLayer.getRenderOrder();
            if (vectorLayerRenderOrder === undefined) {
                vectorLayerRenderOrder = defaultOrder;
            }
            var center = viewState.center.slice();
            var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);
            var loadExtents = [extent.slice()];
            var projectionExtent = projection.getExtent();
            if (vectorSource.getWrapX() &&
                projection.canWrapX() &&
                !containsExtent(projectionExtent, frameState.extent)) {
                // For the replay group, we need an extent that intersects the real world
                // (-180° to +180°). To support geometries in a coordinate range from -540°
                // to +540°, we add at least 1 world width on each side of the projection
                // extent. If the viewport is wider than the world, we need to add half of
                // the viewport width to make sure we cover the whole viewport.
                var worldWidth = getWidth(projectionExtent);
                var gutter = Math.max(getWidth(extent) / 2, worldWidth);
                extent[0] = projectionExtent[0] - gutter;
                extent[2] = projectionExtent[2] + gutter;
                wrapX$1(center, projection);
                var loadExtent = wrapX(loadExtents[0], projection);
                // If the extent crosses the date line, we load data for both edges of the worlds
                if (loadExtent[0] < projectionExtent[0] &&
                    loadExtent[2] < projectionExtent[2]) {
                    loadExtents.push([
                        loadExtent[0] + worldWidth,
                        loadExtent[1],
                        loadExtent[2] + worldWidth,
                        loadExtent[3],
                    ]);
                }
                else if (loadExtent[0] > projectionExtent[0] &&
                    loadExtent[2] > projectionExtent[2]) {
                    loadExtents.push([
                        loadExtent[0] - worldWidth,
                        loadExtent[1],
                        loadExtent[2] - worldWidth,
                        loadExtent[3],
                    ]);
                }
            }
            if (!this.dirty_ &&
                this.renderedResolution_ == resolution &&
                this.renderedRevision_ == vectorLayerRevision &&
                this.renderedRenderOrder_ == vectorLayerRenderOrder &&
                containsExtent(this.renderedExtent_, extent)) {
                this.replayGroupChanged = false;
                return true;
            }
            this.replayGroup_ = null;
            this.dirty_ = false;
            var replayGroup = new BuilderGroup(getTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);
            var declutterBuilderGroup;
            if (this.getLayer().getDeclutter()) {
                declutterBuilderGroup = new BuilderGroup(getTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);
            }
            var userTransform;
            var i, ii; {
                for (var i = 0, ii = loadExtents.length; i < ii; ++i) {
                    vectorSource.loadFeatures(loadExtents[i], resolution, projection);
                }
            }
            var squaredTolerance = getSquaredTolerance(resolution, pixelRatio);
            var render = 
            /**
             * @param {import("../../Feature.js").default} feature Feature.
             * @this {CanvasVectorLayerRenderer}
             */
            function (feature) {
                var styles;
                var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
                if (styleFunction) {
                    styles = styleFunction(feature, resolution);
                }
                if (styles) {
                    var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);
                    this.dirty_ = this.dirty_ || dirty;
                }
            }.bind(this);
            var userExtent = toUserExtent(extent);
            /** @type {Array<import("../../Feature.js").default>} */
            var features = vectorSource.getFeaturesInExtent(userExtent);
            if (vectorLayerRenderOrder) {
                features.sort(vectorLayerRenderOrder);
            }
            for (var i = 0, ii = features.length; i < ii; ++i) {
                render(features[i]);
            }
            this.renderedFeatures_ = features;
            var replayGroupInstructions = replayGroup.finish();
            var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());
            if (declutterBuilderGroup) {
                this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());
            }
            this.renderedResolution_ = resolution;
            this.renderedRevision_ = vectorLayerRevision;
            this.renderedRenderOrder_ = vectorLayerRenderOrder;
            this.renderedExtent_ = extent;
            this.renderedCenter_ = center;
            this.renderedProjection_ = projection;
            this.replayGroup_ = executorGroup;
            this.hitDetectionImageData_ = null;
            this.replayGroupChanged = true;
            return true;
        };
        /**
         * @param {import("../../Feature.js").default} feature Feature.
         * @param {number} squaredTolerance Squared render tolerance.
         * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
         * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
         * @param {import("../../proj.js").TransformFunction=} opt_transform Transform from user to view projection.
         * @param {import("../../render/canvas/BuilderGroup.js").default=} opt_declutterBuilderGroup Builder for decluttering.
         * @return {boolean} `true` if an image is loading.
         */
        CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {
            if (!styles) {
                return false;
            }
            var loading = false;
            if (Array.isArray(styles)) {
                for (var i = 0, ii = styles.length; i < ii; ++i) {
                    loading =
                        renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;
                }
            }
            else {
                loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);
            }
            return loading;
        };
        return CanvasVectorLayerRenderer;
    }(CanvasLayerRenderer));

    var __extends$y = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Vector data that is rendered client-side.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @extends {BaseVectorLayer<import("../source/Vector.js").default>}
     * @api
     */
    var VectorLayer = /** @class */ (function (_super) {
        __extends$y(VectorLayer, _super);
        /**
         * @param {import("./BaseVector.js").Options=} opt_options Options.
         */
        function VectorLayer(opt_options) {
            return _super.call(this, opt_options) || this;
        }
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         */
        VectorLayer.prototype.createRenderer = function () {
            return new CanvasVectorLayerRenderer(this);
        };
        return VectorLayer;
    }(BaseVectorLayer));

    /**
     * @module ol/structs/RBush
     */
    /**
     * @typedef {Object} Entry
     * @property {number} minX
     * @property {number} minY
     * @property {number} maxX
     * @property {number} maxY
     * @property {Object} [value]
     */
    /**
     * @classdesc
     * Wrapper around the RBush by Vladimir Agafonkin.
     * See https://github.com/mourner/rbush.
     *
     * @template T
     */
    var RBush = /** @class */ (function () {
        /**
         * @param {number=} opt_maxEntries Max entries.
         */
        function RBush(opt_maxEntries) {
            /**
             * @private
             */
            this.rbush_ = new rbush_min(opt_maxEntries);
            /**
             * A mapping between the objects added to this rbush wrapper
             * and the objects that are actually added to the internal rbush.
             * @private
             * @type {Object<string, Entry>}
             */
            this.items_ = {};
        }
        /**
         * Insert a value into the RBush.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {T} value Value.
         */
        RBush.prototype.insert = function (extent, value) {
            /** @type {Entry} */
            var item = {
                minX: extent[0],
                minY: extent[1],
                maxX: extent[2],
                maxY: extent[3],
                value: value,
            };
            this.rbush_.insert(item);
            this.items_[getUid(value)] = item;
        };
        /**
         * Bulk-insert values into the RBush.
         * @param {Array<import("../extent.js").Extent>} extents Extents.
         * @param {Array<T>} values Values.
         */
        RBush.prototype.load = function (extents, values) {
            var items = new Array(values.length);
            for (var i = 0, l = values.length; i < l; i++) {
                var extent = extents[i];
                var value = values[i];
                /** @type {Entry} */
                var item = {
                    minX: extent[0],
                    minY: extent[1],
                    maxX: extent[2],
                    maxY: extent[3],
                    value: value,
                };
                items[i] = item;
                this.items_[getUid(value)] = item;
            }
            this.rbush_.load(items);
        };
        /**
         * Remove a value from the RBush.
         * @param {T} value Value.
         * @return {boolean} Removed.
         */
        RBush.prototype.remove = function (value) {
            var uid = getUid(value);
            // get the object in which the value was wrapped when adding to the
            // internal rbush. then use that object to do the removal.
            var item = this.items_[uid];
            delete this.items_[uid];
            return this.rbush_.remove(item) !== null;
        };
        /**
         * Update the extent of a value in the RBush.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {T} value Value.
         */
        RBush.prototype.update = function (extent, value) {
            var item = this.items_[getUid(value)];
            var bbox = [item.minX, item.minY, item.maxX, item.maxY];
            if (!equals$1(bbox, extent)) {
                this.remove(value);
                this.insert(extent, value);
            }
        };
        /**
         * Return all values in the RBush.
         * @return {Array<T>} All.
         */
        RBush.prototype.getAll = function () {
            var items = this.rbush_.all();
            return items.map(function (item) {
                return item.value;
            });
        };
        /**
         * Return all values in the given extent.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {Array<T>} All in extent.
         */
        RBush.prototype.getInExtent = function (extent) {
            /** @type {Entry} */
            var bbox = {
                minX: extent[0],
                minY: extent[1],
                maxX: extent[2],
                maxY: extent[3],
            };
            var items = this.rbush_.search(bbox);
            return items.map(function (item) {
                return item.value;
            });
        };
        /**
         * Calls a callback function with each value in the tree.
         * If the callback returns a truthy value, this value is returned without
         * checking the rest of the tree.
         * @param {function(T): *} callback Callback.
         * @return {*} Callback return value.
         */
        RBush.prototype.forEach = function (callback) {
            return this.forEach_(this.getAll(), callback);
        };
        /**
         * Calls a callback function with each value in the provided extent.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {function(T): *} callback Callback.
         * @return {*} Callback return value.
         */
        RBush.prototype.forEachInExtent = function (extent, callback) {
            return this.forEach_(this.getInExtent(extent), callback);
        };
        /**
         * @param {Array<T>} values Values.
         * @param {function(T): *} callback Callback.
         * @private
         * @return {*} Callback return value.
         */
        RBush.prototype.forEach_ = function (values, callback) {
            var result;
            for (var i = 0, l = values.length; i < l; i++) {
                result = callback(values[i]);
                if (result) {
                    return result;
                }
            }
            return result;
        };
        /**
         * @return {boolean} Is empty.
         */
        RBush.prototype.isEmpty = function () {
            return isEmpty(this.items_);
        };
        /**
         * Remove all values from the RBush.
         */
        RBush.prototype.clear = function () {
            this.rbush_.clear();
            this.items_ = {};
        };
        /**
         * @param {import("../extent.js").Extent=} opt_extent Extent.
         * @return {import("../extent.js").Extent} Extent.
         */
        RBush.prototype.getExtent = function (opt_extent) {
            var data = this.rbush_.toJSON();
            return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
        };
        /**
         * @param {RBush} rbush R-Tree.
         */
        RBush.prototype.concat = function (rbush) {
            this.rbush_.load(rbush.rbush_.all());
            for (var i in rbush.items_) {
                this.items_[i] = rbush.items_[i];
            }
        };
        return RBush;
    }());

    var __extends$z = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that returns a string or an array of strings representing source
     * attributions.
     *
     * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
     */
    /**
     * A type that can be used to provide attribution information for data sources.
     *
     * It represents either
     * * a simple string (e.g. `'© Acme Inc.'`)
     * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
     * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
     *
     * @typedef {string|Array<string>|Attribution} AttributionLike
     */
    /**
     * @typedef {Object} Options
     * @property {AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
     * @property {import("./State.js").default} [state='ready']
     * @property {boolean} [wrapX=false]
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for {@link module:ol/layer/Layer~Layer} sources.
     *
     * A generic `change` event is triggered when the state of the source changes.
     * @abstract
     * @api
     */
    var Source = /** @class */ (function (_super) {
        __extends$z(Source, _super);
        /**
         * @param {Options} options Source options.
         */
        function Source(options) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {import("../proj/Projection.js").default}
             */
            _this.projection_ = get$2(options.projection);
            /**
             * @private
             * @type {?Attribution}
             */
            _this.attributions_ = adaptAttributions(options.attributions);
            /**
             * @private
             * @type {boolean}
             */
            _this.attributionsCollapsible_ =
                options.attributionsCollapsible !== undefined
                    ? options.attributionsCollapsible
                    : true;
            /**
             * This source is currently loading data. Sources that defer loading to the
             * map's tile queue never set this to `true`.
             * @type {boolean}
             */
            _this.loading = false;
            /**
             * @private
             * @type {import("./State.js").default}
             */
            _this.state_ =
                options.state !== undefined ? options.state : SourceState.READY;
            /**
             * @private
             * @type {boolean}
             */
            _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;
            return _this;
        }
        /**
         * Get the attribution function for the source.
         * @return {?Attribution} Attribution function.
         */
        Source.prototype.getAttributions = function () {
            return this.attributions_;
        };
        /**
         * @return {boolean} Attributions are collapsible.
         */
        Source.prototype.getAttributionsCollapsible = function () {
            return this.attributionsCollapsible_;
        };
        /**
         * Get the projection of the source.
         * @return {import("../proj/Projection.js").default} Projection.
         * @api
         */
        Source.prototype.getProjection = function () {
            return this.projection_;
        };
        /**
         * @abstract
         * @return {Array<number>|undefined} Resolutions.
         */
        Source.prototype.getResolutions = function () {
            return abstract();
        };
        /**
         * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
         * @return {import("./State.js").default} State.
         * @api
         */
        Source.prototype.getState = function () {
            return this.state_;
        };
        /**
         * @return {boolean|undefined} Wrap X.
         */
        Source.prototype.getWrapX = function () {
            return this.wrapX_;
        };
        /**
         * @return {Object|undefined} Context options.
         */
        Source.prototype.getContextOptions = function () {
            return undefined;
        };
        /**
         * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
         * @api
         */
        Source.prototype.refresh = function () {
            this.changed();
        };
        /**
         * Set the attributions of the source.
         * @param {AttributionLike|undefined} attributions Attributions.
         *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
         *     or `undefined`.
         * @api
         */
        Source.prototype.setAttributions = function (attributions) {
            this.attributions_ = adaptAttributions(attributions);
            this.changed();
        };
        /**
         * Set the state of the source.
         * @param {import("./State.js").default} state State.
         */
        Source.prototype.setState = function (state) {
            this.state_ = state;
            this.changed();
        };
        return Source;
    }(BaseObject));
    /**
     * Turns the attributions option into an attributions function.
     * @param {AttributionLike|undefined} attributionLike The attribution option.
     * @return {?Attribution} An attribution function (or null).
     */
    function adaptAttributions(attributionLike) {
        if (!attributionLike) {
            return null;
        }
        if (Array.isArray(attributionLike)) {
            return function (frameState) {
                return attributionLike;
            };
        }
        if (typeof attributionLike === 'function') {
            return attributionLike;
        }
        return function (frameState) {
            return [attributionLike];
        };
    }

    /**
     * @module ol/source/VectorEventType
     */
    /**
     * @enum {string}
     */
    var VectorEventType = {
        /**
         * Triggered when a feature is added to the source.
         * @event module:ol/source/Vector.VectorSourceEvent#addfeature
         * @api
         */
        ADDFEATURE: 'addfeature',
        /**
         * Triggered when a feature is updated.
         * @event module:ol/source/Vector.VectorSourceEvent#changefeature
         * @api
         */
        CHANGEFEATURE: 'changefeature',
        /**
         * Triggered when the clear method is called on the source.
         * @event module:ol/source/Vector.VectorSourceEvent#clear
         * @api
         */
        CLEAR: 'clear',
        /**
         * Triggered when a feature is removed from the source.
         * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.
         * @event module:ol/source/Vector.VectorSourceEvent#removefeature
         * @api
         */
        REMOVEFEATURE: 'removefeature',
        /**
         * Triggered when features starts loading.
         * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart
         * @api
         */
        FEATURESLOADSTART: 'featuresloadstart',
        /**
         * Triggered when features finishes loading.
         * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend
         * @api
         */
        FEATURESLOADEND: 'featuresloadend',
        /**
         * Triggered if feature loading results in an error.
         * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror
         * @api
         */
        FEATURESLOADERROR: 'featuresloaderror',
    };

    /**
     * @module ol/loadingstrategy
     */
    /**
     * Strategy function for loading all features with a single request.
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @return {Array<import("./extent.js").Extent>} Extents.
     * @api
     */
    function all(extent, resolution) {
        return [[-Infinity, -Infinity, Infinity, Infinity]];
    }

    /**
     * @module ol/format/FormatType
     */
    /**
     * @enum {string}
     */
    var FormatType = {
        ARRAY_BUFFER: 'arraybuffer',
        JSON: 'json',
        TEXT: 'text',
        XML: 'xml',
    };

    /**
     * @module ol/featureloader
     */
    /**
     *
     * @type {boolean}
     * @private
     */
    var withCredentials = false;
    /**
     * {@link module:ol/source/Vector} sources use a function of this type to
     * load features.
     *
     * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,
     * a `{number}` representing the resolution (map units per pixel), an
     * {@link module:ol/proj/Projection} for the projection and success and failure callbacks as
     * arguments. `this` within the function is bound to the
     * {@link module:ol/source/Vector} it's called from.
     *
     * The function is responsible for loading the features and adding them to the
     * source.
     * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default),
     *           import("./extent.js").Extent,
     *           number,
     *           import("./proj/Projection.js").default,
     *           function(Array<import("./Feature.js").default>): void=,
     *           function(): void=): void} FeatureLoader
     * @api
     */
    /**
     * {@link module:ol/source/Vector} sources use a function of this type to
     * get the url to load features from.
     *
     * This function takes an {@link module:ol/extent~Extent} representing the area
     * to be loaded, a `{number}` representing the resolution (map units per pixel)
     * and an {@link module:ol/proj/Projection} for the projection  as
     * arguments and returns a `{string}` representing the URL.
     * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
     * @api
     */
    /**
     * @param {string|FeatureUrlFunction} url Feature URL service.
     * @param {import("./format/Feature.js").default} format Feature format.
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @param {function(Array<import("./Feature.js").default>, import("./proj/Projection.js").default): void} success Success
     *      Function called with the loaded features and optionally with the data projection.
     * @param {function(): void} failure Failure
     *      Function called when loading failed.
     */
    function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);
        if (format.getType() == FormatType.ARRAY_BUFFER) {
            xhr.responseType = 'arraybuffer';
        }
        xhr.withCredentials = withCredentials;
        /**
         * @param {Event} event Event.
         * @private
         */
        xhr.onload = function (event) {
            // status will be 0 for file:// urls
            if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {
                var type = format.getType();
                /** @type {Document|Node|Object|string|undefined} */
                var source = void 0;
                if (type == FormatType.JSON || type == FormatType.TEXT) {
                    source = xhr.responseText;
                }
                else if (type == FormatType.XML) {
                    source = xhr.responseXML;
                    if (!source) {
                        source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
                    }
                }
                else if (type == FormatType.ARRAY_BUFFER) {
                    source = /** @type {ArrayBuffer} */ (xhr.response);
                }
                if (source) {
                    success(
                    /** @type {Array<import("./Feature.js").default>} */
                    (format.readFeatures(source, {
                        extent: extent,
                        featureProjection: projection,
                    })), format.readProjection(source));
                }
                else {
                    failure();
                }
            }
            else {
                failure();
            }
        };
        /**
         * @private
         */
        xhr.onerror = failure;
        xhr.send();
    }
    /**
     * Create an XHR feature loader for a `url` and `format`. The feature loader
     * loads features (with XHR), parses the features, and adds them to the
     * vector source.
     * @param {string|FeatureUrlFunction} url Feature URL service.
     * @param {import("./format/Feature.js").default} format Feature format.
     * @return {FeatureLoader} The feature loader.
     * @api
     */
    function xhr(url, format) {
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number} resolution Resolution.
         * @param {import("./proj/Projection.js").default} projection Projection.
         * @param {function(): void=} success Success
         *      Function called when loading succeeded.
         * @param {function(): void=} failure Failure
         *      Function called when loading failed.
         * @this {import("./source/Vector").default}
         */
        return function (extent, resolution, projection, success, failure) {
            var source = /** @type {import("./source/Vector").default} */ (this);
            loadFeaturesXhr(url, format, extent, resolution, projection, 
            /**
             * @param {Array<import("./Feature.js").default>} features The loaded features.
             * @param {import("./proj/Projection.js").default} dataProjection Data
             * projection.
             */
            function (features, dataProjection) {
                if (success !== undefined) {
                    success(features);
                }
                source.addFeatures(features);
            }, 
            /* FIXME handle error */ failure ? failure : VOID);
        };
    }

    /**
     * @module ol/source/Vector
     */
    var __extends$A = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
     * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
     * is one of the standard {@link module:ol/loadingstrategy} strategies.
     *
     * @typedef {function(import("../extent.js").Extent, number): Array<import("../extent.js").Extent>} LoadingStrategy
     * @api
     */
    /**
     * @classdesc
     * Events emitted by {@link module:ol/source/Vector} instances are instances of this
     * type.
     * @template {import("../geom/Geometry.js").default} Geometry
     */
    var VectorSourceEvent = /** @class */ (function (_super) {
        __extends$A(VectorSourceEvent, _super);
        /**
         * @param {string} type Type.
         * @param {import("../Feature.js").default<Geometry>=} opt_feature Feature.
         * @param {Array<import("../Feature.js").default<Geometry>>=} opt_features Features.
         */
        function VectorSourceEvent(type, opt_feature, opt_features) {
            var _this = _super.call(this, type) || this;
            /**
             * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.
             * @type {import("../Feature.js").default<Geometry>|undefined}
             * @api
             */
            _this.feature = opt_feature;
            /**
             * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.
             * @type {Array<import("../Feature.js").default<Geometry>>|undefined}
             * @api
             */
            _this.features = opt_features;
            return _this;
        }
        return VectorSourceEvent;
    }(BaseEvent));
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {Array<import("../Feature.js").default>|Collection<import("../Feature.js").default>} [features]
     * Features. If provided as {@link module:ol/Collection}, the features in the source
     * and the collection will stay in sync.
     * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
     * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
     * @property {import("../featureloader.js").FeatureLoader} [loader]
     * The loader function used to load features, from a remote source for example.
     * If this is not set and `url` is set, the source will create and use an XHR
     * feature loader.
     *
     * Example:
     *
     * ```js
     * import {Vector} from 'ol/source';
     * import {GeoJSON} from 'ol/format';
     * import {bbox} from 'ol/loadingstrategy';
     *
     * var vectorSource = new Vector({
     *   format: new GeoJSON(),
     *   loader: function(extent, resolution, projection) {
     *      var proj = projection.getCode();
     *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
     *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
     *          'outputFormat=application/json&srsname=' + proj + '&' +
     *          'bbox=' + extent.join(',') + ',' + proj;
     *      var xhr = new XMLHttpRequest();
     *      xhr.open('GET', url);
     *      var onError = function() {
     *        vectorSource.removeLoadedExtent(extent);
     *      }
     *      xhr.onerror = onError;
     *      xhr.onload = function() {
     *        if (xhr.status == 200) {
     *          vectorSource.addFeatures(
     *              vectorSource.getFormat().readFeatures(xhr.responseText));
     *        } else {
     *          onError();
     *        }
     *      }
     *      xhr.send();
     *    },
     *    strategy: bbox
     *  });
     * ```
     * @property {boolean} [overlaps=true] This source may have overlapping geometries.
     * Setting this to `false` (e.g. for sources with polygons that represent administrative
     * boundaries or TopoJSON sources) allows the renderer to optimise fill and
     * stroke operations.
     * @property {LoadingStrategy} [strategy] The loading strategy to use.
     * By default an {@link module:ol/loadingstrategy~all}
     * strategy is used, a one-off strategy which loads all features at once.
     * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
     * Setting this option instructs the source to load features using an XHR loader
     * (see {@link module:ol/featureloader~xhr}). Use a `string` and an
     * {@link module:ol/loadingstrategy~all} for a one-off download of all features from
     * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
     * other loading strategies.
     * Requires `format` to be set as well.
     * When default XHR feature loader is provided, the features will
     * be transformed from the data projection to the view projection
     * during parsing. If your remote data source does not advertise its projection
     * properly, this transformation will be incorrect. For some formats, the
     * default projection (usually EPSG:4326) can be overridden by setting the
     * dataProjection constructor option on the format.
     * Note that if a source contains non-feature data, such as a GeoJSON geometry
     * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
     * @property {boolean} [useSpatialIndex=true]
     * By default, an RTree is used as spatial index. When features are removed and
     * added frequently, and the total number of features is low, setting this to
     * `false` may improve performance.
     *
     * Note that
     * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
     * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
     * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
     * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
     * through all features.
     *
     * When set to `false`, the features will be maintained in an
     * {@link module:ol/Collection}, which can be retrieved through
     * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
     * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
     * -180° and 180° meridians to work properly, this should be set to `false`. The
     * resulting geometry coordinates will then exceed the world bounds.
     */
    /**
     * @classdesc
     * Provides a source of features for vector layers. Vector features provided
     * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
     * vector data that is optimized for rendering.
     *
     * @fires VectorSourceEvent
     * @api
     * @template {import("../geom/Geometry.js").default} Geometry
     */
    var VectorSource = /** @class */ (function (_super) {
        __extends$A(VectorSource, _super);
        /**
         * @param {Options=} opt_options Vector source options.
         */
        function VectorSource(opt_options) {
            var _this = this;
            var options = opt_options || {};
            _this = _super.call(this, {
                attributions: options.attributions,
                projection: undefined,
                state: SourceState.READY,
                wrapX: options.wrapX !== undefined ? options.wrapX : true,
            }) || this;
            /**
             * @private
             * @type {import("../featureloader.js").FeatureLoader}
             */
            _this.loader_ = VOID;
            /**
             * @private
             * @type {import("../format/Feature.js").default|undefined}
             */
            _this.format_ = options.format;
            /**
             * @private
             * @type {boolean}
             */
            _this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;
            /**
             * @private
             * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
             */
            _this.url_ = options.url;
            if (options.loader !== undefined) {
                _this.loader_ = options.loader;
            }
            else if (_this.url_ !== undefined) {
                assert(_this.format_, 7); // `format` must be set when `url` is set
                // create a XHR feature loader for "url" and "format"
                _this.loader_ = xhr(_this.url_, 
                /** @type {import("../format/Feature.js").default} */ (_this.format_));
            }
            /**
             * @private
             * @type {LoadingStrategy}
             */
            _this.strategy_ =
                options.strategy !== undefined ? options.strategy : all;
            var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;
            /**
             * @private
             * @type {RBush<import("../Feature.js").default<Geometry>>}
             */
            _this.featuresRtree_ = useSpatialIndex ? new RBush() : null;
            /**
             * @private
             * @type {RBush<{extent: import("../extent.js").Extent}>}
             */
            _this.loadedExtentsRtree_ = new RBush();
            /**
             * @private
             * @type {!Object<string, import("../Feature.js").default<Geometry>>}
             */
            _this.nullGeometryFeatures_ = {};
            /**
             * A lookup of features by id (the return from feature.getId()).
             * @private
             * @type {!Object<string, import("../Feature.js").default<Geometry>>}
             */
            _this.idIndex_ = {};
            /**
             * A lookup of features by uid (using getUid(feature)).
             * @private
             * @type {!Object<string, import("../Feature.js").default<Geometry>>}
             */
            _this.uidIndex_ = {};
            /**
             * @private
             * @type {Object<string, Array<import("../events.js").EventsKey>>}
             */
            _this.featureChangeKeys_ = {};
            /**
             * @private
             * @type {Collection<import("../Feature.js").default<Geometry>>}
             */
            _this.featuresCollection_ = null;
            var collection, features;
            if (Array.isArray(options.features)) {
                features = options.features;
            }
            else if (options.features) {
                collection = options.features;
                features = collection.getArray();
            }
            if (!useSpatialIndex && collection === undefined) {
                collection = new Collection(features);
            }
            if (features !== undefined) {
                _this.addFeaturesInternal(features);
            }
            if (collection !== undefined) {
                _this.bindFeaturesCollection_(collection);
            }
            return _this;
        }
        /**
         * Add a single feature to the source.  If you want to add a batch of features
         * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
         * instead. A feature will not be added to the source if feature with
         * the same id is already there. The reason for this behavior is to avoid
         * feature duplication when using bbox or tile loading strategies.
         * Note: this also applies if an {@link module:ol/Collection} is used for features,
         * meaning that if a feature with a duplicate id is added in the collection, it will
         * be removed from it right away.
         * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
         * @api
         */
        VectorSource.prototype.addFeature = function (feature) {
            this.addFeatureInternal(feature);
            this.changed();
        };
        /**
         * Add a feature without firing a `change` event.
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @protected
         */
        VectorSource.prototype.addFeatureInternal = function (feature) {
            var featureKey = getUid(feature);
            if (!this.addToIndex_(featureKey, feature)) {
                if (this.featuresCollection_) {
                    this.featuresCollection_.remove(feature);
                }
                return;
            }
            this.setupChangeEvents_(featureKey, feature);
            var geometry = feature.getGeometry();
            if (geometry) {
                var extent = geometry.getExtent();
                if (this.featuresRtree_) {
                    this.featuresRtree_.insert(extent, feature);
                }
            }
            else {
                this.nullGeometryFeatures_[featureKey] = feature;
            }
            this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));
        };
        /**
         * @param {string} featureKey Unique identifier for the feature.
         * @param {import("../Feature.js").default<Geometry>} feature The feature.
         * @private
         */
        VectorSource.prototype.setupChangeEvents_ = function (featureKey, feature) {
            this.featureChangeKeys_[featureKey] = [
                listen$1(feature, EventType.CHANGE, this.handleFeatureChange_, this),
                listen$1(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this),
            ];
        };
        /**
         * @param {string} featureKey Unique identifier for the feature.
         * @param {import("../Feature.js").default<Geometry>} feature The feature.
         * @return {boolean} The feature is "valid", in the sense that it is also a
         *     candidate for insertion into the Rtree.
         * @private
         */
        VectorSource.prototype.addToIndex_ = function (featureKey, feature) {
            var valid = true;
            var id = feature.getId();
            if (id !== undefined) {
                if (!(id.toString() in this.idIndex_)) {
                    this.idIndex_[id.toString()] = feature;
                }
                else {
                    valid = false;
                }
            }
            if (valid) {
                assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source
                this.uidIndex_[featureKey] = feature;
            }
            return valid;
        };
        /**
         * Add a batch of features to the source.
         * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
         * @api
         */
        VectorSource.prototype.addFeatures = function (features) {
            this.addFeaturesInternal(features);
            this.changed();
        };
        /**
         * Add features without firing a `change` event.
         * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
         * @protected
         */
        VectorSource.prototype.addFeaturesInternal = function (features) {
            var extents = [];
            var newFeatures = [];
            var geometryFeatures = [];
            for (var i = 0, length_1 = features.length; i < length_1; i++) {
                var feature = features[i];
                var featureKey = getUid(feature);
                if (this.addToIndex_(featureKey, feature)) {
                    newFeatures.push(feature);
                }
            }
            for (var i = 0, length_2 = newFeatures.length; i < length_2; i++) {
                var feature = newFeatures[i];
                var featureKey = getUid(feature);
                this.setupChangeEvents_(featureKey, feature);
                var geometry = feature.getGeometry();
                if (geometry) {
                    var extent = geometry.getExtent();
                    extents.push(extent);
                    geometryFeatures.push(feature);
                }
                else {
                    this.nullGeometryFeatures_[featureKey] = feature;
                }
            }
            if (this.featuresRtree_) {
                this.featuresRtree_.load(extents, geometryFeatures);
            }
            for (var i = 0, length_3 = newFeatures.length; i < length_3; i++) {
                this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));
            }
        };
        /**
         * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
         * @private
         */
        VectorSource.prototype.bindFeaturesCollection_ = function (collection) {
            var modifyingCollection = false;
            this.addEventListener(VectorEventType.ADDFEATURE, 
            /**
             * @param {VectorSourceEvent<Geometry>} evt The vector source event
             */
            function (evt) {
                if (!modifyingCollection) {
                    modifyingCollection = true;
                    collection.push(evt.feature);
                    modifyingCollection = false;
                }
            });
            this.addEventListener(VectorEventType.REMOVEFEATURE, 
            /**
             * @param {VectorSourceEvent<Geometry>} evt The vector source event
             */
            function (evt) {
                if (!modifyingCollection) {
                    modifyingCollection = true;
                    collection.remove(evt.feature);
                    modifyingCollection = false;
                }
            });
            collection.addEventListener(CollectionEventType.ADD, 
            /**
             * @param {import("../Collection.js").CollectionEvent} evt The collection event
             */
            function (evt) {
                if (!modifyingCollection) {
                    modifyingCollection = true;
                    this.addFeature(
                    /** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
                    modifyingCollection = false;
                }
            }.bind(this));
            collection.addEventListener(CollectionEventType.REMOVE, 
            /**
             * @param {import("../Collection.js").CollectionEvent} evt The collection event
             */
            function (evt) {
                if (!modifyingCollection) {
                    modifyingCollection = true;
                    this.removeFeature(
                    /** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
                    modifyingCollection = false;
                }
            }.bind(this));
            this.featuresCollection_ = collection;
        };
        /**
         * Remove all features from the source.
         * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.
         * @api
         */
        VectorSource.prototype.clear = function (opt_fast) {
            if (opt_fast) {
                for (var featureId in this.featureChangeKeys_) {
                    var keys = this.featureChangeKeys_[featureId];
                    keys.forEach(unlistenByKey);
                }
                if (!this.featuresCollection_) {
                    this.featureChangeKeys_ = {};
                    this.idIndex_ = {};
                    this.uidIndex_ = {};
                }
            }
            else {
                if (this.featuresRtree_) {
                    this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));
                    for (var id in this.nullGeometryFeatures_) {
                        this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
                    }
                }
            }
            if (this.featuresCollection_) {
                this.featuresCollection_.clear();
            }
            if (this.featuresRtree_) {
                this.featuresRtree_.clear();
            }
            this.nullGeometryFeatures_ = {};
            var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);
            this.dispatchEvent(clearEvent);
            this.changed();
        };
        /**
         * Iterate through all features on the source, calling the provided callback
         * with each one.  If the callback returns any "truthy" value, iteration will
         * stop and the function will return the same value.
         * Note: this function only iterate through the feature that have a defined geometry.
         *
         * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
         *     on the source.  Return a truthy value to stop iteration.
         * @return {T|undefined} The return value from the last call to the callback.
         * @template T
         * @api
         */
        VectorSource.prototype.forEachFeature = function (callback) {
            if (this.featuresRtree_) {
                return this.featuresRtree_.forEach(callback);
            }
            else if (this.featuresCollection_) {
                this.featuresCollection_.forEach(callback);
            }
        };
        /**
         * Iterate through all features whose geometries contain the provided
         * coordinate, calling the callback with each feature.  If the callback returns
         * a "truthy" value, iteration will stop and the function will return the same
         * value.
         *
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
         *     whose goemetry contains the provided coordinate.
         * @return {T|undefined} The return value from the last call to the callback.
         * @template T
         */
        VectorSource.prototype.forEachFeatureAtCoordinateDirect = function (coordinate, callback) {
            var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
            return this.forEachFeatureInExtent(extent, function (feature) {
                var geometry = feature.getGeometry();
                if (geometry.intersectsCoordinate(coordinate)) {
                    return callback(feature);
                }
                else {
                    return undefined;
                }
            });
        };
        /**
         * Iterate through all features whose bounding box intersects the provided
         * extent (note that the feature's geometry may not intersect the extent),
         * calling the callback with each feature.  If the callback returns a "truthy"
         * value, iteration will stop and the function will return the same value.
         *
         * If you are interested in features whose geometry intersects an extent, call
         * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
         *
         * When `useSpatialIndex` is set to false, this method will loop through all
         * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
         *     whose bounding box intersects the provided extent.
         * @return {T|undefined} The return value from the last call to the callback.
         * @template T
         * @api
         */
        VectorSource.prototype.forEachFeatureInExtent = function (extent, callback) {
            if (this.featuresRtree_) {
                return this.featuresRtree_.forEachInExtent(extent, callback);
            }
            else if (this.featuresCollection_) {
                this.featuresCollection_.forEach(callback);
            }
        };
        /**
         * Iterate through all features whose geometry intersects the provided extent,
         * calling the callback with each feature.  If the callback returns a "truthy"
         * value, iteration will stop and the function will return the same value.
         *
         * If you only want to test for bounding box intersection, call the
         * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
         *     whose geometry intersects the provided extent.
         * @return {T|undefined} The return value from the last call to the callback.
         * @template T
         * @api
         */
        VectorSource.prototype.forEachFeatureIntersectingExtent = function (extent, callback) {
            return this.forEachFeatureInExtent(extent, 
            /**
             * @param {import("../Feature.js").default<Geometry>} feature Feature.
             * @return {T|undefined} The return value from the last call to the callback.
             */
            function (feature) {
                var geometry = feature.getGeometry();
                if (geometry.intersectsExtent(extent)) {
                    var result = callback(feature);
                    if (result) {
                        return result;
                    }
                }
            });
        };
        /**
         * Get the features collection associated with this source. Will be `null`
         * unless the source was configured with `useSpatialIndex` set to `false`, or
         * with an {@link module:ol/Collection} as `features`.
         * @return {Collection<import("../Feature.js").default<Geometry>>} The collection of features.
         * @api
         */
        VectorSource.prototype.getFeaturesCollection = function () {
            return this.featuresCollection_;
        };
        /**
         * Get all features on the source in random order.
         * @return {Array<import("../Feature.js").default<Geometry>>} Features.
         * @api
         */
        VectorSource.prototype.getFeatures = function () {
            var features;
            if (this.featuresCollection_) {
                features = this.featuresCollection_.getArray();
            }
            else if (this.featuresRtree_) {
                features = this.featuresRtree_.getAll();
                if (!isEmpty(this.nullGeometryFeatures_)) {
                    extend(features, getValues(this.nullGeometryFeatures_));
                }
            }
            return /** @type {Array<import("../Feature.js").default<Geometry>>} */ (features);
        };
        /**
         * Get all features whose geometry intersects the provided coordinate.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @return {Array<import("../Feature.js").default<Geometry>>} Features.
         * @api
         */
        VectorSource.prototype.getFeaturesAtCoordinate = function (coordinate) {
            var features = [];
            this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {
                features.push(feature);
            });
            return features;
        };
        /**
         * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
         * all features intersecting the given extent in random order (so it may include
         * features whose geometries do not intersect the extent).
         *
         * When `useSpatialIndex` is set to false, this method will return all
         * features.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {Array<import("../Feature.js").default<Geometry>>} Features.
         * @api
         */
        VectorSource.prototype.getFeaturesInExtent = function (extent) {
            if (this.featuresRtree_) {
                return this.featuresRtree_.getInExtent(extent);
            }
            else if (this.featuresCollection_) {
                return this.featuresCollection_.getArray();
            }
            else {
                return [];
            }
        };
        /**
         * Get the closest feature to the provided coordinate.
         *
         * This method is not available when the source is configured with
         * `useSpatialIndex` set to `false`.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {function(import("../Feature.js").default<Geometry>):boolean=} opt_filter Feature filter function.
         *     The filter function will receive one argument, the {@link module:ol/Feature feature}
         *     and it should return a boolean value. By default, no filtering is made.
         * @return {import("../Feature.js").default<Geometry>} Closest feature.
         * @api
         */
        VectorSource.prototype.getClosestFeatureToCoordinate = function (coordinate, opt_filter) {
            // Find the closest feature using branch and bound.  We start searching an
            // infinite extent, and find the distance from the first feature found.  This
            // becomes the closest feature.  We then compute a smaller extent which any
            // closer feature must intersect.  We continue searching with this smaller
            // extent, trying to find a closer feature.  Every time we find a closer
            // feature, we update the extent being searched so that any even closer
            // feature must intersect it.  We continue until we run out of features.
            var x = coordinate[0];
            var y = coordinate[1];
            var closestFeature = null;
            var closestPoint = [NaN, NaN];
            var minSquaredDistance = Infinity;
            var extent = [-Infinity, -Infinity, Infinity, Infinity];
            var filter = opt_filter ? opt_filter : TRUE;
            this.featuresRtree_.forEachInExtent(extent, 
            /**
             * @param {import("../Feature.js").default<Geometry>} feature Feature.
             */
            function (feature) {
                if (filter(feature)) {
                    var geometry = feature.getGeometry();
                    var previousMinSquaredDistance = minSquaredDistance;
                    minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);
                    if (minSquaredDistance < previousMinSquaredDistance) {
                        closestFeature = feature;
                        // This is sneaky.  Reduce the extent that it is currently being
                        // searched while the R-Tree traversal using this same extent object
                        // is still in progress.  This is safe because the new extent is
                        // strictly contained by the old extent.
                        var minDistance = Math.sqrt(minSquaredDistance);
                        extent[0] = x - minDistance;
                        extent[1] = y - minDistance;
                        extent[2] = x + minDistance;
                        extent[3] = y + minDistance;
                    }
                }
            });
            return closestFeature;
        };
        /**
         * Get the extent of the features currently in the source.
         *
         * This method is not available when the source is configured with
         * `useSpatialIndex` set to `false`.
         * @param {import("../extent.js").Extent=} opt_extent Destination extent. If provided, no new extent
         *     will be created. Instead, that extent's coordinates will be overwritten.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        VectorSource.prototype.getExtent = function (opt_extent) {
            return this.featuresRtree_.getExtent(opt_extent);
        };
        /**
         * Get a feature by its identifier (the value returned by feature.getId()).
         * Note that the index treats string and numeric identifiers as the same.  So
         * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
         *
         * @param {string|number} id Feature identifier.
         * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
         * @api
         */
        VectorSource.prototype.getFeatureById = function (id) {
            var feature = this.idIndex_[id.toString()];
            return feature !== undefined ? feature : null;
        };
        /**
         * Get a feature by its internal unique identifier (using `getUid`).
         *
         * @param {string} uid Feature identifier.
         * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
         */
        VectorSource.prototype.getFeatureByUid = function (uid) {
            var feature = this.uidIndex_[uid];
            return feature !== undefined ? feature : null;
        };
        /**
         * Get the format associated with this source.
         *
         * @return {import("../format/Feature.js").default|undefined} The feature format.
         * @api
         */
        VectorSource.prototype.getFormat = function () {
            return this.format_;
        };
        /**
         * @return {boolean} The source can have overlapping geometries.
         */
        VectorSource.prototype.getOverlaps = function () {
            return this.overlaps_;
        };
        /**
         * Get the url associated with this source.
         *
         * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
         * @api
         */
        VectorSource.prototype.getUrl = function () {
            return this.url_;
        };
        /**
         * @param {Event} event Event.
         * @private
         */
        VectorSource.prototype.handleFeatureChange_ = function (event) {
            var feature = /** @type {import("../Feature.js").default<Geometry>} */ (event.target);
            var featureKey = getUid(feature);
            var geometry = feature.getGeometry();
            if (!geometry) {
                if (!(featureKey in this.nullGeometryFeatures_)) {
                    if (this.featuresRtree_) {
                        this.featuresRtree_.remove(feature);
                    }
                    this.nullGeometryFeatures_[featureKey] = feature;
                }
            }
            else {
                var extent = geometry.getExtent();
                if (featureKey in this.nullGeometryFeatures_) {
                    delete this.nullGeometryFeatures_[featureKey];
                    if (this.featuresRtree_) {
                        this.featuresRtree_.insert(extent, feature);
                    }
                }
                else {
                    if (this.featuresRtree_) {
                        this.featuresRtree_.update(extent, feature);
                    }
                }
            }
            var id = feature.getId();
            if (id !== undefined) {
                var sid = id.toString();
                if (this.idIndex_[sid] !== feature) {
                    this.removeFromIdIndex_(feature);
                    this.idIndex_[sid] = feature;
                }
            }
            else {
                this.removeFromIdIndex_(feature);
                this.uidIndex_[featureKey] = feature;
            }
            this.changed();
            this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));
        };
        /**
         * Returns true if the feature is contained within the source.
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @return {boolean} Has feature.
         * @api
         */
        VectorSource.prototype.hasFeature = function (feature) {
            var id = feature.getId();
            if (id !== undefined) {
                return id in this.idIndex_;
            }
            else {
                return getUid(feature) in this.uidIndex_;
            }
        };
        /**
         * @return {boolean} Is empty.
         */
        VectorSource.prototype.isEmpty = function () {
            return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);
        };
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {number} resolution Resolution.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        VectorSource.prototype.loadFeatures = function (extent, resolution, projection) {
            var loadedExtentsRtree = this.loadedExtentsRtree_;
            var extentsToLoad = this.strategy_(extent, resolution);
            this.loading = false;
            var _loop_1 = function (i, ii) {
                var extentToLoad = extentsToLoad[i];
                var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, 
                /**
                 * @param {{extent: import("../extent.js").Extent}} object Object.
                 * @return {boolean} Contains.
                 */
                function (object) {
                    return containsExtent(object.extent, extentToLoad);
                });
                if (!alreadyLoaded) {
                    this_1.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADSTART));
                    this_1.loader_.call(this_1, extentToLoad, resolution, projection, function (features) {
                        this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADEND, undefined, features));
                    }.bind(this_1), function () {
                        this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADERROR));
                    }.bind(this_1));
                    loadedExtentsRtree.insert(extentToLoad, { extent: extentToLoad.slice() });
                    this_1.loading = this_1.loader_ !== VOID;
                }
            };
            var this_1 = this;
            for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {
                _loop_1(i);
            }
        };
        VectorSource.prototype.refresh = function () {
            this.clear(true);
            this.loadedExtentsRtree_.clear();
            _super.prototype.refresh.call(this);
        };
        /**
         * Remove an extent from the list of loaded extents.
         * @param {import("../extent.js").Extent} extent Extent.
         * @api
         */
        VectorSource.prototype.removeLoadedExtent = function (extent) {
            var loadedExtentsRtree = this.loadedExtentsRtree_;
            var obj;
            loadedExtentsRtree.forEachInExtent(extent, function (object) {
                if (equals$1(object.extent, extent)) {
                    obj = object;
                    return true;
                }
            });
            if (obj) {
                loadedExtentsRtree.remove(obj);
            }
        };
        /**
         * Remove a single feature from the source.  If you want to remove all features
         * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
         * instead.
         * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
         * @api
         */
        VectorSource.prototype.removeFeature = function (feature) {
            var featureKey = getUid(feature);
            if (featureKey in this.nullGeometryFeatures_) {
                delete this.nullGeometryFeatures_[featureKey];
            }
            else {
                if (this.featuresRtree_) {
                    this.featuresRtree_.remove(feature);
                }
            }
            this.removeFeatureInternal(feature);
            this.changed();
        };
        /**
         * Remove feature without firing a `change` event.
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @protected
         */
        VectorSource.prototype.removeFeatureInternal = function (feature) {
            var featureKey = getUid(feature);
            this.featureChangeKeys_[featureKey].forEach(unlistenByKey);
            delete this.featureChangeKeys_[featureKey];
            var id = feature.getId();
            if (id !== undefined) {
                delete this.idIndex_[id.toString()];
            }
            delete this.uidIndex_[featureKey];
            this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));
        };
        /**
         * Remove a feature from the id index.  Called internally when the feature id
         * may have changed.
         * @param {import("../Feature.js").default<Geometry>} feature The feature.
         * @return {boolean} Removed the feature from the index.
         * @private
         */
        VectorSource.prototype.removeFromIdIndex_ = function (feature) {
            var removed = false;
            for (var id in this.idIndex_) {
                if (this.idIndex_[id] === feature) {
                    delete this.idIndex_[id];
                    removed = true;
                    break;
                }
            }
            return removed;
        };
        /**
         * Set the new loader of the source. The next render cycle will use the
         * new loader.
         * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
         * @api
         */
        VectorSource.prototype.setLoader = function (loader) {
            this.loader_ = loader;
        };
        /**
         * Points the source to a new url. The next render cycle will use the new url.
         * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
         * @api
         */
        VectorSource.prototype.setUrl = function (url) {
            assert(this.format_, 7); // `format` must be set when `url` is set
            this.setLoader(xhr(url, this.format_));
        };
        return VectorSource;
    }(Source));

    /**
     * @module ol/TileState
     */
    /**
     * @enum {number}
     */
    var TileState = {
        IDLE: 0,
        LOADING: 1,
        LOADED: 2,
        /**
         * Indicates that tile loading failed
         * @type {number}
         */
        ERROR: 3,
        EMPTY: 4,
    };

    /**
     * @module ol/easing
     */
    /**
     * Start slow and speed up.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function easeIn(t) {
        return Math.pow(t, 3);
    }
    /**
     * Start fast and slow down.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function easeOut(t) {
        return 1 - easeIn(1 - t);
    }
    /**
     * Start slow, speed up, and then slow down again.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function inAndOut(t) {
        return 3 * t * t - 2 * t * t * t;
    }
    /**
     * Maintain a constant speed over time.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function linear(t) {
        return t;
    }

    var __extends$B = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that takes an {@link module:ol/Tile} for the tile and a
     * `{string}` for the url as arguments. The default is
     * ```js
     * source.setTileLoadFunction(function(tile, src) {
     *   tile.getImage().src = src;
     * });
     * ```
     * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
     * error handling:
     *
     * ```js
     * import TileState from 'ol/TileState';
     *
     * source.setTileLoadFunction(function(tile, src) {
     *   var xhr = new XMLHttpRequest();
     *   xhr.responseType = 'blob';
     *   xhr.addEventListener('loadend', function (evt) {
     *     var data = this.response;
     *     if (data !== undefined) {
     *       tile.getImage().src = URL.createObjectURL(data);
     *     } else {
     *       tile.setState(TileState.ERROR);
     *     }
     *   });
     *   xhr.addEventListener('error', function () {
     *     tile.setState(TileState.ERROR);
     *   });
     *   xhr.open('GET', src);
     *   xhr.send();
     * });
     * ```
     *
     * @typedef {function(Tile, string): void} LoadFunction
     * @api
     */
    /**
     * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
     * the url that provides a tile for a given tile coordinate.
     *
     * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
     * coordinate, a `{number}` representing the pixel ratio and a
     * {@link module:ol/proj/Projection} for the projection  as arguments
     * and returns a `{string}` representing the tile URL, or undefined if no tile
     * should be requested for the passed tile coordinate.
     *
     * @typedef {function(import("./tilecoord.js").TileCoord, number,
     *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
     * @api
     */
    /**
     * @typedef {Object} Options
     * @property {number} [transition=250] A duration for tile opacity
     * transitions in milliseconds. A duration of 0 disables the opacity transition.
     * @api
     */
    /**
     * @classdesc
     * Base class for tiles.
     *
     * @abstract
     */
    var Tile = /** @class */ (function (_super) {
        __extends$B(Tile, _super);
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("./TileState.js").default} state State.
         * @param {Options=} opt_options Tile options.
         */
        function Tile(tileCoord, state, opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @type {import("./tilecoord.js").TileCoord}
             */
            _this.tileCoord = tileCoord;
            /**
             * @protected
             * @type {import("./TileState.js").default}
             */
            _this.state = state;
            /**
             * An "interim" tile for this tile. The interim tile may be used while this
             * one is loading, for "smooth" transitions when changing params/dimensions
             * on the source.
             * @type {Tile}
             */
            _this.interimTile = null;
            /**
             * The tile is available at the highest possible resolution. Subclasses can
             * set this to `false` initially. Tile load listeners will not be
             * unregistered before this is set to `true` and a `#changed()` is called.
             * @type {boolean}
             */
            _this.hifi = true;
            /**
             * A key assigned to the tile. This is used by the tile source to determine
             * if this tile can effectively be used, or if a new tile should be created
             * and this one be used as an interim tile for this new tile.
             * @type {string}
             */
            _this.key = '';
            /**
             * The duration for the opacity transition.
             * @type {number}
             */
            _this.transition_ =
                options.transition === undefined ? 250 : options.transition;
            /**
             * Lookup of start times for rendering transitions.  If the start time is
             * equal to -1, the transition is complete.
             * @type {Object<string, number>}
             */
            _this.transitionStarts_ = {};
            return _this;
        }
        /**
         * @protected
         */
        Tile.prototype.changed = function () {
            this.dispatchEvent(EventType.CHANGE);
        };
        /**
         * Called by the tile cache when the tile is removed from the cache due to expiry
         */
        Tile.prototype.release = function () { };
        /**
         * @return {string} Key.
         */
        Tile.prototype.getKey = function () {
            return this.key + '/' + this.tileCoord;
        };
        /**
         * Get the interim tile most suitable for rendering using the chain of interim
         * tiles. This corresponds to the  most recent tile that has been loaded, if no
         * such tile exists, the original tile is returned.
         * @return {!Tile} Best tile for rendering.
         */
        Tile.prototype.getInterimTile = function () {
            if (!this.interimTile) {
                //empty chain
                return this;
            }
            var tile = this.interimTile;
            // find the first loaded tile and return it. Since the chain is sorted in
            // decreasing order of creation time, there is no need to search the remainder
            // of the list (all those tiles correspond to older requests and will be
            // cleaned up by refreshInterimChain)
            do {
                if (tile.getState() == TileState.LOADED) {
                    // Show tile immediately instead of fading it in after loading, because
                    // the interim tile is in place already
                    this.transition_ = 0;
                    return tile;
                }
                tile = tile.interimTile;
            } while (tile);
            // we can not find a better tile
            return this;
        };
        /**
         * Goes through the chain of interim tiles and discards sections of the chain
         * that are no longer relevant.
         */
        Tile.prototype.refreshInterimChain = function () {
            if (!this.interimTile) {
                return;
            }
            var tile = this.interimTile;
            var prev = /** @type {Tile} */ (this);
            do {
                if (tile.getState() == TileState.LOADED) {
                    //we have a loaded tile, we can discard the rest of the list
                    //we would could abort any LOADING tile request
                    //older than this tile (i.e. any LOADING tile following this entry in the chain)
                    tile.interimTile = null;
                    break;
                }
                else if (tile.getState() == TileState.LOADING) {
                    //keep this LOADING tile any loaded tiles later in the chain are
                    //older than this tile, so we're still interested in the request
                    prev = tile;
                }
                else if (tile.getState() == TileState.IDLE) {
                    //the head of the list is the most current tile, we don't need
                    //to start any other requests for this chain
                    prev.interimTile = tile.interimTile;
                }
                else {
                    prev = tile;
                }
                tile = prev.interimTile;
            } while (tile);
        };
        /**
         * Get the tile coordinate for this tile.
         * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
         * @api
         */
        Tile.prototype.getTileCoord = function () {
            return this.tileCoord;
        };
        /**
         * @return {import("./TileState.js").default} State.
         */
        Tile.prototype.getState = function () {
            return this.state;
        };
        /**
         * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
         * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
         * when the tile cannot be loaded. Otherwise the tile cannot be removed from
         * the tile queue and will block other requests.
         * @param {import("./TileState.js").default} state State.
         * @api
         */
        Tile.prototype.setState = function (state) {
            if (this.state !== TileState.ERROR && this.state > state) {
                throw new Error('Tile load sequence violation');
            }
            this.state = state;
            this.changed();
        };
        /**
         * Load the image or retry if loading previously failed.
         * Loading is taken care of by the tile queue, and calling this method is
         * only needed for preloading or for reloading in case of an error.
         * @abstract
         * @api
         */
        Tile.prototype.load = function () {
            abstract();
        };
        /**
         * Get the alpha value for rendering.
         * @param {string} id An id for the renderer.
         * @param {number} time The render frame time.
         * @return {number} A number between 0 and 1.
         */
        Tile.prototype.getAlpha = function (id, time) {
            if (!this.transition_) {
                return 1;
            }
            var start = this.transitionStarts_[id];
            if (!start) {
                start = time;
                this.transitionStarts_[id] = start;
            }
            else if (start === -1) {
                return 1;
            }
            var delta = time - start + 1000 / 60; // avoid rendering at 0
            if (delta >= this.transition_) {
                return 1;
            }
            return easeIn(delta / this.transition_);
        };
        /**
         * Determine if a tile is in an alpha transition.  A tile is considered in
         * transition if tile.getAlpha() has not yet been called or has been called
         * and returned 1.
         * @param {string} id An id for the renderer.
         * @return {boolean} The tile is in transition.
         */
        Tile.prototype.inTransition = function (id) {
            if (!this.transition_) {
                return false;
            }
            return this.transitionStarts_[id] !== -1;
        };
        /**
         * Mark a transition as complete.
         * @param {string} id An id for the renderer.
         */
        Tile.prototype.endTransition = function (id) {
            if (this.transition_) {
                this.transitionStarts_[id] = -1;
            }
        };
        return Tile;
    }(Target));

    var __extends$C = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var ImageTile = /** @class */ (function (_super) {
        __extends$C(ImageTile, _super);
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("./TileState.js").default} state State.
         * @param {string} src Image source URI.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
         * @param {import("./Tile.js").Options=} opt_options Tile options.
         */
        function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
            var _this = _super.call(this, tileCoord, state, opt_options) || this;
            /**
             * @private
             * @type {?string}
             */
            _this.crossOrigin_ = crossOrigin;
            /**
             * Image URI
             *
             * @private
             * @type {string}
             */
            _this.src_ = src;
            _this.key = src;
            /**
             * @private
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            _this.image_ = new Image();
            if (crossOrigin !== null) {
                _this.image_.crossOrigin = crossOrigin;
            }
            /**
             * @private
             * @type {?function():void}
             */
            _this.unlisten_ = null;
            /**
             * @private
             * @type {import("./Tile.js").LoadFunction}
             */
            _this.tileLoadFunction_ = tileLoadFunction;
            return _this;
        }
        /**
         * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @api
         */
        ImageTile.prototype.getImage = function () {
            return this.image_;
        };
        /**
         * Tracks loading or read errors.
         *
         * @private
         */
        ImageTile.prototype.handleImageError_ = function () {
            this.state = TileState.ERROR;
            this.unlistenImage_();
            this.image_ = getBlankImage();
            this.changed();
        };
        /**
         * Tracks successful image load.
         *
         * @private
         */
        ImageTile.prototype.handleImageLoad_ = function () {
            var image = /** @type {HTMLImageElement} */ (this.image_);
            if (image.naturalWidth && image.naturalHeight) {
                this.state = TileState.LOADED;
            }
            else {
                this.state = TileState.EMPTY;
            }
            this.unlistenImage_();
            this.changed();
        };
        /**
         * Load not yet loaded URI.
         * @api
         */
        ImageTile.prototype.load = function () {
            if (this.state == TileState.ERROR) {
                this.state = TileState.IDLE;
                this.image_ = new Image();
                if (this.crossOrigin_ !== null) {
                    this.image_.crossOrigin = this.crossOrigin_;
                }
            }
            if (this.state == TileState.IDLE) {
                this.state = TileState.LOADING;
                this.changed();
                this.tileLoadFunction_(this, this.src_);
                this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
            }
        };
        /**
         * Discards event handlers which listen for load completion or errors.
         *
         * @private
         */
        ImageTile.prototype.unlistenImage_ = function () {
            if (this.unlisten_) {
                this.unlisten_();
                this.unlisten_ = null;
            }
        };
        return ImageTile;
    }(Tile));
    /**
     * Get a 1-pixel blank image.
     * @return {HTMLCanvasElement} Blank image.
     */
    function getBlankImage() {
        var ctx = createCanvasContext2D(1, 1);
        ctx.fillStyle = 'rgba(0,0,0,0)';
        ctx.fillRect(0, 0, 1, 1);
        return ctx.canvas;
    }

    /**
     * @module ol/Kinetic
     */
    /**
     * @classdesc
     * Implementation of inertial deceleration for map movement.
     *
     * @api
     */
    var Kinetic = /** @class */ (function () {
        /**
         * @param {number} decay Rate of decay (must be negative).
         * @param {number} minVelocity Minimum velocity (pixels/millisecond).
         * @param {number} delay Delay to consider to calculate the kinetic
         *     initial values (milliseconds).
         */
        function Kinetic(decay, minVelocity, delay) {
            /**
             * @private
             * @type {number}
             */
            this.decay_ = decay;
            /**
             * @private
             * @type {number}
             */
            this.minVelocity_ = minVelocity;
            /**
             * @private
             * @type {number}
             */
            this.delay_ = delay;
            /**
             * @private
             * @type {Array<number>}
             */
            this.points_ = [];
            /**
             * @private
             * @type {number}
             */
            this.angle_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.initialVelocity_ = 0;
        }
        /**
         * FIXME empty description for jsdoc
         */
        Kinetic.prototype.begin = function () {
            this.points_.length = 0;
            this.angle_ = 0;
            this.initialVelocity_ = 0;
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         */
        Kinetic.prototype.update = function (x, y) {
            this.points_.push(x, y, Date.now());
        };
        /**
         * @return {boolean} Whether we should do kinetic animation.
         */
        Kinetic.prototype.end = function () {
            if (this.points_.length < 6) {
                // at least 2 points are required (i.e. there must be at least 6 elements
                // in the array)
                return false;
            }
            var delay = Date.now() - this.delay_;
            var lastIndex = this.points_.length - 3;
            if (this.points_[lastIndex + 2] < delay) {
                // the last tracked point is too old, which means that the user stopped
                // panning before releasing the map
                return false;
            }
            // get the first point which still falls into the delay time
            var firstIndex = lastIndex - 3;
            while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
                firstIndex -= 3;
            }
            var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
            // we don't want a duration of 0 (divide by zero)
            // we also make sure the user panned for a duration of at least one frame
            // (1/60s) to compute sane displacement values
            if (duration < 1000 / 60) {
                return false;
            }
            var dx = this.points_[lastIndex] - this.points_[firstIndex];
            var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
            this.angle_ = Math.atan2(dy, dx);
            this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
            return this.initialVelocity_ > this.minVelocity_;
        };
        /**
         * @return {number} Total distance travelled (pixels).
         */
        Kinetic.prototype.getDistance = function () {
            return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
        };
        /**
         * @return {number} Angle of the kinetic panning animation (radians).
         */
        Kinetic.prototype.getAngle = function () {
            return this.angle_;
        };
        return Kinetic;
    }());

    var __extends$D = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef HitMatch
     * @property {import("../Feature.js").FeatureLike} feature
     * @property {import("../layer/Layer.js").default} layer
     * @property {import("../geom/SimpleGeometry.js").default} geometry
     * @property {number} distanceSq
     * @property {import("./vector.js").FeatureCallback<T>} callback
     * @template T
     */
    /**
     * @abstract
     */
    var MapRenderer = /** @class */ (function (_super) {
        __extends$D(MapRenderer, _super);
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        function MapRenderer(map) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            _this.map_ = map;
            return _this;
        }
        /**
         * @abstract
         * @param {import("../render/EventType.js").default} type Event type.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        MapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
            abstract();
        };
        /**
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @protected
         */
        MapRenderer.prototype.calculateMatrices2D = function (frameState) {
            var viewState = frameState.viewState;
            var coordinateToPixelTransform = frameState.coordinateToPixelTransform;
            var pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;
            compose(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);
            makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);
        };
        /**
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {boolean} checkWrapped Check for wrapped geometries.
         * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
         * @param {S} thisArg Value to use as `this` when executing `callback`.
         * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
         * @return {T|undefined} Callback result.
         * @template S,T,U
         */
        MapRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {
            var result;
            var viewState = frameState.viewState;
            /**
             * @param {boolean} managed Managed layer.
             * @param {import("../Feature.js").FeatureLike} feature Feature.
             * @param {import("../layer/Layer.js").default} layer Layer.
             * @param {import("../geom/Geometry.js").default} geometry Geometry.
             * @return {T|undefined} Callback result.
             */
            function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {
                return callback.call(thisArg, feature, managed ? layer : null, geometry);
            }
            var projection = viewState.projection;
            var translatedCoordinate = wrapX$1(coordinate.slice(), projection);
            var offsets = [[0, 0]];
            if (projection.canWrapX() && checkWrapped) {
                var projectionExtent = projection.getExtent();
                var worldWidth = getWidth(projectionExtent);
                offsets.push([-worldWidth, 0], [worldWidth, 0]);
            }
            var layerStates = frameState.layerStatesArray;
            var numLayers = layerStates.length;
            var matches = /** @type {Array<HitMatch<T>>} */ ([]);
            var tmpCoord = [];
            for (var i = 0; i < offsets.length; i++) {
                for (var j = numLayers - 1; j >= 0; --j) {
                    var layerState = layerStates[j];
                    var layer = layerState.layer;
                    if (layer.hasRenderer() &&
                        inView(layerState, viewState) &&
                        layerFilter.call(thisArg2, layer)) {
                        var layerRenderer = layer.getRenderer();
                        var source = layer.getSource();
                        if (layerRenderer && source) {
                            var coordinates = source.getWrapX()
                                ? translatedCoordinate
                                : coordinate;
                            var callback_1 = forEachFeatureAtCoordinate.bind(null, layerState.managed);
                            tmpCoord[0] = coordinates[0] + offsets[i][0];
                            tmpCoord[1] = coordinates[1] + offsets[i][1];
                            result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback_1, matches);
                        }
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            if (matches.length === 0) {
                return undefined;
            }
            var order = 1 / matches.length;
            matches.forEach(function (m, i) { return (m.distanceSq += i * order); });
            matches.sort(function (a, b) { return a.distanceSq - b.distanceSq; });
            matches.some(function (m) {
                return (result = m.callback(m.feature, m.layer, m.geometry));
            });
            return result;
        };
        /**
         * @abstract
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
         *     callback.
         * @param {function(import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @return {T|undefined} Callback result.
         * @template T
         */
        MapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
            return abstract();
        };
        /**
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {boolean} checkWrapped Check for wrapped geometries.
         * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
         * @return {boolean} Is there a feature at the given coordinate?
         * @template U
         */
        MapRenderer.prototype.hasFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {
            var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, TRUE, this, layerFilter, thisArg);
            return hasFeature !== undefined;
        };
        /**
         * @return {import("../PluggableMap.js").default} Map.
         */
        MapRenderer.prototype.getMap = function () {
            return this.map_;
        };
        /**
         * Render.
         * @abstract
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        MapRenderer.prototype.renderFrame = function (frameState) {
            abstract();
        };
        /**
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        MapRenderer.prototype.scheduleExpireIconCache = function (frameState) {
            if (shared.canExpireCache()) {
                frameState.postRenderFunctions.push(expireIconCache);
            }
        };
        return MapRenderer;
    }(Disposable));
    /**
     * @param {import("../PluggableMap.js").default} map Map.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    function expireIconCache(map, frameState) {
        shared.expire();
    }

    var __extends$E = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Canvas map renderer.
     * @api
     */
    var CompositeMapRenderer = /** @class */ (function (_super) {
        __extends$E(CompositeMapRenderer, _super);
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        function CompositeMapRenderer(map) {
            var _this = _super.call(this, map) || this;
            /**
             * @type {import("../events.js").EventsKey}
             */
            _this.fontChangeListenerKey_ = listen$1(checkedFonts, ObjectEventType.PROPERTYCHANGE, map.redrawText.bind(map));
            /**
             * @private
             * @type {HTMLDivElement}
             */
            _this.element_ = document.createElement('div');
            var style = _this.element_.style;
            style.position = 'absolute';
            style.width = '100%';
            style.height = '100%';
            style.zIndex = '0';
            _this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';
            var container = map.getViewport();
            container.insertBefore(_this.element_, container.firstChild || null);
            /**
             * @private
             * @type {Array<HTMLElement>}
             */
            _this.children_ = [];
            /**
             * @private
             * @type {boolean}
             */
            _this.renderedVisible_ = true;
            return _this;
        }
        /**
         * @param {import("../render/EventType.js").default} type Event type.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        CompositeMapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
            var map = this.getMap();
            if (map.hasListener(type)) {
                var event_1 = new RenderEvent(type, undefined, frameState);
                map.dispatchEvent(event_1);
            }
        };
        CompositeMapRenderer.prototype.disposeInternal = function () {
            unlistenByKey(this.fontChangeListenerKey_);
            this.element_.parentNode.removeChild(this.element_);
            _super.prototype.disposeInternal.call(this);
        };
        /**
         * Render.
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        CompositeMapRenderer.prototype.renderFrame = function (frameState) {
            if (!frameState) {
                if (this.renderedVisible_) {
                    this.element_.style.display = 'none';
                    this.renderedVisible_ = false;
                }
                return;
            }
            this.calculateMatrices2D(frameState);
            this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);
            var layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {
                return a.zIndex - b.zIndex;
            });
            var viewState = frameState.viewState;
            this.children_.length = 0;
            /**
             * @type {Array<import("../layer/BaseVector.js").default>}
             */
            var declutterLayers = [];
            var previousElement = null;
            for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                var layerState = layerStatesArray[i];
                frameState.layerIndex = i;
                if (!inView(layerState, viewState) ||
                    (layerState.sourceState != SourceState.READY &&
                        layerState.sourceState != SourceState.UNDEFINED)) {
                    continue;
                }
                var layer = layerState.layer;
                var element = layer.render(frameState, previousElement);
                if (!element) {
                    continue;
                }
                if (element !== previousElement) {
                    this.children_.push(element);
                    previousElement = element;
                }
                if ('getDeclutter' in layer) {
                    declutterLayers.push(layer);
                }
            }
            for (var i = declutterLayers.length - 1; i >= 0; --i) {
                declutterLayers[i].renderDeclutter(frameState);
            }
            replaceChildren(this.element_, this.children_);
            this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);
            if (!this.renderedVisible_) {
                this.element_.style.display = '';
                this.renderedVisible_ = true;
            }
            this.scheduleExpireIconCache(frameState);
        };
        /**
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
         *     callback.
         * @param {function(import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @return {T|undefined} Callback result.
         * @template T
         */
        CompositeMapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
            var viewState = frameState.viewState;
            var layerStates = frameState.layerStatesArray;
            var numLayers = layerStates.length;
            for (var i = numLayers - 1; i >= 0; --i) {
                var layerState = layerStates[i];
                var layer = layerState.layer;
                if (layer.hasRenderer() &&
                    inView(layerState, viewState) &&
                    layerFilter(layer)) {
                    var layerRenderer = layer.getRenderer();
                    var data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);
                    if (data) {
                        var result = callback(layer, data);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return undefined;
        };
        return CompositeMapRenderer;
    }(MapRenderer));

    var __extends$F = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
     */
    /**
     * @enum {string}
     * @private
     */
    var Property$3 = {
        LAYERS: 'layers',
    };
    /**
     * @classdesc
     * A {@link module:ol/Collection~Collection} of layers that are handled together.
     *
     * A generic `change` event is triggered when the group/Collection changes.
     *
     * @api
     */
    var LayerGroup = /** @class */ (function (_super) {
        __extends$F(LayerGroup, _super);
        /**
         * @param {Options=} opt_options Layer options.
         */
        function LayerGroup(opt_options) {
            var _this = this;
            var options = opt_options || {};
            var baseOptions = /** @type {Options} */ (assign$1({}, options));
            delete baseOptions.layers;
            var layers = options.layers;
            _this = _super.call(this, baseOptions) || this;
            /**
             * @private
             * @type {Array<import("../events.js").EventsKey>}
             */
            _this.layersListenerKeys_ = [];
            /**
             * @private
             * @type {Object<string, Array<import("../events.js").EventsKey>>}
             */
            _this.listenerKeys_ = {};
            _this.addEventListener(getChangeEventType(Property$3.LAYERS), _this.handleLayersChanged_);
            if (layers) {
                if (Array.isArray(layers)) {
                    layers = new Collection(layers.slice(), { unique: true });
                }
                else {
                    assert(typeof ( /** @type {?} */(layers).getArray) === 'function', 43); // Expected `layers` to be an array or a `Collection`
                }
            }
            else {
                layers = new Collection(undefined, { unique: true });
            }
            _this.setLayers(layers);
            return _this;
        }
        /**
         * @private
         */
        LayerGroup.prototype.handleLayerChange_ = function () {
            this.changed();
        };
        /**
         * @private
         */
        LayerGroup.prototype.handleLayersChanged_ = function () {
            this.layersListenerKeys_.forEach(unlistenByKey);
            this.layersListenerKeys_.length = 0;
            var layers = this.getLayers();
            this.layersListenerKeys_.push(listen$1(layers, CollectionEventType.ADD, this.handleLayersAdd_, this), listen$1(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this));
            for (var id in this.listenerKeys_) {
                this.listenerKeys_[id].forEach(unlistenByKey);
            }
            clear(this.listenerKeys_);
            var layersArray = layers.getArray();
            for (var i = 0, ii = layersArray.length; i < ii; i++) {
                var layer = layersArray[i];
                this.listenerKeys_[getUid(layer)] = [
                    listen$1(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
                    listen$1(layer, EventType.CHANGE, this.handleLayerChange_, this),
                ];
            }
            this.changed();
        };
        /**
         * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
         * @private
         */
        LayerGroup.prototype.handleLayersAdd_ = function (collectionEvent) {
            var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
            this.listenerKeys_[getUid(layer)] = [
                listen$1(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
                listen$1(layer, EventType.CHANGE, this.handleLayerChange_, this),
            ];
            this.changed();
        };
        /**
         * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
         * @private
         */
        LayerGroup.prototype.handleLayersRemove_ = function (collectionEvent) {
            var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
            var key = getUid(layer);
            this.listenerKeys_[key].forEach(unlistenByKey);
            delete this.listenerKeys_[key];
            this.changed();
        };
        /**
         * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
         * in this group.
         * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
         *   {@link module:ol/layer/Base layers} that are part of this group.
         * @observable
         * @api
         */
        LayerGroup.prototype.getLayers = function () {
            return /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ (this.get(Property$3.LAYERS));
        };
        /**
         * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
         * in this group.
         * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
         *   {@link module:ol/layer/Base layers} that are part of this group.
         * @observable
         * @api
         */
        LayerGroup.prototype.setLayers = function (layers) {
            this.set(Property$3.LAYERS, layers);
        };
        /**
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        LayerGroup.prototype.getLayersArray = function (opt_array) {
            var array = opt_array !== undefined ? opt_array : [];
            this.getLayers().forEach(function (layer) {
                layer.getLayersArray(array);
            });
            return array;
        };
        /**
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        LayerGroup.prototype.getLayerStatesArray = function (opt_states) {
            var states = opt_states !== undefined ? opt_states : [];
            var pos = states.length;
            this.getLayers().forEach(function (layer) {
                layer.getLayerStatesArray(states);
            });
            var ownLayerState = this.getLayerState();
            for (var i = pos, ii = states.length; i < ii; i++) {
                var layerState = states[i];
                layerState.opacity *= ownLayerState.opacity;
                layerState.visible = layerState.visible && ownLayerState.visible;
                layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);
                layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);
                layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
                layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
                if (ownLayerState.extent !== undefined) {
                    if (layerState.extent !== undefined) {
                        layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);
                    }
                    else {
                        layerState.extent = ownLayerState.extent;
                    }
                }
            }
            return states;
        };
        /**
         * @return {import("../source/State.js").default} Source state.
         */
        LayerGroup.prototype.getSourceState = function () {
            return SourceState.READY;
        };
        return LayerGroup;
    }(BaseLayer));

    var __extends$G = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Events emitted as map events are instances of this type.
     * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
     */
    var MapEvent = /** @class */ (function (_super) {
        __extends$G(MapEvent, _super);
        /**
         * @param {string} type Event type.
         * @param {import("./PluggableMap.js").default} map Map.
         * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
         */
        function MapEvent(type, map, opt_frameState) {
            var _this = _super.call(this, type) || this;
            /**
             * The map where the event occurred.
             * @type {import("./PluggableMap.js").default}
             * @api
             */
            _this.map = map;
            /**
             * The frame state at the time of the event.
             * @type {?import("./PluggableMap.js").FrameState}
             * @api
             */
            _this.frameState = opt_frameState !== undefined ? opt_frameState : null;
            return _this;
        }
        return MapEvent;
    }(BaseEvent));

    var __extends$H = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Events emitted as map browser events are instances of this type.
     * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
     * @template {UIEvent} EVENT
     */
    var MapBrowserEvent = /** @class */ (function (_super) {
        __extends$H(MapBrowserEvent, _super);
        /**
         * @param {string} type Event type.
         * @param {import("./PluggableMap.js").default} map Map.
         * @param {EVENT} originalEvent Original event.
         * @param {boolean=} opt_dragging Is the map currently being dragged?
         * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
         */
        function MapBrowserEvent(type, map, originalEvent, opt_dragging, opt_frameState) {
            var _this = _super.call(this, type, map, opt_frameState) || this;
            /**
             * The original browser event.
             * @const
             * @type {EVENT}
             * @api
             */
            _this.originalEvent = originalEvent;
            /**
             * The map pixel relative to the viewport corresponding to the original browser event.
             * @type {?import("./pixel.js").Pixel}
             */
            _this.pixel_ = null;
            /**
             * The coordinate in the user projection corresponding to the original browser event.
             * @type {?import("./coordinate.js").Coordinate}
             */
            _this.coordinate_ = null;
            /**
             * Indicates if the map is currently being dragged. Only set for
             * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
             *
             * @type {boolean}
             * @api
             */
            _this.dragging = opt_dragging !== undefined ? opt_dragging : false;
            return _this;
        }
        Object.defineProperty(MapBrowserEvent.prototype, "pixel", {
            /**
             * The map pixel relative to the viewport corresponding to the original event.
             * @type {import("./pixel.js").Pixel}
             * @api
             */
            get: function () {
                if (!this.pixel_) {
                    this.pixel_ = this.map.getEventPixel(this.originalEvent);
                }
                return this.pixel_;
            },
            set: function (pixel) {
                this.pixel_ = pixel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MapBrowserEvent.prototype, "coordinate", {
            /**
             * The coordinate corresponding to the original browser event.  This will be in the user
             * projection if one is set.  Otherwise it will be in the view projection.
             * @type {import("./coordinate.js").Coordinate}
             * @api
             */
            get: function () {
                if (!this.coordinate_) {
                    this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
                }
                return this.coordinate_;
            },
            set: function (coordinate) {
                this.coordinate_ = coordinate;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Prevents the default browser action.
         * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
         * @api
         */
        MapBrowserEvent.prototype.preventDefault = function () {
            _super.prototype.preventDefault.call(this);
            this.originalEvent.preventDefault();
        };
        /**
         * Prevents further propagation of the current event.
         * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
         * @api
         */
        MapBrowserEvent.prototype.stopPropagation = function () {
            _super.prototype.stopPropagation.call(this);
            this.originalEvent.stopPropagation();
        };
        return MapBrowserEvent;
    }(MapEvent));

    /**
     * @module ol/MapBrowserEventType
     */
    /**
     * Constants for event names.
     * @enum {string}
     */
    var MapBrowserEventType = {
        /**
         * A true single click with no dragging and no double click. Note that this
         * event is delayed by 250 ms to ensure that it is not a double click.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
         * @api
         */
        SINGLECLICK: 'singleclick',
        /**
         * A click with no dragging. A double click will fire two of this.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
         * @api
         */
        CLICK: EventType.CLICK,
        /**
         * A true double click, with no dragging.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
         * @api
         */
        DBLCLICK: EventType.DBLCLICK,
        /**
         * Triggered when a pointer is dragged.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
         * @api
         */
        POINTERDRAG: 'pointerdrag',
        /**
         * Triggered when a pointer is moved. Note that on touch devices this is
         * triggered when the map is panned, so is not the same as mousemove.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
         * @api
         */
        POINTERMOVE: 'pointermove',
        POINTERDOWN: 'pointerdown',
        POINTERUP: 'pointerup',
        POINTEROVER: 'pointerover',
        POINTEROUT: 'pointerout',
        POINTERENTER: 'pointerenter',
        POINTERLEAVE: 'pointerleave',
        POINTERCANCEL: 'pointercancel',
    };

    /**
     * @module ol/pointer/EventType
     */
    /**
     * Constants for event names.
     * @enum {string}
     */
    var PointerEventType = {
        POINTERMOVE: 'pointermove',
        POINTERDOWN: 'pointerdown',
        POINTERUP: 'pointerup',
        POINTEROVER: 'pointerover',
        POINTEROUT: 'pointerout',
        POINTERENTER: 'pointerenter',
        POINTERLEAVE: 'pointerleave',
        POINTERCANCEL: 'pointercancel',
    };

    /**
     * @module ol/MapBrowserEventHandler
     */
    var __extends$I = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var MapBrowserEventHandler = /** @class */ (function (_super) {
        __extends$I(MapBrowserEventHandler, _super);
        /**
         * @param {import("./PluggableMap.js").default} map The map with the viewport to listen to events on.
         * @param {number=} moveTolerance The minimal distance the pointer must travel to trigger a move.
         */
        function MapBrowserEventHandler(map, moveTolerance) {
            var _this = _super.call(this, map) || this;
            /**
             * This is the element that we will listen to the real events on.
             * @type {import("./PluggableMap.js").default}
             * @private
             */
            _this.map_ = map;
            /**
             * @type {any}
             * @private
             */
            _this.clickTimeoutId_;
            /**
             * Emulate dblclick and singleclick. Will be true when only one pointer is active.
             * @type {boolean}
             */
            _this.emulateClicks_ = false;
            /**
             * @type {boolean}
             * @private
             */
            _this.dragging_ = false;
            /**
             * @type {!Array<import("./events.js").EventsKey>}
             * @private
             */
            _this.dragListenerKeys_ = [];
            /**
             * @type {number}
             * @private
             */
            _this.moveTolerance_ = moveTolerance
                ? moveTolerance * DEVICE_PIXEL_RATIO
                : DEVICE_PIXEL_RATIO;
            /**
             * The most recent "down" type event (or null if none have occurred).
             * Set on pointerdown.
             * @type {PointerEvent}
             * @private
             */
            _this.down_ = null;
            var element = _this.map_.getViewport();
            /**
             * @type {number}
             * @private
             */
            _this.activePointers_ = 0;
            /**
             * @type {!Object<number, boolean>}
             * @private
             */
            _this.trackedTouches_ = {};
            _this.element_ = element;
            /**
             * @type {?import("./events.js").EventsKey}
             * @private
             */
            _this.pointerdownListenerKey_ = listen$1(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);
            /**
             * @type {PointerEvent}
             * @private
             */
            _this.originalPointerMoveEvent_;
            /**
             * @type {?import("./events.js").EventsKey}
             * @private
             */
            _this.relayedListenerKey_ = listen$1(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);
            /**
             * @private
             */
            _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);
            _this.element_.addEventListener(EventType.TOUCHMOVE, _this.boundHandleTouchMove_, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);
            return _this;
        }
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {
            var newEvent = new MapBrowserEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            if (this.clickTimeoutId_ !== undefined) {
                // double-click
                clearTimeout(this.clickTimeoutId_);
                this.clickTimeoutId_ = undefined;
                newEvent = new MapBrowserEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);
                this.dispatchEvent(newEvent);
            }
            else {
                // click
                this.clickTimeoutId_ = setTimeout(
                /** @this {MapBrowserEventHandler} */
                function () {
                    this.clickTimeoutId_ = undefined;
                    var newEvent = new MapBrowserEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);
                    this.dispatchEvent(newEvent);
                }.bind(this), 250);
            }
        };
        /**
         * Keeps track on how many pointers are currently active.
         *
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {
            var event = pointerEvent;
            if (event.type == MapBrowserEventType.POINTERUP ||
                event.type == MapBrowserEventType.POINTERCANCEL) {
                delete this.trackedTouches_[event.pointerId];
            }
            else if (event.type == MapBrowserEventType.POINTERDOWN) {
                this.trackedTouches_[event.pointerId] = true;
            }
            this.activePointers_ = Object.keys(this.trackedTouches_).length;
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {
            this.updateActivePointers_(pointerEvent);
            var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            // We emulate click events on left mouse button click, touch contact, and pen
            // contact. isMouseActionButton returns true in these cases (evt.button is set
            // to 0).
            // See http://www.w3.org/TR/pointerevents/#button-states
            // We only fire click, singleclick, and doubleclick if nobody has called
            // event.stopPropagation() or event.preventDefault().
            if (this.emulateClicks_ &&
                !newEvent.propagationStopped &&
                !this.dragging_ &&
                this.isMouseActionButton_(pointerEvent)) {
                this.emulateClick_(this.down_);
            }
            if (this.activePointers_ === 0) {
                this.dragListenerKeys_.forEach(unlistenByKey);
                this.dragListenerKeys_.length = 0;
                this.dragging_ = false;
                this.down_ = null;
            }
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @return {boolean} If the left mouse button was pressed.
         * @private
         */
        MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {
            return pointerEvent.button === 0;
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {
            this.emulateClicks_ = this.activePointers_ === 0;
            this.updateActivePointers_(pointerEvent);
            var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            this.down_ = pointerEvent;
            if (this.dragListenerKeys_.length === 0) {
                var doc = this.map_.getOwnerDocument();
                this.dragListenerKeys_.push(listen$1(doc, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen$1(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this), 
                /* Note that the listener for `pointercancel is set up on
                 * `pointerEventHandler_` and not `documentPointerEventHandler_` like
                 * the `pointerup` and `pointermove` listeners.
                 *
                 * The reason for this is the following: `TouchSource.vacuumTouches_()`
                 * issues `pointercancel` events, when there was no `touchend` for a
                 * `touchstart`. Now, let's say a first `touchstart` is registered on
                 * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
                 * But `documentPointerEventHandler_` doesn't know about the first
                 * `touchstart`. If there is no `touchend` for the `touchstart`, we can
                 * only receive a `touchcancel` from `pointerEventHandler_`, because it is
                 * only registered there.
                 */
                listen$1(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));
                if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {
                    this.dragListenerKeys_.push(listen$1(this.element_.getRootNode(), MapBrowserEventType.POINTERUP, this.handlePointerUp_, this));
                }
            }
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {
            // Between pointerdown and pointerup, pointermove events are triggered.
            // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
            // moved a significant distance.
            if (this.isMoving_(pointerEvent)) {
                this.dragging_ = true;
                var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);
                this.dispatchEvent(newEvent);
            }
        };
        /**
         * Wrap and relay a pointer event.  Note that this requires that the type
         * string for the MapBrowserEvent matches the PointerEvent type.
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {
            this.originalPointerMoveEvent_ = pointerEvent;
            var dragging = !!(this.down_ && this.isMoving_(pointerEvent));
            this.dispatchEvent(new MapBrowserEvent(pointerEvent.type, this.map_, pointerEvent, dragging));
        };
        /**
         * Flexible handling of a `touch-action: none` css equivalent: because calling
         * `preventDefault()` on a `pointermove` event does not stop native page scrolling
         * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
         * when an interaction (currently `DragPan` handles the event.
         * @param {TouchEvent} event Event.
         * @private
         */
        MapBrowserEventHandler.prototype.handleTouchMove_ = function (event) {
            // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`
            // may not be initialized yet when we get here on a platform without native pointer events.
            if (!this.originalPointerMoveEvent_ ||
                this.originalPointerMoveEvent_.defaultPrevented) {
                event.preventDefault();
            }
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @return {boolean} Is moving.
         * @private
         */
        MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {
            return (this.dragging_ ||
                Math.abs(pointerEvent.clientX - this.down_.clientX) >
                    this.moveTolerance_ ||
                Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_);
        };
        /**
         * Clean up.
         */
        MapBrowserEventHandler.prototype.disposeInternal = function () {
            if (this.relayedListenerKey_) {
                unlistenByKey(this.relayedListenerKey_);
                this.relayedListenerKey_ = null;
            }
            this.element_.removeEventListener(EventType.TOUCHMOVE, this.boundHandleTouchMove_);
            if (this.pointerdownListenerKey_) {
                unlistenByKey(this.pointerdownListenerKey_);
                this.pointerdownListenerKey_ = null;
            }
            this.dragListenerKeys_.forEach(unlistenByKey);
            this.dragListenerKeys_.length = 0;
            this.element_ = null;
            _super.prototype.disposeInternal.call(this);
        };
        return MapBrowserEventHandler;
    }(Target));

    /**
     * @module ol/MapEventType
     */
    /**
     * @enum {string}
     */
    var MapEventType = {
        /**
         * Triggered after a map frame is rendered.
         * @event module:ol/MapEvent~MapEvent#postrender
         * @api
         */
        POSTRENDER: 'postrender',
        /**
         * Triggered when the map starts moving.
         * @event module:ol/MapEvent~MapEvent#movestart
         * @api
         */
        MOVESTART: 'movestart',
        /**
         * Triggered after the map is moved.
         * @event module:ol/MapEvent~MapEvent#moveend
         * @api
         */
        MOVEEND: 'moveend',
    };

    /**
     * @module ol/MapProperty
     */
    /**
     * @enum {string}
     */
    var MapProperty = {
        LAYERGROUP: 'layergroup',
        SIZE: 'size',
        TARGET: 'target',
        VIEW: 'view',
    };

    /**
     * @module ol/structs/PriorityQueue
     */
    /**
     * @type {number}
     */
    var DROP = Infinity;
    /**
     * @classdesc
     * Priority queue.
     *
     * The implementation is inspired from the Closure Library's Heap class and
     * Python's heapq module.
     *
     * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
     * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.
     *
     * @template T
     */
    var PriorityQueue = /** @class */ (function () {
        /**
         * @param {function(T): number} priorityFunction Priority function.
         * @param {function(T): string} keyFunction Key function.
         */
        function PriorityQueue(priorityFunction, keyFunction) {
            /**
             * @type {function(T): number}
             * @private
             */
            this.priorityFunction_ = priorityFunction;
            /**
             * @type {function(T): string}
             * @private
             */
            this.keyFunction_ = keyFunction;
            /**
             * @type {Array<T>}
             * @private
             */
            this.elements_ = [];
            /**
             * @type {Array<number>}
             * @private
             */
            this.priorities_ = [];
            /**
             * @type {!Object<string, boolean>}
             * @private
             */
            this.queuedElements_ = {};
        }
        /**
         * FIXME empty description for jsdoc
         */
        PriorityQueue.prototype.clear = function () {
            this.elements_.length = 0;
            this.priorities_.length = 0;
            clear(this.queuedElements_);
        };
        /**
         * Remove and return the highest-priority element. O(log N).
         * @return {T} Element.
         */
        PriorityQueue.prototype.dequeue = function () {
            var elements = this.elements_;
            var priorities = this.priorities_;
            var element = elements[0];
            if (elements.length == 1) {
                elements.length = 0;
                priorities.length = 0;
            }
            else {
                elements[0] = elements.pop();
                priorities[0] = priorities.pop();
                this.siftUp_(0);
            }
            var elementKey = this.keyFunction_(element);
            delete this.queuedElements_[elementKey];
            return element;
        };
        /**
         * Enqueue an element. O(log N).
         * @param {T} element Element.
         * @return {boolean} The element was added to the queue.
         */
        PriorityQueue.prototype.enqueue = function (element) {
            assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue
            var priority = this.priorityFunction_(element);
            if (priority != DROP) {
                this.elements_.push(element);
                this.priorities_.push(priority);
                this.queuedElements_[this.keyFunction_(element)] = true;
                this.siftDown_(0, this.elements_.length - 1);
                return true;
            }
            return false;
        };
        /**
         * @return {number} Count.
         */
        PriorityQueue.prototype.getCount = function () {
            return this.elements_.length;
        };
        /**
         * Gets the index of the left child of the node at the given index.
         * @param {number} index The index of the node to get the left child for.
         * @return {number} The index of the left child.
         * @private
         */
        PriorityQueue.prototype.getLeftChildIndex_ = function (index) {
            return index * 2 + 1;
        };
        /**
         * Gets the index of the right child of the node at the given index.
         * @param {number} index The index of the node to get the right child for.
         * @return {number} The index of the right child.
         * @private
         */
        PriorityQueue.prototype.getRightChildIndex_ = function (index) {
            return index * 2 + 2;
        };
        /**
         * Gets the index of the parent of the node at the given index.
         * @param {number} index The index of the node to get the parent for.
         * @return {number} The index of the parent.
         * @private
         */
        PriorityQueue.prototype.getParentIndex_ = function (index) {
            return (index - 1) >> 1;
        };
        /**
         * Make this a heap. O(N).
         * @private
         */
        PriorityQueue.prototype.heapify_ = function () {
            var i;
            for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
                this.siftUp_(i);
            }
        };
        /**
         * @return {boolean} Is empty.
         */
        PriorityQueue.prototype.isEmpty = function () {
            return this.elements_.length === 0;
        };
        /**
         * @param {string} key Key.
         * @return {boolean} Is key queued.
         */
        PriorityQueue.prototype.isKeyQueued = function (key) {
            return key in this.queuedElements_;
        };
        /**
         * @param {T} element Element.
         * @return {boolean} Is queued.
         */
        PriorityQueue.prototype.isQueued = function (element) {
            return this.isKeyQueued(this.keyFunction_(element));
        };
        /**
         * @param {number} index The index of the node to move down.
         * @private
         */
        PriorityQueue.prototype.siftUp_ = function (index) {
            var elements = this.elements_;
            var priorities = this.priorities_;
            var count = elements.length;
            var element = elements[index];
            var priority = priorities[index];
            var startIndex = index;
            while (index < count >> 1) {
                var lIndex = this.getLeftChildIndex_(index);
                var rIndex = this.getRightChildIndex_(index);
                var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex]
                    ? rIndex
                    : lIndex;
                elements[index] = elements[smallerChildIndex];
                priorities[index] = priorities[smallerChildIndex];
                index = smallerChildIndex;
            }
            elements[index] = element;
            priorities[index] = priority;
            this.siftDown_(startIndex, index);
        };
        /**
         * @param {number} startIndex The index of the root.
         * @param {number} index The index of the node to move up.
         * @private
         */
        PriorityQueue.prototype.siftDown_ = function (startIndex, index) {
            var elements = this.elements_;
            var priorities = this.priorities_;
            var element = elements[index];
            var priority = priorities[index];
            while (index > startIndex) {
                var parentIndex = this.getParentIndex_(index);
                if (priorities[parentIndex] > priority) {
                    elements[index] = elements[parentIndex];
                    priorities[index] = priorities[parentIndex];
                    index = parentIndex;
                }
                else {
                    break;
                }
            }
            elements[index] = element;
            priorities[index] = priority;
        };
        /**
         * FIXME empty description for jsdoc
         */
        PriorityQueue.prototype.reprioritize = function () {
            var priorityFunction = this.priorityFunction_;
            var elements = this.elements_;
            var priorities = this.priorities_;
            var index = 0;
            var n = elements.length;
            var element, i, priority;
            for (i = 0; i < n; ++i) {
                element = elements[i];
                priority = priorityFunction(element);
                if (priority == DROP) {
                    delete this.queuedElements_[this.keyFunction_(element)];
                }
                else {
                    priorities[index] = priority;
                    elements[index++] = element;
                }
            }
            elements.length = index;
            priorities.length = index;
            this.heapify_();
        };
        return PriorityQueue;
    }());

    var __extends$J = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
     */
    var TileQueue = /** @class */ (function (_super) {
        __extends$J(TileQueue, _super);
        /**
         * @param {PriorityFunction} tilePriorityFunction Tile priority function.
         * @param {function(): ?} tileChangeCallback Function called on each tile change event.
         */
        function TileQueue(tilePriorityFunction, tileChangeCallback) {
            var _this = _super.call(this, 
            /**
             * @param {Array} element Element.
             * @return {number} Priority.
             */
            function (element) {
                return tilePriorityFunction.apply(null, element);
            }, 
            /**
             * @param {Array} element Element.
             * @return {string} Key.
             */
            function (element) {
                return /** @type {import("./Tile.js").default} */ (element[0]).getKey();
            }) || this;
            /** @private */
            _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);
            /**
             * @private
             * @type {function(): ?}
             */
            _this.tileChangeCallback_ = tileChangeCallback;
            /**
             * @private
             * @type {number}
             */
            _this.tilesLoading_ = 0;
            /**
             * @private
             * @type {!Object<string,boolean>}
             */
            _this.tilesLoadingKeys_ = {};
            return _this;
        }
        /**
         * @param {Array} element Element.
         * @return {boolean} The element was added to the queue.
         */
        TileQueue.prototype.enqueue = function (element) {
            var added = _super.prototype.enqueue.call(this, element);
            if (added) {
                var tile = element[0];
                tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);
            }
            return added;
        };
        /**
         * @return {number} Number of tiles loading.
         */
        TileQueue.prototype.getTilesLoading = function () {
            return this.tilesLoading_;
        };
        /**
         * @param {import("./events/Event.js").default} event Event.
         * @protected
         */
        TileQueue.prototype.handleTileChange = function (event) {
            var tile = /** @type {import("./Tile.js").default} */ (event.target);
            var state = tile.getState();
            if ((tile.hifi && state === TileState.LOADED) ||
                state === TileState.ERROR ||
                state === TileState.EMPTY) {
                tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);
                var tileKey = tile.getKey();
                if (tileKey in this.tilesLoadingKeys_) {
                    delete this.tilesLoadingKeys_[tileKey];
                    --this.tilesLoading_;
                }
                this.tileChangeCallback_();
            }
        };
        /**
         * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
         * @param {number} maxNewLoads Maximum number of new tiles to load.
         */
        TileQueue.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {
            var newLoads = 0;
            var state, tile, tileKey;
            while (this.tilesLoading_ < maxTotalLoading &&
                newLoads < maxNewLoads &&
                this.getCount() > 0) {
                tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
                tileKey = tile.getKey();
                state = tile.getState();
                if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
                    this.tilesLoadingKeys_[tileKey] = true;
                    ++this.tilesLoading_;
                    ++newLoads;
                    tile.load();
                }
            }
        };
        return TileQueue;
    }(PriorityQueue));
    /**
     * @param {import('./PluggableMap.js').FrameState} frameState Frame state.
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */
    function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {
        // Filter out tiles at higher zoom levels than the current zoom level, or that
        // are outside the visible extent.
        if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
            return DROP;
        }
        if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
            return DROP;
        }
        // Prioritize the highest zoom level tiles closest to the focus.
        // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
        // Within a zoom level, tiles are prioritized by the distance in pixels between
        // the center of the tile and the center of the viewport.  The factor of 65536
        // means that the prioritization should behave as desired for tiles up to
        // 65536 * Math.log(2) = 45426 pixels from the focus.
        var center = frameState.viewState.center;
        var deltaX = tileCenter[0] - center[0];
        var deltaY = tileCenter[1] - center[1];
        return (65536 * Math.log(tileResolution) +
            Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution);
    }

    /**
     * @module ol/ViewProperty
     */
    /**
     * @enum {string}
     */
    var ViewProperty = {
        CENTER: 'center',
        RESOLUTION: 'resolution',
        ROTATION: 'rotation',
    };

    /**
     * @module ol/tilegrid/common
     */
    /**
     * Default maximum zoom for default tile grids.
     * @type {number}
     */
    var DEFAULT_MAX_ZOOM = 42;
    /**
     * Default tile size.
     * @type {number}
     */
    var DEFAULT_TILE_SIZE = 256;

    /**
     * @module ol/centerconstraint
     */
    /**
     * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=, Array<number>=): (import("./coordinate.js").Coordinate|undefined)} Type
     */
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
     * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
     * (only during interaction and animation).
     * @return {Type} The constraint.
     */
    function createExtent(extent, onlyCenter, smooth) {
        return (
        /**
         * @param {import("./coordinate.js").Coordinate|undefined} center Center.
         * @param {number} resolution Resolution.
         * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @param {Array<number>=} opt_centerShift Shift between map center and viewport center.
         * @return {import("./coordinate.js").Coordinate|undefined} Center.
         */
        function (center, resolution, size, opt_isMoving, opt_centerShift) {
            if (center) {
                var viewWidth = onlyCenter ? 0 : size[0] * resolution;
                var viewHeight = onlyCenter ? 0 : size[1] * resolution;
                var shiftX = opt_centerShift ? opt_centerShift[0] : 0;
                var shiftY = opt_centerShift ? opt_centerShift[1] : 0;
                var minX = extent[0] + viewWidth / 2 + shiftX;
                var maxX = extent[2] - viewWidth / 2 + shiftX;
                var minY = extent[1] + viewHeight / 2 + shiftY;
                var maxY = extent[3] - viewHeight / 2 + shiftY;
                // note: when zooming out of bounds, min and max values for x and y may
                // end up inverted (min > max); this has to be accounted for
                if (minX > maxX) {
                    minX = (maxX + minX) / 2;
                    maxX = minX;
                }
                if (minY > maxY) {
                    minY = (maxY + minY) / 2;
                    maxY = minY;
                }
                var x = clamp(center[0], minX, maxX);
                var y = clamp(center[1], minY, maxY);
                var ratio = 30 * resolution;
                // during an interaction, allow some overscroll
                if (opt_isMoving && smooth) {
                    x +=
                        -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +
                            ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
                    y +=
                        -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +
                            ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
                }
                return [x, y];
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {import("./coordinate.js").Coordinate=} center Center.
     * @return {import("./coordinate.js").Coordinate|undefined} Center.
     */
    function none(center) {
        return center;
    }

    /**
     * @module ol/resolutionconstraint
     */
    /**
     * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
     */
    /**
     * Returns a modified resolution taking into account the viewport size and maximum
     * allowed extent.
     * @param {number} resolution Resolution
     * @param {import("./extent.js").Extent} maxExtent Maximum allowed extent.
     * @param {import("./size.js").Size} viewportSize Viewport size.
     * @param {boolean} showFullExtent Whether to show the full extent.
     * @return {number} Capped resolution.
     */
    function getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {
        var xResolution = getWidth(maxExtent) / viewportSize[0];
        var yResolution = getHeight(maxExtent) / viewportSize[1];
        if (showFullExtent) {
            return Math.min(resolution, Math.max(xResolution, yResolution));
        }
        return Math.min(resolution, Math.min(xResolution, yResolution));
    }
    /**
     * Returns a modified resolution to be between maxResolution and minResolution while
     * still allowing the value to be slightly out of bounds.
     * Note: the computation is based on the logarithm function (ln):
     *  - at 1, ln(x) is 0
     *  - above 1, ln(x) keeps increasing but at a much slower pace than x
     * The final result is clamped to prevent getting too far away from bounds.
     * @param {number} resolution Resolution.
     * @param {number} maxResolution Max resolution.
     * @param {number} minResolution Min resolution.
     * @return {number} Smoothed resolution.
     */
    function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
        var result = Math.min(resolution, maxResolution);
        var ratio = 50;
        result *=
            Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +
                1;
        if (minResolution) {
            result = Math.max(result, minResolution);
            result /=
                Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /
                    ratio +
                    1;
        }
        return clamp(result, minResolution / 2, maxResolution * 2);
    }
    /**
     * @param {Array<number>} resolutions Resolutions.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createSnapToResolutions(resolutions, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                var maxResolution = resolutions[0];
                var minResolution = resolutions[resolutions.length - 1];
                var cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                // during interacting or animating, allow intermediary values
                if (opt_isMoving) {
                    var smooth = opt_smooth !== undefined ? opt_smooth : true;
                    if (!smooth) {
                        return clamp(resolution, minResolution, cappedMaxRes);
                    }
                    return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
                }
                var capped = Math.min(cappedMaxRes, resolution);
                var z = Math.floor(linearFindNearest(resolutions, capped, direction));
                if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {
                    return resolutions[z + 1];
                }
                return resolutions[z];
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {number} power Power.
     * @param {number} maxResolution Maximum resolution.
     * @param {number=} opt_minResolution Minimum resolution.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createSnapToPower(power, maxResolution, opt_minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                var cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                var minResolution = opt_minResolution !== undefined ? opt_minResolution : 0;
                // during interacting or animating, allow intermediary values
                if (opt_isMoving) {
                    var smooth = opt_smooth !== undefined ? opt_smooth : true;
                    if (!smooth) {
                        return clamp(resolution, minResolution, cappedMaxRes);
                    }
                    return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
                }
                var tolerance = 1e-9;
                var minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);
                var offset = -direction * (0.5 - tolerance) + 0.5;
                var capped = Math.min(cappedMaxRes, resolution);
                var cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);
                var zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
                var newResolution = maxResolution / Math.pow(power, zoomLevel);
                return clamp(newResolution, minResolution, cappedMaxRes);
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {number} maxResolution Max resolution.
     * @param {number} minResolution Min resolution.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createMinMaxResolution(maxResolution, minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                var cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                var smooth = opt_smooth !== undefined ? opt_smooth : true;
                if (!smooth || !opt_isMoving) {
                    return clamp(resolution, minResolution, cappedMaxRes);
                }
                return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
            }
            else {
                return undefined;
            }
        });
    }

    /**
     * @module ol/rotationconstraint
     */
    /**
     * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
     */
    /**
     * @param {number|undefined} rotation Rotation.
     * @return {number|undefined} Rotation.
     */
    function disable(rotation) {
        if (rotation !== undefined) {
            return 0;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {number|undefined} rotation Rotation.
     * @return {number|undefined} Rotation.
     */
    function none$1(rotation) {
        if (rotation !== undefined) {
            return rotation;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {number} n N.
     * @return {Type} Rotation constraint.
     */
    function createSnapToN(n) {
        var theta = (2 * Math.PI) / n;
        return (
        /**
         * @param {number|undefined} rotation Rotation.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Rotation.
         */
        function (rotation, opt_isMoving) {
            if (opt_isMoving) {
                return rotation;
            }
            if (rotation !== undefined) {
                rotation = Math.floor(rotation / theta + 0.5) * theta;
                return rotation;
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {number=} opt_tolerance Tolerance.
     * @return {Type} Rotation constraint.
     */
    function createSnapToZero(opt_tolerance) {
        var tolerance = opt_tolerance || toRadians(5);
        return (
        /**
         * @param {number|undefined} rotation Rotation.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Rotation.
         */
        function (rotation, opt_isMoving) {
            if (opt_isMoving) {
                return rotation;
            }
            if (rotation !== undefined) {
                if (Math.abs(rotation) <= tolerance) {
                    return 0;
                }
                else {
                    return rotation;
                }
            }
            else {
                return undefined;
            }
        });
    }

    var __extends$K = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * An animation configuration
     *
     * @typedef {Object} Animation
     * @property {import("./coordinate.js").Coordinate} [sourceCenter]
     * @property {import("./coordinate.js").Coordinate} [targetCenter]
     * @property {number} [sourceResolution]
     * @property {number} [targetResolution]
     * @property {number} [sourceRotation]
     * @property {number} [targetRotation]
     * @property {import("./coordinate.js").Coordinate} [anchor]
     * @property {number} start
     * @property {number} duration
     * @property {boolean} complete
     * @property {function(number):number} easing
     * @property {function(boolean):void} callback
     */
    /**
     * @typedef {Object} Constraints
     * @property {import("./centerconstraint.js").Type} center
     * @property {import("./resolutionconstraint.js").Type} resolution
     * @property {import("./rotationconstraint.js").Type} rotation
     */
    /**
     * @typedef {Object} FitOptions
     * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
     * the extent into. Default is the current size of the first map in the DOM that
     * uses this view, or `[100, 100]` if no such map is found.
     * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
     * cleared inside the view. Values in the array are top, right, bottom and left
     * padding.
     * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
     * get the nearest extent instead of the closest that actually fits the view.
     * @property {number} [minResolution=0] Minimum resolution that we zoom to.
     * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
     * `minResolution` is given, this property is ignored.
     * @property {number} [duration] The duration of the animation in milliseconds.
     * By default, there is no animation to the target extent.
     * @property {function(number):number} [easing] The easing function used during
     * the animation (defaults to {@link module:ol/easing~inAndOut}).
     * The function will be called for each frame with a number representing a
     * fraction of the animation's duration.  The function should return a number
     * between 0 and 1 representing the progress toward the destination state.
     * @property {function(boolean):void} [callback] Function called when the view is in
     * its final position. The callback will be called with `true` if the animation
     * series completed on its own or `false` if it was cancelled.
     */
    /**
     * @typedef {Object} ViewOptions
     * @property {import("./coordinate.js").Coordinate} [center] The initial center for
     * the view. If a user projection is not set, the coordinate system for the center is
     * specified with the `projection` option. Layer sources will not be fetched if this
     * is not set, but the center can be set later with {@link #setCenter}.
     * @property {boolean|number} [constrainRotation=true] Rotation constraint.
     * `false` means no constraint. `true` means no constraint, but snap to zero
     * near zero. A number constrains the rotation to that number of values. For
     * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
     * @property {boolean} [enableRotation=true] Enable rotation.
     * If `false`, a rotation constraint that always sets the rotation to zero is
     * used. The `constrainRotation` option has no effect if `enableRotation` is
     * `false`.
     * @property {import("./extent.js").Extent} [extent] The extent that constrains the
     * view, in other words, nothing outside of this extent can be visible on the map.
     * @property {boolean} [constrainOnlyCenter=false] If true, the extent
     * constraint will only apply to the view center and not the whole extent.
     * @property {boolean} [smoothExtentConstraint=true] If true, the extent
     * constraint will be applied smoothly, i.e. allow the view to go slightly outside
     * of the given `extent`.
     * @property {number} [maxResolution] The maximum resolution used to determine
     * the resolution constraint. It is used together with `minResolution` (or
     * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
     * that the projection's validity extent fits in a 256x256 px tile. If the
     * projection is Spherical Mercator (the default) then `maxResolution` defaults
     * to `40075016.68557849 / 256 = 156543.03392804097`.
     * @property {number} [minResolution] The minimum resolution used to determine
     * the resolution constraint.  It is used together with `maxResolution` (or
     * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
     * zoom levels (with a factor of 2). If the projection is Spherical Mercator
     * (the default) then `minResolution` defaults to
     * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
     * @property {number} [maxZoom=28] The maximum zoom level used to determine the
     * resolution constraint. It is used together with `minZoom` (or
     * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
     * provided, it is given precedence over `maxZoom`.
     * @property {number} [minZoom=0] The minimum zoom level used to determine the
     * resolution constraint. It is used together with `maxZoom` (or
     * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
     * provided, it is given precedence over `minZoom`.
     * @property {boolean} [multiWorld=false] If `false` the view is constrained so
     * only one world is visible, and you cannot pan off the edge.  If `true` the map
     * may show multiple worlds at low zoom levels.  Only used if the `projection` is
     * global.  Note that if `extent` is also provided it is given precedence.
     * @property {boolean} [constrainResolution=false] If true, the view will always
     * animate to the closest zoom level after an interaction; false means
     * intermediary zoom levels are allowed.
     * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
     * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
     * the given resolution or zoom bounds.
     * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to
     * show the full configured extent. By default, when a view is configured with an
     * extent, users will not be able to zoom out so the viewport exceeds the extent in
     * either dimension. This means the full extent may not be visible if the viewport
     * is taller or wider than the aspect ratio of the configured extent. If
     * showFullExtent is true, the user will be able to zoom out so that the viewport
     * exceeds the height or width of the configured extent, but not both, allowing the
     * full extent to be shown.
     * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
     * projection. The default is Spherical Mercator.
     * @property {number} [resolution] The initial resolution for the view. The
     * units are `projection` units per pixel (e.g. meters per pixel). An
     * alternative to setting this is to set `zoom`. Layer sources will not be
     * fetched if neither this nor `zoom` are defined, but they can be set later
     * with {@link #setZoom} or {@link #setResolution}.
     * @property {Array<number>} [resolutions] Resolutions to determine the
     * resolution constraint. If set the `maxResolution`, `minResolution`,
     * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
     * @property {number} [rotation=0] The initial rotation for the view in radians
     * (positive rotation clockwise, 0 means North).
     * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
     * level used to calculate the initial resolution for the view.
     * @property {number} [zoomFactor=2] The zoom factor used to compute the
     * corresponding resolution.
     * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).
     * If the map viewport is partially covered with other content (overlays) along
     * its edges, this setting allows to shift the center of the viewport away from
     * that content. The order of the values is top, right, bottom, left.
     */
    /**
     * @typedef {Object} AnimationOptions
     * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
     * the animation.
     * @property {number} [zoom] The zoom level of the view at the end of the
     * animation. This takes precedence over `resolution`.
     * @property {number} [resolution] The resolution of the view at the end
     * of the animation.  If `zoom` is also provided, this option will be ignored.
     * @property {number} [rotation] The rotation of the view at the end of
     * the animation.
     * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
     * during a rotation or resolution animation.
     * @property {number} [duration=1000] The duration of the animation in milliseconds.
     * @property {function(number):number} [easing] The easing function used
     * during the animation (defaults to {@link module:ol/easing~inAndOut}).
     * The function will be called for each frame with a number representing a
     * fraction of the animation's duration.  The function should return a number
     * between 0 and 1 representing the progress toward the destination state.
     */
    /**
     * @typedef {Object} State
     * @property {import("./coordinate.js").Coordinate} center
     * @property {import("./proj/Projection.js").default} projection
     * @property {number} resolution
     * @property {number} rotation
     * @property {number} zoom
     */
    /**
     * Default min zoom level for the map view.
     * @type {number}
     */
    var DEFAULT_MIN_ZOOM = 0;
    /**
     * @classdesc
     * A View object represents a simple 2D view of the map.
     *
     * This is the object to act upon to change the center, resolution,
     * and rotation of the map.
     *
     * A View has a `projection`. The projection determines the
     * coordinate system of the center, and its units determine the units of the
     * resolution (projection units per pixel). The default projection is
     * Spherical Mercator (EPSG:3857).
     *
     * ### The view states
     *
     * A View is determined by three states: `center`, `resolution`,
     * and `rotation`. Each state has a corresponding getter and setter, e.g.
     * `getCenter` and `setCenter` for the `center` state.
     *
     * The `zoom` state is actually not saved on the view: all computations
     * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
     * methods are available, as well as `getResolutionForZoom` and
     * `getZoomForResolution` to switch from one system to the other.
     *
     * ### The constraints
     *
     * `setCenter`, `setResolution` and `setRotation` can be used to change the
     * states of the view, but any constraint defined in the constructor will
     * be applied along the way.
     *
     * A View object can have a *resolution constraint*, a *rotation constraint*
     * and a *center constraint*.
     *
     * The *resolution constraint* typically restricts min/max values and
     * snaps to specific resolutions. It is determined by the following
     * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
     * If `resolutions` is set, the other three options are ignored. See
     * documentation for each option for more information. By default, the view
     * only has a min/max restriction and allow intermediary zoom levels when
     * pinch-zooming for example.
     *
     * The *rotation constraint* snaps to specific angles. It is determined
     * by the following options: `enableRotation` and `constrainRotation`.
     * By default rotation is allowed and its value is snapped to zero when approaching the
     * horizontal.
     *
     * The *center constraint* is determined by the `extent` option. By
     * default the view center is not constrained at all.
     *
     * ### Changing the view state
     *
     * It is important to note that `setZoom`, `setResolution`, `setCenter` and
     * `setRotation` are subject to the above mentioned constraints. As such, it
     * may sometimes not be possible to know in advance the resulting state of the
     * View. For example, calling `setResolution(10)` does not guarantee that
     * `getResolution()` will return `10`.
     *
     * A consequence of this is that, when applying a delta on the view state, one
     * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
     * rather than the corresponding setters. This will let view do its internal
     * computations. Besides, the `adjust*` methods also take an `opt_anchor`
     * argument which allows specifying an origin for the transformation.
     *
     * ### Interacting with the view
     *
     * View constraints are usually only applied when the view is *at rest*, meaning that
     * no interaction or animation is ongoing. As such, if the user puts the view in a
     * state that is not equivalent to a constrained one (e.g. rotating the view when
     * the snap angle is 0), an animation will be triggered at the interaction end to
     * put back the view to a stable state;
     *
     * @api
     */
    var View = /** @class */ (function (_super) {
        __extends$K(View, _super);
        /**
         * @param {ViewOptions=} opt_options View options.
         */
        function View(opt_options) {
            var _this = _super.call(this) || this;
            var options = assign$1({}, opt_options);
            /**
             * @private
             * @type {Array<number>}
             */
            _this.hints_ = [0, 0];
            /**
             * @private
             * @type {Array<Array<Animation>>}
             */
            _this.animations_ = [];
            /**
             * @private
             * @type {number|undefined}
             */
            _this.updateAnimationKey_;
            /**
             * @private
             * @const
             * @type {import("./proj/Projection.js").default}
             */
            _this.projection_ = createProjection(options.projection, 'EPSG:3857');
            /**
             * @private
             * @type {import("./size.js").Size}
             */
            _this.viewportSize_ = [100, 100];
            /**
             * @private
             * @type {import("./coordinate.js").Coordinate|undefined}
             */
            _this.targetCenter_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.targetResolution_;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.targetRotation_;
            /**
             * @private
             * @type {import("./coordinate.js").Coordinate|undefined}
             */
            _this.cancelAnchor_ = undefined;
            if (options.center) {
                options.center = fromUserCoordinate(options.center, _this.projection_);
            }
            if (options.extent) {
                options.extent = fromUserExtent(options.extent, _this.projection_);
            }
            _this.applyOptions_(options);
            return _this;
        }
        /**
         * Set up the view with the given options.
         * @param {ViewOptions} options View options.
         */
        View.prototype.applyOptions_ = function (options) {
            /**
             * @type {Object<string, *>}
             */
            var properties = {};
            var resolutionConstraintInfo = createResolutionConstraint(options);
            /**
             * @private
             * @type {number}
             */
            this.maxResolution_ = resolutionConstraintInfo.maxResolution;
            /**
             * @private
             * @type {number}
             */
            this.minResolution_ = resolutionConstraintInfo.minResolution;
            /**
             * @private
             * @type {number}
             */
            this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;
            /**
             * @private
             * @type {Array<number>|undefined}
             */
            this.resolutions_ = options.resolutions;
            /**
             * Padding (in css pixels).
             * If the map viewport is partially covered with other content (overlays) along
             * its edges, this setting allows to shift the center of the viewport away from that
             * content. The order of the values in the array is top, right, bottom, left.
             * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.
             * @type {Array<number>|undefined}
             * @api
             */
            this.padding = options.padding;
            /**
             * @private
             * @type {number}
             */
            this.minZoom_ = resolutionConstraintInfo.minZoom;
            var centerConstraint = createCenterConstraint(options);
            var resolutionConstraint = resolutionConstraintInfo.constraint;
            var rotationConstraint = createRotationConstraint(options);
            /**
             * @private
             * @type {Constraints}
             */
            this.constraints_ = {
                center: centerConstraint,
                resolution: resolutionConstraint,
                rotation: rotationConstraint,
            };
            this.setRotation(options.rotation !== undefined ? options.rotation : 0);
            this.setCenterInternal(options.center !== undefined ? options.center : null);
            if (options.resolution !== undefined) {
                this.setResolution(options.resolution);
            }
            else if (options.zoom !== undefined) {
                this.setZoom(options.zoom);
            }
            this.setProperties(properties);
            /**
             * @private
             * @type {ViewOptions}
             */
            this.options_ = options;
        };
        /**
         * Get an updated version of the view options used to construct the view.  The
         * current resolution (or zoom), center, and rotation are applied to any stored
         * options.  The provided options can be used to apply new min/max zoom or
         * resolution limits.
         * @param {ViewOptions} newOptions New options to be applied.
         * @return {ViewOptions} New options updated with the current view state.
         */
        View.prototype.getUpdatedOptions_ = function (newOptions) {
            var options = assign$1({}, this.options_);
            // preserve resolution (or zoom)
            if (options.resolution !== undefined) {
                options.resolution = this.getResolution();
            }
            else {
                options.zoom = this.getZoom();
            }
            // preserve center
            options.center = this.getCenterInternal();
            // preserve rotation
            options.rotation = this.getRotation();
            return assign$1({}, options, newOptions);
        };
        /**
         * Animate the view.  The view's center, zoom (or resolution), and rotation
         * can be animated for smooth transitions between view states.  For example,
         * to animate the view to a new zoom level:
         *
         *     view.animate({zoom: view.getZoom() + 1});
         *
         * By default, the animation lasts one second and uses in-and-out easing.  You
         * can customize this behavior by including `duration` (in milliseconds) and
         * `easing` options (see {@link module:ol/easing}).
         *
         * To chain together multiple animations, call the method with multiple
         * animation objects.  For example, to first zoom and then pan:
         *
         *     view.animate({zoom: 10}, {center: [0, 0]});
         *
         * If you provide a function as the last argument to the animate method, it
         * will get called at the end of an animation series.  The callback will be
         * called with `true` if the animation series completed on its own or `false`
         * if it was cancelled.
         *
         * Animations are cancelled by user interactions (e.g. dragging the map) or by
         * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
         * (or another method that calls one of these).
         *
         * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
         *     options.  Multiple animations can be run in series by passing multiple
         *     options objects.  To run multiple animations in parallel, call the method
         *     multiple times.  An optional callback can be provided as a final
         *     argument.  The callback will be called with a boolean indicating whether
         *     the animation completed without being cancelled.
         * @api
         */
        View.prototype.animate = function (var_args) {
            if (this.isDef() && !this.getAnimating()) {
                this.resolveConstraints(0);
            }
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; ++i) {
                var options = arguments[i];
                if (options.center) {
                    options = assign$1({}, options);
                    options.center = fromUserCoordinate(options.center, this.getProjection());
                }
                if (options.anchor) {
                    options = assign$1({}, options);
                    options.anchor = fromUserCoordinate(options.anchor, this.getProjection());
                }
                args[i] = options;
            }
            this.animateInternal.apply(this, args);
        };
        /**
         * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
         */
        View.prototype.animateInternal = function (var_args) {
            var animationCount = arguments.length;
            var callback;
            if (animationCount > 1 &&
                typeof arguments[animationCount - 1] === 'function') {
                callback = arguments[animationCount - 1];
                --animationCount;
            }
            if (!this.isDef()) {
                // if view properties are not yet set, shortcut to the final state
                var state = arguments[animationCount - 1];
                if (state.center) {
                    this.setCenterInternal(state.center);
                }
                if (state.zoom !== undefined) {
                    this.setZoom(state.zoom);
                }
                if (state.rotation !== undefined) {
                    this.setRotation(state.rotation);
                }
                if (callback) {
                    animationCallback(callback, true);
                }
                return;
            }
            var start = Date.now();
            var center = this.targetCenter_.slice();
            var resolution = this.targetResolution_;
            var rotation = this.targetRotation_;
            var series = [];
            for (var i = 0; i < animationCount; ++i) {
                var options = /** @type {AnimationOptions} */ (arguments[i]);
                var animation = {
                    start: start,
                    complete: false,
                    anchor: options.anchor,
                    duration: options.duration !== undefined ? options.duration : 1000,
                    easing: options.easing || inAndOut,
                    callback: callback,
                };
                if (options.center) {
                    animation.sourceCenter = center;
                    animation.targetCenter = options.center.slice();
                    center = animation.targetCenter;
                }
                if (options.zoom !== undefined) {
                    animation.sourceResolution = resolution;
                    animation.targetResolution = this.getResolutionForZoom(options.zoom);
                    resolution = animation.targetResolution;
                }
                else if (options.resolution) {
                    animation.sourceResolution = resolution;
                    animation.targetResolution = options.resolution;
                    resolution = animation.targetResolution;
                }
                if (options.rotation !== undefined) {
                    animation.sourceRotation = rotation;
                    var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
                    animation.targetRotation = rotation + delta;
                    rotation = animation.targetRotation;
                }
                // check if animation is a no-op
                if (isNoopAnimation(animation)) {
                    animation.complete = true;
                    // we still push it onto the series for callback handling
                }
                else {
                    start += animation.duration;
                }
                series.push(animation);
            }
            this.animations_.push(series);
            this.setHint(ViewHint.ANIMATING, 1);
            this.updateAnimations_();
        };
        /**
         * Determine if the view is being animated.
         * @return {boolean} The view is being animated.
         * @api
         */
        View.prototype.getAnimating = function () {
            return this.hints_[ViewHint.ANIMATING] > 0;
        };
        /**
         * Determine if the user is interacting with the view, such as panning or zooming.
         * @return {boolean} The view is being interacted with.
         * @api
         */
        View.prototype.getInteracting = function () {
            return this.hints_[ViewHint.INTERACTING] > 0;
        };
        /**
         * Cancel any ongoing animations.
         * @api
         */
        View.prototype.cancelAnimations = function () {
            this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
            var anchor;
            for (var i = 0, ii = this.animations_.length; i < ii; ++i) {
                var series = this.animations_[i];
                if (series[0].callback) {
                    animationCallback(series[0].callback, false);
                }
                if (!anchor) {
                    for (var j = 0, jj = series.length; j < jj; ++j) {
                        var animation = series[j];
                        if (!animation.complete) {
                            anchor = animation.anchor;
                            break;
                        }
                    }
                }
            }
            this.animations_.length = 0;
            this.cancelAnchor_ = anchor;
        };
        /**
         * Update all animations.
         */
        View.prototype.updateAnimations_ = function () {
            if (this.updateAnimationKey_ !== undefined) {
                cancelAnimationFrame(this.updateAnimationKey_);
                this.updateAnimationKey_ = undefined;
            }
            if (!this.getAnimating()) {
                return;
            }
            var now = Date.now();
            var more = false;
            for (var i = this.animations_.length - 1; i >= 0; --i) {
                var series = this.animations_[i];
                var seriesComplete = true;
                for (var j = 0, jj = series.length; j < jj; ++j) {
                    var animation = series[j];
                    if (animation.complete) {
                        continue;
                    }
                    var elapsed = now - animation.start;
                    var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
                    if (fraction >= 1) {
                        animation.complete = true;
                        fraction = 1;
                    }
                    else {
                        seriesComplete = false;
                    }
                    var progress = animation.easing(fraction);
                    if (animation.sourceCenter) {
                        var x0 = animation.sourceCenter[0];
                        var y0 = animation.sourceCenter[1];
                        var x1 = animation.targetCenter[0];
                        var y1 = animation.targetCenter[1];
                        var x = x0 + progress * (x1 - x0);
                        var y = y0 + progress * (y1 - y0);
                        this.targetCenter_ = [x, y];
                    }
                    if (animation.sourceResolution && animation.targetResolution) {
                        var resolution = progress === 1
                            ? animation.targetResolution
                            : animation.sourceResolution +
                                progress *
                                    (animation.targetResolution - animation.sourceResolution);
                        if (animation.anchor) {
                            var size = this.getViewportSize_(this.getRotation());
                            var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);
                            this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);
                        }
                        this.targetResolution_ = resolution;
                        this.applyTargetState_(true);
                    }
                    if (animation.sourceRotation !== undefined &&
                        animation.targetRotation !== undefined) {
                        var rotation = progress === 1
                            ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -
                                Math.PI
                            : animation.sourceRotation +
                                progress *
                                    (animation.targetRotation - animation.sourceRotation);
                        if (animation.anchor) {
                            var constrainedRotation = this.constraints_.rotation(rotation, true);
                            this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);
                        }
                        this.targetRotation_ = rotation;
                    }
                    this.applyTargetState_(true);
                    more = true;
                    if (!animation.complete) {
                        break;
                    }
                }
                if (seriesComplete) {
                    this.animations_[i] = null;
                    this.setHint(ViewHint.ANIMATING, -1);
                    var callback = series[0].callback;
                    if (callback) {
                        animationCallback(callback, true);
                    }
                }
            }
            // prune completed series
            this.animations_ = this.animations_.filter(Boolean);
            if (more && this.updateAnimationKey_ === undefined) {
                this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));
            }
        };
        /**
         * @param {number} rotation Target rotation.
         * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
         * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
         */
        View.prototype.calculateCenterRotate = function (rotation, anchor) {
            var center;
            var currentCenter = this.getCenterInternal();
            if (currentCenter !== undefined) {
                center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
                rotate(center, rotation - this.getRotation());
                add$2(center, anchor);
            }
            return center;
        };
        /**
         * @param {number} resolution Target resolution.
         * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
         * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
         */
        View.prototype.calculateCenterZoom = function (resolution, anchor) {
            var center;
            var currentCenter = this.getCenterInternal();
            var currentResolution = this.getResolution();
            if (currentCenter !== undefined && currentResolution !== undefined) {
                var x = anchor[0] -
                    (resolution * (anchor[0] - currentCenter[0])) / currentResolution;
                var y = anchor[1] -
                    (resolution * (anchor[1] - currentCenter[1])) / currentResolution;
                center = [x, y];
            }
            return center;
        };
        /**
         * Returns the current viewport size.
         * @private
         * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size
         * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
         */
        View.prototype.getViewportSize_ = function (opt_rotation) {
            var size = this.viewportSize_;
            if (opt_rotation) {
                var w = size[0];
                var h = size[1];
                return [
                    Math.abs(w * Math.cos(opt_rotation)) +
                        Math.abs(h * Math.sin(opt_rotation)),
                    Math.abs(w * Math.sin(opt_rotation)) +
                        Math.abs(h * Math.cos(opt_rotation)),
                ];
            }
            else {
                return size;
            }
        };
        /**
         * Stores the viewport size on the view. The viewport size is not read every time from the DOM
         * to avoid performance hit and layout reflow.
         * This should be done on map size change.
         * Note: the constraints are not resolved during an animation to avoid stopping it
         * @param {import("./size.js").Size=} opt_size Viewport size; if undefined, [100, 100] is assumed
         */
        View.prototype.setViewportSize = function (opt_size) {
            this.viewportSize_ = Array.isArray(opt_size)
                ? opt_size.slice()
                : [100, 100];
            if (!this.getAnimating()) {
                this.resolveConstraints(0);
            }
        };
        /**
         * Get the view center.
         * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
         * @observable
         * @api
         */
        View.prototype.getCenter = function () {
            var center = this.getCenterInternal();
            if (!center) {
                return center;
            }
            return toUserCoordinate(center, this.getProjection());
        };
        /**
         * Get the view center without transforming to user projection.
         * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
         */
        View.prototype.getCenterInternal = function () {
            return /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(ViewProperty.CENTER));
        };
        /**
         * @return {Constraints} Constraints.
         */
        View.prototype.getConstraints = function () {
            return this.constraints_;
        };
        /**
         * @return {boolean} Resolution constraint is set
         */
        View.prototype.getConstrainResolution = function () {
            return this.options_.constrainResolution;
        };
        /**
         * @param {Array<number>=} opt_hints Destination array.
         * @return {Array<number>} Hint.
         */
        View.prototype.getHints = function (opt_hints) {
            if (opt_hints !== undefined) {
                opt_hints[0] = this.hints_[0];
                opt_hints[1] = this.hints_[1];
                return opt_hints;
            }
            else {
                return this.hints_.slice();
            }
        };
        /**
         * Calculate the extent for the current view state and the passed size.
         * The size is the pixel dimensions of the box into which the calculated extent
         * should fit. In most cases you want to get the extent of the entire map,
         * that is `map.getSize()`.
         * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size
         * of the map that uses this view will be used.
         * @return {import("./extent.js").Extent} Extent.
         * @api
         */
        View.prototype.calculateExtent = function (opt_size) {
            var extent = this.calculateExtentInternal(opt_size);
            return toUserExtent(extent, this.getProjection());
        };
        /**
         * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided,
         * the map's last known viewport size will be used.
         * @return {import("./extent.js").Extent} Extent.
         */
        View.prototype.calculateExtentInternal = function (opt_size) {
            var size = opt_size || this.getViewportSize_();
            var center = /** @type {!import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
            assert(center, 1); // The view center is not defined
            var resolution = /** @type {!number} */ (this.getResolution());
            assert(resolution !== undefined, 2); // The view resolution is not defined
            var rotation = /** @type {!number} */ (this.getRotation());
            assert(rotation !== undefined, 3); // The view rotation is not defined
            return getForViewAndSize(center, resolution, rotation, size);
        };
        /**
         * Get the maximum resolution of the view.
         * @return {number} The maximum resolution of the view.
         * @api
         */
        View.prototype.getMaxResolution = function () {
            return this.maxResolution_;
        };
        /**
         * Get the minimum resolution of the view.
         * @return {number} The minimum resolution of the view.
         * @api
         */
        View.prototype.getMinResolution = function () {
            return this.minResolution_;
        };
        /**
         * Get the maximum zoom level for the view.
         * @return {number} The maximum zoom level.
         * @api
         */
        View.prototype.getMaxZoom = function () {
            return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
        };
        /**
         * Set a new maximum zoom level for the view.
         * @param {number} zoom The maximum zoom level.
         * @api
         */
        View.prototype.setMaxZoom = function (zoom) {
            this.applyOptions_(this.getUpdatedOptions_({ maxZoom: zoom }));
        };
        /**
         * Get the minimum zoom level for the view.
         * @return {number} The minimum zoom level.
         * @api
         */
        View.prototype.getMinZoom = function () {
            return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
        };
        /**
         * Set a new minimum zoom level for the view.
         * @param {number} zoom The minimum zoom level.
         * @api
         */
        View.prototype.setMinZoom = function (zoom) {
            this.applyOptions_(this.getUpdatedOptions_({ minZoom: zoom }));
        };
        /**
         * Set whether the view shoud allow intermediary zoom levels.
         * @param {boolean} enabled Whether the resolution is constrained.
         * @api
         */
        View.prototype.setConstrainResolution = function (enabled) {
            this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: enabled }));
        };
        /**
         * Get the view projection.
         * @return {import("./proj/Projection.js").default} The projection of the view.
         * @api
         */
        View.prototype.getProjection = function () {
            return this.projection_;
        };
        /**
         * Get the view resolution.
         * @return {number|undefined} The resolution of the view.
         * @observable
         * @api
         */
        View.prototype.getResolution = function () {
            return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
        };
        /**
         * Get the resolutions for the view. This returns the array of resolutions
         * passed to the constructor of the View, or undefined if none were given.
         * @return {Array<number>|undefined} The resolutions of the view.
         * @api
         */
        View.prototype.getResolutions = function () {
            return this.resolutions_;
        };
        /**
         * Get the resolution for a provided extent (in map units) and size (in pixels).
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {import("./size.js").Size=} opt_size Box pixel size.
         * @return {number} The resolution at which the provided extent will render at
         *     the given size.
         * @api
         */
        View.prototype.getResolutionForExtent = function (extent, opt_size) {
            return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);
        };
        /**
         * Get the resolution for a provided extent (in map units) and size (in pixels).
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {import("./size.js").Size=} opt_size Box pixel size.
         * @return {number} The resolution at which the provided extent will render at
         *     the given size.
         */
        View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {
            var size = opt_size || this.getViewportSize_();
            var xResolution = getWidth(extent) / size[0];
            var yResolution = getHeight(extent) / size[1];
            return Math.max(xResolution, yResolution);
        };
        /**
         * Return a function that returns a value between 0 and 1 for a
         * resolution. Exponential scaling is assumed.
         * @param {number=} opt_power Power.
         * @return {function(number): number} Resolution for value function.
         */
        View.prototype.getResolutionForValueFunction = function (opt_power) {
            var power = opt_power || 2;
            var maxResolution = this.getConstrainedResolution(this.maxResolution_);
            var minResolution = this.minResolution_;
            var max = Math.log(maxResolution / minResolution) / Math.log(power);
            return (
            /**
             * @param {number} value Value.
             * @return {number} Resolution.
             */
            function (value) {
                var resolution = maxResolution / Math.pow(power, value * max);
                return resolution;
            });
        };
        /**
         * Get the view rotation.
         * @return {number} The rotation of the view in radians.
         * @observable
         * @api
         */
        View.prototype.getRotation = function () {
            return /** @type {number} */ (this.get(ViewProperty.ROTATION));
        };
        /**
         * Return a function that returns a resolution for a value between
         * 0 and 1. Exponential scaling is assumed.
         * @param {number=} opt_power Power.
         * @return {function(number): number} Value for resolution function.
         */
        View.prototype.getValueForResolutionFunction = function (opt_power) {
            var logPower = Math.log(opt_power || 2);
            var maxResolution = this.getConstrainedResolution(this.maxResolution_);
            var minResolution = this.minResolution_;
            var max = Math.log(maxResolution / minResolution) / logPower;
            return (
            /**
             * @param {number} resolution Resolution.
             * @return {number} Value.
             */
            function (resolution) {
                var value = Math.log(maxResolution / resolution) / logPower / max;
                return value;
            });
        };
        /**
         * Returns the size of the viewport minus padding.
         * @private
         * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size
         * @return {import("./size.js").Size} Viewport size reduced by the padding.
         */
        View.prototype.getViewportSizeMinusPadding_ = function (opt_rotation) {
            var size = this.getViewportSize_(opt_rotation);
            var padding = this.padding;
            if (padding) {
                size = [
                    size[0] - padding[1] - padding[3],
                    size[1] - padding[0] - padding[2],
                ];
            }
            return size;
        };
        /**
         * @return {State} View state.
         */
        View.prototype.getState = function () {
            var projection = this.getProjection();
            var resolution = /** @type {number} */ (this.getResolution());
            var rotation = this.getRotation();
            var center = /** @type {import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
            var padding = this.padding;
            if (padding) {
                var reducedSize = this.getViewportSizeMinusPadding_();
                center = calculateCenterOn(center, this.getViewportSize_(), [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);
            }
            return {
                center: center.slice(0),
                projection: projection !== undefined ? projection : null,
                resolution: resolution,
                rotation: rotation,
                zoom: this.getZoom(),
            };
        };
        /**
         * Get the current zoom level. This method may return non-integer zoom levels
         * if the view does not constrain the resolution, or if an interaction or
         * animation is underway.
         * @return {number|undefined} Zoom.
         * @api
         */
        View.prototype.getZoom = function () {
            var zoom;
            var resolution = this.getResolution();
            if (resolution !== undefined) {
                zoom = this.getZoomForResolution(resolution);
            }
            return zoom;
        };
        /**
         * Get the zoom level for a resolution.
         * @param {number} resolution The resolution.
         * @return {number|undefined} The zoom level for the provided resolution.
         * @api
         */
        View.prototype.getZoomForResolution = function (resolution) {
            var offset = this.minZoom_ || 0;
            var max, zoomFactor;
            if (this.resolutions_) {
                var nearest = linearFindNearest(this.resolutions_, resolution, 1);
                offset = nearest;
                max = this.resolutions_[nearest];
                if (nearest == this.resolutions_.length - 1) {
                    zoomFactor = 2;
                }
                else {
                    zoomFactor = max / this.resolutions_[nearest + 1];
                }
            }
            else {
                max = this.maxResolution_;
                zoomFactor = this.zoomFactor_;
            }
            return offset + Math.log(max / resolution) / Math.log(zoomFactor);
        };
        /**
         * Get the resolution for a zoom level.
         * @param {number} zoom Zoom level.
         * @return {number} The view resolution for the provided zoom level.
         * @api
         */
        View.prototype.getResolutionForZoom = function (zoom) {
            if (this.resolutions_) {
                if (this.resolutions_.length <= 1) {
                    return 0;
                }
                var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);
                var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
                return (this.resolutions_[baseLevel] /
                    Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1)));
            }
            else {
                return (this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_));
            }
        };
        /**
         * Fit the given geometry or extent based on the given map size and border.
         * The size is pixel dimensions of the box to fit the extent into.
         * In most cases you will want to use the map size, that is `map.getSize()`.
         * Takes care of the map angle.
         * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
         *     extent to fit the view to.
         * @param {FitOptions=} opt_options Options.
         * @api
         */
        View.prototype.fit = function (geometryOrExtent, opt_options) {
            /** @type {import("./geom/SimpleGeometry.js").default} */
            var geometry;
            assert(Array.isArray(geometryOrExtent) ||
                typeof ( /** @type {?} */(geometryOrExtent).getSimplifiedGeometry) ===
                    'function', 24); // Invalid extent or geometry provided as `geometry`
            if (Array.isArray(geometryOrExtent)) {
                assert(!isEmpty$1(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`
                var extent = fromUserExtent(geometryOrExtent, this.getProjection());
                geometry = fromExtent(extent);
            }
            else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {
                var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());
                geometry = fromExtent(extent);
                geometry.rotate(this.getRotation(), getCenter(extent));
            }
            else {
                var userProjection = getUserProjection();
                if (userProjection) {
                    geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometryOrExtent
                        .clone()
                        .transform(userProjection, this.getProjection()));
                }
                else {
                    geometry = geometryOrExtent;
                }
            }
            this.fitInternal(geometry, opt_options);
        };
        /**
         * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
         * @param {FitOptions=} opt_options Options.
         */
        View.prototype.fitInternal = function (geometry, opt_options) {
            var options = opt_options || {};
            var size = options.size;
            if (!size) {
                size = this.getViewportSizeMinusPadding_();
            }
            var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
            var nearest = options.nearest !== undefined ? options.nearest : false;
            var minResolution;
            if (options.minResolution !== undefined) {
                minResolution = options.minResolution;
            }
            else if (options.maxZoom !== undefined) {
                minResolution = this.getResolutionForZoom(options.maxZoom);
            }
            else {
                minResolution = 0;
            }
            var coords = geometry.getFlatCoordinates();
            // calculate rotated extent
            var rotation = this.getRotation();
            var cosAngle = Math.cos(-rotation);
            var sinAngle = Math.sin(-rotation);
            var minRotX = +Infinity;
            var minRotY = +Infinity;
            var maxRotX = -Infinity;
            var maxRotY = -Infinity;
            var stride = geometry.getStride();
            for (var i = 0, ii = coords.length; i < ii; i += stride) {
                var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
                var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
                minRotX = Math.min(minRotX, rotX);
                minRotY = Math.min(minRotY, rotY);
                maxRotX = Math.max(maxRotX, rotX);
                maxRotY = Math.max(maxRotY, rotY);
            }
            // calculate resolution
            var resolution = this.getResolutionForExtentInternal([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);
            resolution = isNaN(resolution)
                ? minResolution
                : Math.max(resolution, minResolution);
            resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);
            // calculate center
            sinAngle = -sinAngle; // go back to original rotation
            var centerRotX = (minRotX + maxRotX) / 2;
            var centerRotY = (minRotY + maxRotY) / 2;
            centerRotX += ((padding[1] - padding[3]) / 2) * resolution;
            centerRotY += ((padding[0] - padding[2]) / 2) * resolution;
            var centerX = centerRotX * cosAngle - centerRotY * sinAngle;
            var centerY = centerRotY * cosAngle + centerRotX * sinAngle;
            var center = this.getConstrainedCenter([centerX, centerY], resolution);
            var callback = options.callback ? options.callback : VOID;
            if (options.duration !== undefined) {
                this.animateInternal({
                    resolution: resolution,
                    center: center,
                    duration: options.duration,
                    easing: options.easing,
                }, callback);
            }
            else {
                this.targetResolution_ = resolution;
                this.targetCenter_ = center;
                this.applyTargetState_(false, true);
                animationCallback(callback, true);
            }
        };
        /**
         * Center on coordinate and view position.
         * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("./size.js").Size} size Box pixel size.
         * @param {import("./pixel.js").Pixel} position Position on the view to center on.
         * @api
         */
        View.prototype.centerOn = function (coordinate, size, position) {
            this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);
        };
        /**
         * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("./size.js").Size} size Box pixel size.
         * @param {import("./pixel.js").Pixel} position Position on the view to center on.
         */
        View.prototype.centerOnInternal = function (coordinate, size, position) {
            this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));
        };
        /**
         * Calculates the shift between map and viewport center.
         * @param {import("./coordinate.js").Coordinate} center Center.
         * @param {number} resolution Resolution.
         * @param {number} rotation Rotation.
         * @param {import("./size.js").Size} size Size.
         * @return {Array<number>|undefined} Center shift.
         */
        View.prototype.calculateCenterShift = function (center, resolution, rotation, size) {
            var centerShift;
            var padding = this.padding;
            if (padding && center) {
                var reducedSize = this.getViewportSizeMinusPadding_(-rotation);
                var shiftedCenter = calculateCenterOn(center, size, [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);
                centerShift = [
                    center[0] - shiftedCenter[0],
                    center[1] - shiftedCenter[1],
                ];
            }
            return centerShift;
        };
        /**
         * @return {boolean} Is defined.
         */
        View.prototype.isDef = function () {
            return !!this.getCenterInternal() && this.getResolution() !== undefined;
        };
        /**
         * Adds relative coordinates to the center of the view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
         * @api
         */
        View.prototype.adjustCenter = function (deltaCoordinates) {
            var center = toUserCoordinate(this.targetCenter_, this.getProjection());
            this.setCenter([
                center[0] + deltaCoordinates[0],
                center[1] + deltaCoordinates[1],
            ]);
        };
        /**
         * Adds relative coordinates to the center of the view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
         */
        View.prototype.adjustCenterInternal = function (deltaCoordinates) {
            var center = this.targetCenter_;
            this.setCenterInternal([
                center[0] + deltaCoordinates[0],
                center[1] + deltaCoordinates[1],
            ]);
        };
        /**
         * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} ratio The ratio to apply on the view resolution.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        View.prototype.adjustResolution = function (ratio, opt_anchor) {
            var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());
            this.adjustResolutionInternal(ratio, anchor);
        };
        /**
         * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} ratio The ratio to apply on the view resolution.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {
            var isMoving = this.getAnimating() || this.getInteracting();
            var size = this.getViewportSize_(this.getRotation());
            var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);
            if (opt_anchor) {
                this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);
            }
            this.targetResolution_ *= ratio;
            this.applyTargetState_();
        };
        /**
         * Adds a value to the view zoom level, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} delta Relative value to add to the zoom level.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        View.prototype.adjustZoom = function (delta, opt_anchor) {
            this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);
        };
        /**
         * Adds a value to the view rotation, optionally using an anchor. Any rotation
         * constraint will apply.
         * @param {number} delta Relative value to add to the zoom rotation, in radians.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
         * @api
         */
        View.prototype.adjustRotation = function (delta, opt_anchor) {
            if (opt_anchor) {
                opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());
            }
            this.adjustRotationInternal(delta, opt_anchor);
        };
        /**
         * @param {number} delta Relative value to add to the zoom rotation, in radians.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
         */
        View.prototype.adjustRotationInternal = function (delta, opt_anchor) {
            var isMoving = this.getAnimating() || this.getInteracting();
            var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);
            if (opt_anchor) {
                this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);
            }
            this.targetRotation_ += delta;
            this.applyTargetState_();
        };
        /**
         * Set the center of the current view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
         * @observable
         * @api
         */
        View.prototype.setCenter = function (center) {
            this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));
        };
        /**
         * Set the center using the view projection (not the user projection).
         * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
         */
        View.prototype.setCenterInternal = function (center) {
            this.targetCenter_ = center;
            this.applyTargetState_();
        };
        /**
         * @param {import("./ViewHint.js").default} hint Hint.
         * @param {number} delta Delta.
         * @return {number} New value.
         */
        View.prototype.setHint = function (hint, delta) {
            this.hints_[hint] += delta;
            this.changed();
            return this.hints_[hint];
        };
        /**
         * Set the resolution for this view. Any resolution constraint will apply.
         * @param {number|undefined} resolution The resolution of the view.
         * @observable
         * @api
         */
        View.prototype.setResolution = function (resolution) {
            this.targetResolution_ = resolution;
            this.applyTargetState_();
        };
        /**
         * Set the rotation for this view. Any rotation constraint will apply.
         * @param {number} rotation The rotation of the view in radians.
         * @observable
         * @api
         */
        View.prototype.setRotation = function (rotation) {
            this.targetRotation_ = rotation;
            this.applyTargetState_();
        };
        /**
         * Zoom to a specific zoom level. Any resolution constrain will apply.
         * @param {number} zoom Zoom level.
         * @api
         */
        View.prototype.setZoom = function (zoom) {
            this.setResolution(this.getResolutionForZoom(zoom));
        };
        /**
         * Recompute rotation/resolution/center based on target values.
         * Note: we have to compute rotation first, then resolution and center considering that
         * parameters can influence one another in case a view extent constraint is present.
         * @param {boolean=} opt_doNotCancelAnims Do not cancel animations.
         * @param {boolean=} opt_forceMoving Apply constraints as if the view is moving.
         * @private
         */
        View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {
            var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;
            // compute rotation
            var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);
            var size = this.getViewportSize_(newRotation);
            var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);
            var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));
            if (this.get(ViewProperty.ROTATION) !== newRotation) {
                this.set(ViewProperty.ROTATION, newRotation);
            }
            if (this.get(ViewProperty.RESOLUTION) !== newResolution) {
                this.set(ViewProperty.RESOLUTION, newResolution);
            }
            if (!this.get(ViewProperty.CENTER) ||
                !equals$2(this.get(ViewProperty.CENTER), newCenter)) {
                this.set(ViewProperty.CENTER, newCenter);
            }
            if (this.getAnimating() && !opt_doNotCancelAnims) {
                this.cancelAnimations();
            }
            this.cancelAnchor_ = undefined;
        };
        /**
         * If any constraints need to be applied, an animation will be triggered.
         * This is typically done on interaction end.
         * Note: calling this with a duration of 0 will apply the constrained values straight away,
         * without animation.
         * @param {number=} opt_duration The animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {
            var duration = opt_duration !== undefined ? opt_duration : 200;
            var direction = opt_resolutionDirection || 0;
            var newRotation = this.constraints_.rotation(this.targetRotation_);
            var size = this.getViewportSize_(newRotation);
            var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);
            var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));
            if (duration === 0 && !this.cancelAnchor_) {
                this.targetResolution_ = newResolution;
                this.targetRotation_ = newRotation;
                this.targetCenter_ = newCenter;
                this.applyTargetState_();
                return;
            }
            var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);
            this.cancelAnchor_ = undefined;
            if (this.getResolution() !== newResolution ||
                this.getRotation() !== newRotation ||
                !this.getCenterInternal() ||
                !equals$2(this.getCenterInternal(), newCenter)) {
                if (this.getAnimating()) {
                    this.cancelAnimations();
                }
                this.animateInternal({
                    rotation: newRotation,
                    center: newCenter,
                    resolution: newResolution,
                    duration: duration,
                    easing: easeOut,
                    anchor: anchor,
                });
            }
        };
        /**
         * Notify the View that an interaction has started.
         * The view state will be resolved to a stable one if needed
         * (depending on its constraints).
         * @api
         */
        View.prototype.beginInteraction = function () {
            this.resolveConstraints(0);
            this.setHint(ViewHint.INTERACTING, 1);
        };
        /**
         * Notify the View that an interaction has ended. The view state will be resolved
         * to a stable one if needed (depending on its constraints).
         * @param {number=} opt_duration Animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {
            var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());
            this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);
        };
        /**
         * Notify the View that an interaction has ended. The view state will be resolved
         * to a stable one if needed (depending on its constraints).
         * @param {number=} opt_duration Animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {
            this.setHint(ViewHint.INTERACTING, -1);
            this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);
        };
        /**
         * Get a valid position for the view center according to the current constraints.
         * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
         * @param {number=} opt_targetResolution Target resolution. If not supplied, the current one will be used.
         * This is useful to guess a valid center position at a different zoom level.
         * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
         */
        View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {
            var size = this.getViewportSize_(this.getRotation());
            return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);
        };
        /**
         * Get a valid zoom level according to the current view constraints.
         * @param {number|undefined} targetZoom Target zoom.
         * @param {number=} [opt_direction=0] Indicate which resolution should be used
         * by a renderer if the view resolution does not match any resolution of the tile source.
         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
         * will be used. If -1, the nearest higher resolution will be used.
         * @return {number|undefined} Valid zoom level.
         */
        View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {
            var targetRes = this.getResolutionForZoom(targetZoom);
            return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));
        };
        /**
         * Get a valid resolution according to the current view constraints.
         * @param {number|undefined} targetResolution Target resolution.
         * @param {number=} [opt_direction=0] Indicate which resolution should be used
         * by a renderer if the view resolution does not match any resolution of the tile source.
         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
         * will be used. If -1, the nearest higher resolution will be used.
         * @return {number|undefined} Valid resolution.
         */
        View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {
            var direction = opt_direction || 0;
            var size = this.getViewportSize_(this.getRotation());
            return this.constraints_.resolution(targetResolution, direction, size);
        };
        return View;
    }(BaseObject));
    /**
     * @param {Function} callback Callback.
     * @param {*} returnValue Return value.
     */
    function animationCallback(callback, returnValue) {
        setTimeout(function () {
            callback(returnValue);
        }, 0);
    }
    /**
     * @param {ViewOptions} options View options.
     * @return {import("./centerconstraint.js").Type} The constraint.
     */
    function createCenterConstraint(options) {
        if (options.extent !== undefined) {
            var smooth = options.smoothExtentConstraint !== undefined
                ? options.smoothExtentConstraint
                : true;
            return createExtent(options.extent, options.constrainOnlyCenter, smooth);
        }
        var projection = createProjection(options.projection, 'EPSG:3857');
        if (options.multiWorld !== true && projection.isGlobal()) {
            var extent = projection.getExtent().slice();
            extent[0] = -Infinity;
            extent[2] = Infinity;
            return createExtent(extent, false, false);
        }
        return none;
    }
    /**
     * @param {ViewOptions} options View options.
     * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
     *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
     */
    function createResolutionConstraint(options) {
        var resolutionConstraint;
        var maxResolution;
        var minResolution;
        // TODO: move these to be ol constants
        // see https://github.com/openlayers/openlayers/issues/2076
        var defaultMaxZoom = 28;
        var defaultZoomFactor = 2;
        var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;
        var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;
        var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;
        var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;
        var smooth = options.smoothResolutionConstraint !== undefined
            ? options.smoothResolutionConstraint
            : true;
        var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;
        var projection = createProjection(options.projection, 'EPSG:3857');
        var projExtent = projection.getExtent();
        var constrainOnlyCenter = options.constrainOnlyCenter;
        var extent = options.extent;
        if (!multiWorld && !extent && projection.isGlobal()) {
            constrainOnlyCenter = false;
            extent = projExtent;
        }
        if (options.resolutions !== undefined) {
            var resolutions = options.resolutions;
            maxResolution = resolutions[minZoom];
            minResolution =
                resolutions[maxZoom] !== undefined
                    ? resolutions[maxZoom]
                    : resolutions[resolutions.length - 1];
            if (options.constrainResolution) {
                resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
            else {
                resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
        }
        else {
            // calculate the default min and max resolution
            var size = !projExtent
                ? // use an extent that can fit the whole world if need be
                    (360 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit()
                : Math.max(getWidth(projExtent), getHeight(projExtent));
            var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);
            var defaultMinResolution = defaultMaxResolution /
                Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);
            // user provided maxResolution takes precedence
            maxResolution = options.maxResolution;
            if (maxResolution !== undefined) {
                minZoom = 0;
            }
            else {
                maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
            }
            // user provided minResolution takes precedence
            minResolution = options.minResolution;
            if (minResolution === undefined) {
                if (options.maxZoom !== undefined) {
                    if (options.maxResolution !== undefined) {
                        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
                    }
                    else {
                        minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
                    }
                }
                else {
                    minResolution = defaultMinResolution;
                }
            }
            // given discrete zoom levels, minResolution may be different than provided
            maxZoom =
                minZoom +
                    Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
            minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);
            if (options.constrainResolution) {
                resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
            else {
                resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
        }
        return {
            constraint: resolutionConstraint,
            maxResolution: maxResolution,
            minResolution: minResolution,
            minZoom: minZoom,
            zoomFactor: zoomFactor,
        };
    }
    /**
     * @param {ViewOptions} options View options.
     * @return {import("./rotationconstraint.js").Type} Rotation constraint.
     */
    function createRotationConstraint(options) {
        var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;
        if (enableRotation) {
            var constrainRotation = options.constrainRotation;
            if (constrainRotation === undefined || constrainRotation === true) {
                return createSnapToZero();
            }
            else if (constrainRotation === false) {
                return none$1;
            }
            else if (typeof constrainRotation === 'number') {
                return createSnapToN(constrainRotation);
            }
            else {
                return none$1;
            }
        }
        else {
            return disable;
        }
    }
    /**
     * Determine if an animation involves no view change.
     * @param {Animation} animation The animation.
     * @return {boolean} The animation involves no view change.
     */
    function isNoopAnimation(animation) {
        if (animation.sourceCenter && animation.targetCenter) {
            if (!equals$2(animation.sourceCenter, animation.targetCenter)) {
                return false;
            }
        }
        if (animation.sourceResolution !== animation.targetResolution) {
            return false;
        }
        if (animation.sourceRotation !== animation.targetRotation) {
            return false;
        }
        return true;
    }
    /**
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @return {import("./coordinate.js").Coordinate} Shifted center.
     */
    function calculateCenterOn(coordinate, size, position, resolution, rotation) {
        // calculate rotated position
        var cosAngle = Math.cos(-rotation);
        var sinAngle = Math.sin(-rotation);
        var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
        var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
        rotX += (size[0] / 2 - position[0]) * resolution;
        rotY += (position[1] - size[1] / 2) * resolution;
        // go back to original angle
        sinAngle = -sinAngle; // go back to original rotation
        var centerX = rotX * cosAngle - rotY * sinAngle;
        var centerY = rotY * cosAngle + rotX * sinAngle;
        return [centerX, centerY];
    }

    var __extends$L = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
     * be used in applications.
     * @typedef {Object} FrameState
     * @property {number} pixelRatio The pixel ratio of the frame.
     * @property {number} time The time when rendering of the frame was requested.
     * @property {import("./View.js").State} viewState The state of the current view.
     * @property {boolean} animate
     * @property {import("./transform.js").Transform} coordinateToPixelTransform
     * @property {import("rbush").default} declutterTree
     * @property {null|import("./extent.js").Extent} extent
     * @property {number} index
     * @property {Array<import("./layer/Layer.js").State>} layerStatesArray
     * @property {number} layerIndex
     * @property {import("./transform.js").Transform} pixelToCoordinateTransform
     * @property {Array<PostRenderFunction>} postRenderFunctions
     * @property {import("./size.js").Size} size
     * @property {TileQueue} tileQueue
     * @property {!Object<string, Object<string, boolean>>} usedTiles
     * @property {Array<number>} viewHints
     * @property {!Object<string, Object<string, boolean>>} wantedTiles
     */
    /**
     * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction
     */
    /**
     * @typedef {Object} AtPixelOptions
     * @property {undefined|function(import("./layer/Layer.js").default): boolean} [layerFilter] Layer filter
     * function. The filter function will receive one argument, the
     * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
     * Only layers which are visible and for which this function returns `true`
     * will be tested for features. By default, all visible layers will be tested.
     * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels
     * inside the radius around the given position will be checked for features.
     * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of
     *   +/- 1 world width. Works only if a projection is used that can be wrapped.
     */
    /**
     * @typedef {Object} MapOptionsInternal
     * @property {Collection<import("./control/Control.js").default>} [controls]
     * @property {Collection<import("./interaction/Interaction.js").default>} [interactions]
     * @property {HTMLElement|Document} keyboardEventTarget
     * @property {Collection<import("./Overlay.js").default>} overlays
     * @property {Object<string, *>} values
     */
    /**
     * Object literal with config options for the map.
     * @typedef {Object} MapOptions
     * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
     * Controls initially added to the map. If not specified,
     * {@link module:ol/control~defaults} is used.
     * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
     * physical pixels and device-independent pixels (dips) on the device.
     * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
     * Interactions that are initially added to the map. If not specified,
     * {@link module:ol/interaction~defaults} is used.
     * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
     * listen to keyboard events on. This determines when the `KeyboardPan` and
     * `KeyboardZoom` interactions trigger. For example, if this option is set to
     * `document` the keyboard interactions will always trigger. If this option is
     * not specified, the element the library listens to keyboard events on is the
     * map target (i.e. the user-provided div for the map). If this is not
     * `document`, the target element needs to be focused for key events to be
     * emitted, requiring that the target element has a `tabindex` attribute.
     * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
     * Layers. If this is not defined, a map with no layers will be rendered. Note
     * that layers are rendered in the order supplied, so if you want, for example,
     * a vector layer to appear on top of a tile layer, it must come after the tile
     * layer.
     * @property {number} [maxTilesLoading=16] Maximum number tiles to load
     * simultaneously.
     * @property {number} [moveTolerance=1] The minimum distance in pixels the
     * cursor must move to be detected as a map move event instead of a click.
     * Increasing this value can make it easier to click on the map.
     * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
     * Overlays initially added to the map. By default, no overlays are added.
     * @property {HTMLElement|string} [target] The container for the map, either the
     * element itself or the `id` of the element. If not specified at construction
     * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
     * rendered. If passed by element, the container can be in a secondary document.
     * @property {View} [view] The map's view.  No layer sources will be
     * fetched unless this is specified at construction time or through
     * {@link module:ol/Map~Map#setView}.
     */
    /**
     * @fires import("./MapBrowserEvent.js").MapBrowserEvent
     * @fires import("./MapEvent.js").MapEvent
     * @fires import("./render/Event.js").default#precompose
     * @fires import("./render/Event.js").default#postcompose
     * @fires import("./render/Event.js").default#rendercomplete
     * @api
     */
    var PluggableMap = /** @class */ (function (_super) {
        __extends$L(PluggableMap, _super);
        /**
         * @param {MapOptions} options Map options.
         */
        function PluggableMap(options) {
            var _this = _super.call(this) || this;
            var optionsInternal = createOptionsInternal(options);
            /** @private */
            _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);
            /**
             * @type {number}
             * @private
             */
            _this.maxTilesLoading_ =
                options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;
            /**
             * @private
             * @type {number}
             */
            _this.pixelRatio_ =
                options.pixelRatio !== undefined
                    ? options.pixelRatio
                    : DEVICE_PIXEL_RATIO;
            /**
             * @private
             * @type {*}
             */
            _this.postRenderTimeoutHandle_;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.animationDelayKey_;
            /**
             * @private
             */
            _this.animationDelay_ = /** @this {PluggableMap} */ function () {
                this.animationDelayKey_ = undefined;
                this.renderFrame_(Date.now());
            }.bind(_this);
            /**
             * @private
             * @type {import("./transform.js").Transform}
             */
            _this.coordinateToPixelTransform_ = create();
            /**
             * @private
             * @type {import("./transform.js").Transform}
             */
            _this.pixelToCoordinateTransform_ = create();
            /**
             * @private
             * @type {number}
             */
            _this.frameIndex_ = 0;
            /**
             * @private
             * @type {?FrameState}
             */
            _this.frameState_ = null;
            /**
             * The extent at the previous 'moveend' event.
             * @private
             * @type {import("./extent.js").Extent}
             */
            _this.previousExtent_ = null;
            /**
             * @private
             * @type {?import("./events.js").EventsKey}
             */
            _this.viewPropertyListenerKey_ = null;
            /**
             * @private
             * @type {?import("./events.js").EventsKey}
             */
            _this.viewChangeListenerKey_ = null;
            /**
             * @private
             * @type {?Array<import("./events.js").EventsKey>}
             */
            _this.layerGroupPropertyListenerKeys_ = null;
            /**
             * @private
             * @type {!HTMLElement}
             */
            _this.viewport_ = document.createElement('div');
            _this.viewport_.className =
                'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');
            _this.viewport_.style.position = 'relative';
            _this.viewport_.style.overflow = 'hidden';
            _this.viewport_.style.width = '100%';
            _this.viewport_.style.height = '100%';
            /**
             * @private
             * @type {!HTMLElement}
             */
            _this.overlayContainer_ = document.createElement('div');
            _this.overlayContainer_.style.position = 'absolute';
            _this.overlayContainer_.style.zIndex = '0';
            _this.overlayContainer_.style.width = '100%';
            _this.overlayContainer_.style.height = '100%';
            _this.overlayContainer_.style.pointerEvents = 'none';
            _this.overlayContainer_.className = 'ol-overlaycontainer';
            _this.viewport_.appendChild(_this.overlayContainer_);
            /**
             * @private
             * @type {!HTMLElement}
             */
            _this.overlayContainerStopEvent_ = document.createElement('div');
            _this.overlayContainerStopEvent_.style.position = 'absolute';
            _this.overlayContainerStopEvent_.style.zIndex = '0';
            _this.overlayContainerStopEvent_.style.width = '100%';
            _this.overlayContainerStopEvent_.style.height = '100%';
            _this.overlayContainerStopEvent_.style.pointerEvents = 'none';
            _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
            _this.viewport_.appendChild(_this.overlayContainerStopEvent_);
            /**
             * @private
             * @type {MapBrowserEventHandler}
             */
            _this.mapBrowserEventHandler_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.moveTolerance_ = options.moveTolerance;
            /**
             * @private
             * @type {HTMLElement|Document}
             */
            _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;
            /**
             * @private
             * @type {?Array<import("./events.js").EventsKey>}
             */
            _this.keyHandlerKeys_ = null;
            /**
             * @type {Collection<import("./control/Control.js").default>}
             * @protected
             */
            _this.controls = optionsInternal.controls || new Collection();
            /**
             * @type {Collection<import("./interaction/Interaction.js").default>}
             * @protected
             */
            _this.interactions = optionsInternal.interactions || new Collection();
            /**
             * @type {Collection<import("./Overlay.js").default>}
             * @private
             */
            _this.overlays_ = optionsInternal.overlays;
            /**
             * A lookup of overlays by id.
             * @private
             * @type {Object<string, import("./Overlay.js").default>}
             */
            _this.overlayIdIndex_ = {};
            /**
             * @type {import("./renderer/Map.js").default}
             * @private
             */
            _this.renderer_ = null;
            /**
             * @type {undefined|function(Event): void}
             * @private
             */
            _this.handleResize_;
            /**
             * @private
             * @type {!Array<PostRenderFunction>}
             */
            _this.postRenderFunctions_ = [];
            /**
             * @private
             * @type {TileQueue}
             */
            _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));
            _this.addEventListener(getChangeEventType(MapProperty.LAYERGROUP), _this.handleLayerGroupChanged_);
            _this.addEventListener(getChangeEventType(MapProperty.VIEW), _this.handleViewChanged_);
            _this.addEventListener(getChangeEventType(MapProperty.SIZE), _this.handleSizeChanged_);
            _this.addEventListener(getChangeEventType(MapProperty.TARGET), _this.handleTargetChanged_);
            // setProperties will trigger the rendering of the map if the map
            // is "defined" already.
            _this.setProperties(optionsInternal.values);
            _this.controls.forEach(
            /**
             * @param {import("./control/Control.js").default} control Control.
             * @this {PluggableMap}
             */
            function (control) {
                control.setMap(this);
            }.bind(_this));
            _this.controls.addEventListener(CollectionEventType.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(this);
            }.bind(_this));
            _this.controls.addEventListener(CollectionEventType.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(null);
            }.bind(_this));
            _this.interactions.forEach(
            /**
             * @param {import("./interaction/Interaction.js").default} interaction Interaction.
             * @this {PluggableMap}
             */
            function (interaction) {
                interaction.setMap(this);
            }.bind(_this));
            _this.interactions.addEventListener(CollectionEventType.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(this);
            }.bind(_this));
            _this.interactions.addEventListener(CollectionEventType.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(null);
            }.bind(_this));
            _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));
            _this.overlays_.addEventListener(CollectionEventType.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                this.addOverlayInternal_(
                /** @type {import("./Overlay.js").default} */ (event.element));
            }.bind(_this));
            _this.overlays_.addEventListener(CollectionEventType.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                var overlay = /** @type {import("./Overlay.js").default} */ (event.element);
                var id = overlay.getId();
                if (id !== undefined) {
                    delete this.overlayIdIndex_[id.toString()];
                }
                event.element.setMap(null);
            }.bind(_this));
            return _this;
        }
        /**
         * @abstract
         * @return {import("./renderer/Map.js").default} The map renderer
         */
        PluggableMap.prototype.createRenderer = function () {
            throw new Error('Use a map type that has a createRenderer method');
        };
        /**
         * Add the given control to the map.
         * @param {import("./control/Control.js").default} control Control.
         * @api
         */
        PluggableMap.prototype.addControl = function (control) {
            this.getControls().push(control);
        };
        /**
         * Add the given interaction to the map. If you want to add an interaction
         * at another point of the collection use `getInteraction()` and the methods
         * available on {@link module:ol/Collection~Collection}. This can be used to
         * stop the event propagation from the handleEvent function. The interactions
         * get to handle the events in the reverse order of this collection.
         * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
         * @api
         */
        PluggableMap.prototype.addInteraction = function (interaction) {
            this.getInteractions().push(interaction);
        };
        /**
         * Adds the given layer to the top of this map. If you want to add a layer
         * elsewhere in the stack, use `getLayers()` and the methods available on
         * {@link module:ol/Collection~Collection}.
         * @param {import("./layer/Base.js").default} layer Layer.
         * @api
         */
        PluggableMap.prototype.addLayer = function (layer) {
            var layers = this.getLayerGroup().getLayers();
            layers.push(layer);
        };
        /**
         * Add the given overlay to the map.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @api
         */
        PluggableMap.prototype.addOverlay = function (overlay) {
            this.getOverlays().push(overlay);
        };
        /**
         * This deals with map's overlay collection changes.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @private
         */
        PluggableMap.prototype.addOverlayInternal_ = function (overlay) {
            var id = overlay.getId();
            if (id !== undefined) {
                this.overlayIdIndex_[id.toString()] = overlay;
            }
            overlay.setMap(this);
        };
        /**
         *
         * Clean up.
         */
        PluggableMap.prototype.disposeInternal = function () {
            this.setTarget(null);
            _super.prototype.disposeInternal.call(this);
        };
        /**
         * Detect features that intersect a pixel on the viewport, and execute a
         * callback with each intersecting feature. Layers included in the detection can
         * be configured through the `layerFilter` option in `opt_options`.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {function(import("./Feature.js").FeatureLike, import("./layer/Layer.js").default, import("./geom/SimpleGeometry.js").default): T} callback Feature callback. The callback will be
         *     called with two arguments. The first argument is one
         *     {@link module:ol/Feature feature} or
         *     {@link module:ol/render/Feature render feature} at the pixel, the second is
         *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
         *     unmanaged layers. To stop detection, callback functions can return a
         *     truthy value.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {T|undefined} Callback result, i.e. the return value of last
         * callback execution, or the first truthy callback return value.
         * @template S,T
         * @api
         */
        PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {
            if (!this.frameState_) {
                return;
            }
            var coordinate = this.getCoordinateFromPixelInternal(pixel);
            opt_options = opt_options !== undefined ? opt_options : {};
            var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;
            var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
            var checkWrapped = opt_options.checkWrapped !== false;
            return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);
        };
        /**
         * Get all features that intersect a pixel on the viewport.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
         * an empty array if none were found.
         * @api
         */
        PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {
            var features = [];
            this.forEachFeatureAtPixel(pixel, function (feature) {
                features.push(feature);
            }, opt_options);
            return features;
        };
        /**
         * Detect layers that have a color value at a pixel on the viewport, and
         * execute a callback with each matching layer. Layers included in the
         * detection can be configured through `opt_layerFilter`.
         *
         * Note: this may give false positives unless the map layers have had different `className`
         * properties assigned to them.
         *
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
         *     Layer callback. This callback will receive two arguments: first is the
         *     {@link module:ol/layer/Layer layer}, second argument is an array representing
         *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
         *     that do not currently support this argument. To stop detection, callback
         *     functions can return a truthy value.
         * @param {AtPixelOptions=} opt_options Configuration options.
         * @return {T|undefined} Callback result, i.e. the return value of last
         * callback execution, or the first truthy callback return value.
         * @template S,T
         * @api
         */
        PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {
            if (!this.frameState_) {
                return;
            }
            var options = opt_options || {};
            var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;
            var layerFilter = options.layerFilter || TRUE;
            return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);
        };
        /**
         * Detect if features intersect a pixel on the viewport. Layers included in the
         * detection can be configured through `opt_layerFilter`.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {boolean} Is there a feature at the given pixel?
         * @api
         */
        PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {
            if (!this.frameState_) {
                return false;
            }
            var coordinate = this.getCoordinateFromPixelInternal(pixel);
            opt_options = opt_options !== undefined ? opt_options : {};
            var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
            var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;
            var checkWrapped = opt_options.checkWrapped !== false;
            return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);
        };
        /**
         * Returns the coordinate in user projection for a browser event.
         * @param {MouseEvent} event Event.
         * @return {import("./coordinate.js").Coordinate} Coordinate.
         * @api
         */
        PluggableMap.prototype.getEventCoordinate = function (event) {
            return this.getCoordinateFromPixel(this.getEventPixel(event));
        };
        /**
         * Returns the coordinate in view projection for a browser event.
         * @param {MouseEvent} event Event.
         * @return {import("./coordinate.js").Coordinate} Coordinate.
         */
        PluggableMap.prototype.getEventCoordinateInternal = function (event) {
            return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
        };
        /**
         * Returns the map pixel position for a browser event relative to the viewport.
         * @param {UIEvent} event Event.
         * @return {import("./pixel.js").Pixel} Pixel.
         * @api
         */
        PluggableMap.prototype.getEventPixel = function (event) {
            var viewportPosition = this.viewport_.getBoundingClientRect();
            var eventPosition = 
            //FIXME Are we really calling this with a TouchEvent anywhere?
            'changedTouches' in event
                ? /** @type {TouchEvent} */ (event).changedTouches[0]
                : /** @type {MouseEvent} */ (event);
            return [
                eventPosition.clientX - viewportPosition.left,
                eventPosition.clientY - viewportPosition.top,
            ];
        };
        /**
         * Get the target in which this map is rendered.
         * Note that this returns what is entered as an option or in setTarget:
         * if that was an element, it returns an element; if a string, it returns that.
         * @return {HTMLElement|string|undefined} The Element or id of the Element that the
         *     map is rendered in.
         * @observable
         * @api
         */
        PluggableMap.prototype.getTarget = function () {
            return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));
        };
        /**
         * Get the DOM element into which this map is rendered. In contrast to
         * `getTarget` this method always return an `Element`, or `null` if the
         * map has no target.
         * @return {HTMLElement} The element that the map is rendered in.
         * @api
         */
        PluggableMap.prototype.getTargetElement = function () {
            var target = this.getTarget();
            if (target !== undefined) {
                return typeof target === 'string'
                    ? document.getElementById(target)
                    : target;
            }
            else {
                return null;
            }
        };
        /**
         * Get the coordinate for a given pixel.  This returns a coordinate in the
         * user projection.
         * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
         * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
         * @api
         */
        PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {
            return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());
        };
        /**
         * Get the coordinate for a given pixel.  This returns a coordinate in the
         * map view projection.
         * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
         * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
         */
        PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {
            var frameState = this.frameState_;
            if (!frameState) {
                return null;
            }
            else {
                return apply(frameState.pixelToCoordinateTransform, pixel.slice());
            }
        };
        /**
         * Get the map controls. Modifying this collection changes the controls
         * associated with the map.
         * @return {Collection<import("./control/Control.js").default>} Controls.
         * @api
         */
        PluggableMap.prototype.getControls = function () {
            return this.controls;
        };
        /**
         * Get the map overlays. Modifying this collection changes the overlays
         * associated with the map.
         * @return {Collection<import("./Overlay.js").default>} Overlays.
         * @api
         */
        PluggableMap.prototype.getOverlays = function () {
            return this.overlays_;
        };
        /**
         * Get an overlay by its identifier (the value returned by overlay.getId()).
         * Note that the index treats string and numeric identifiers as the same. So
         * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
         * @param {string|number} id Overlay identifier.
         * @return {import("./Overlay.js").default} Overlay.
         * @api
         */
        PluggableMap.prototype.getOverlayById = function (id) {
            var overlay = this.overlayIdIndex_[id.toString()];
            return overlay !== undefined ? overlay : null;
        };
        /**
         * Get the map interactions. Modifying this collection changes the interactions
         * associated with the map.
         *
         * Interactions are used for e.g. pan, zoom and rotate.
         * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
         * @api
         */
        PluggableMap.prototype.getInteractions = function () {
            return this.interactions;
        };
        /**
         * Get the layergroup associated with this map.
         * @return {LayerGroup} A layer group containing the layers in this map.
         * @observable
         * @api
         */
        PluggableMap.prototype.getLayerGroup = function () {
            return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));
        };
        /**
         * Get the collection of layers associated with this map.
         * @return {!Collection<import("./layer/Base.js").default>} Layers.
         * @api
         */
        PluggableMap.prototype.getLayers = function () {
            var layers = this.getLayerGroup().getLayers();
            return layers;
        };
        /**
         * @return {boolean} Layers have sources that are still loading.
         */
        PluggableMap.prototype.getLoading = function () {
            var layerStatesArray = this.getLayerGroup().getLayerStatesArray();
            for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                var layer = layerStatesArray[i].layer;
                var source = /** @type {import("./layer/Layer.js").default} */ (layer).getSource();
                if (source && source.loading) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Get the pixel for a coordinate.  This takes a coordinate in the user
         * projection and returns the corresponding pixel.
         * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
         * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
         * @api
         */
        PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {
            var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());
            return this.getPixelFromCoordinateInternal(viewCoordinate);
        };
        /**
         * Get the pixel for a coordinate.  This takes a coordinate in the map view
         * projection and returns the corresponding pixel.
         * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
         * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
         */
        PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {
            var frameState = this.frameState_;
            if (!frameState) {
                return null;
            }
            else {
                return apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
            }
        };
        /**
         * Get the map renderer.
         * @return {import("./renderer/Map.js").default} Renderer
         */
        PluggableMap.prototype.getRenderer = function () {
            return this.renderer_;
        };
        /**
         * Get the size of this map.
         * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
         * @observable
         * @api
         */
        PluggableMap.prototype.getSize = function () {
            return /** @type {import("./size.js").Size|undefined} */ (this.get(MapProperty.SIZE));
        };
        /**
         * Get the view associated with this map. A view manages properties such as
         * center and resolution.
         * @return {View} The view that controls this map.
         * @observable
         * @api
         */
        PluggableMap.prototype.getView = function () {
            return /** @type {View} */ (this.get(MapProperty.VIEW));
        };
        /**
         * Get the element that serves as the map viewport.
         * @return {HTMLElement} Viewport.
         * @api
         */
        PluggableMap.prototype.getViewport = function () {
            return this.viewport_;
        };
        /**
         * Get the element that serves as the container for overlays.  Elements added to
         * this container will let mousedown and touchstart events through to the map,
         * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
         * events.
         * @return {!HTMLElement} The map's overlay container.
         */
        PluggableMap.prototype.getOverlayContainer = function () {
            return this.overlayContainer_;
        };
        /**
         * Get the element that serves as a container for overlays that don't allow
         * event propagation. Elements added to this container won't let mousedown and
         * touchstart events through to the map, so clicks and gestures on an overlay
         * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
         * @return {!HTMLElement} The map's overlay container that stops events.
         */
        PluggableMap.prototype.getOverlayContainerStopEvent = function () {
            return this.overlayContainerStopEvent_;
        };
        /**
         * @return {!Document} The document where the map is displayed.
         */
        PluggableMap.prototype.getOwnerDocument = function () {
            return this.getTargetElement()
                ? this.getTargetElement().ownerDocument
                : document;
        };
        /**
         * @param {import("./Tile.js").default} tile Tile.
         * @param {string} tileSourceKey Tile source key.
         * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
         * @param {number} tileResolution Tile resolution.
         * @return {number} Tile priority.
         */
        PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {
            return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);
        };
        /**
         * @param {UIEvent} browserEvent Browser event.
         * @param {string=} opt_type Type.
         */
        PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {
            var type = opt_type || browserEvent.type;
            var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);
            this.handleMapBrowserEvent(mapBrowserEvent);
        };
        /**
         * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
         */
        PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {
            if (!this.frameState_) {
                // With no view defined, we cannot translate pixels into geographical
                // coordinates so interactions cannot be used.
                return;
            }
            var originalEvent = /** @type {PointerEvent} */ (mapBrowserEvent.originalEvent);
            var eventType = originalEvent.type;
            if (eventType === PointerEventType.POINTERDOWN ||
                eventType === EventType.WHEEL ||
                eventType === EventType.KEYDOWN) {
                var doc = this.getOwnerDocument();
                var rootNode = this.viewport_.getRootNode
                    ? this.viewport_.getRootNode()
                    : doc;
                var target = 'host' in rootNode // ShadowRoot
                    ? /** @type {ShadowRoot} */ (rootNode).elementFromPoint(originalEvent.clientX, originalEvent.clientY)
                    : /** @type {Node} */ (originalEvent.target);
                if (
                // Abort if the target is a child of the container for elements whose events are not meant
                // to be handled by map interactions.
                this.overlayContainerStopEvent_.contains(target) ||
                    // Abort if the event target is a child of the container that is no longer in the page.
                    // It's possible for the target to no longer be in the page if it has been removed in an
                    // event listener, this might happen in a Control that recreates it's content based on
                    // user interaction either manually or via a render in something like https://reactjs.org/
                    !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {
                    return;
                }
            }
            mapBrowserEvent.frameState = this.frameState_;
            if (this.dispatchEvent(mapBrowserEvent) !== false) {
                var interactionsArray = this.getInteractions().getArray().slice();
                for (var i = interactionsArray.length - 1; i >= 0; i--) {
                    var interaction = interactionsArray[i];
                    if (interaction.getMap() !== this ||
                        !interaction.getActive() ||
                        !this.getTargetElement()) {
                        continue;
                    }
                    var cont = interaction.handleEvent(mapBrowserEvent);
                    if (!cont || mapBrowserEvent.propagationStopped) {
                        break;
                    }
                }
            }
        };
        /**
         * @protected
         */
        PluggableMap.prototype.handlePostRender = function () {
            var frameState = this.frameState_;
            // Manage the tile queue
            // Image loads are expensive and a limited resource, so try to use them
            // efficiently:
            // * When the view is static we allow a large number of parallel tile loads
            //   to complete the frame as quickly as possible.
            // * When animating or interacting, image loads can cause janks, so we reduce
            //   the maximum number of loads per frame and limit the number of parallel
            //   tile loads to remain reactive to view changes and to reduce the chance of
            //   loading tiles that will quickly disappear from view.
            var tileQueue = this.tileQueue_;
            if (!tileQueue.isEmpty()) {
                var maxTotalLoading = this.maxTilesLoading_;
                var maxNewLoads = maxTotalLoading;
                if (frameState) {
                    var hints = frameState.viewHints;
                    if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {
                        var lowOnFrameBudget = !IMAGE_DECODE && Date.now() - frameState.time > 8;
                        maxTotalLoading = lowOnFrameBudget ? 0 : 8;
                        maxNewLoads = lowOnFrameBudget ? 0 : 2;
                    }
                }
                if (tileQueue.getTilesLoading() < maxTotalLoading) {
                    tileQueue.reprioritize(); // FIXME only call if view has changed
                    tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
                }
            }
            if (frameState &&
                this.hasListener(RenderEventType.RENDERCOMPLETE) &&
                !frameState.animate &&
                !this.tileQueue_.getTilesLoading() &&
                !this.getLoading()) {
                this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);
            }
            var postRenderFunctions = this.postRenderFunctions_;
            for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
                postRenderFunctions[i](this, frameState);
            }
            postRenderFunctions.length = 0;
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleSizeChanged_ = function () {
            if (this.getView() && !this.getView().getAnimating()) {
                this.getView().resolveConstraints(0);
            }
            this.render();
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleTargetChanged_ = function () {
            // target may be undefined, null, a string or an Element.
            // If it's a string we convert it to an Element before proceeding.
            // If it's not now an Element we remove the viewport from the DOM.
            // If it's an Element we append the viewport element to it.
            var targetElement;
            if (this.getTarget()) {
                targetElement = this.getTargetElement();
            }
            if (this.mapBrowserEventHandler_) {
                for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
                    unlistenByKey(this.keyHandlerKeys_[i]);
                }
                this.keyHandlerKeys_ = null;
                this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);
                this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);
                if (this.handleResize_ !== undefined) {
                    removeEventListener(EventType.RESIZE, this.handleResize_, false);
                    this.handleResize_ = undefined;
                }
                this.mapBrowserEventHandler_.dispose();
                this.mapBrowserEventHandler_ = null;
                removeNode(this.viewport_);
            }
            if (!targetElement) {
                if (this.renderer_) {
                    clearTimeout(this.postRenderTimeoutHandle_);
                    this.postRenderTimeoutHandle_ = undefined;
                    this.postRenderFunctions_.length = 0;
                    this.renderer_.dispose();
                    this.renderer_ = null;
                }
                if (this.animationDelayKey_) {
                    cancelAnimationFrame(this.animationDelayKey_);
                    this.animationDelayKey_ = undefined;
                }
            }
            else {
                targetElement.appendChild(this.viewport_);
                if (!this.renderer_) {
                    this.renderer_ = this.createRenderer();
                }
                this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);
                for (var key in MapBrowserEventType) {
                    this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));
                }
                this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);
                this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);
                var keyboardEventTarget = !this.keyboardEventTarget_
                    ? targetElement
                    : this.keyboardEventTarget_;
                this.keyHandlerKeys_ = [
                    listen$1(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),
                    listen$1(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this),
                ];
                if (!this.handleResize_) {
                    this.handleResize_ = this.updateSize.bind(this);
                    window.addEventListener(EventType.RESIZE, this.handleResize_, false);
                }
            }
            this.updateSize();
            // updateSize calls setSize, so no need to call this.render
            // ourselves here.
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleTileChange_ = function () {
            this.render();
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleViewPropertyChanged_ = function () {
            this.render();
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleViewChanged_ = function () {
            if (this.viewPropertyListenerKey_) {
                unlistenByKey(this.viewPropertyListenerKey_);
                this.viewPropertyListenerKey_ = null;
            }
            if (this.viewChangeListenerKey_) {
                unlistenByKey(this.viewChangeListenerKey_);
                this.viewChangeListenerKey_ = null;
            }
            var view = this.getView();
            if (view) {
                this.updateViewportSize_();
                this.viewPropertyListenerKey_ = listen$1(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);
                this.viewChangeListenerKey_ = listen$1(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);
                view.resolveConstraints(0);
            }
            this.render();
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleLayerGroupChanged_ = function () {
            if (this.layerGroupPropertyListenerKeys_) {
                this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
                this.layerGroupPropertyListenerKeys_ = null;
            }
            var layerGroup = this.getLayerGroup();
            if (layerGroup) {
                this.layerGroupPropertyListenerKeys_ = [
                    listen$1(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),
                    listen$1(layerGroup, EventType.CHANGE, this.render, this),
                ];
            }
            this.render();
        };
        /**
         * @return {boolean} Is rendered.
         */
        PluggableMap.prototype.isRendered = function () {
            return !!this.frameState_;
        };
        /**
         * Requests an immediate render in a synchronous manner.
         * @api
         */
        PluggableMap.prototype.renderSync = function () {
            if (this.animationDelayKey_) {
                cancelAnimationFrame(this.animationDelayKey_);
            }
            this.animationDelay_();
        };
        /**
         * Redraws all text after new fonts have loaded
         */
        PluggableMap.prototype.redrawText = function () {
            var layerStates = this.getLayerGroup().getLayerStatesArray();
            for (var i = 0, ii = layerStates.length; i < ii; ++i) {
                var layer = layerStates[i].layer;
                if (layer.hasRenderer()) {
                    layer.getRenderer().handleFontsChanged();
                }
            }
        };
        /**
         * Request a map rendering (at the next animation frame).
         * @api
         */
        PluggableMap.prototype.render = function () {
            if (this.renderer_ && this.animationDelayKey_ === undefined) {
                this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
            }
        };
        /**
         * Remove the given control from the map.
         * @param {import("./control/Control.js").default} control Control.
         * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
         *     if the control was not found).
         * @api
         */
        PluggableMap.prototype.removeControl = function (control) {
            return this.getControls().remove(control);
        };
        /**
         * Remove the given interaction from the map.
         * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
         * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
         *     undefined if the interaction was not found).
         * @api
         */
        PluggableMap.prototype.removeInteraction = function (interaction) {
            return this.getInteractions().remove(interaction);
        };
        /**
         * Removes the given layer from the map.
         * @param {import("./layer/Base.js").default} layer Layer.
         * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
         *     layer was not found).
         * @api
         */
        PluggableMap.prototype.removeLayer = function (layer) {
            var layers = this.getLayerGroup().getLayers();
            return layers.remove(layer);
        };
        /**
         * Remove the given overlay from the map.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
         *     if the overlay was not found).
         * @api
         */
        PluggableMap.prototype.removeOverlay = function (overlay) {
            return this.getOverlays().remove(overlay);
        };
        /**
         * @param {number} time Time.
         * @private
         */
        PluggableMap.prototype.renderFrame_ = function (time) {
            var _this = this;
            var size = this.getSize();
            var view = this.getView();
            var previousFrameState = this.frameState_;
            /** @type {?FrameState} */
            var frameState = null;
            if (size !== undefined && hasArea(size) && view && view.isDef()) {
                var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
                var viewState = view.getState();
                frameState = {
                    animate: false,
                    coordinateToPixelTransform: this.coordinateToPixelTransform_,
                    declutterTree: null,
                    extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),
                    index: this.frameIndex_++,
                    layerIndex: 0,
                    layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
                    pixelRatio: this.pixelRatio_,
                    pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
                    postRenderFunctions: [],
                    size: size,
                    tileQueue: this.tileQueue_,
                    time: time,
                    usedTiles: {},
                    viewState: viewState,
                    viewHints: viewHints,
                    wantedTiles: {},
                };
            }
            this.frameState_ = frameState;
            this.renderer_.renderFrame(frameState);
            if (frameState) {
                if (frameState.animate) {
                    this.render();
                }
                Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);
                if (previousFrameState) {
                    var moveStart = !this.previousExtent_ ||
                        (!isEmpty$1(this.previousExtent_) &&
                            !equals$1(frameState.extent, this.previousExtent_));
                    if (moveStart) {
                        this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));
                        this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
                    }
                }
                var idle = this.previousExtent_ &&
                    !frameState.viewHints[ViewHint.ANIMATING] &&
                    !frameState.viewHints[ViewHint.INTERACTING] &&
                    !equals$1(frameState.extent, this.previousExtent_);
                if (idle) {
                    this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));
                    clone(frameState.extent, this.previousExtent_);
                }
            }
            this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));
            if (!this.postRenderTimeoutHandle_) {
                this.postRenderTimeoutHandle_ = setTimeout(function () {
                    _this.postRenderTimeoutHandle_ = undefined;
                    _this.handlePostRender();
                }, 0);
            }
        };
        /**
         * Sets the layergroup of this map.
         * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
         * @observable
         * @api
         */
        PluggableMap.prototype.setLayerGroup = function (layerGroup) {
            this.set(MapProperty.LAYERGROUP, layerGroup);
        };
        /**
         * Set the size of this map.
         * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
         * @observable
         * @api
         */
        PluggableMap.prototype.setSize = function (size) {
            this.set(MapProperty.SIZE, size);
        };
        /**
         * Set the target element to render this map into.
         * @param {HTMLElement|string|undefined} target The Element or id of the Element
         *     that the map is rendered in.
         * @observable
         * @api
         */
        PluggableMap.prototype.setTarget = function (target) {
            this.set(MapProperty.TARGET, target);
        };
        /**
         * Set the view for this map.
         * @param {View} view The view that controls this map.
         * @observable
         * @api
         */
        PluggableMap.prototype.setView = function (view) {
            this.set(MapProperty.VIEW, view);
        };
        /**
         * Force a recalculation of the map viewport size.  This should be called when
         * third-party code changes the size of the map viewport.
         * @api
         */
        PluggableMap.prototype.updateSize = function () {
            var targetElement = this.getTargetElement();
            if (!targetElement) {
                this.setSize(undefined);
            }
            else {
                var computedStyle = getComputedStyle(targetElement);
                this.setSize([
                    targetElement.offsetWidth -
                        parseFloat(computedStyle['borderLeftWidth']) -
                        parseFloat(computedStyle['paddingLeft']) -
                        parseFloat(computedStyle['paddingRight']) -
                        parseFloat(computedStyle['borderRightWidth']),
                    targetElement.offsetHeight -
                        parseFloat(computedStyle['borderTopWidth']) -
                        parseFloat(computedStyle['paddingTop']) -
                        parseFloat(computedStyle['paddingBottom']) -
                        parseFloat(computedStyle['borderBottomWidth']),
                ]);
            }
            this.updateViewportSize_();
        };
        /**
         * Recomputes the viewport size and save it on the view object (if any)
         * @private
         */
        PluggableMap.prototype.updateViewportSize_ = function () {
            var view = this.getView();
            if (view) {
                var size = undefined;
                var computedStyle = getComputedStyle(this.viewport_);
                if (computedStyle.width && computedStyle.height) {
                    size = [
                        parseInt(computedStyle.width, 10),
                        parseInt(computedStyle.height, 10),
                    ];
                }
                view.setViewportSize(size);
            }
        };
        return PluggableMap;
    }(BaseObject));
    /**
     * @param {MapOptions} options Map options.
     * @return {MapOptionsInternal} Internal map options.
     */
    function createOptionsInternal(options) {
        /**
         * @type {HTMLElement|Document}
         */
        var keyboardEventTarget = null;
        if (options.keyboardEventTarget !== undefined) {
            keyboardEventTarget =
                typeof options.keyboardEventTarget === 'string'
                    ? document.getElementById(options.keyboardEventTarget)
                    : options.keyboardEventTarget;
        }
        /**
         * @type {Object<string, *>}
         */
        var values = {};
        var layerGroup = options.layers &&
            typeof ( /** @type {?} */(options.layers).getLayers) === 'function'
            ? /** @type {LayerGroup} */ (options.layers)
            : new LayerGroup({ layers: /** @type {Collection} */ (options.layers) });
        values[MapProperty.LAYERGROUP] = layerGroup;
        values[MapProperty.TARGET] = options.target;
        values[MapProperty.VIEW] =
            options.view !== undefined ? options.view : new View();
        var controls;
        if (options.controls !== undefined) {
            if (Array.isArray(options.controls)) {
                controls = new Collection(options.controls.slice());
            }
            else {
                assert(typeof ( /** @type {?} */(options.controls).getArray) === 'function', 47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
                controls = /** @type {Collection} */ (options.controls);
            }
        }
        var interactions;
        if (options.interactions !== undefined) {
            if (Array.isArray(options.interactions)) {
                interactions = new Collection(options.interactions.slice());
            }
            else {
                assert(typeof ( /** @type {?} */(options.interactions).getArray) ===
                    'function', 48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
                interactions = /** @type {Collection} */ (options.interactions);
            }
        }
        var overlays;
        if (options.overlays !== undefined) {
            if (Array.isArray(options.overlays)) {
                overlays = new Collection(options.overlays.slice());
            }
            else {
                assert(typeof ( /** @type {?} */(options.overlays).getArray) === 'function', 49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
                overlays = options.overlays;
            }
        }
        else {
            overlays = new Collection();
        }
        return {
            controls: controls,
            interactions: interactions,
            keyboardEventTarget: keyboardEventTarget,
            overlays: overlays,
            values: values,
        };
    }

    var __extends$M = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {HTMLElement} [element] The element is the control's
     * container element. This only needs to be specified if you're developing
     * a custom control.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when
     * the control should be re-rendered. This is called in a `requestAnimationFrame`
     * callback.
     * @property {HTMLElement|string} [target] Specify a target if you want
     * the control to be rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A control is a visible widget with a DOM element in a fixed position on the
     * screen. They can involve user input (buttons), or be informational only;
     * the position is determined using CSS. By default these are placed in the
     * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
     * any outside DOM element.
     *
     * This is the base class for controls. You can use it for simple custom
     * controls by creating the element with listeners, creating an instance:
     * ```js
     * var myControl = new Control({element: myElement});
     * ```
     * and then adding this to the map.
     *
     * The main advantage of having this as a control rather than a simple separate
     * DOM element is that preventing propagation is handled for you. Controls
     * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
     *
     * You can also extend this base for your own control class. See
     * examples/custom-controls for an example of how to do this.
     *
     * @api
     */
    var Control = /** @class */ (function (_super) {
        __extends$M(Control, _super);
        /**
         * @param {Options} options Control options.
         */
        function Control(options) {
            var _this = _super.call(this) || this;
            var element = options.element;
            if (element && !options.target && !element.style.pointerEvents) {
                element.style.pointerEvents = 'auto';
            }
            /**
             * @protected
             * @type {HTMLElement}
             */
            _this.element = element ? element : null;
            /**
             * @private
             * @type {HTMLElement}
             */
            _this.target_ = null;
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            _this.map_ = null;
            /**
             * @protected
             * @type {!Array<import("../events.js").EventsKey>}
             */
            _this.listenerKeys = [];
            if (options.render) {
                _this.render = options.render;
            }
            if (options.target) {
                _this.setTarget(options.target);
            }
            return _this;
        }
        /**
         * Clean up.
         */
        Control.prototype.disposeInternal = function () {
            removeNode(this.element);
            _super.prototype.disposeInternal.call(this);
        };
        /**
         * Get the map associated with this control.
         * @return {import("../PluggableMap.js").default} Map.
         * @api
         */
        Control.prototype.getMap = function () {
            return this.map_;
        };
        /**
         * Remove the control from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        Control.prototype.setMap = function (map) {
            if (this.map_) {
                removeNode(this.element);
            }
            for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
                unlistenByKey(this.listenerKeys[i]);
            }
            this.listenerKeys.length = 0;
            this.map_ = map;
            if (this.map_) {
                var target = this.target_
                    ? this.target_
                    : map.getOverlayContainerStopEvent();
                target.appendChild(this.element);
                if (this.render !== VOID) {
                    this.listenerKeys.push(listen$1(map, MapEventType.POSTRENDER, this.render, this));
                }
                map.render();
            }
        };
        /**
         * Renders the control.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @api
         */
        Control.prototype.render = function (mapEvent) { };
        /**
         * This function is used to set a target element for the control. It has no
         * effect if it is called after the control has been added to the map (i.e.
         * after `setMap` is called on the control). If no `target` is set in the
         * options passed to the control constructor and if `setTarget` is not called
         * then the control is added to the map's overlay container.
         * @param {HTMLElement|string} target Target.
         * @api
         */
        Control.prototype.setTarget = function (target) {
            this.target_ =
                typeof target === 'string' ? document.getElementById(target) : target;
        };
        return Control;
    }(BaseObject));

    var __extends$N = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-attribution'] CSS class name.
     * @property {HTMLElement|string} [target] Specify a target if you
     * want the control to be rendered outside of the map's
     * viewport.
     * @property {boolean} [collapsible] Specify if attributions can
     * be collapsed. If not specified, sources control this behavior with their
     * `attributionsCollapsible` setting.
     * @property {boolean} [collapsed=true] Specify if attributions should
     * be collapsed at startup.
     * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
     * @property {string} [label='i'] Text label to use for the
     * collapsed attributions button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [expandClassName=className + '-expand'] CSS class name for the
     * collapsed attributions button.
     * @property {string|HTMLElement} [collapseLabel='»'] Text label to use
     * for the expanded attributions button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the
     * expanded attributions button.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when
     * the control should be re-rendered. This is called in a `requestAnimationFrame`
     * callback.
     */
    /**
     * @classdesc
     * Control to show all the attributions associated with the layer sources
     * in the map. This control is one of the default controls included in maps.
     * By default it will show in the bottom right portion of the map, but this can
     * be changed by using a css selector for `.ol-attribution`.
     *
     * @api
     */
    var Attribution = /** @class */ (function (_super) {
        __extends$N(Attribution, _super);
        /**
         * @param {Options=} opt_options Attribution options.
         */
        function Attribution(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                element: document.createElement('div'),
                render: options.render,
                target: options.target,
            }) || this;
            /**
             * @private
             * @type {HTMLElement}
             */
            _this.ulElement_ = document.createElement('ul');
            /**
             * @private
             * @type {boolean}
             */
            _this.collapsed_ =
                options.collapsed !== undefined ? options.collapsed : true;
            /**
             * @private
             * @type {boolean}
             */
            _this.userCollapsed_ = _this.collapsed_;
            /**
             * @private
             * @type {boolean}
             */
            _this.overrideCollapsible_ = options.collapsible !== undefined;
            /**
             * @private
             * @type {boolean}
             */
            _this.collapsible_ =
                options.collapsible !== undefined ? options.collapsible : true;
            if (!_this.collapsible_) {
                _this.collapsed_ = false;
            }
            var className = options.className !== undefined ? options.className : 'ol-attribution';
            var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';
            var expandClassName = options.expandClassName !== undefined
                ? options.expandClassName
                : className + '-expand';
            var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';
            var collapseClassName = options.collapseClassName !== undefined
                ? options.collapseClassName
                : className + '-collpase';
            if (typeof collapseLabel === 'string') {
                /**
                 * @private
                 * @type {HTMLElement}
                 */
                _this.collapseLabel_ = document.createElement('span');
                _this.collapseLabel_.textContent = collapseLabel;
                _this.collapseLabel_.className = collapseClassName;
            }
            else {
                _this.collapseLabel_ = collapseLabel;
            }
            var label = options.label !== undefined ? options.label : 'i';
            if (typeof label === 'string') {
                /**
                 * @private
                 * @type {HTMLElement}
                 */
                _this.label_ = document.createElement('span');
                _this.label_.textContent = label;
                _this.label_.className = expandClassName;
            }
            else {
                _this.label_ = label;
            }
            var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;
            var button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.title = tipLabel;
            button.appendChild(activeLabel);
            button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
            var cssClasses = className +
                ' ' +
                CLASS_UNSELECTABLE +
                ' ' +
                CLASS_CONTROL +
                (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
                (_this.collapsible_ ? '' : ' ol-uncollapsible');
            var element = _this.element;
            element.className = cssClasses;
            element.appendChild(_this.ulElement_);
            element.appendChild(button);
            /**
             * A list of currently rendered resolutions.
             * @type {Array<string>}
             * @private
             */
            _this.renderedAttributions_ = [];
            /**
             * @private
             * @type {boolean}
             */
            _this.renderedVisible_ = true;
            return _this;
        }
        /**
         * Collect a list of visible attributions and set the collapsible state.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @return {Array<string>} Attributions.
         * @private
         */
        Attribution.prototype.collectSourceAttributions_ = function (frameState) {
            /**
             * Used to determine if an attribution already exists.
             * @type {!Object<string, boolean>}
             */
            var lookup = {};
            /**
             * A list of visible attributions.
             * @type {Array<string>}
             */
            var visibleAttributions = [];
            var collapsible = true;
            var layerStatesArray = frameState.layerStatesArray;
            for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                var layerState = layerStatesArray[i];
                if (!inView(layerState, frameState.viewState)) {
                    continue;
                }
                var source = /** @type {import("../layer/Layer.js").default} */ (layerState.layer).getSource();
                if (!source) {
                    continue;
                }
                var attributionGetter = source.getAttributions();
                if (!attributionGetter) {
                    continue;
                }
                var attributions = attributionGetter(frameState);
                if (!attributions) {
                    continue;
                }
                collapsible =
                    collapsible && source.getAttributionsCollapsible() !== false;
                if (Array.isArray(attributions)) {
                    for (var j = 0, jj = attributions.length; j < jj; ++j) {
                        if (!(attributions[j] in lookup)) {
                            visibleAttributions.push(attributions[j]);
                            lookup[attributions[j]] = true;
                        }
                    }
                }
                else {
                    if (!(attributions in lookup)) {
                        visibleAttributions.push(attributions);
                        lookup[attributions] = true;
                    }
                }
            }
            if (!this.overrideCollapsible_) {
                this.setCollapsible(collapsible);
            }
            return visibleAttributions;
        };
        /**
         * @private
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        Attribution.prototype.updateElement_ = function (frameState) {
            if (!frameState) {
                if (this.renderedVisible_) {
                    this.element.style.display = 'none';
                    this.renderedVisible_ = false;
                }
                return;
            }
            var attributions = this.collectSourceAttributions_(frameState);
            var visible = attributions.length > 0;
            if (this.renderedVisible_ != visible) {
                this.element.style.display = visible ? '' : 'none';
                this.renderedVisible_ = visible;
            }
            if (equals(attributions, this.renderedAttributions_)) {
                return;
            }
            removeChildren(this.ulElement_);
            // append the attributions
            for (var i = 0, ii = attributions.length; i < ii; ++i) {
                var element = document.createElement('li');
                element.innerHTML = attributions[i];
                this.ulElement_.appendChild(element);
            }
            this.renderedAttributions_ = attributions;
        };
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        Attribution.prototype.handleClick_ = function (event) {
            event.preventDefault();
            this.handleToggle_();
            this.userCollapsed_ = this.collapsed_;
        };
        /**
         * @private
         */
        Attribution.prototype.handleToggle_ = function () {
            this.element.classList.toggle(CLASS_COLLAPSED);
            if (this.collapsed_) {
                replaceNode(this.collapseLabel_, this.label_);
            }
            else {
                replaceNode(this.label_, this.collapseLabel_);
            }
            this.collapsed_ = !this.collapsed_;
        };
        /**
         * Return `true` if the attribution is collapsible, `false` otherwise.
         * @return {boolean} True if the widget is collapsible.
         * @api
         */
        Attribution.prototype.getCollapsible = function () {
            return this.collapsible_;
        };
        /**
         * Set whether the attribution should be collapsible.
         * @param {boolean} collapsible True if the widget is collapsible.
         * @api
         */
        Attribution.prototype.setCollapsible = function (collapsible) {
            if (this.collapsible_ === collapsible) {
                return;
            }
            this.collapsible_ = collapsible;
            this.element.classList.toggle('ol-uncollapsible');
            if (this.userCollapsed_) {
                this.handleToggle_();
            }
        };
        /**
         * Collapse or expand the attribution according to the passed parameter. Will
         * not do anything if the attribution isn't collapsible or if the current
         * collapsed state is already the one requested.
         * @param {boolean} collapsed True if the widget is collapsed.
         * @api
         */
        Attribution.prototype.setCollapsed = function (collapsed) {
            this.userCollapsed_ = collapsed;
            if (!this.collapsible_ || this.collapsed_ === collapsed) {
                return;
            }
            this.handleToggle_();
        };
        /**
         * Return `true` when the attribution is currently collapsed or `false`
         * otherwise.
         * @return {boolean} True if the widget is collapsed.
         * @api
         */
        Attribution.prototype.getCollapsed = function () {
            return this.collapsed_;
        };
        /**
         * Update the attribution element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        Attribution.prototype.render = function (mapEvent) {
            this.updateElement_(mapEvent.frameState);
        };
        return Attribution;
    }(Control));

    var __extends$O = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-rotate'] CSS class name.
     * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
     * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control should
     * be re-rendered. This is called in a `requestAnimationFrame` callback.
     * @property {function():void} [resetNorth] Function called when the control is clicked.
     * This will override the default `resetNorth`.
     * @property {HTMLElement|string} [target] Specify a target if you want the control to be
     * rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A button control to reset rotation to 0.
     * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
     * selector is added to the button when the rotation is 0.
     *
     * @api
     */
    var Rotate = /** @class */ (function (_super) {
        __extends$O(Rotate, _super);
        /**
         * @param {Options=} opt_options Rotate options.
         */
        function Rotate(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                element: document.createElement('div'),
                render: options.render,
                target: options.target,
            }) || this;
            var className = options.className !== undefined ? options.className : 'ol-rotate';
            var label = options.label !== undefined ? options.label : '\u21E7';
            var compassClassName = options.compassClassName !== undefined
                ? options.compassClassName
                : 'ol-compass';
            /**
             * @type {HTMLElement}
             * @private
             */
            _this.label_ = null;
            if (typeof label === 'string') {
                _this.label_ = document.createElement('span');
                _this.label_.className = compassClassName;
                _this.label_.textContent = label;
            }
            else {
                _this.label_ = label;
                _this.label_.classList.add(compassClassName);
            }
            var tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';
            var button = document.createElement('button');
            button.className = className + '-reset';
            button.setAttribute('type', 'button');
            button.title = tipLabel;
            button.appendChild(_this.label_);
            button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
            var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
            var element = _this.element;
            element.className = cssClasses;
            element.appendChild(button);
            _this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;
            /**
             * @type {number}
             * @private
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            /**
             * @type {boolean}
             * @private
             */
            _this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.rotation_ = undefined;
            if (_this.autoHide_) {
                _this.element.classList.add(CLASS_HIDDEN);
            }
            return _this;
        }
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        Rotate.prototype.handleClick_ = function (event) {
            event.preventDefault();
            if (this.callResetNorth_ !== undefined) {
                this.callResetNorth_();
            }
            else {
                this.resetNorth_();
            }
        };
        /**
         * @private
         */
        Rotate.prototype.resetNorth_ = function () {
            var map = this.getMap();
            var view = map.getView();
            if (!view) {
                // the map does not have a view, so we can't act
                // upon it
                return;
            }
            var rotation = view.getRotation();
            if (rotation !== undefined) {
                if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {
                    view.animate({
                        rotation: 0,
                        duration: this.duration_,
                        easing: easeOut,
                    });
                }
                else {
                    view.setRotation(0);
                }
            }
        };
        /**
         * Update the rotate control element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        Rotate.prototype.render = function (mapEvent) {
            var frameState = mapEvent.frameState;
            if (!frameState) {
                return;
            }
            var rotation = frameState.viewState.rotation;
            if (rotation != this.rotation_) {
                var transform = 'rotate(' + rotation + 'rad)';
                if (this.autoHide_) {
                    var contains = this.element.classList.contains(CLASS_HIDDEN);
                    if (!contains && rotation === 0) {
                        this.element.classList.add(CLASS_HIDDEN);
                    }
                    else if (contains && rotation !== 0) {
                        this.element.classList.remove(CLASS_HIDDEN);
                    }
                }
                this.label_.style.transform = transform;
            }
            this.rotation_ = rotation;
        };
        return Rotate;
    }(Control));

    var __extends$P = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {string} [className='ol-zoom'] CSS class name.
     * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.
     * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.
     * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
     * button. Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
     * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
     * @property {number} [delta=1] The zoom delta applied on each click.
     * @property {HTMLElement|string} [target] Specify a target if you want the control to be
     * rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A control with 2 buttons, one for zoom in and one for zoom out.
     * This control is one of the default controls of a map. To style this control
     * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
     *
     * @api
     */
    var Zoom = /** @class */ (function (_super) {
        __extends$P(Zoom, _super);
        /**
         * @param {Options=} opt_options Zoom options.
         */
        function Zoom(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                element: document.createElement('div'),
                target: options.target,
            }) || this;
            var className = options.className !== undefined ? options.className : 'ol-zoom';
            var delta = options.delta !== undefined ? options.delta : 1;
            var zoomInClassName = options.zoomInClassName !== undefined
                ? options.zoomInClassName
                : className + '-in';
            var zoomOutClassName = options.zoomOutClassName !== undefined
                ? options.zoomOutClassName
                : className + '-out';
            var zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
            var zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';
            var zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';
            var zoomOutTipLabel = options.zoomOutTipLabel !== undefined
                ? options.zoomOutTipLabel
                : 'Zoom out';
            var inElement = document.createElement('button');
            inElement.className = zoomInClassName;
            inElement.setAttribute('type', 'button');
            inElement.title = zoomInTipLabel;
            inElement.appendChild(typeof zoomInLabel === 'string'
                ? document.createTextNode(zoomInLabel)
                : zoomInLabel);
            inElement.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this, delta), false);
            var outElement = document.createElement('button');
            outElement.className = zoomOutClassName;
            outElement.setAttribute('type', 'button');
            outElement.title = zoomOutTipLabel;
            outElement.appendChild(typeof zoomOutLabel === 'string'
                ? document.createTextNode(zoomOutLabel)
                : zoomOutLabel);
            outElement.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this, -delta), false);
            var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
            var element = _this.element;
            element.className = cssClasses;
            element.appendChild(inElement);
            element.appendChild(outElement);
            /**
             * @type {number}
             * @private
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            return _this;
        }
        /**
         * @param {number} delta Zoom delta.
         * @param {MouseEvent} event The event to handle
         * @private
         */
        Zoom.prototype.handleClick_ = function (delta, event) {
            event.preventDefault();
            this.zoomByDelta_(delta);
        };
        /**
         * @param {number} delta Zoom delta.
         * @private
         */
        Zoom.prototype.zoomByDelta_ = function (delta) {
            var map = this.getMap();
            var view = map.getView();
            if (!view) {
                // the map does not have a view, so we can't act
                // upon it
                return;
            }
            var currentZoom = view.getZoom();
            if (currentZoom !== undefined) {
                var newZoom = view.getConstrainedZoom(currentZoom + delta);
                if (this.duration_ > 0) {
                    if (view.getAnimating()) {
                        view.cancelAnimations();
                    }
                    view.animate({
                        zoom: newZoom,
                        duration: this.duration_,
                        easing: easeOut,
                    });
                }
                else {
                    view.setZoom(newZoom);
                }
            }
        };
        return Zoom;
    }(Control));

    /**
     * @module ol/control
     */
    /**
     * @typedef {Object} DefaultsOptions
     * @property {boolean} [attribution=true] Include
     * {@link module:ol/control/Attribution~Attribution}.
     * @property {import("./control/Attribution.js").Options} [attributionOptions]
     * Options for {@link module:ol/control/Attribution~Attribution}.
     * @property {boolean} [rotate=true] Include
     * {@link module:ol/control/Rotate~Rotate}.
     * @property {import("./control/Rotate.js").Options} [rotateOptions] Options
     * for {@link module:ol/control/Rotate~Rotate}.
     * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
     * @property {import("./control/Zoom.js").Options} [zoomOptions] Options for
     * {@link module:ol/control/Zoom~Zoom}.
     * @api
     */
    /**
     * Set of controls included in maps by default. Unless configured otherwise,
     * this returns a collection containing an instance of each of the following
     * controls:
     * * {@link module:ol/control/Zoom~Zoom}
     * * {@link module:ol/control/Rotate~Rotate}
     * * {@link module:ol/control/Attribution~Attribution}
     *
     * @param {DefaultsOptions=} opt_options
     * Defaults options.
     * @return {Collection<import("./control/Control.js").default>}
     * Controls.
     * @api
     */
    function defaults(opt_options) {
        var options = opt_options ? opt_options : {};
        var controls = new Collection();
        var zoomControl = options.zoom !== undefined ? options.zoom : true;
        if (zoomControl) {
            controls.push(new Zoom(options.zoomOptions));
        }
        var rotateControl = options.rotate !== undefined ? options.rotate : true;
        if (rotateControl) {
            controls.push(new Rotate(options.rotateOptions));
        }
        var attributionControl = options.attribution !== undefined ? options.attribution : true;
        if (attributionControl) {
            controls.push(new Attribution(options.attributionOptions));
        }
        return controls;
    }

    /**
     * @module ol/interaction/Property
     */
    /**
     * @enum {string}
     */
    var InteractionProperty = {
        ACTIVE: 'active',
    };

    var __extends$Q = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Object literal with config options for interactions.
     * @typedef {Object} InteractionOptions
     * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
     * Method called by the map to notify the interaction that a browser event was
     * dispatched to the map. If the function returns a falsy value, propagation of
     * the event to other interactions in the map's interactions chain will be
     * prevented (this includes functions with no explicit return). The interactions
     * are traversed in reverse order of the interactions collection of the map.
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * User actions that change the state of the map. Some are similar to controls,
     * but are not associated with a DOM element.
     * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
     * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
     * by a keyboard event not a button element event.
     * Although interactions do not have a DOM element, some of them do render
     * vectors and so are visible on the screen.
     * @api
     */
    var Interaction = /** @class */ (function (_super) {
        __extends$Q(Interaction, _super);
        /**
         * @param {InteractionOptions=} opt_options Options.
         */
        function Interaction(opt_options) {
            var _this = _super.call(this) || this;
            if (opt_options && opt_options.handleEvent) {
                _this.handleEvent = opt_options.handleEvent;
            }
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            _this.map_ = null;
            _this.setActive(true);
            return _this;
        }
        /**
         * Return whether the interaction is currently active.
         * @return {boolean} `true` if the interaction is active, `false` otherwise.
         * @observable
         * @api
         */
        Interaction.prototype.getActive = function () {
            return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
        };
        /**
         * Get the map associated with this interaction.
         * @return {import("../PluggableMap.js").default} Map.
         * @api
         */
        Interaction.prototype.getMap = function () {
            return this.map_;
        };
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event}.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @api
         */
        Interaction.prototype.handleEvent = function (mapBrowserEvent) {
            return true;
        };
        /**
         * Activate or deactivate the interaction.
         * @param {boolean} active Active.
         * @observable
         * @api
         */
        Interaction.prototype.setActive = function (active) {
            this.set(InteractionProperty.ACTIVE, active);
        };
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        Interaction.prototype.setMap = function (map) {
            this.map_ = map;
        };
        return Interaction;
    }(BaseObject));
    /**
     * @param {import("../View.js").default} view View.
     * @param {import("../coordinate.js").Coordinate} delta Delta.
     * @param {number=} opt_duration Duration.
     */
    function pan(view, delta, opt_duration) {
        var currentCenter = view.getCenterInternal();
        if (currentCenter) {
            var center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
            view.animateInternal({
                duration: opt_duration !== undefined ? opt_duration : 250,
                easing: linear,
                center: view.getConstrainedCenter(center),
            });
        }
    }
    /**
     * @param {import("../View.js").default} view View.
     * @param {number} delta Delta from previous zoom level.
     * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate in the user projection.
     * @param {number=} opt_duration Duration.
     */
    function zoomByDelta(view, delta, opt_anchor, opt_duration) {
        var currentZoom = view.getZoom();
        if (currentZoom === undefined) {
            return;
        }
        var newZoom = view.getConstrainedZoom(currentZoom + delta);
        var newResolution = view.getResolutionForZoom(newZoom);
        if (view.getAnimating()) {
            view.cancelAnimations();
        }
        view.animate({
            resolution: newResolution,
            anchor: opt_anchor,
            duration: opt_duration !== undefined ? opt_duration : 250,
            easing: easeOut,
        });
    }

    var __extends$R = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {number} [delta=1] The zoom delta applied on each double click.
     */
    /**
     * @classdesc
     * Allows the user to zoom by double-clicking on the map.
     * @api
     */
    var DoubleClickZoom = /** @class */ (function (_super) {
        __extends$R(DoubleClickZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DoubleClickZoom(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {number}
             */
            _this.delta_ = options.delta ? options.delta : 1;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            return _this;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
         * doubleclick) and eventually zooms the map.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        DoubleClickZoom.prototype.handleEvent = function (mapBrowserEvent) {
            var stopEvent = false;
            if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
                var browserEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
                var map = mapBrowserEvent.map;
                var anchor = mapBrowserEvent.coordinate;
                var delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
                var view = map.getView();
                zoomByDelta(view, delta, anchor, this.duration_);
                browserEvent.preventDefault();
                stopEvent = true;
            }
            return !stopEvent;
        };
        return DoubleClickZoom;
    }(Interaction));

    var __extends$S = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleDownEvent]
     * Function handling "down" events. If the function returns `true` then a drag
     * sequence is started.
     * @property {function(import("../MapBrowserEvent.js").default):void} [handleDragEvent]
     * Function handling "drag" events. This function is called on "move" events
     * during a drag sequence.
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
     * Method called by the map to notify the interaction that a browser event was
     * dispatched to the map. The function may return `false` to prevent the
     * propagation of the event to other interactions in the map's interactions
     * chain.
     * @property {function(import("../MapBrowserEvent.js").default):void} [handleMoveEvent]
     * Function handling "move" events. This function is called on "move" events.
     * This functions is also called during a drag sequence, so during a drag
     * sequence both the `handleDragEvent` function and this function are called.
     * If `handleDownEvent` is defined and it returns true this function will not
     * be called during a drag sequence.
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleUpEvent]
     *  Function handling "up" events. If the function returns `false` then the
     * current drag sequence is stopped.
     * @property {function(boolean):boolean} [stopDown]
     * Should the down event be propagated to other interactions, or should be
     * stopped?
     */
    /**
     * @classdesc
     * Base class that calls user-defined functions on `down`, `move` and `up`
     * events. This class also manages "drag sequences".
     *
     * When the `handleDownEvent` user function returns `true` a drag sequence is
     * started. During a drag sequence the `handleDragEvent` user function is
     * called on `move` events. The drag sequence ends when the `handleUpEvent`
     * user function is called and returns `false`.
     * @api
     */
    var PointerInteraction = /** @class */ (function (_super) {
        __extends$S(PointerInteraction, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function PointerInteraction(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, 
            /** @type {import("./Interaction.js").InteractionOptions} */ (options)) || this;
            if (options.handleDownEvent) {
                _this.handleDownEvent = options.handleDownEvent;
            }
            if (options.handleDragEvent) {
                _this.handleDragEvent = options.handleDragEvent;
            }
            if (options.handleMoveEvent) {
                _this.handleMoveEvent = options.handleMoveEvent;
            }
            if (options.handleUpEvent) {
                _this.handleUpEvent = options.handleUpEvent;
            }
            if (options.stopDown) {
                _this.stopDown = options.stopDown;
            }
            /**
             * @type {boolean}
             * @protected
             */
            _this.handlingDownUpSequence = false;
            /**
             * @type {!Object<string, PointerEvent>}
             * @private
             */
            _this.trackedPointers_ = {};
            /**
             * @type {Array<PointerEvent>}
             * @protected
             */
            _this.targetPointers = [];
            return _this;
        }
        /**
         * Returns the current number of pointers involved in the interaction,
         * e.g. `2` when two fingers are used.
         * @return {number} The number of pointers.
         * @api
         */
        PointerInteraction.prototype.getPointerCount = function () {
            return this.targetPointers.length;
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         * @protected
         */
        PointerInteraction.prototype.handleDownEvent = function (mapBrowserEvent) {
            return false;
        };
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @protected
         */
        PointerInteraction.prototype.handleDragEvent = function (mapBrowserEvent) { };
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
         * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
         * detected.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @api
         */
        PointerInteraction.prototype.handleEvent = function (mapBrowserEvent) {
            if (!mapBrowserEvent.originalEvent) {
                return true;
            }
            var stopEvent = false;
            this.updateTrackedPointers_(mapBrowserEvent);
            if (this.handlingDownUpSequence) {
                if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
                    this.handleDragEvent(mapBrowserEvent);
                    // prevent page scrolling during dragging
                    mapBrowserEvent.originalEvent.preventDefault();
                }
                else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
                    var handledUp = this.handleUpEvent(mapBrowserEvent);
                    this.handlingDownUpSequence =
                        handledUp && this.targetPointers.length > 0;
                }
            }
            else {
                if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
                    var handled = this.handleDownEvent(mapBrowserEvent);
                    this.handlingDownUpSequence = handled;
                    stopEvent = this.stopDown(handled);
                }
                else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
                    this.handleMoveEvent(mapBrowserEvent);
                }
            }
            return !stopEvent;
        };
        /**
         * Handle pointer move events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @protected
         */
        PointerInteraction.prototype.handleMoveEvent = function (mapBrowserEvent) { };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         * @protected
         */
        PointerInteraction.prototype.handleUpEvent = function (mapBrowserEvent) {
            return false;
        };
        /**
         * This function is used to determine if "down" events should be propagated
         * to other interactions or should be stopped.
         * @param {boolean} handled Was the event handled by the interaction?
         * @return {boolean} Should the `down` event be stopped?
         */
        PointerInteraction.prototype.stopDown = function (handled) {
            return handled;
        };
        /**
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @private
         */
        PointerInteraction.prototype.updateTrackedPointers_ = function (mapBrowserEvent) {
            if (isPointerDraggingEvent(mapBrowserEvent)) {
                var event_1 = mapBrowserEvent.originalEvent;
                var id = event_1.pointerId.toString();
                if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
                    delete this.trackedPointers_[id];
                }
                else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
                    this.trackedPointers_[id] = event_1;
                }
                else if (id in this.trackedPointers_) {
                    // update only when there was a pointerdown event for this pointer
                    this.trackedPointers_[id] = event_1;
                }
                this.targetPointers = getValues(this.trackedPointers_);
            }
        };
        return PointerInteraction;
    }(Interaction));
    /**
     * @param {Array<PointerEvent>} pointerEvents List of events.
     * @return {import("../pixel.js").Pixel} Centroid pixel.
     */
    function centroid(pointerEvents) {
        var length = pointerEvents.length;
        var clientX = 0;
        var clientY = 0;
        for (var i = 0; i < length; i++) {
            clientX += pointerEvents[i].clientX;
            clientY += pointerEvents[i].clientY;
        }
        return [clientX / length, clientY / length];
    }
    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} Whether the event is a pointerdown, pointerdrag
     *     or pointerup event.
     */
    function isPointerDraggingEvent(mapBrowserEvent) {
        var type = mapBrowserEvent.type;
        return (type === MapBrowserEventType.POINTERDOWN ||
            type === MapBrowserEventType.POINTERDRAG ||
            type === MapBrowserEventType.POINTERUP);
    }

    /**
     * @module ol/events/condition
     */
    /**
     * A function that takes an {@link module:ol/MapBrowserEvent} and returns a
     * `{boolean}`. If the condition is met, true should be returned.
     *
     * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
     */
    /**
     * Creates a condition function that passes when all provided conditions pass.
     * @param {...Condition} var_args Conditions to check.
     * @return {Condition} Condition function.
     */
    function all$1(var_args) {
        var conditions = arguments;
        /**
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @return {boolean} All conditions passed.
         */
        return function (event) {
            var pass = true;
            for (var i = 0, ii = conditions.length; i < ii; ++i) {
                pass = pass && conditions[i](event);
                if (!pass) {
                    break;
                }
            }
            return pass;
        };
    }
    /**
     * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
     * (e.g. when additionally the platform-modifier-key is pressed).
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if only the alt and shift keys are pressed.
     * @api
     */
    var altShiftKeysOnly = function (mapBrowserEvent) {
        var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            originalEvent.shiftKey);
    };
    /**
     * Return `true` if the map has the focus. This condition requires a map target
     * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
     *
     * @param {import("../MapBrowserEvent.js").default} event Map browser event.
     * @return {boolean} The map has the focus.
     * @api
     */
    var focus = function (event) {
        return event.target.getTargetElement().contains(document.activeElement);
    };
    /**
     * Return `true` if the map has the focus or no 'tabindex' attribute set.
     *
     * @param {import("../MapBrowserEvent.js").default} event Map browser event.
     * @return {boolean} The map container has the focus or no 'tabindex' attribute.
     */
    var focusWithTabindex = function (event) {
        return event.map.getTargetElement().hasAttribute('tabindex')
            ? focus(event)
            : true;
    };
    /**
     * Return always true.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True.
     * @api
     */
    var always = TRUE;
    /**
     * Return `true` if the event has an "action"-producing mouse button.
     *
     * By definition, this includes left-click on windows/linux, and left-click
     * without the ctrl key on Macs.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} The result.
     */
    var mouseActionButton = function (mapBrowserEvent) {
        var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
        return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);
    };
    /**
     * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
     * pressed.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True only if there no modifier keys are pressed.
     * @api
     */
    var noModifierKeys = function (mapBrowserEvent) {
        var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (!originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            !originalEvent.shiftKey);
    };
    /**
     * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
     * additionally the alt-key is pressed).
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if only the shift key is pressed.
     * @api
     */
    var shiftKeyOnly = function (mapBrowserEvent) {
        var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (!originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            originalEvent.shiftKey);
    };
    /**
     * Return `true` if the target element is not editable, i.e. not a `<input>`-,
     * `<select>`- or `<textarea>`-element, `false` otherwise.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True only if the target element is not editable.
     * @api
     */
    var targetNotEditable = function (mapBrowserEvent) {
        var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        var tagName = /** @type {Element} */ (originalEvent.target).tagName;
        return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';
    };
    /**
     * Return `true` if the event originates from a mouse device.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event originates from a mouse device.
     * @api
     */
    var mouseOnly = function (mapBrowserEvent) {
        var pointerEvent = /** @type {import("../MapBrowserEvent").default} */ (mapBrowserEvent)
            .originalEvent;
        assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
        // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
        return pointerEvent.pointerType == 'mouse';
    };
    /**
     * Return `true` if the event originates from a primary pointer in
     * contact with the surface or if the left mouse button is pressed.
     * See http://www.w3.org/TR/pointerevents/#button-states.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event originates from a primary pointer.
     * @api
     */
    var primaryAction = function (mapBrowserEvent) {
        var pointerEvent = /** @type {import("../MapBrowserEvent").default} */ (mapBrowserEvent)
            .originalEvent;
        assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
        return pointerEvent.isPrimary && pointerEvent.button === 0;
    };

    var __extends$T = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~noModifierKeys} and {@link module:ol/events/condition~primaryAction}.
     * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
     * the interaction will only handle events when the map has the focus.
     * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
     */
    /**
     * @classdesc
     * Allows the user to pan the map by dragging the map.
     * @api
     */
    var DragPan = /** @class */ (function (_super) {
        __extends$T(DragPan, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DragPan(opt_options) {
            var _this = _super.call(this, {
                stopDown: FALSE,
            }) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {import("../Kinetic.js").default|undefined}
             */
            _this.kinetic_ = options.kinetic;
            /**
             * @type {import("../pixel.js").Pixel}
             */
            _this.lastCentroid = null;
            /**
             * @type {number}
             */
            _this.lastPointersCount_;
            /**
             * @type {boolean}
             */
            _this.panning_ = false;
            var condition = options.condition
                ? options.condition
                : all$1(noModifierKeys, primaryAction);
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.onFocusOnly
                ? all$1(focusWithTabindex, condition)
                : condition;
            /**
             * @private
             * @type {boolean}
             */
            _this.noKinetic_ = false;
            return _this;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {
            if (!this.panning_) {
                this.panning_ = true;
                this.getMap().getView().beginInteraction();
            }
            var targetPointers = this.targetPointers;
            var centroid$1 = centroid(targetPointers);
            if (targetPointers.length == this.lastPointersCount_) {
                if (this.kinetic_) {
                    this.kinetic_.update(centroid$1[0], centroid$1[1]);
                }
                if (this.lastCentroid) {
                    var delta = [
                        this.lastCentroid[0] - centroid$1[0],
                        centroid$1[1] - this.lastCentroid[1],
                    ];
                    var map = mapBrowserEvent.map;
                    var view = map.getView();
                    scale(delta, view.getResolution());
                    rotate(delta, view.getRotation());
                    view.adjustCenterInternal(delta);
                }
            }
            else if (this.kinetic_) {
                // reset so we don't overestimate the kinetic energy after
                // after one finger down, tiny drag, second finger down
                this.kinetic_.begin();
            }
            this.lastCentroid = centroid$1;
            this.lastPointersCount_ = targetPointers.length;
            mapBrowserEvent.originalEvent.preventDefault();
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {
            var map = mapBrowserEvent.map;
            var view = map.getView();
            if (this.targetPointers.length === 0) {
                if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
                    var distance = this.kinetic_.getDistance();
                    var angle = this.kinetic_.getAngle();
                    var center = view.getCenterInternal();
                    var centerpx = map.getPixelFromCoordinateInternal(center);
                    var dest = map.getCoordinateFromPixelInternal([
                        centerpx[0] - distance * Math.cos(angle),
                        centerpx[1] - distance * Math.sin(angle),
                    ]);
                    view.animateInternal({
                        center: view.getConstrainedCenter(dest),
                        duration: 500,
                        easing: easeOut,
                    });
                }
                if (this.panning_) {
                    this.panning_ = false;
                    view.endInteraction();
                }
                return false;
            }
            else {
                if (this.kinetic_) {
                    // reset so we don't overestimate the kinetic energy after
                    // after one finger up, tiny drag, second finger up
                    this.kinetic_.begin();
                }
                this.lastCentroid = null;
                return true;
            }
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
                var map = mapBrowserEvent.map;
                var view = map.getView();
                this.lastCentroid = null;
                // stop any current animation
                if (view.getAnimating()) {
                    view.cancelAnimations();
                }
                if (this.kinetic_) {
                    this.kinetic_.begin();
                }
                // No kinetic as soon as more than one pointer on the screen is
                // detected. This is to prevent nasty pans after pinch.
                this.noKinetic_ = this.targetPointers.length > 1;
                return true;
            }
            else {
                return false;
            }
        };
        return DragPan;
    }(PointerInteraction));

    var __extends$U = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an
     * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
     * @property {number} [duration=250] Animation duration in milliseconds.
     */
    /**
     * @classdesc
     * Allows the user to rotate the map by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when the alt and shift keys are held down.
     *
     * This interaction is only supported for mouse devices.
     * @api
     */
    var DragRotate = /** @class */ (function (_super) {
        __extends$U(DragRotate, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DragRotate(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                stopDown: FALSE,
            }) || this;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.lastAngle_ = undefined;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            return _this;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {
            if (!mouseOnly(mapBrowserEvent)) {
                return;
            }
            var map = mapBrowserEvent.map;
            var view = map.getView();
            if (view.getConstraints().rotation === disable) {
                return;
            }
            var size = map.getSize();
            var offset = mapBrowserEvent.pixel;
            var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
            if (this.lastAngle_ !== undefined) {
                var delta = theta - this.lastAngle_;
                view.adjustRotationInternal(-delta);
            }
            this.lastAngle_ = theta;
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {
            if (!mouseOnly(mapBrowserEvent)) {
                return true;
            }
            var map = mapBrowserEvent.map;
            var view = map.getView();
            view.endInteraction(this.duration_);
            return false;
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (!mouseOnly(mapBrowserEvent)) {
                return false;
            }
            if (mouseActionButton(mapBrowserEvent) &&
                this.condition_(mapBrowserEvent)) {
                var map = mapBrowserEvent.map;
                map.getView().beginInteraction();
                this.lastAngle_ = undefined;
                return true;
            }
            else {
                return false;
            }
        };
        return DragRotate;
    }(PointerInteraction));

    /**
     * @module ol/render/Box
     */
    var __extends$V = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var RenderBox = /** @class */ (function (_super) {
        __extends$V(RenderBox, _super);
        /**
         * @param {string} className CSS class name.
         */
        function RenderBox(className) {
            var _this = _super.call(this) || this;
            /**
             * @type {import("../geom/Polygon.js").default}
             * @private
             */
            _this.geometry_ = null;
            /**
             * @type {HTMLDivElement}
             * @private
             */
            _this.element_ = document.createElement('div');
            _this.element_.style.position = 'absolute';
            _this.element_.style.pointerEvents = 'auto';
            _this.element_.className = 'ol-box ' + className;
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            _this.map_ = null;
            /**
             * @private
             * @type {import("../pixel.js").Pixel}
             */
            _this.startPixel_ = null;
            /**
             * @private
             * @type {import("../pixel.js").Pixel}
             */
            _this.endPixel_ = null;
            return _this;
        }
        /**
         * Clean up.
         */
        RenderBox.prototype.disposeInternal = function () {
            this.setMap(null);
        };
        /**
         * @private
         */
        RenderBox.prototype.render_ = function () {
            var startPixel = this.startPixel_;
            var endPixel = this.endPixel_;
            var px = 'px';
            var style = this.element_.style;
            style.left = Math.min(startPixel[0], endPixel[0]) + px;
            style.top = Math.min(startPixel[1], endPixel[1]) + px;
            style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
            style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
        };
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        RenderBox.prototype.setMap = function (map) {
            if (this.map_) {
                this.map_.getOverlayContainer().removeChild(this.element_);
                var style = this.element_.style;
                style.left = 'inherit';
                style.top = 'inherit';
                style.width = 'inherit';
                style.height = 'inherit';
            }
            this.map_ = map;
            if (this.map_) {
                this.map_.getOverlayContainer().appendChild(this.element_);
            }
        };
        /**
         * @param {import("../pixel.js").Pixel} startPixel Start pixel.
         * @param {import("../pixel.js").Pixel} endPixel End pixel.
         */
        RenderBox.prototype.setPixels = function (startPixel, endPixel) {
            this.startPixel_ = startPixel;
            this.endPixel_ = endPixel;
            this.createOrUpdateGeometry();
            this.render_();
        };
        /**
         * Creates or updates the cached geometry.
         */
        RenderBox.prototype.createOrUpdateGeometry = function () {
            var startPixel = this.startPixel_;
            var endPixel = this.endPixel_;
            var pixels = [
                startPixel,
                [startPixel[0], endPixel[1]],
                endPixel,
                [endPixel[0], startPixel[1]],
            ];
            var coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);
            // close the polygon
            coordinates[4] = coordinates[0].slice();
            if (!this.geometry_) {
                this.geometry_ = new Polygon([coordinates]);
            }
            else {
                this.geometry_.setCoordinates([coordinates]);
            }
        };
        /**
         * @return {import("../geom/Polygon.js").default} Geometry.
         */
        RenderBox.prototype.getGeometry = function () {
            return this.geometry_;
        };
        return RenderBox;
    }(Disposable));

    var __extends$W = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that takes a {@link module:ol/MapBrowserEvent} and two
     * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
     * true should be returned.
     * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
     */
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link ol/events/condition~mouseActionButton}.
     * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
     * `boxEndCondition` function.
     * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
     * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
     * Default is `true` if the area of the box is bigger than the `minArea` option.
     * @property {function(this:DragBox, import("../MapBrowserEvent.js").default):void} [onBoxEnd] Code to execute just
     * before `boxend` is fired.
     */
    /**
     * @enum {string}
     */
    var DragBoxEventType = {
        /**
         * Triggered upon drag box start.
         * @event DragBoxEvent#boxstart
         * @api
         */
        BOXSTART: 'boxstart',
        /**
         * Triggered on drag when box is active.
         * @event DragBoxEvent#boxdrag
         * @api
         */
        BOXDRAG: 'boxdrag',
        /**
         * Triggered upon drag box end.
         * @event DragBoxEvent#boxend
         * @api
         */
        BOXEND: 'boxend',
        /**
         * Triggered upon drag box canceled.
         * @event DragBoxEvent#boxcancel
         * @api
         */
        BOXCANCEL: 'boxcancel',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
     * this type.
     */
    var DragBoxEvent = /** @class */ (function (_super) {
        __extends$W(DragBoxEvent, _super);
        /**
         * @param {string} type The event type.
         * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
         */
        function DragBoxEvent(type, coordinate, mapBrowserEvent) {
            var _this = _super.call(this, type) || this;
            /**
             * The coordinate of the drag event.
             * @const
             * @type {import("../coordinate.js").Coordinate}
             * @api
             */
            _this.coordinate = coordinate;
            /**
             * @const
             * @type {import("../MapBrowserEvent.js").default}
             * @api
             */
            _this.mapBrowserEvent = mapBrowserEvent;
            return _this;
        }
        return DragBoxEvent;
    }(BaseEvent));
    /**
     * @classdesc
     * Allows the user to draw a vector box by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when the shift or other key is held down. This is used, for example,
     * for zooming to a specific area of the map
     * (see {@link module:ol/interaction/DragZoom~DragZoom} and
     * {@link module:ol/interaction/DragRotateAndZoom}).
     *
     * @fires DragBoxEvent
     * @api
     */
    var DragBox = /** @class */ (function (_super) {
        __extends$W(DragBox, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DragBox(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @type {import("../render/Box.js").default}
             * @private
             */
            _this.box_ = new RenderBox(options.className || 'ol-dragbox');
            /**
             * @type {number}
             * @private
             */
            _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;
            if (options.onBoxEnd) {
                _this.onBoxEnd = options.onBoxEnd;
            }
            /**
             * @type {import("../pixel.js").Pixel}
             * @private
             */
            _this.startPixel_ = null;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.condition ? options.condition : mouseActionButton;
            /**
             * @private
             * @type {EndCondition}
             */
            _this.boxEndCondition_ = options.boxEndCondition
                ? options.boxEndCondition
                : _this.defaultBoxEndCondition;
            return _this;
        }
        /**
         * The default condition for determining whether the boxend event
         * should fire.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
         *     leading to the box end.
         * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
         * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
         * @return {boolean} Whether or not the boxend condition should be fired.
         */
        DragBox.prototype.defaultBoxEndCondition = function (mapBrowserEvent, startPixel, endPixel) {
            var width = endPixel[0] - startPixel[0];
            var height = endPixel[1] - startPixel[1];
            return width * width + height * height >= this.minArea_;
        };
        /**
         * Returns geometry of last drawn box.
         * @return {import("../geom/Polygon.js").default} Geometry.
         * @api
         */
        DragBox.prototype.getGeometry = function () {
            return this.box_.getGeometry();
        };
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        DragBox.prototype.handleDragEvent = function (mapBrowserEvent) {
            this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);
            this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragBox.prototype.handleUpEvent = function (mapBrowserEvent) {
            this.box_.setMap(null);
            var completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);
            if (completeBox) {
                this.onBoxEnd(mapBrowserEvent);
            }
            this.dispatchEvent(new DragBoxEvent(completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));
            return false;
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragBox.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (this.condition_(mapBrowserEvent)) {
                this.startPixel_ = mapBrowserEvent.pixel;
                this.box_.setMap(mapBrowserEvent.map);
                this.box_.setPixels(this.startPixel_, this.startPixel_);
                this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * Function to execute just before `onboxend` is fired
         * @param {import("../MapBrowserEvent.js").default} event Event.
         */
        DragBox.prototype.onBoxEnd = function (event) { };
        return DragBox;
    }(PointerInteraction));

    var __extends$X = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-dragzoom'] CSS class name for styling the
     * box.
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~shiftKeyOnly}.
     * @property {number} [duration=200] Animation duration in milliseconds.
     * @property {boolean} [out=false] Use interaction for zooming out.
     * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
     * `boxEndCondition` function.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when a key, shift by default, is held down.
     *
     * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
     * your custom one configured with `className`.
     * @api
     */
    var DragZoom = /** @class */ (function (_super) {
        __extends$X(DragZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DragZoom(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var condition = options.condition ? options.condition : shiftKeyOnly;
            _this = _super.call(this, {
                condition: condition,
                className: options.className || 'ol-dragzoom',
                minArea: options.minArea,
            }) || this;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 200;
            /**
             * @private
             * @type {boolean}
             */
            _this.out_ = options.out !== undefined ? options.out : false;
            return _this;
        }
        /**
         * Function to execute just before `onboxend` is fired
         * @param {import("../MapBrowserEvent.js").default} event Event.
         */
        DragZoom.prototype.onBoxEnd = function (event) {
            var map = this.getMap();
            var view = /** @type {!import("../View.js").default} */ (map.getView());
            var size = /** @type {!import("../size.js").Size} */ (map.getSize());
            var extent = this.getGeometry().getExtent();
            if (this.out_) {
                var mapExtent = view.calculateExtentInternal(size);
                var boxPixelExtent = createOrUpdateFromCoordinates([
                    map.getPixelFromCoordinateInternal(getBottomLeft(extent)),
                    map.getPixelFromCoordinateInternal(getTopRight(extent)),
                ]);
                var factor = view.getResolutionForExtentInternal(boxPixelExtent, size);
                scaleFromCenter(mapExtent, 1 / factor);
                extent = mapExtent;
            }
            var resolution = view.getConstrainedResolution(view.getResolutionForExtentInternal(extent, size));
            var center = view.getConstrainedCenter(getCenter(extent), resolution);
            view.animateInternal({
                resolution: resolution,
                center: center,
                duration: this.duration_,
                easing: easeOut,
            });
        };
        return DragZoom;
    }(DragBox));

    /**
     * @module ol/events/KeyCode
     */
    /**
     * @enum {number}
     * @const
     */
    var KeyCode = {
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
    };

    var __extends$Y = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~noModifierKeys} and
     * {@link module:ol/events/condition~targetNotEditable}.
     * @property {number} [duration=100] Animation duration in milliseconds.
     * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
     * press.
     */
    /**
     * @classdesc
     * Allows the user to pan the map using keyboard arrows.
     * Note that, although this interaction is by default included in maps,
     * the keys can only be used when browser focus is on the element to which
     * the keyboard events are attached. By default, this is the map div,
     * though you can change this with the `keyboardEventTarget` in
     * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
     * element, focus will have to be on, and returned to, this element if the keys
     * are to function.
     * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
     * @api
     */
    var KeyboardPan = /** @class */ (function (_super) {
        __extends$Y(KeyboardPan, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function KeyboardPan(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options || {};
            /**
             * @private
             * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
             * @return {boolean} Combined condition result.
             */
            _this.defaultCondition_ = function (mapBrowserEvent) {
                return (noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent));
            };
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ =
                options.condition !== undefined
                    ? options.condition
                    : _this.defaultCondition_;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 100;
            /**
             * @private
             * @type {number}
             */
            _this.pixelDelta_ =
                options.pixelDelta !== undefined ? options.pixelDelta : 128;
            return _this;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
         * `KeyEvent`, and decides the direction to pan to (if an arrow key was
         * pressed).
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @this {KeyboardPan}
         */
        KeyboardPan.prototype.handleEvent = function (mapBrowserEvent) {
            var stopEvent = false;
            if (mapBrowserEvent.type == EventType.KEYDOWN) {
                var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
                var keyCode = keyEvent.keyCode;
                if (this.condition_(mapBrowserEvent) &&
                    (keyCode == KeyCode.DOWN ||
                        keyCode == KeyCode.LEFT ||
                        keyCode == KeyCode.RIGHT ||
                        keyCode == KeyCode.UP)) {
                    var map = mapBrowserEvent.map;
                    var view = map.getView();
                    var mapUnitsDelta = view.getResolution() * this.pixelDelta_;
                    var deltaX = 0, deltaY = 0;
                    if (keyCode == KeyCode.DOWN) {
                        deltaY = -mapUnitsDelta;
                    }
                    else if (keyCode == KeyCode.LEFT) {
                        deltaX = -mapUnitsDelta;
                    }
                    else if (keyCode == KeyCode.RIGHT) {
                        deltaX = mapUnitsDelta;
                    }
                    else {
                        deltaY = mapUnitsDelta;
                    }
                    var delta = [deltaX, deltaY];
                    rotate(delta, view.getRotation());
                    pan(view, delta, this.duration_);
                    keyEvent.preventDefault();
                    stopEvent = true;
                }
            }
            return !stopEvent;
        };
        return KeyboardPan;
    }(Interaction));

    var __extends$Z = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=100] Animation duration in milliseconds.
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~targetNotEditable}.
     * @property {number} [delta=1] The zoom level delta on each key press.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map using keyboard + and -.
     * Note that, although this interaction is by default included in maps,
     * the keys can only be used when browser focus is on the element to which
     * the keyboard events are attached. By default, this is the map div,
     * though you can change this with the `keyboardEventTarget` in
     * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
     * element, focus will have to be on, and returned to, this element if the keys
     * are to function.
     * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
     * @api
     */
    var KeyboardZoom = /** @class */ (function (_super) {
        __extends$Z(KeyboardZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function KeyboardZoom(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.condition ? options.condition : targetNotEditable;
            /**
             * @private
             * @type {number}
             */
            _this.delta_ = options.delta ? options.delta : 1;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 100;
            return _this;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
         * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
         * key pressed was '+' or '-').
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @this {KeyboardZoom}
         */
        KeyboardZoom.prototype.handleEvent = function (mapBrowserEvent) {
            var stopEvent = false;
            if (mapBrowserEvent.type == EventType.KEYDOWN ||
                mapBrowserEvent.type == EventType.KEYPRESS) {
                var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
                var charCode = keyEvent.charCode;
                if (this.condition_(mapBrowserEvent) &&
                    (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
                    var map = mapBrowserEvent.map;
                    var delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;
                    var view = map.getView();
                    zoomByDelta(view, delta, undefined, this.duration_);
                    keyEvent.preventDefault();
                    stopEvent = true;
                }
            }
            return !stopEvent;
        };
        return KeyboardZoom;
    }(Interaction));

    var __extends$_ = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @enum {string}
     */
    var Mode = {
        TRACKPAD: 'trackpad',
        WHEEL: 'wheel',
    };
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~always}.
     * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
     * the interaction will only handle events when the map has the focus.
     * @property {number} [maxDelta=1] Maximum mouse wheel delta.
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
     * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
     * location as the anchor. When set to `false`, zooming in and out will zoom to
     * the center of the screen instead of zooming on the mouse's location.
     * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom
     * event will always animate to the closest zoom level after an interaction;
     * false means intermediary zoom levels are allowed.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by scrolling the mouse wheel.
     * @api
     */
    var MouseWheelZoom = /** @class */ (function (_super) {
        __extends$_(MouseWheelZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function MouseWheelZoom(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, 
            /** @type {import("./Interaction.js").InteractionOptions} */ (options)) || this;
            /**
             * @private
             * @type {number}
             */
            _this.totalDelta_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.lastDelta_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            /**
             * @private
             * @type {number}
             */
            _this.timeout_ = options.timeout !== undefined ? options.timeout : 80;
            /**
             * @private
             * @type {boolean}
             */
            _this.useAnchor_ =
                options.useAnchor !== undefined ? options.useAnchor : true;
            /**
             * @private
             * @type {boolean}
             */
            _this.constrainResolution_ =
                options.constrainResolution !== undefined
                    ? options.constrainResolution
                    : false;
            var condition = options.condition ? options.condition : always;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.onFocusOnly
                ? all$1(focusWithTabindex, condition)
                : condition;
            /**
             * @private
             * @type {?import("../coordinate.js").Coordinate}
             */
            _this.lastAnchor_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.startTime_ = undefined;
            /**
             * @private
             * @type {?}
             */
            _this.timeoutId_;
            /**
             * @private
             * @type {Mode|undefined}
             */
            _this.mode_ = undefined;
            /**
             * Trackpad events separated by this delay will be considered separate
             * interactions.
             * @type {number}
             */
            _this.trackpadEventGap_ = 400;
            /**
             * @type {?}
             */
            _this.trackpadTimeoutId_;
            /**
             * The number of delta values per zoom level
             * @private
             * @type {number}
             */
            _this.deltaPerZoom_ = 300;
            return _this;
        }
        /**
         * @private
         */
        MouseWheelZoom.prototype.endInteraction_ = function () {
            this.trackpadTimeoutId_ = undefined;
            var view = this.getMap().getView();
            view.endInteraction(undefined, this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0, this.lastAnchor_);
        };
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
         * zooms the map.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        MouseWheelZoom.prototype.handleEvent = function (mapBrowserEvent) {
            if (!this.condition_(mapBrowserEvent)) {
                return true;
            }
            var type = mapBrowserEvent.type;
            if (type !== EventType.WHEEL) {
                return true;
            }
            var map = mapBrowserEvent.map;
            var wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);
            wheelEvent.preventDefault();
            if (this.useAnchor_) {
                this.lastAnchor_ = mapBrowserEvent.coordinate;
            }
            // Delta normalisation inspired by
            // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
            var delta;
            if (mapBrowserEvent.type == EventType.WHEEL) {
                delta = wheelEvent.deltaY;
                if (FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
                    delta /= DEVICE_PIXEL_RATIO;
                }
                if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
                    delta *= 40;
                }
            }
            if (delta === 0) {
                return false;
            }
            else {
                this.lastDelta_ = delta;
            }
            var now = Date.now();
            if (this.startTime_ === undefined) {
                this.startTime_ = now;
            }
            if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
                this.mode_ = Math.abs(delta) < 4 ? Mode.TRACKPAD : Mode.WHEEL;
            }
            var view = map.getView();
            if (this.mode_ === Mode.TRACKPAD &&
                !(view.getConstrainResolution() || this.constrainResolution_)) {
                if (this.trackpadTimeoutId_) {
                    clearTimeout(this.trackpadTimeoutId_);
                }
                else {
                    if (view.getAnimating()) {
                        view.cancelAnimations();
                    }
                    view.beginInteraction();
                }
                this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);
                view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);
                this.startTime_ = now;
                return false;
            }
            this.totalDelta_ += delta;
            var timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);
            clearTimeout(this.timeoutId_);
            this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);
            return false;
        };
        /**
         * @private
         * @param {import("../PluggableMap.js").default} map Map.
         */
        MouseWheelZoom.prototype.handleWheelZoom_ = function (map) {
            var view = map.getView();
            if (view.getAnimating()) {
                view.cancelAnimations();
            }
            var delta = -clamp(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;
            if (view.getConstrainResolution() || this.constrainResolution_) {
                // view has a zoom constraint, zoom by 1
                delta = delta ? (delta > 0 ? 1 : -1) : 0;
            }
            zoomByDelta(view, delta, this.lastAnchor_, this.duration_);
            this.mode_ = undefined;
            this.totalDelta_ = 0;
            this.lastAnchor_ = null;
            this.startTime_ = undefined;
            this.timeoutId_ = undefined;
        };
        /**
         * Enable or disable using the mouse's location as an anchor when zooming
         * @param {boolean} useAnchor true to zoom to the mouse's location, false
         * to zoom to the center of the map
         * @api
         */
        MouseWheelZoom.prototype.setMouseAnchor = function (useAnchor) {
            this.useAnchor_ = useAnchor;
            if (!useAnchor) {
                this.lastAnchor_ = null;
            }
        };
        return MouseWheelZoom;
    }(Interaction));

    var __extends$$ = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] The duration of the animation in
     * milliseconds.
     * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
     */
    /**
     * @classdesc
     * Allows the user to rotate the map by twisting with two fingers
     * on a touch screen.
     * @api
     */
    var PinchRotate = /** @class */ (function (_super) {
        __extends$$(PinchRotate, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function PinchRotate(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
            if (!pointerOptions.stopDown) {
                pointerOptions.stopDown = FALSE;
            }
            _this = _super.call(this, pointerOptions) || this;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            _this.anchor_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.lastAngle_ = undefined;
            /**
             * @private
             * @type {boolean}
             */
            _this.rotating_ = false;
            /**
             * @private
             * @type {number}
             */
            _this.rotationDelta_ = 0.0;
            /**
             * @private
             * @type {number}
             */
            _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            return _this;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        PinchRotate.prototype.handleDragEvent = function (mapBrowserEvent) {
            var rotationDelta = 0.0;
            var touch0 = this.targetPointers[0];
            var touch1 = this.targetPointers[1];
            // angle between touches
            var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);
            if (this.lastAngle_ !== undefined) {
                var delta = angle - this.lastAngle_;
                this.rotationDelta_ += delta;
                if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {
                    this.rotating_ = true;
                }
                rotationDelta = delta;
            }
            this.lastAngle_ = angle;
            var map = mapBrowserEvent.map;
            var view = map.getView();
            if (view.getConstraints().rotation === disable) {
                return;
            }
            // rotate anchor point.
            // FIXME: should be the intersection point between the lines:
            //     touch0,touch1 and previousTouch0,previousTouch1
            var viewportPosition = map.getViewport().getBoundingClientRect();
            var centroid$1 = centroid(this.targetPointers);
            centroid$1[0] -= viewportPosition.left;
            centroid$1[1] -= viewportPosition.top;
            this.anchor_ = map.getCoordinateFromPixelInternal(centroid$1);
            // rotate
            if (this.rotating_) {
                map.render();
                view.adjustRotationInternal(rotationDelta, this.anchor_);
            }
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        PinchRotate.prototype.handleUpEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length < 2) {
                var map = mapBrowserEvent.map;
                var view = map.getView();
                view.endInteraction(this.duration_);
                return false;
            }
            else {
                return true;
            }
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        PinchRotate.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length >= 2) {
                var map = mapBrowserEvent.map;
                this.anchor_ = null;
                this.lastAngle_ = undefined;
                this.rotating_ = false;
                this.rotationDelta_ = 0.0;
                if (!this.handlingDownUpSequence) {
                    map.getView().beginInteraction();
                }
                return true;
            }
            else {
                return false;
            }
        };
        return PinchRotate;
    }(PointerInteraction));

    var __extends$10 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=400] Animation duration in milliseconds.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by pinching with two fingers
     * on a touch screen.
     * @api
     */
    var PinchZoom = /** @class */ (function (_super) {
        __extends$10(PinchZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function PinchZoom(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
            if (!pointerOptions.stopDown) {
                pointerOptions.stopDown = FALSE;
            }
            _this = _super.call(this, pointerOptions) || this;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            _this.anchor_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 400;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.lastDistance_ = undefined;
            /**
             * @private
             * @type {number}
             */
            _this.lastScaleDelta_ = 1;
            return _this;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        PinchZoom.prototype.handleDragEvent = function (mapBrowserEvent) {
            var scaleDelta = 1.0;
            var touch0 = this.targetPointers[0];
            var touch1 = this.targetPointers[1];
            var dx = touch0.clientX - touch1.clientX;
            var dy = touch0.clientY - touch1.clientY;
            // distance between touches
            var distance = Math.sqrt(dx * dx + dy * dy);
            if (this.lastDistance_ !== undefined) {
                scaleDelta = this.lastDistance_ / distance;
            }
            this.lastDistance_ = distance;
            var map = mapBrowserEvent.map;
            var view = map.getView();
            if (scaleDelta != 1.0) {
                this.lastScaleDelta_ = scaleDelta;
            }
            // scale anchor point.
            var viewportPosition = map.getViewport().getBoundingClientRect();
            var centroid$1 = centroid(this.targetPointers);
            centroid$1[0] -= viewportPosition.left;
            centroid$1[1] -= viewportPosition.top;
            this.anchor_ = map.getCoordinateFromPixelInternal(centroid$1);
            // scale, bypass the resolution constraint
            map.render();
            view.adjustResolutionInternal(scaleDelta, this.anchor_);
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        PinchZoom.prototype.handleUpEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length < 2) {
                var map = mapBrowserEvent.map;
                var view = map.getView();
                var direction = this.lastScaleDelta_ > 1 ? 1 : -1;
                view.endInteraction(this.duration_, direction);
                return false;
            }
            else {
                return true;
            }
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        PinchZoom.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length >= 2) {
                var map = mapBrowserEvent.map;
                this.anchor_ = null;
                this.lastDistance_ = undefined;
                this.lastScaleDelta_ = 1;
                if (!this.handlingDownUpSequence) {
                    map.getView().beginInteraction();
                }
                return true;
            }
            else {
                return false;
            }
        };
        return PinchZoom;
    }(PointerInteraction));

    var __extends$11 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Multi-linestring geometry.
     *
     * @api
     */
    var MultiLineString = /** @class */ (function (_super) {
        __extends$11(MultiLineString, _super);
        /**
         * @param {Array<Array<import("../coordinate.js").Coordinate>|LineString>|Array<number>} coordinates
         *     Coordinates or LineString geometries. (For internal use, flat coordinates in
         *     combination with `opt_layout` and `opt_ends` are also accepted.)
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @param {Array<number>=} opt_ends Flat coordinate ends for internal use.
         */
        function MultiLineString(coordinates, opt_layout, opt_ends) {
            var _this = _super.call(this) || this;
            /**
             * @type {Array<number>}
             * @private
             */
            _this.ends_ = [];
            /**
             * @private
             * @type {number}
             */
            _this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.maxDeltaRevision_ = -1;
            if (Array.isArray(coordinates[0])) {
                _this.setCoordinates(
                /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
            }
            else if (opt_layout !== undefined && opt_ends) {
                _this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
                _this.ends_ = opt_ends;
            }
            else {
                var layout = _this.getLayout();
                var lineStrings = /** @type {Array<LineString>} */ (coordinates);
                var flatCoordinates = [];
                var ends = [];
                for (var i = 0, ii = lineStrings.length; i < ii; ++i) {
                    var lineString = lineStrings[i];
                    if (i === 0) {
                        layout = lineString.getLayout();
                    }
                    extend(flatCoordinates, lineString.getFlatCoordinates());
                    ends.push(flatCoordinates.length);
                }
                _this.setFlatCoordinates(layout, flatCoordinates);
                _this.ends_ = ends;
            }
            return _this;
        }
        /**
         * Append the passed linestring to the multilinestring.
         * @param {LineString} lineString LineString.
         * @api
         */
        MultiLineString.prototype.appendLineString = function (lineString) {
            if (!this.flatCoordinates) {
                this.flatCoordinates = lineString.getFlatCoordinates().slice();
            }
            else {
                extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());
            }
            this.ends_.push(this.flatCoordinates.length);
            this.changed();
        };
        /**
         * Make a complete copy of the geometry.
         * @return {!MultiLineString} Clone.
         * @api
         */
        MultiLineString.prototype.clone = function () {
            var multiLineString = new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
            multiLineString.applyProperties(this);
            return multiLineString;
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        MultiLineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
        };
        /**
         * Returns the coordinate at `m` using linear interpolation, or `null` if no
         * such coordinate exists.
         *
         * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
         * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
         * M will return the first coordinate and Ms greater than the last M will
         * return the last coordinate.
         *
         * `opt_interpolate` controls interpolation between consecutive LineStrings
         * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
         * will be linearly interpolated between the last coordinate of one LineString
         * and the first coordinate of the next LineString.  If `opt_interpolate` is
         * `false` then the function will return `null` for Ms falling between
         * LineStrings.
         *
         * @param {number} m M.
         * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
         * @param {boolean=} opt_interpolate Interpolate. Default is `false`.
         * @return {import("../coordinate.js").Coordinate} Coordinate.
         * @api
         */
        MultiLineString.prototype.getCoordinateAtM = function (m, opt_extrapolate, opt_interpolate) {
            if ((this.layout != GeometryLayout.XYM &&
                this.layout != GeometryLayout.XYZM) ||
                this.flatCoordinates.length === 0) {
                return null;
            }
            var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
            var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
            return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);
        };
        /**
         * Return the coordinates of the multilinestring.
         * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
         * @api
         */
        MultiLineString.prototype.getCoordinates = function () {
            return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);
        };
        /**
         * @return {Array<number>} Ends.
         */
        MultiLineString.prototype.getEnds = function () {
            return this.ends_;
        };
        /**
         * Return the linestring at the specified index.
         * @param {number} index Index.
         * @return {LineString} LineString.
         * @api
         */
        MultiLineString.prototype.getLineString = function (index) {
            if (index < 0 || this.ends_.length <= index) {
                return null;
            }
            return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
        };
        /**
         * Return the linestrings of this multilinestring.
         * @return {Array<LineString>} LineStrings.
         * @api
         */
        MultiLineString.prototype.getLineStrings = function () {
            var flatCoordinates = this.flatCoordinates;
            var ends = this.ends_;
            var layout = this.layout;
            /** @type {Array<LineString>} */
            var lineStrings = [];
            var offset = 0;
            for (var i = 0, ii = ends.length; i < ii; ++i) {
                var end = ends[i];
                var lineString = new LineString(flatCoordinates.slice(offset, end), layout);
                lineStrings.push(lineString);
                offset = end;
            }
            return lineStrings;
        };
        /**
         * @return {Array<number>} Flat midpoints.
         */
        MultiLineString.prototype.getFlatMidpoints = function () {
            var midpoints = [];
            var flatCoordinates = this.flatCoordinates;
            var offset = 0;
            var ends = this.ends_;
            var stride = this.stride;
            for (var i = 0, ii = ends.length; i < ii; ++i) {
                var end = ends[i];
                var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);
                extend(midpoints, midpoint);
                offset = end;
            }
            return midpoints;
        };
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {MultiLineString} Simplified MultiLineString.
         * @protected
         */
        MultiLineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
            var simplifiedFlatCoordinates = [];
            var simplifiedEnds = [];
            simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);
            return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
        };
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        MultiLineString.prototype.getType = function () {
            return GeometryType.MULTI_LINE_STRING;
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        MultiLineString.prototype.intersectsExtent = function (extent) {
            return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);
        };
        /**
         * Set the coordinates of the multilinestring.
         * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
         * @param {GeometryLayout=} opt_layout Layout.
         * @api
         */
        MultiLineString.prototype.setCoordinates = function (coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 2);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
            this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
            this.changed();
        };
        return MultiLineString;
    }(SimpleGeometry));

    /**
     * @module ol/interaction
     */
    /**
     * @typedef {Object} DefaultsOptions
     * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
     * desired.
     * @property {boolean} [onFocusOnly=false] Interact only when the map has the
     * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
     * useful when page scroll is desired for maps that do not have the browser's
     * focus.
     * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
     * desired.
     * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
     * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
     * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
     * @property {boolean} [dragPan=true] Whether drag pan is desired.
     * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
     * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
     * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
     * @property {number} [zoomDuration] Duration of the zoom animation in
     * milliseconds.
     */
    /**
     * Set of interactions included in maps by default. Specific interactions can be
     * excluded by setting the appropriate option to false in the constructor
     * options, but the order of the interactions is fixed.  If you want to specify
     * a different order for interactions, you will need to create your own
     * {@link module:ol/interaction/Interaction} instances and insert
     * them into a {@link module:ol/Collection} in the order you want
     * before creating your {@link module:ol/Map~Map} instance. Changing the order can
     * be of interest if the event propagation needs to be stopped at a point.
     * The default set of interactions, in sequence, is:
     * * {@link module:ol/interaction/DragRotate~DragRotate}
     * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
     * * {@link module:ol/interaction/DragPan~DragPan}
     * * {@link module:ol/interaction/PinchRotate~PinchRotate}
     * * {@link module:ol/interaction/PinchZoom~PinchZoom}
     * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
     * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
     * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
     * * {@link module:ol/interaction/DragZoom~DragZoom}
     *
     * @param {DefaultsOptions=} opt_options Defaults options.
     * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
     * A collection of interactions to be used with the {@link module:ol/Map~Map}
     * constructor's `interactions` option.
     * @api
     */
    function defaults$1(opt_options) {
        var options = opt_options ? opt_options : {};
        var interactions = new Collection();
        var kinetic = new Kinetic(-0.005, 0.05, 100);
        var altShiftDragRotate = options.altShiftDragRotate !== undefined
            ? options.altShiftDragRotate
            : true;
        if (altShiftDragRotate) {
            interactions.push(new DragRotate());
        }
        var doubleClickZoom = options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;
        if (doubleClickZoom) {
            interactions.push(new DoubleClickZoom({
                delta: options.zoomDelta,
                duration: options.zoomDuration,
            }));
        }
        var dragPan = options.dragPan !== undefined ? options.dragPan : true;
        if (dragPan) {
            interactions.push(new DragPan({
                onFocusOnly: options.onFocusOnly,
                kinetic: kinetic,
            }));
        }
        var pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate : true;
        if (pinchRotate) {
            interactions.push(new PinchRotate());
        }
        var pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
        if (pinchZoom) {
            interactions.push(new PinchZoom({
                duration: options.zoomDuration,
            }));
        }
        var keyboard = options.keyboard !== undefined ? options.keyboard : true;
        if (keyboard) {
            interactions.push(new KeyboardPan());
            interactions.push(new KeyboardZoom({
                delta: options.zoomDelta,
                duration: options.zoomDuration,
            }));
        }
        var mouseWheelZoom = options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;
        if (mouseWheelZoom) {
            interactions.push(new MouseWheelZoom({
                onFocusOnly: options.onFocusOnly,
                duration: options.zoomDuration,
            }));
        }
        var shiftDragZoom = options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;
        if (shiftDragZoom) {
            interactions.push(new DragZoom({
                duration: options.zoomDuration,
            }));
        }
        return interactions;
    }

    var __extends$12 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * The map is the core component of OpenLayers. For a map to render, a view,
     * one or more layers, and a target container are needed:
     *
     *     import Map from 'ol/Map';
     *     import View from 'ol/View';
     *     import TileLayer from 'ol/layer/Tile';
     *     import OSM from 'ol/source/OSM';
     *
     *     var map = new Map({
     *       view: new View({
     *         center: [0, 0],
     *         zoom: 1
     *       }),
     *       layers: [
     *         new TileLayer({
     *           source: new OSM()
     *         })
     *       ],
     *       target: 'map'
     *     });
     *
     * The above snippet creates a map using a {@link module:ol/layer/Tile} to
     * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
     * element with the id `map`.
     *
     * The constructor places a viewport container (with CSS class name
     * `ol-viewport`) in the target element (see `getViewport()`), and then two
     * further elements within the viewport: one with CSS class name
     * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
     * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
     * option of {@link module:ol/Overlay~Overlay} for the difference). The map
     * itself is placed in a further element within the viewport.
     *
     * Layers are stored as a {@link module:ol/Collection~Collection} in
     * layerGroups. A top-level group is provided by the library. This is what is
     * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
     * options are added to this group, and `addLayer` and `removeLayer` change the
     * layer collection in the group. `getLayers` is a convenience function for
     * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
     * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
     * options or added with `addLayer` can be groups, which can contain further
     * groups, and so on.
     *
     * @api
     */
    var Map$1 = /** @class */ (function (_super) {
        __extends$12(Map, _super);
        /**
         * @param {import("./PluggableMap.js").MapOptions} options Map options.
         */
        function Map(options) {
            var _this = this;
            options = assign$1({}, options);
            if (!options.controls) {
                options.controls = defaults();
            }
            if (!options.interactions) {
                options.interactions = defaults$1({
                    onFocusOnly: true,
                });
            }
            _this = _super.call(this, options) || this;
            return _this;
        }
        Map.prototype.createRenderer = function () {
            return new CompositeMapRenderer(this);
        };
        return Map;
    }(PluggableMap));

    /**
     * @module ol/structs/LRUCache
     */
    /**
     * @typedef {Object} Entry
     * @property {string} key_
     * @property {Object} newer
     * @property {Object} older
     * @property {*} value_
     */
    /**
     * @classdesc
     * Implements a Least-Recently-Used cache where the keys do not conflict with
     * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
     * items from the cache is the responsibility of the user.
     *
     * @fires import("../events/Event.js").default
     * @template T
     */
    var LRUCache = /** @class */ (function () {
        /**
         * @param {number=} opt_highWaterMark High water mark.
         */
        function LRUCache(opt_highWaterMark) {
            /**
             * Desired max cache size after expireCache(). If set to 0, no cache entries
             * will be pruned at all.
             * @type {number}
             */
            this.highWaterMark =
                opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;
            /**
             * @private
             * @type {number}
             */
            this.count_ = 0;
            /**
             * @private
             * @type {!Object<string, Entry>}
             */
            this.entries_ = {};
            /**
             * @private
             * @type {?Entry}
             */
            this.oldest_ = null;
            /**
             * @private
             * @type {?Entry}
             */
            this.newest_ = null;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        LRUCache.prototype.canExpireCache = function () {
            return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
        };
        /**
         * FIXME empty description for jsdoc
         */
        LRUCache.prototype.clear = function () {
            this.count_ = 0;
            this.entries_ = {};
            this.oldest_ = null;
            this.newest_ = null;
        };
        /**
         * @param {string} key Key.
         * @return {boolean} Contains key.
         */
        LRUCache.prototype.containsKey = function (key) {
            return this.entries_.hasOwnProperty(key);
        };
        /**
         * @param {function(T, string, LRUCache<T>): ?} f The function
         *     to call for every entry from the oldest to the newer. This function takes
         *     3 arguments (the entry value, the entry key and the LRUCache object).
         *     The return value is ignored.
         */
        LRUCache.prototype.forEach = function (f) {
            var entry = this.oldest_;
            while (entry) {
                f(entry.value_, entry.key_, this);
                entry = entry.newer;
            }
        };
        /**
         * @param {string} key Key.
         * @param {*=} opt_options Options (reserverd for subclasses).
         * @return {T} Value.
         */
        LRUCache.prototype.get = function (key, opt_options) {
            var entry = this.entries_[key];
            assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
            if (entry === this.newest_) {
                return entry.value_;
            }
            else if (entry === this.oldest_) {
                this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
                this.oldest_.older = null;
            }
            else {
                entry.newer.older = entry.older;
                entry.older.newer = entry.newer;
            }
            entry.newer = null;
            entry.older = this.newest_;
            this.newest_.newer = entry;
            this.newest_ = entry;
            return entry.value_;
        };
        /**
         * Remove an entry from the cache.
         * @param {string} key The entry key.
         * @return {T} The removed entry.
         */
        LRUCache.prototype.remove = function (key) {
            var entry = this.entries_[key];
            assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
            if (entry === this.newest_) {
                this.newest_ = /** @type {Entry} */ (entry.older);
                if (this.newest_) {
                    this.newest_.newer = null;
                }
            }
            else if (entry === this.oldest_) {
                this.oldest_ = /** @type {Entry} */ (entry.newer);
                if (this.oldest_) {
                    this.oldest_.older = null;
                }
            }
            else {
                entry.newer.older = entry.older;
                entry.older.newer = entry.newer;
            }
            delete this.entries_[key];
            --this.count_;
            return entry.value_;
        };
        /**
         * @return {number} Count.
         */
        LRUCache.prototype.getCount = function () {
            return this.count_;
        };
        /**
         * @return {Array<string>} Keys.
         */
        LRUCache.prototype.getKeys = function () {
            var keys = new Array(this.count_);
            var i = 0;
            var entry;
            for (entry = this.newest_; entry; entry = entry.older) {
                keys[i++] = entry.key_;
            }
            return keys;
        };
        /**
         * @return {Array<T>} Values.
         */
        LRUCache.prototype.getValues = function () {
            var values = new Array(this.count_);
            var i = 0;
            var entry;
            for (entry = this.newest_; entry; entry = entry.older) {
                values[i++] = entry.value_;
            }
            return values;
        };
        /**
         * @return {T} Last value.
         */
        LRUCache.prototype.peekLast = function () {
            return this.oldest_.value_;
        };
        /**
         * @return {string} Last key.
         */
        LRUCache.prototype.peekLastKey = function () {
            return this.oldest_.key_;
        };
        /**
         * Get the key of the newest item in the cache.  Throws if the cache is empty.
         * @return {string} The newest key.
         */
        LRUCache.prototype.peekFirstKey = function () {
            return this.newest_.key_;
        };
        /**
         * @return {T} value Value.
         */
        LRUCache.prototype.pop = function () {
            var entry = this.oldest_;
            delete this.entries_[entry.key_];
            if (entry.newer) {
                entry.newer.older = null;
            }
            this.oldest_ = /** @type {Entry} */ (entry.newer);
            if (!this.oldest_) {
                this.newest_ = null;
            }
            --this.count_;
            return entry.value_;
        };
        /**
         * @param {string} key Key.
         * @param {T} value Value.
         */
        LRUCache.prototype.replace = function (key, value) {
            this.get(key); // update `newest_`
            this.entries_[key].value_ = value;
        };
        /**
         * @param {string} key Key.
         * @param {T} value Value.
         */
        LRUCache.prototype.set = function (key, value) {
            assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already
            var entry = {
                key_: key,
                newer: null,
                older: this.newest_,
                value_: value,
            };
            if (!this.newest_) {
                this.oldest_ = entry;
            }
            else {
                this.newest_.newer = entry;
            }
            this.newest_ = entry;
            this.entries_[key] = entry;
            ++this.count_;
        };
        /**
         * Set a maximum number of entries for the cache.
         * @param {number} size Cache size.
         * @api
         */
        LRUCache.prototype.setSize = function (size) {
            this.highWaterMark = size;
        };
        return LRUCache;
    }());

    /**
     * @module ol/tilecoord
     */
    /**
     * An array of three numbers representing the location of a tile in a tile
     * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
     * @typedef {Array<number>} TileCoord
     * @api
     */
    /**
     * @param {number} z Z.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {TileCoord=} opt_tileCoord Tile coordinate.
     * @return {TileCoord} Tile coordinate.
     */
    function createOrUpdate$1(z, x, y, opt_tileCoord) {
        if (opt_tileCoord !== undefined) {
            opt_tileCoord[0] = z;
            opt_tileCoord[1] = x;
            opt_tileCoord[2] = y;
            return opt_tileCoord;
        }
        else {
            return [z, x, y];
        }
    }
    /**
     * @param {number} z Z.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {string} Key.
     */
    function getKeyZXY(z, x, y) {
        return z + '/' + x + '/' + y;
    }
    /**
     * Get the key for a tile coord.
     * @param {TileCoord} tileCoord The tile coord.
     * @return {string} Key.
     */
    function getKey$1(tileCoord) {
        return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
    }
    /**
     * Get a tile coord given a key.
     * @param {string} key The tile coord key.
     * @return {TileCoord} The tile coord.
     */
    function fromKey(key) {
        return key.split('/').map(Number);
    }
    /**
     * @param {TileCoord} tileCoord Tile coord.
     * @return {number} Hash.
     */
    function hash$1(tileCoord) {
        return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
    }
    /**
     * @param {TileCoord} tileCoord Tile coordinate.
     * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {boolean} Tile coordinate is within extent and zoom level range.
     */
    function withinExtentAndZ(tileCoord, tileGrid) {
        var z = tileCoord[0];
        var x = tileCoord[1];
        var y = tileCoord[2];
        if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
            return false;
        }
        var tileRange = tileGrid.getFullTileRange(z);
        if (!tileRange) {
            return true;
        }
        else {
            return tileRange.containsXY(x, y);
        }
    }

    var __extends$13 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var TileCache = /** @class */ (function (_super) {
        __extends$13(TileCache, _super);
        function TileCache() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        TileCache.prototype.expireCache = function (usedTiles) {
            while (this.canExpireCache()) {
                var tile = this.peekLast();
                if (tile.getKey() in usedTiles) {
                    break;
                }
                else {
                    this.pop().release();
                }
            }
        };
        /**
         * Prune all tiles from the cache that don't have the same z as the newest tile.
         */
        TileCache.prototype.pruneExceptNewestZ = function () {
            if (this.getCount() === 0) {
                return;
            }
            var key = this.peekFirstKey();
            var tileCoord = fromKey(key);
            var z = tileCoord[0];
            this.forEach(function (tile) {
                if (tile.tileCoord[0] !== z) {
                    this.remove(getKey$1(tile.tileCoord));
                    tile.release();
                }
            }.bind(this));
        };
        return TileCache;
    }(LRUCache));

    /**
     * @module ol/TileRange
     */
    /**
     * A representation of a contiguous block of tiles.  A tile range is specified
     * by its min/max tile coordinates and is inclusive of coordinates.
     */
    var TileRange = /** @class */ (function () {
        /**
         * @param {number} minX Minimum X.
         * @param {number} maxX Maximum X.
         * @param {number} minY Minimum Y.
         * @param {number} maxY Maximum Y.
         */
        function TileRange(minX, maxX, minY, maxY) {
            /**
             * @type {number}
             */
            this.minX = minX;
            /**
             * @type {number}
             */
            this.maxX = maxX;
            /**
             * @type {number}
             */
            this.minY = minY;
            /**
             * @type {number}
             */
            this.maxY = maxY;
        }
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {boolean} Contains tile coordinate.
         */
        TileRange.prototype.contains = function (tileCoord) {
            return this.containsXY(tileCoord[1], tileCoord[2]);
        };
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Contains.
         */
        TileRange.prototype.containsTileRange = function (tileRange) {
            return (this.minX <= tileRange.minX &&
                tileRange.maxX <= this.maxX &&
                this.minY <= tileRange.minY &&
                tileRange.maxY <= this.maxY);
        };
        /**
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @return {boolean} Contains coordinate.
         */
        TileRange.prototype.containsXY = function (x, y) {
            return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
        };
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Equals.
         */
        TileRange.prototype.equals = function (tileRange) {
            return (this.minX == tileRange.minX &&
                this.minY == tileRange.minY &&
                this.maxX == tileRange.maxX &&
                this.maxY == tileRange.maxY);
        };
        /**
         * @param {TileRange} tileRange Tile range.
         */
        TileRange.prototype.extend = function (tileRange) {
            if (tileRange.minX < this.minX) {
                this.minX = tileRange.minX;
            }
            if (tileRange.maxX > this.maxX) {
                this.maxX = tileRange.maxX;
            }
            if (tileRange.minY < this.minY) {
                this.minY = tileRange.minY;
            }
            if (tileRange.maxY > this.maxY) {
                this.maxY = tileRange.maxY;
            }
        };
        /**
         * @return {number} Height.
         */
        TileRange.prototype.getHeight = function () {
            return this.maxY - this.minY + 1;
        };
        /**
         * @return {import("./size.js").Size} Size.
         */
        TileRange.prototype.getSize = function () {
            return [this.getWidth(), this.getHeight()];
        };
        /**
         * @return {number} Width.
         */
        TileRange.prototype.getWidth = function () {
            return this.maxX - this.minX + 1;
        };
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Intersects.
         */
        TileRange.prototype.intersects = function (tileRange) {
            return (this.minX <= tileRange.maxX &&
                this.maxX >= tileRange.minX &&
                this.minY <= tileRange.maxY &&
                this.maxY >= tileRange.minY);
        };
        return TileRange;
    }());
    /**
     * @param {number} minX Minimum X.
     * @param {number} maxX Maximum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxY Maximum Y.
     * @param {TileRange=} tileRange TileRange.
     * @return {TileRange} Tile range.
     */
    function createOrUpdate$2(minX, maxX, minY, maxY, tileRange) {
        if (tileRange !== undefined) {
            tileRange.minX = minX;
            tileRange.maxX = maxX;
            tileRange.minY = minY;
            tileRange.maxY = maxY;
            return tileRange;
        }
        else {
            return new TileRange(minX, maxX, minY, maxY);
        }
    }

    /**
     * @module ol/reproj/common
     */
    /**
     * Default maximum allowed threshold  (in pixels) for reprojection
     * triangulation.
     * @type {number}
     */
    var ERROR_THRESHOLD = 0.5;

    /**
     * @module ol/reproj/Triangulation
     */
    /**
     * Single triangle; consists of 3 source points and 3 target points.
     * @typedef {Object} Triangle
     * @property {Array<import("../coordinate.js").Coordinate>} source
     * @property {Array<import("../coordinate.js").Coordinate>} target
     */
    /**
     * Maximum number of subdivision steps during raster reprojection triangulation.
     * Prevents high memory usage and large number of proj4 calls (for certain
     * transformations and areas). At most `2*(2^this)` triangles are created for
     * each triangulated extent (tile/image).
     * @type {number}
     */
    var MAX_SUBDIVISION = 10;
    /**
     * Maximum allowed size of triangle relative to world width. When transforming
     * corners of world extent between certain projections, the resulting
     * triangulation seems to have zero error and no subdivision is performed. If
     * the triangle width is more than this (relative to world width; 0-1),
     * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
     * @type {number}
     */
    var MAX_TRIANGLE_WIDTH = 0.25;
    /**
     * @classdesc
     * Class containing triangulation of the given target extent.
     * Used for determining source data and the reprojection itself.
     */
    var Triangulation = /** @class */ (function () {
        /**
         * @param {import("../proj/Projection.js").default} sourceProj Source projection.
         * @param {import("../proj/Projection.js").default} targetProj Target projection.
         * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
         * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
         * @param {number} errorThreshold Acceptable error (in source units).
         * @param {?number} opt_destinationResolution The (optional) resolution of the destination.
         */
        function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, opt_destinationResolution) {
            /**
             * @type {import("../proj/Projection.js").default}
             * @private
             */
            this.sourceProj_ = sourceProj;
            /**
             * @type {import("../proj/Projection.js").default}
             * @private
             */
            this.targetProj_ = targetProj;
            /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
            var transformInvCache = {};
            var transformInv = getTransform(this.targetProj_, this.sourceProj_);
            /**
             * @param {import("../coordinate.js").Coordinate} c A coordinate.
             * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
             * @private
             */
            this.transformInv_ = function (c) {
                var key = c[0] + '/' + c[1];
                if (!transformInvCache[key]) {
                    transformInvCache[key] = transformInv(c);
                }
                return transformInvCache[key];
            };
            /**
             * @type {import("../extent.js").Extent}
             * @private
             */
            this.maxSourceExtent_ = maxSourceExtent;
            /**
             * @type {number}
             * @private
             */
            this.errorThresholdSquared_ = errorThreshold * errorThreshold;
            /**
             * @type {Array<Triangle>}
             * @private
             */
            this.triangles_ = [];
            /**
             * Indicates that the triangulation crosses edge of the source projection.
             * @type {boolean}
             * @private
             */
            this.wrapsXInSource_ = false;
            /**
             * @type {boolean}
             * @private
             */
            this.canWrapXInSource_ =
                this.sourceProj_.canWrapX() &&
                    !!maxSourceExtent &&
                    !!this.sourceProj_.getExtent() &&
                    getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());
            /**
             * @type {?number}
             * @private
             */
            this.sourceWorldWidth_ = this.sourceProj_.getExtent()
                ? getWidth(this.sourceProj_.getExtent())
                : null;
            /**
             * @type {?number}
             * @private
             */
            this.targetWorldWidth_ = this.targetProj_.getExtent()
                ? getWidth(this.targetProj_.getExtent())
                : null;
            var destinationTopLeft = getTopLeft(targetExtent);
            var destinationTopRight = getTopRight(targetExtent);
            var destinationBottomRight = getBottomRight(targetExtent);
            var destinationBottomLeft = getBottomLeft(targetExtent);
            var sourceTopLeft = this.transformInv_(destinationTopLeft);
            var sourceTopRight = this.transformInv_(destinationTopRight);
            var sourceBottomRight = this.transformInv_(destinationBottomRight);
            var sourceBottomLeft = this.transformInv_(destinationBottomLeft);
            /*
             * The maxSubdivision controls how many splittings of the target area can
             * be done. The idea here is to do a linear mapping of the target areas
             * but the actual overal reprojection (can be) extremely non-linear. The
             * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256
             * tile size. However this function is also called to remap canvas rendered
             * layers which can be much larger. This calculation increases the maxSubdivision
             * value by the right factor so that each 256x256 pixel area has
             * MAX_SUBDIVISION divisions.
             */
            var maxSubdivision = MAX_SUBDIVISION +
                (opt_destinationResolution
                    ? Math.max(0, Math.ceil(log2(getArea(targetExtent) /
                        (opt_destinationResolution *
                            opt_destinationResolution *
                            256 *
                            256))))
                    : 0);
            this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);
            if (this.wrapsXInSource_) {
                var leftBound_1 = Infinity;
                this.triangles_.forEach(function (triangle, i, arr) {
                    leftBound_1 = Math.min(leftBound_1, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
                });
                // Shift triangles to be as close to `leftBound` as possible
                // (if the distance is more than `worldWidth / 2` it can be closer.
                this.triangles_.forEach(function (triangle) {
                    if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) -
                        leftBound_1 >
                        this.sourceWorldWidth_ / 2) {
                        var newTriangle = [
                            [triangle.source[0][0], triangle.source[0][1]],
                            [triangle.source[1][0], triangle.source[1][1]],
                            [triangle.source[2][0], triangle.source[2][1]],
                        ];
                        if (newTriangle[0][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {
                            newTriangle[0][0] -= this.sourceWorldWidth_;
                        }
                        if (newTriangle[1][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {
                            newTriangle[1][0] -= this.sourceWorldWidth_;
                        }
                        if (newTriangle[2][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {
                            newTriangle[2][0] -= this.sourceWorldWidth_;
                        }
                        // Rarely (if the extent contains both the dateline and prime meridian)
                        // the shift can in turn break some triangles.
                        // Detect this here and don't shift in such cases.
                        var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                        var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                        if (maxX - minX < this.sourceWorldWidth_ / 2) {
                            triangle.source = newTriangle;
                        }
                    }
                }.bind(this));
            }
            transformInvCache = {};
        }
        /**
         * Adds triangle to the triangulation.
         * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
         * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
         * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
         * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
         * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
         * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
         * @private
         */
        Triangulation.prototype.addTriangle_ = function (a, b, c, aSrc, bSrc, cSrc) {
            this.triangles_.push({
                source: [aSrc, bSrc, cSrc],
                target: [a, b, c],
            });
        };
        /**
         * Adds quad (points in clock-wise order) to the triangulation
         * (and reprojects the vertices) if valid.
         * Performs quad subdivision if needed to increase precision.
         *
         * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
         * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
         * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
         * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
         * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
         * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
         * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
         * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
         * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
         * @private
         */
        Triangulation.prototype.addQuad_ = function (a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
            var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);
            var sourceCoverageX = this.sourceWorldWidth_
                ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_
                : null;
            var sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);
            // when the quad is wrapped in the source projection
            // it covers most of the projection extent, but not fully
            var wrapsX = this.sourceProj_.canWrapX() &&
                sourceCoverageX > 0.5 &&
                sourceCoverageX < 1;
            var needsSubdivision = false;
            if (maxSubdivision > 0) {
                if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
                    var targetQuadExtent = boundingExtent([a, b, c, d]);
                    var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;
                    needsSubdivision =
                        targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
                }
                if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
                    needsSubdivision =
                        sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
                }
            }
            if (!needsSubdivision && this.maxSourceExtent_) {
                if (isFinite(sourceQuadExtent[0]) &&
                    isFinite(sourceQuadExtent[1]) &&
                    isFinite(sourceQuadExtent[2]) &&
                    isFinite(sourceQuadExtent[3])) {
                    if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {
                        // whole quad outside source projection extent -> ignore
                        return;
                    }
                }
            }
            var isNotFinite = 0;
            if (!needsSubdivision) {
                if (!isFinite(aSrc[0]) ||
                    !isFinite(aSrc[1]) ||
                    !isFinite(bSrc[0]) ||
                    !isFinite(bSrc[1]) ||
                    !isFinite(cSrc[0]) ||
                    !isFinite(cSrc[1]) ||
                    !isFinite(dSrc[0]) ||
                    !isFinite(dSrc[1])) {
                    if (maxSubdivision > 0) {
                        needsSubdivision = true;
                    }
                    else {
                        // It might be the case that only 1 of the points is infinite. In this case
                        // we can draw a single triangle with the other three points
                        isNotFinite =
                            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +
                                (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +
                                (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +
                                (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);
                        if (isNotFinite != 1 &&
                            isNotFinite != 2 &&
                            isNotFinite != 4 &&
                            isNotFinite != 8) {
                            return;
                        }
                    }
                }
            }
            if (maxSubdivision > 0) {
                if (!needsSubdivision) {
                    var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
                    var centerSrc = this.transformInv_(center);
                    var dx = void 0;
                    if (wrapsX) {
                        var centerSrcEstimX = (modulo(aSrc[0], sourceWorldWidth) +
                            modulo(cSrc[0], sourceWorldWidth)) /
                            2;
                        dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);
                    }
                    else {
                        dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
                    }
                    var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
                    var centerSrcErrorSquared = dx * dx + dy * dy;
                    needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
                }
                if (needsSubdivision) {
                    if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
                        // split horizontally (top & bottom)
                        var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
                        var bcSrc = this.transformInv_(bc);
                        var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
                        var daSrc = this.transformInv_(da);
                        this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
                        this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
                    }
                    else {
                        // split vertically (left & right)
                        var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
                        var abSrc = this.transformInv_(ab);
                        var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
                        var cdSrc = this.transformInv_(cd);
                        this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
                        this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
                    }
                    return;
                }
            }
            if (wrapsX) {
                if (!this.canWrapXInSource_) {
                    return;
                }
                this.wrapsXInSource_ = true;
            }
            // Exactly zero or one of *Src is not finite
            // The triangles must have the diagonal line as the first side
            // This is to allow easy code in reproj.s to make it straight for broken
            // browsers that can't handle diagonal clipping
            if ((isNotFinite & 0xb) == 0) {
                this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
            }
            if ((isNotFinite & 0xe) == 0) {
                this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);
            }
            if (isNotFinite) {
                // Try the other two triangles
                if ((isNotFinite & 0xd) == 0) {
                    this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);
                }
                if ((isNotFinite & 0x7) == 0) {
                    this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);
                }
            }
        };
        /**
         * Calculates extent of the 'source' coordinates from all the triangles.
         *
         * @return {import("../extent.js").Extent} Calculated extent.
         */
        Triangulation.prototype.calculateSourceExtent = function () {
            var extent = createEmpty();
            this.triangles_.forEach(function (triangle, i, arr) {
                var src = triangle.source;
                extendCoordinate(extent, src[0]);
                extendCoordinate(extent, src[1]);
                extendCoordinate(extent, src[2]);
            });
            return extent;
        };
        /**
         * @return {Array<Triangle>} Array of the calculated triangles.
         */
        Triangulation.prototype.getTriangles = function () {
            return this.triangles_;
        };
        return Triangulation;
    }());

    /**
     * @module ol/source/common
     */
    /**
     * Context options to disable image smoothing.
     * @type {Object}
     */
    var IMAGE_SMOOTHING_DISABLED = {
        imageSmoothingEnabled: false,
        msImageSmoothingEnabled: false,
    };

    /**
     * @module ol/reproj
     */
    var brokenDiagonalRendering_;
    /**
     * This draws a small triangle into a canvas by setting the triangle as the clip region
     * and then drawing a (too large) rectangle
     *
     * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle
     * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.
     * @param {number} v1 The y-coordinate of the second point.
     * @param {number} u2 The x-coordinate of the third point.
     * @param {number} v2 The y-coordinate of the third point.
     */
    function drawTestTriangle(ctx, u1, v1, u2, v2) {
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(u1, v1);
        ctx.lineTo(u2, v2);
        ctx.closePath();
        ctx.save();
        ctx.clip();
        ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));
        ctx.restore();
    }
    /**
     * Given the data from getImageData, see if the right values appear at the provided offset.
     * Returns true if either the color or transparency is off
     *
     * @param {Uint8ClampedArray} data The data returned from getImageData
     * @param {number} offset The pixel offset from the start of data.
     * @return {boolean} true if the diagonal rendering is broken
     */
    function verifyBrokenDiagonalRendering(data, offset) {
        // the values ought to be close to the rgba(210, 0, 0, 0.75)
        return (Math.abs(data[offset * 4] - 210) > 2 ||
            Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2);
    }
    /**
     * Determines if the current browser configuration can render triangular clip regions correctly.
     * This value is cached so the function is only expensive the first time called.
     * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976
     * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the
     * result. I suppose that it is conceivably possible that a browser might flip modes while the app is
     * running, but lets hope not.
     *
     * @return {boolean} true if the Diagonal Rendering is broken.
     */
    function isBrokenDiagonalRendering() {
        if (brokenDiagonalRendering_ === undefined) {
            var ctx = document.createElement('canvas').getContext('2d');
            ctx.globalCompositeOperation = 'lighter';
            ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';
            drawTestTriangle(ctx, 4, 5, 4, 0);
            drawTestTriangle(ctx, 4, 5, 0, 5);
            var data = ctx.getImageData(0, 0, 3, 3).data;
            brokenDiagonalRendering_ =
                verifyBrokenDiagonalRendering(data, 0) ||
                    verifyBrokenDiagonalRendering(data, 4) ||
                    verifyBrokenDiagonalRendering(data, 8);
        }
        return brokenDiagonalRendering_;
    }
    /**
     * Calculates ideal resolution to use from the source in order to achieve
     * pixel mapping as close as possible to 1:1 during reprojection.
     * The resolution is calculated regardless of what resolutions
     * are actually available in the dataset (TileGrid, Image, ...).
     *
     * @param {import("./proj/Projection.js").default} sourceProj Source projection.
     * @param {import("./proj/Projection.js").default} targetProj Target projection.
     * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
     * @param {number} targetResolution Target resolution.
     * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
     */
    function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {
        var sourceCenter = transform(targetCenter, targetProj, sourceProj);
        // calculate the ideal resolution of the source data
        var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);
        var targetMetersPerUnit = targetProj.getMetersPerUnit();
        if (targetMetersPerUnit !== undefined) {
            sourceResolution *= targetMetersPerUnit;
        }
        var sourceMetersPerUnit = sourceProj.getMetersPerUnit();
        if (sourceMetersPerUnit !== undefined) {
            sourceResolution /= sourceMetersPerUnit;
        }
        // Based on the projection properties, the point resolution at the specified
        // coordinates may be slightly different. We need to reverse-compensate this
        // in order to achieve optimal results.
        var sourceExtent = sourceProj.getExtent();
        if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {
            var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) /
                sourceResolution;
            if (isFinite(compensationFactor) && compensationFactor > 0) {
                sourceResolution /= compensationFactor;
            }
        }
        return sourceResolution;
    }
    /**
     * Calculates ideal resolution to use from the source in order to achieve
     * pixel mapping as close as possible to 1:1 during reprojection.
     * The resolution is calculated regardless of what resolutions
     * are actually available in the dataset (TileGrid, Image, ...).
     *
     * @param {import("./proj/Projection.js").default} sourceProj Source projection.
     * @param {import("./proj/Projection.js").default} targetProj Target projection.
     * @param {import("./extent.js").Extent} targetExtent Target extent
     * @param {number} targetResolution Target resolution.
     * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
     */
    function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {
        var targetCenter = getCenter(targetExtent);
        var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
        if (!isFinite(sourceResolution) || sourceResolution <= 0) {
            forEachCorner(targetExtent, function (corner) {
                sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);
                return isFinite(sourceResolution) && sourceResolution > 0;
            });
        }
        return sourceResolution;
    }
    /**
     * Renders the source data into new canvas based on the triangulation.
     *
     * @param {number} width Width of the canvas.
     * @param {number} height Height of the canvas.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} sourceResolution Source resolution.
     * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
     * @param {number} targetResolution Target resolution.
     * @param {import("./extent.js").Extent} targetExtent Target extent.
     * @param {import("./reproj/Triangulation.js").default} triangulation
     * Calculated triangulation.
     * @param {Array<{extent: import("./extent.js").Extent,
     *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources
     * Array of sources.
     * @param {number} gutter Gutter of the sources.
     * @param {boolean=} opt_renderEdges Render reprojection edges.
     * @param {object=} opt_contextOptions Properties to set on the canvas context.
     * @return {HTMLCanvasElement} Canvas with reprojected data.
     */
    function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_contextOptions) {
        var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height));
        assign$1(context, opt_contextOptions);
        if (sources.length === 0) {
            return context.canvas;
        }
        context.scale(pixelRatio, pixelRatio);
        function pixelRound(value) {
            return Math.round(value * pixelRatio) / pixelRatio;
        }
        context.globalCompositeOperation = 'lighter';
        var sourceDataExtent = createEmpty();
        sources.forEach(function (src, i, arr) {
            extend$1(sourceDataExtent, src.extent);
        });
        var canvasWidthInUnits = getWidth(sourceDataExtent);
        var canvasHeightInUnits = getHeight(sourceDataExtent);
        var stitchContext = createCanvasContext2D(Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution), Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution));
        assign$1(stitchContext, opt_contextOptions);
        var stitchScale = pixelRatio / sourceResolution;
        sources.forEach(function (src, i, arr) {
            var xPos = src.extent[0] - sourceDataExtent[0];
            var yPos = -(src.extent[3] - sourceDataExtent[3]);
            var srcWidth = getWidth(src.extent);
            var srcHeight = getHeight(src.extent);
            // This test should never fail -- but it does. Need to find a fix the upstream condition
            if (src.image.width > 0 && src.image.height > 0) {
                stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);
            }
        });
        var targetTopLeft = getTopLeft(targetExtent);
        triangulation.getTriangles().forEach(function (triangle, i, arr) {
            /* Calculate affine transform (src -> dst)
             * Resulting matrix can be used to transform coordinate
             * from `sourceProjection` to destination pixels.
             *
             * To optimize number of context calls and increase numerical stability,
             * we also do the following operations:
             * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
             * here before solving the linear system so [ui, vi] are pixel coordinates.
             *
             * Src points: xi, yi
             * Dst points: ui, vi
             * Affine coefficients: aij
             *
             * | x0 y0 1  0  0 0 |   |a00|   |u0|
             * | x1 y1 1  0  0 0 |   |a01|   |u1|
             * | x2 y2 1  0  0 0 | x |a02| = |u2|
             * |  0  0 0 x0 y0 1 |   |a10|   |v0|
             * |  0  0 0 x1 y1 1 |   |a11|   |v1|
             * |  0  0 0 x2 y2 1 |   |a12|   |v2|
             */
            var source = triangle.source;
            var target = triangle.target;
            var x0 = source[0][0], y0 = source[0][1];
            var x1 = source[1][0], y1 = source[1][1];
            var x2 = source[2][0], y2 = source[2][1];
            // Make sure that everything is on pixel boundaries
            var u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);
            var v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);
            var u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);
            var v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);
            var u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);
            var v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);
            // Shift all the source points to improve numerical stability
            // of all the subsequent calculations. The [x0, y0] is used here.
            // This is also used to simplify the linear system.
            var sourceNumericalShiftX = x0;
            var sourceNumericalShiftY = y0;
            x0 = 0;
            y0 = 0;
            x1 -= sourceNumericalShiftX;
            y1 -= sourceNumericalShiftY;
            x2 -= sourceNumericalShiftX;
            y2 -= sourceNumericalShiftY;
            var augmentedMatrix = [
                [x1, y1, 0, 0, u1 - u0],
                [x2, y2, 0, 0, u2 - u0],
                [0, 0, x1, y1, v1 - v0],
                [0, 0, x2, y2, v2 - v0],
            ];
            var affineCoefs = solveLinearSystem(augmentedMatrix);
            if (!affineCoefs) {
                return;
            }
            context.save();
            context.beginPath();
            if (isBrokenDiagonalRendering() ||
                opt_contextOptions === IMAGE_SMOOTHING_DISABLED) {
                // Make sure that all lines are horizontal or vertical
                context.moveTo(u1, v1);
                // This is the diagonal line. Do it in 4 steps
                var steps = 4;
                var ud = u0 - u1;
                var vd = v0 - v1;
                for (var step = 0; step < steps; step++) {
                    // Go horizontally
                    context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound((step * vd) / (steps - 1)));
                    // Go vertically
                    if (step != steps - 1) {
                        context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound(((step + 1) * vd) / (steps - 1)));
                    }
                }
                // We are almost at u0r, v0r
                context.lineTo(u2, v2);
            }
            else {
                context.moveTo(u1, v1);
                context.lineTo(u0, v0);
                context.lineTo(u2, v2);
            }
            context.clip();
            context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);
            context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);
            context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);
            context.drawImage(stitchContext.canvas, 0, 0);
            context.restore();
        });
        if (opt_renderEdges) {
            context.save();
            context.globalCompositeOperation = 'source-over';
            context.strokeStyle = 'black';
            context.lineWidth = 1;
            triangulation.getTriangles().forEach(function (triangle, i, arr) {
                var target = triangle.target;
                var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
                var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
                var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
                var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
                var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
                var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
                context.beginPath();
                context.moveTo(u1, v1);
                context.lineTo(u0, v0);
                context.lineTo(u2, v2);
                context.closePath();
                context.stroke();
            });
            context.restore();
        }
        return context.canvas;
    }

    var __extends$14 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {function(number, number, number, number) : import("../Tile.js").default} FunctionType
     */
    /**
     * @classdesc
     * Class encapsulating single reprojected tile.
     * See {@link module:ol/source/TileImage~TileImage}.
     *
     */
    var ReprojTile = /** @class */ (function (_super) {
        __extends$14(ReprojTile, _super);
        /**
         * @param {import("../proj/Projection.js").default} sourceProj Source projection.
         * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
         * @param {import("../proj/Projection.js").default} targetProj Target projection.
         * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
         * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
         * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
         * @param {number} pixelRatio Pixel ratio.
         * @param {number} gutter Gutter of the source tiles.
         * @param {FunctionType} getTileFunction
         *     Function returning source tiles (z, x, y, pixelRatio).
         * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).
         * @param {boolean=} opt_renderEdges Render reprojection edges.
         * @param {object=} opt_contextOptions Properties to set on the canvas context.
         */
        function ReprojTile(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, opt_errorThreshold, opt_renderEdges, opt_contextOptions) {
            var _this = _super.call(this, tileCoord, TileState.IDLE) || this;
            /**
             * @private
             * @type {boolean}
             */
            _this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;
            /**
             * @private
             * @type {object}
             */
            _this.contextOptions_ = opt_contextOptions;
            /**
             * @private
             * @type {number}
             */
            _this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {number}
             */
            _this.gutter_ = gutter;
            /**
             * @private
             * @type {HTMLCanvasElement}
             */
            _this.canvas_ = null;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            _this.sourceTileGrid_ = sourceTileGrid;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            _this.targetTileGrid_ = targetTileGrid;
            /**
             * @private
             * @type {import("../tilecoord.js").TileCoord}
             */
            _this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;
            /**
             * @private
             * @type {!Array<import("../Tile.js").default>}
             */
            _this.sourceTiles_ = [];
            /**
             * @private
             * @type {?Array<import("../events.js").EventsKey>}
             */
            _this.sourcesListenerKeys_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.sourceZ_ = 0;
            var targetExtent = targetTileGrid.getTileCoordExtent(_this.wrappedTileCoord_);
            var maxTargetExtent = _this.targetTileGrid_.getExtent();
            var maxSourceExtent = _this.sourceTileGrid_.getExtent();
            var limitedTargetExtent = maxTargetExtent
                ? getIntersection(targetExtent, maxTargetExtent)
                : targetExtent;
            if (getArea(limitedTargetExtent) === 0) {
                // Tile is completely outside range -> EMPTY
                // TODO: is it actually correct that the source even creates the tile ?
                _this.state = TileState.EMPTY;
                return _this;
            }
            var sourceProjExtent = sourceProj.getExtent();
            if (sourceProjExtent) {
                if (!maxSourceExtent) {
                    maxSourceExtent = sourceProjExtent;
                }
                else {
                    maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
                }
            }
            var targetResolution = targetTileGrid.getResolution(_this.wrappedTileCoord_[0]);
            var sourceResolution = calculateSourceExtentResolution(sourceProj, targetProj, limitedTargetExtent, targetResolution);
            if (!isFinite(sourceResolution) || sourceResolution <= 0) {
                // invalid sourceResolution -> EMPTY
                // probably edges of the projections when no extent is defined
                _this.state = TileState.EMPTY;
                return _this;
            }
            var errorThresholdInPixels = opt_errorThreshold !== undefined ? opt_errorThreshold : ERROR_THRESHOLD;
            /**
             * @private
             * @type {!import("./Triangulation.js").default}
             */
            _this.triangulation_ = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
            if (_this.triangulation_.getTriangles().length === 0) {
                // no valid triangles -> EMPTY
                _this.state = TileState.EMPTY;
                return _this;
            }
            _this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
            var sourceExtent = _this.triangulation_.calculateSourceExtent();
            if (maxSourceExtent) {
                if (sourceProj.canWrapX()) {
                    sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
                    sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
                }
                else {
                    sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
                }
            }
            if (!getArea(sourceExtent)) {
                _this.state = TileState.EMPTY;
            }
            else {
                var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, _this.sourceZ_);
                for (var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
                    for (var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
                        var tile = getTileFunction(_this.sourceZ_, srcX, srcY, pixelRatio);
                        if (tile) {
                            _this.sourceTiles_.push(tile);
                        }
                    }
                }
                if (_this.sourceTiles_.length === 0) {
                    _this.state = TileState.EMPTY;
                }
            }
            return _this;
        }
        /**
         * Get the HTML Canvas element for this tile.
         * @return {HTMLCanvasElement} Canvas.
         */
        ReprojTile.prototype.getImage = function () {
            return this.canvas_;
        };
        /**
         * @private
         */
        ReprojTile.prototype.reproject_ = function () {
            var sources = [];
            this.sourceTiles_.forEach(function (tile, i, arr) {
                if (tile && tile.getState() == TileState.LOADED) {
                    sources.push({
                        extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
                        image: tile.getImage(),
                    });
                }
            }.bind(this));
            this.sourceTiles_.length = 0;
            if (sources.length === 0) {
                this.state = TileState.ERROR;
            }
            else {
                var z = this.wrappedTileCoord_[0];
                var size = this.targetTileGrid_.getTileSize(z);
                var width = typeof size === 'number' ? size : size[0];
                var height = typeof size === 'number' ? size : size[1];
                var targetResolution = this.targetTileGrid_.getResolution(z);
                var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);
                var targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
                this.canvas_ = render(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.contextOptions_);
                this.state = TileState.LOADED;
            }
            this.changed();
        };
        /**
         * Load not yet loaded URI.
         */
        ReprojTile.prototype.load = function () {
            if (this.state == TileState.IDLE) {
                this.state = TileState.LOADING;
                this.changed();
                var leftToLoad_1 = 0;
                this.sourcesListenerKeys_ = [];
                this.sourceTiles_.forEach(function (tile, i, arr) {
                    var state = tile.getState();
                    if (state == TileState.IDLE || state == TileState.LOADING) {
                        leftToLoad_1++;
                        var sourceListenKey_1 = listen$1(tile, EventType.CHANGE, function (e) {
                            var state = tile.getState();
                            if (state == TileState.LOADED ||
                                state == TileState.ERROR ||
                                state == TileState.EMPTY) {
                                unlistenByKey(sourceListenKey_1);
                                leftToLoad_1--;
                                if (leftToLoad_1 === 0) {
                                    this.unlistenSources_();
                                    this.reproject_();
                                }
                            }
                        }, this);
                        this.sourcesListenerKeys_.push(sourceListenKey_1);
                    }
                }.bind(this));
                this.sourceTiles_.forEach(function (tile, i, arr) {
                    var state = tile.getState();
                    if (state == TileState.IDLE) {
                        tile.load();
                    }
                });
                if (leftToLoad_1 === 0) {
                    setTimeout(this.reproject_.bind(this), 0);
                }
            }
        };
        /**
         * @private
         */
        ReprojTile.prototype.unlistenSources_ = function () {
            this.sourcesListenerKeys_.forEach(unlistenByKey);
            this.sourcesListenerKeys_ = null;
        };
        return ReprojTile;
    }(Tile));

    /**
     * @module ol/source/TileEventType
     */
    /**
     * @enum {string}
     */
    var TileEventType = {
        /**
         * Triggered when a tile starts loading.
         * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
         * @api
         */
        TILELOADSTART: 'tileloadstart',
        /**
         * Triggered when a tile finishes loading, either when its data is loaded,
         * or when loading was aborted because the tile is no longer needed.
         * @event module:ol/source/Tile.TileSourceEvent#tileloadend
         * @api
         */
        TILELOADEND: 'tileloadend',
        /**
         * Triggered if tile loading results in an error.
         * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
         * @api
         */
        TILELOADERROR: 'tileloaderror',
    };

    /**
     * @module ol/tilegrid/TileGrid
     */
    /**
     * @private
     * @type {import("../tilecoord.js").TileCoord}
     */
    var tmpTileCoord = [0, 0, 0];
    /**
     * @typedef {Object} Options
     * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
     * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
     * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
     * @property {number} [minZoom=0] Minimum zoom.
     * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
     * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not
     * specified, `extent` or `origins` must be provided.
     * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
     * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
     * should match the length of the `resolutions` array, i.e. each resolution can have a different
     * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or
     * `origin` must be provided.
     * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
     * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
     * array will have a length of `maxZoom + 1`.
     * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
     * of the grid for each zoom level. If specified the values
     * define each zoom level's extent together with the `origin` or `origins`.
     * A grid `extent` can be configured in addition, and will further limit the extent
     * for which tile requests are made by sources. If the bottom-left corner of
     * an extent is used as `origin` or `origins`, then the `y` value must be
     * negative because OpenLayers tile coordinates use the top left as the origin.
     * @property {number|import("../size.js").Size} [tileSize] Tile size.
     * Default is `[256, 256]`.
     * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
     * should match the length of the `resolutions` array, i.e. each resolution can have a different
     * tile size.
     */
    /**
     * @classdesc
     * Base class for setting the grid pattern for sources accessing tiled-image
     * servers.
     * @api
     */
    var TileGrid = /** @class */ (function () {
        /**
         * @param {Options} options Tile grid options.
         */
        function TileGrid(options) {
            /**
             * @protected
             * @type {number}
             */
            this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;
            /**
             * @private
             * @type {!Array<number>}
             */
            this.resolutions_ = options.resolutions;
            assert(isSorted(this.resolutions_, function (a, b) {
                return b - a;
            }, true), 17); // `resolutions` must be sorted in descending order
            // check if we've got a consistent zoom factor and origin
            var zoomFactor;
            if (!options.origins) {
                for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
                    if (!zoomFactor) {
                        zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
                    }
                    else {
                        if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
                            zoomFactor = undefined;
                            break;
                        }
                    }
                }
            }
            /**
             * @private
             * @type {number|undefined}
             */
            this.zoomFactor_ = zoomFactor;
            /**
             * @protected
             * @type {number}
             */
            this.maxZoom = this.resolutions_.length - 1;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            this.origin_ = options.origin !== undefined ? options.origin : null;
            /**
             * @private
             * @type {Array<import("../coordinate.js").Coordinate>}
             */
            this.origins_ = null;
            if (options.origins !== undefined) {
                this.origins_ = options.origins;
                assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal
            }
            var extent = options.extent;
            if (extent !== undefined && !this.origin_ && !this.origins_) {
                this.origin_ = getTopLeft(extent);
            }
            assert((!this.origin_ && this.origins_) || (this.origin_ && !this.origins_), 18); // Either `origin` or `origins` must be configured, never both
            /**
             * @private
             * @type {Array<number|import("../size.js").Size>}
             */
            this.tileSizes_ = null;
            if (options.tileSizes !== undefined) {
                this.tileSizes_ = options.tileSizes;
                assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal
            }
            /**
             * @private
             * @type {number|import("../size.js").Size}
             */
            this.tileSize_ =
                options.tileSize !== undefined
                    ? options.tileSize
                    : !this.tileSizes_
                        ? DEFAULT_TILE_SIZE
                        : null;
            assert((!this.tileSize_ && this.tileSizes_) ||
                (this.tileSize_ && !this.tileSizes_), 22); // Either `tileSize` or `tileSizes` must be configured, never both
            /**
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.extent_ = extent !== undefined ? extent : null;
            /**
             * @private
             * @type {Array<import("../TileRange.js").default>}
             */
            this.fullTileRanges_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.tmpSize_ = [0, 0];
            if (options.sizes !== undefined) {
                this.fullTileRanges_ = options.sizes.map(function (size, z) {
                    var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));
                    if (extent) {
                        var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);
                        tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);
                        tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);
                        tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);
                        tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);
                    }
                    return tileRange;
                }, this);
            }
            else if (extent) {
                this.calculateTileRanges_(extent);
            }
        }
        /**
         * Call a function with each tile coordinate for a given extent and zoom level.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {number} zoom Integer zoom level.
         * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
         * @api
         */
        TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {
            var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
            for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
                for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
                    callback([zoom, i, j]);
                }
            }
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {boolean} Callback succeeded.
         */
        TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {
            var tileRange, x, y;
            var tileCoordExtent = null;
            var z = tileCoord[0] - 1;
            if (this.zoomFactor_ === 2) {
                x = tileCoord[1];
                y = tileCoord[2];
            }
            else {
                tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
            }
            while (z >= this.minZoom) {
                if (this.zoomFactor_ === 2) {
                    x = Math.floor(x / 2);
                    y = Math.floor(y / 2);
                    tileRange = createOrUpdate$2(x, x, y, y, opt_tileRange);
                }
                else {
                    tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
                }
                if (callback(z, tileRange)) {
                    return true;
                }
                --z;
            }
            return false;
        };
        /**
         * Get the extent for this tile grid, if it was configured.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        TileGrid.prototype.getExtent = function () {
            return this.extent_;
        };
        /**
         * Get the maximum zoom level for the grid.
         * @return {number} Max zoom.
         * @api
         */
        TileGrid.prototype.getMaxZoom = function () {
            return this.maxZoom;
        };
        /**
         * Get the minimum zoom level for the grid.
         * @return {number} Min zoom.
         * @api
         */
        TileGrid.prototype.getMinZoom = function () {
            return this.minZoom;
        };
        /**
         * Get the origin for the grid at the given zoom level.
         * @param {number} z Integer zoom level.
         * @return {import("../coordinate.js").Coordinate} Origin.
         * @api
         */
        TileGrid.prototype.getOrigin = function (z) {
            if (this.origin_) {
                return this.origin_;
            }
            else {
                return this.origins_[z];
            }
        };
        /**
         * Get the resolution for the given zoom level.
         * @param {number} z Integer zoom level.
         * @return {number} Resolution.
         * @api
         */
        TileGrid.prototype.getResolution = function (z) {
            return this.resolutions_[z];
        };
        /**
         * Get the list of resolutions for the tile grid.
         * @return {Array<number>} Resolutions.
         * @api
         */
        TileGrid.prototype.getResolutions = function () {
            return this.resolutions_;
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {import("../TileRange.js").default} Tile range.
         */
        TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {
            if (tileCoord[0] < this.maxZoom) {
                if (this.zoomFactor_ === 2) {
                    var minX = tileCoord[1] * 2;
                    var minY = tileCoord[2] * 2;
                    return createOrUpdate$2(minX, minX + 1, minY, minY + 1, opt_tileRange);
                }
                var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
                return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
            }
            return null;
        };
        /**
         * Get the extent for a tile range.
         * @param {number} z Integer zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {import("../extent.js").Extent} Extent.
         */
        TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {
            var origin = this.getOrigin(z);
            var resolution = this.getResolution(z);
            var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
            var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
            var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
            var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
            var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
            return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
        };
        /**
         * Get a tile range for the given extent and integer zoom level.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {number} z Integer zoom level.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary tile range object.
         * @return {import("../TileRange.js").default} Tile range.
         */
        TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {
            var tileCoord = tmpTileCoord;
            this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);
            var minX = tileCoord[1];
            var minY = tileCoord[2];
            this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);
            return createOrUpdate$2(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {import("../coordinate.js").Coordinate} Tile center.
         */
        TileGrid.prototype.getTileCoordCenter = function (tileCoord) {
            var origin = this.getOrigin(tileCoord[0]);
            var resolution = this.getResolution(tileCoord[0]);
            var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
            return [
                origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
                origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,
            ];
        };
        /**
         * Get the extent of a tile coordinate.
         *
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../extent.js").Extent=} opt_extent Temporary extent object.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {
            var origin = this.getOrigin(tileCoord[0]);
            var resolution = this.getResolution(tileCoord[0]);
            var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
            var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
            var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
            var maxX = minX + tileSize[0] * resolution;
            var maxY = minY + tileSize[1] * resolution;
            return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
        };
        /**
         * Get the tile coordinate for the given map coordinate and resolution.  This
         * method considers that coordinates that intersect tile boundaries should be
         * assigned the higher tile coordinate.
         *
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {number} resolution Resolution.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @api
         */
        TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {
            return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
        };
        /**
         * Note that this method should not be called for resolutions that correspond
         * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
         * @param {number} x X.
         * @param {number} y Y.
         * @param {number} resolution Resolution (for a non-integer zoom level).
         * @param {boolean} reverseIntersectionPolicy Instead of letting edge
         *     intersections go to the higher tile coordinate, let edge intersections
         *     go to the lower tile coordinate.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @private
         */
        TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
            var z = this.getZForResolution(resolution);
            var scale = resolution / this.getResolution(z);
            var origin = this.getOrigin(z);
            var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
            var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
            var adjustY = reverseIntersectionPolicy ? 0.5 : 0;
            var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
            var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
            var tileCoordX = (scale * xFromOrigin) / tileSize[0];
            var tileCoordY = (scale * yFromOrigin) / tileSize[1];
            if (reverseIntersectionPolicy) {
                tileCoordX = Math.ceil(tileCoordX) - 1;
                tileCoordY = Math.ceil(tileCoordY) - 1;
            }
            else {
                tileCoordX = Math.floor(tileCoordX);
                tileCoordY = Math.floor(tileCoordY);
            }
            return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
        };
        /**
         * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
         * they should have separate implementations.  This method is for integer zoom
         * levels.  The other method should only be called for resolutions corresponding
         * to non-integer zoom levels.
         * @param {number} x Map x coordinate.
         * @param {number} y Map y coordinate.
         * @param {number} z Integer zoom level.
         * @param {boolean} reverseIntersectionPolicy Instead of letting edge
         *     intersections go to the higher tile coordinate, let edge intersections
         *     go to the lower tile coordinate.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @private
         */
        TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
            var origin = this.getOrigin(z);
            var resolution = this.getResolution(z);
            var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
            var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
            var adjustY = reverseIntersectionPolicy ? 0.5 : 0;
            var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
            var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
            var tileCoordX = xFromOrigin / tileSize[0];
            var tileCoordY = yFromOrigin / tileSize[1];
            if (reverseIntersectionPolicy) {
                tileCoordX = Math.ceil(tileCoordX) - 1;
                tileCoordY = Math.ceil(tileCoordY) - 1;
            }
            else {
                tileCoordX = Math.floor(tileCoordX);
                tileCoordY = Math.floor(tileCoordY);
            }
            return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
        };
        /**
         * Get a tile coordinate given a map coordinate and zoom level.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {number} z Zoom level.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @api
         */
        TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {
            return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {number} Tile resolution.
         */
        TileGrid.prototype.getTileCoordResolution = function (tileCoord) {
            return this.resolutions_[tileCoord[0]];
        };
        /**
         * Get the tile size for a zoom level. The type of the return value matches the
         * `tileSize` or `tileSizes` that the tile grid was configured with. To always
         * get an `import("../size.js").Size`, run the result through `import("../size.js").Size.toSize()`.
         * @param {number} z Z.
         * @return {number|import("../size.js").Size} Tile size.
         * @api
         */
        TileGrid.prototype.getTileSize = function (z) {
            if (this.tileSize_) {
                return this.tileSize_;
            }
            else {
                return this.tileSizes_[z];
            }
        };
        /**
         * @param {number} z Zoom level.
         * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
         */
        TileGrid.prototype.getFullTileRange = function (z) {
            if (!this.fullTileRanges_) {
                return this.extent_
                    ? this.getTileRangeForExtentAndZ(this.extent_, z)
                    : null;
            }
            else {
                return this.fullTileRanges_[z];
            }
        };
        /**
         * @param {number} resolution Resolution.
         * @param {number=} opt_direction If 0, the nearest resolution will be used.
         *     If 1, the nearest lower resolution will be used. If -1, the nearest
         *     higher resolution will be used. Default is 0.
         * @return {number} Z.
         * @api
         */
        TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {
            var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);
            return clamp(z, this.minZoom, this.maxZoom);
        };
        /**
         * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
         * @private
         */
        TileGrid.prototype.calculateTileRanges_ = function (extent) {
            var length = this.resolutions_.length;
            var fullTileRanges = new Array(length);
            for (var z = this.minZoom; z < length; ++z) {
                fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
            }
            this.fullTileRanges_ = fullTileRanges;
        };
        return TileGrid;
    }());

    /**
     * @module ol/tilegrid
     */
    /**
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {!TileGrid} Default tile grid for the
     * passed projection.
     */
    function getForProjection(projection) {
        var tileGrid = projection.getDefaultTileGrid();
        if (!tileGrid) {
            tileGrid = createForProjection(projection);
            projection.setDefaultTileGrid(tileGrid);
        }
        return tileGrid;
    }
    /**
     * @param {TileGrid} tileGrid Tile grid.
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
     */
    function wrapX$2(tileGrid, tileCoord, projection) {
        var z = tileCoord[0];
        var center = tileGrid.getTileCoordCenter(tileCoord);
        var projectionExtent = extentFromProjection(projection);
        if (!containsCoordinate(projectionExtent, center)) {
            var worldWidth = getWidth(projectionExtent);
            var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
            center[0] += worldWidth * worldsAway;
            return tileGrid.getTileCoordForCoordAndZ(center, z);
        }
        else {
            return tileCoord;
        }
    }
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {import("./extent/Corner.js").default=} opt_corner Extent corner (default is `'top-left'`).
     * @return {!TileGrid} TileGrid instance.
     */
    function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
        var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;
        var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);
        return new TileGrid({
            extent: extent,
            origin: getCorner(extent, corner),
            resolutions: resolutions,
            tileSize: opt_tileSize,
        });
    }
    /**
     * @typedef {Object} XYZOptions
     * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
     * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution
     * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.
     * @property {number} [maxResolution] Resolution at level zero.
     * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
     * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
     * @property {number} [minZoom=0] Minimum zoom.
     * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
     */
    /**
     * Creates a tile grid with a standard XYZ tiling scheme.
     * @param {XYZOptions=} opt_options Tile grid options.
     * @return {!TileGrid} Tile grid instance.
     * @api
     */
    function createXYZ(opt_options) {
        var xyzOptions = opt_options || {};
        var extent = xyzOptions.extent || get$2('EPSG:3857').getExtent();
        var gridOptions = {
            extent: extent,
            minZoom: xyzOptions.minZoom,
            tileSize: xyzOptions.tileSize,
            resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution),
        };
        return new TileGrid(gridOptions);
    }
    /**
     * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {number=} opt_maxResolution Resolution at level zero.
     * @return {!Array<number>} Resolutions array.
     */
    function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {
        var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;
        var height = getHeight(extent);
        var width = getWidth(extent);
        var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);
        var maxResolution = opt_maxResolution > 0
            ? opt_maxResolution
            : Math.max(width / tileSize[0], height / tileSize[1]);
        var length = maxZoom + 1;
        var resolutions = new Array(length);
        for (var z = 0; z < length; ++z) {
            resolutions[z] = maxResolution / Math.pow(2, z);
        }
        return resolutions;
    }
    /**
     * @param {import("./proj.js").ProjectionLike} projection Projection.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {import("./extent/Corner.js").default=} opt_corner Extent corner (default is `'top-left'`).
     * @return {!TileGrid} TileGrid instance.
     */
    function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
        var extent = extentFromProjection(projection);
        return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
    }
    /**
     * Generate a tile grid extent from a projection.  If the projection has an
     * extent, it is used.  If not, a global extent is assumed.
     * @param {import("./proj.js").ProjectionLike} projection Projection.
     * @return {import("./extent.js").Extent} Extent.
     */
    function extentFromProjection(projection) {
        projection = get$2(projection);
        var extent = projection.getExtent();
        if (!extent) {
            var half = (180 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit();
            extent = createOrUpdate(-half, -half, half, half);
        }
        return extent;
    }

    var __extends$15 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize]
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {number} [tilePixelRatio]
     * @property {import("../proj.js").ProjectionLike} [projection]
     * @property {import("./State.js").default} [state]
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
     * @property {boolean} [wrapX=true]
     * @property {number} [transition]
     * @property {string} [key]
     * @property {number} [zDirection=0]
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for sources providing images divided into a tile grid.
     * @abstract
     * @api
     */
    var TileSource = /** @class */ (function (_super) {
        __extends$15(TileSource, _super);
        /**
         * @param {Options} options SourceTile source options.
         */
        function TileSource(options) {
            var _this = _super.call(this, {
                attributions: options.attributions,
                attributionsCollapsible: options.attributionsCollapsible,
                projection: options.projection,
                state: options.state,
                wrapX: options.wrapX,
            }) || this;
            /**
             * @private
             * @type {boolean}
             */
            _this.opaque_ = options.opaque !== undefined ? options.opaque : false;
            /**
             * @private
             * @type {number}
             */
            _this.tilePixelRatio_ =
                options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;
            /**
             * @protected
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;
            var tileSize = [256, 256];
            var tileGrid = options.tileGrid;
            if (tileGrid) {
                toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);
            }
            /**
             * @protected
             * @type {import("../TileCache.js").default}
             */
            _this.tileCache = new TileCache(options.cacheSize || 0);
            /**
             * @protected
             * @type {import("../size.js").Size}
             */
            _this.tmpSize = [0, 0];
            /**
             * @private
             * @type {string}
             */
            _this.key_ = options.key || '';
            /**
             * @protected
             * @type {import("../Tile.js").Options}
             */
            _this.tileOptions = { transition: options.transition };
            /**
             * zDirection hint, read by the renderer. Indicates which resolution should be used
             * by a renderer if the views resolution does not match any resolution of the tile source.
             * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
             * will be used. If -1, the nearest higher resolution will be used.
             * @type {number}
             */
            _this.zDirection = options.zDirection ? options.zDirection : 0;
            return _this;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        TileSource.prototype.canExpireCache = function () {
            return this.tileCache.canExpireCache();
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        TileSource.prototype.expireCache = function (projection, usedTiles) {
            var tileCache = this.getTileCacheForProjection(projection);
            if (tileCache) {
                tileCache.expireCache(usedTiles);
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {number} z Zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
         *     loaded tile.  If the callback returns `false`, the tile will not be
         *     considered loaded.
         * @return {boolean} The tile range is fully covered with loaded tiles.
         */
        TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {
            var tileCache = this.getTileCacheForProjection(projection);
            if (!tileCache) {
                return false;
            }
            var covered = true;
            var tile, tileCoordKey, loaded;
            for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
                for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
                    tileCoordKey = getKeyZXY(z, x, y);
                    loaded = false;
                    if (tileCache.containsKey(tileCoordKey)) {
                        tile = /** @type {!import("../Tile.js").default} */ (tileCache.get(tileCoordKey));
                        loaded = tile.getState() === TileState.LOADED;
                        if (loaded) {
                            loaded = callback(tile) !== false;
                        }
                    }
                    if (!loaded) {
                        covered = false;
                    }
                }
            }
            return covered;
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {number} Gutter.
         */
        TileSource.prototype.getGutterForProjection = function (projection) {
            return 0;
        };
        /**
         * Return the key to be used for all tiles in the source.
         * @return {string} The key for all tiles.
         * @protected
         */
        TileSource.prototype.getKey = function () {
            return this.key_;
        };
        /**
         * Set the value to be used as the key for all tiles in the source.
         * @param {string} key The key for tiles.
         * @protected
         */
        TileSource.prototype.setKey = function (key) {
            if (this.key_ !== key) {
                this.key_ = key;
                this.changed();
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {boolean} Opaque.
         */
        TileSource.prototype.getOpaque = function (projection) {
            return this.opaque_;
        };
        /**
         * @return {Array<number>} Resolutions.
         */
        TileSource.prototype.getResolutions = function () {
            return this.tileGrid.getResolutions();
        };
        /**
         * @abstract
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         */
        TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {
            return abstract();
        };
        /**
         * Return the tile grid of the tile source.
         * @return {import("../tilegrid/TileGrid.js").default} Tile grid.
         * @api
         */
        TileSource.prototype.getTileGrid = function () {
            return this.tileGrid;
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
         */
        TileSource.prototype.getTileGridForProjection = function (projection) {
            if (!this.tileGrid) {
                return getForProjection(projection);
            }
            else {
                return this.tileGrid;
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../TileCache.js").default} Tile cache.
         * @protected
         */
        TileSource.prototype.getTileCacheForProjection = function (projection) {
            assert(equivalent(this.getProjection(), projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.
            );
            return this.tileCache;
        };
        /**
         * Get the tile pixel ratio for this source. Subclasses may override this
         * method, which is meant to return a supported pixel ratio that matches the
         * provided `pixelRatio` as close as possible.
         * @param {number} pixelRatio Pixel ratio.
         * @return {number} Tile pixel ratio.
         */
        TileSource.prototype.getTilePixelRatio = function (pixelRatio) {
            return this.tilePixelRatio_;
        };
        /**
         * @param {number} z Z.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../size.js").Size} Tile size.
         */
        TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {
            var tileGrid = this.getTileGridForProjection(projection);
            var tilePixelRatio = this.getTilePixelRatio(pixelRatio);
            var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
            if (tilePixelRatio == 1) {
                return tileSize;
            }
            else {
                return scale$2(tileSize, tilePixelRatio, this.tmpSize);
            }
        };
        /**
         * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
         * is outside the resolution and extent range of the tile grid, `null` will be
         * returned.
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../proj/Projection.js").default=} opt_projection Projection.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
         *     null if no tile URL should be created for the passed `tileCoord`.
         */
        TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {
            var projection = opt_projection !== undefined ? opt_projection : this.getProjection();
            var tileGrid = this.getTileGridForProjection(projection);
            if (this.getWrapX() && projection.isGlobal()) {
                tileCoord = wrapX$2(tileGrid, tileCoord, projection);
            }
            return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
        };
        /**
         * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
         * @api
         */
        TileSource.prototype.clear = function () {
            this.tileCache.clear();
        };
        TileSource.prototype.refresh = function () {
            this.clear();
            _super.prototype.refresh.call(this);
        };
        /**
         * Increases the cache size if needed
         * @param {number} tileCount Minimum number of tiles needed.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        TileSource.prototype.updateCacheSize = function (tileCount, projection) {
            var tileCache = this.getTileCacheForProjection(projection);
            if (tileCount > tileCache.highWaterMark) {
                tileCache.highWaterMark = tileCount;
            }
        };
        /**
         * Marks a tile coord as being used, without triggering a load.
         * @abstract
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        TileSource.prototype.useTile = function (z, x, y, projection) { };
        return TileSource;
    }(Source));
    /**
     * @classdesc
     * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
     * type.
     */
    var TileSourceEvent = /** @class */ (function (_super) {
        __extends$15(TileSourceEvent, _super);
        /**
         * @param {string} type Type.
         * @param {import("../Tile.js").default} tile The tile.
         */
        function TileSourceEvent(type, tile) {
            var _this = _super.call(this, type) || this;
            /**
             * The tile related to the event.
             * @type {import("../Tile.js").default}
             * @api
             */
            _this.tile = tile;
            return _this;
        }
        return TileSourceEvent;
    }(BaseEvent));

    /**
     * @module ol/tileurlfunction
     */
    /**
     * @param {string} template Template.
     * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTemplate(template, tileGrid) {
        var zRegEx = /\{z\}/g;
        var xRegEx = /\{x\}/g;
        var yRegEx = /\{y\}/g;
        var dashYRegEx = /\{-y\}/g;
        return (
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function (tileCoord, pixelRatio, projection) {
            if (!tileCoord) {
                return undefined;
            }
            else {
                return template
                    .replace(zRegEx, tileCoord[0].toString())
                    .replace(xRegEx, tileCoord[1].toString())
                    .replace(yRegEx, tileCoord[2].toString())
                    .replace(dashYRegEx, function () {
                    var z = tileCoord[0];
                    var range = tileGrid.getFullTileRange(z);
                    assert(range, 55); // The {-y} placeholder requires a tile grid with extent
                    var y = range.getHeight() - tileCoord[2] - 1;
                    return y.toString();
                });
            }
        });
    }
    /**
     * @param {Array<string>} templates Templates.
     * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTemplates(templates, tileGrid) {
        var len = templates.length;
        var tileUrlFunctions = new Array(len);
        for (var i = 0; i < len; ++i) {
            tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
        }
        return createFromTileUrlFunctions(tileUrlFunctions);
    }
    /**
     * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTileUrlFunctions(tileUrlFunctions) {
        if (tileUrlFunctions.length === 1) {
            return tileUrlFunctions[0];
        }
        return (
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function (tileCoord, pixelRatio, projection) {
            if (!tileCoord) {
                return undefined;
            }
            else {
                var h = hash$1(tileCoord);
                var index = modulo(h, tileUrlFunctions.length);
                return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
            }
        });
    }
    /**
     * @param {string} url URL.
     * @return {Array<string>} Array of urls.
     */
    function expandUrl(url) {
        var urls = [];
        var match = /\{([a-z])-([a-z])\}/.exec(url);
        if (match) {
            // char range
            var startCharCode = match[1].charCodeAt(0);
            var stopCharCode = match[2].charCodeAt(0);
            var charCode = void 0;
            for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
                urls.push(url.replace(match[0], String.fromCharCode(charCode)));
            }
            return urls;
        }
        match = /\{(\d+)-(\d+)\}/.exec(url);
        if (match) {
            // number range
            var stop_1 = parseInt(match[2], 10);
            for (var i = parseInt(match[1], 10); i <= stop_1; i++) {
                urls.push(url.replace(match[0], i.toString()));
            }
            return urls;
        }
        urls.push(url);
        return urls;
    }

    var __extends$16 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize]
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection]
     * @property {import("./State.js").default} [state]
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
     * @property {import("../Tile.js").LoadFunction} tileLoadFunction
     * @property {number} [tilePixelRatio]
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction]
     * @property {string} [url]
     * @property {Array<string>} [urls]
     * @property {boolean} [wrapX=true]
     * @property {number} [transition]
     * @property {string} [key]
     * @property {number} [zDirection=0]
     */
    /**
     * @classdesc
     * Base class for sources providing tiles divided into a tile grid over http.
     *
     * @fires import("./Tile.js").TileSourceEvent
     */
    var UrlTile = /** @class */ (function (_super) {
        __extends$16(UrlTile, _super);
        /**
         * @param {Options} options Image tile options.
         */
        function UrlTile(options) {
            var _this = _super.call(this, {
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                opaque: options.opaque,
                projection: options.projection,
                state: options.state,
                tileGrid: options.tileGrid,
                tilePixelRatio: options.tilePixelRatio,
                wrapX: options.wrapX,
                transition: options.transition,
                key: options.key,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            }) || this;
            /**
             * @private
             * @type {boolean}
             */
            _this.generateTileUrlFunction_ =
                _this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;
            /**
             * @protected
             * @type {import("../Tile.js").LoadFunction}
             */
            _this.tileLoadFunction = options.tileLoadFunction;
            if (options.tileUrlFunction) {
                _this.tileUrlFunction = options.tileUrlFunction;
            }
            /**
             * @protected
             * @type {!Array<string>|null}
             */
            _this.urls = null;
            if (options.urls) {
                _this.setUrls(options.urls);
            }
            else if (options.url) {
                _this.setUrl(options.url);
            }
            /**
             * @private
             * @type {!Object<string, boolean>}
             */
            _this.tileLoadingKeys_ = {};
            return _this;
        }
        /**
         * Return the tile load function of the source.
         * @return {import("../Tile.js").LoadFunction} TileLoadFunction
         * @api
         */
        UrlTile.prototype.getTileLoadFunction = function () {
            return this.tileLoadFunction;
        };
        /**
         * Return the tile URL function of the source.
         * @return {import("../Tile.js").UrlFunction} TileUrlFunction
         * @api
         */
        UrlTile.prototype.getTileUrlFunction = function () {
            return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction
                ? this.tileUrlFunction.bind(this)
                : this.tileUrlFunction;
        };
        /**
         * Return the URLs used for this source.
         * When a tileUrlFunction is used instead of url or urls,
         * null will be returned.
         * @return {!Array<string>|null} URLs.
         * @api
         */
        UrlTile.prototype.getUrls = function () {
            return this.urls;
        };
        /**
         * Handle tile change events.
         * @param {import("../events/Event.js").default} event Event.
         * @protected
         */
        UrlTile.prototype.handleTileChange = function (event) {
            var tile = /** @type {import("../Tile.js").default} */ (event.target);
            var uid = getUid(tile);
            var tileState = tile.getState();
            var type;
            if (tileState == TileState.LOADING) {
                this.tileLoadingKeys_[uid] = true;
                type = TileEventType.TILELOADSTART;
            }
            else if (uid in this.tileLoadingKeys_) {
                delete this.tileLoadingKeys_[uid];
                type =
                    tileState == TileState.ERROR
                        ? TileEventType.TILELOADERROR
                        : tileState == TileState.LOADED
                            ? TileEventType.TILELOADEND
                            : undefined;
            }
            if (type != undefined) {
                this.dispatchEvent(new TileSourceEvent(type, tile));
            }
        };
        /**
         * Set the tile load function of the source.
         * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
         * @api
         */
        UrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {
            this.tileCache.clear();
            this.tileLoadFunction = tileLoadFunction;
            this.changed();
        };
        /**
         * Set the tile URL function of the source.
         * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
         * @param {string=} key Optional new tile key for the source.
         * @api
         */
        UrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, key) {
            this.tileUrlFunction = tileUrlFunction;
            this.tileCache.pruneExceptNewestZ();
            if (typeof key !== 'undefined') {
                this.setKey(key);
            }
            else {
                this.changed();
            }
        };
        /**
         * Set the URL to use for requests.
         * @param {string} url URL.
         * @api
         */
        UrlTile.prototype.setUrl = function (url) {
            var urls = expandUrl(url);
            this.urls = urls;
            this.setUrls(urls);
        };
        /**
         * Set the URLs to use for requests.
         * @param {Array<string>} urls URLs.
         * @api
         */
        UrlTile.prototype.setUrls = function (urls) {
            this.urls = urls;
            var key = urls.join('\n');
            if (this.generateTileUrlFunction_) {
                this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
            }
            else {
                this.setKey(key);
            }
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        UrlTile.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {
            return undefined;
        };
        /**
         * Marks a tile coord as being used, without triggering a load.
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         */
        UrlTile.prototype.useTile = function (z, x, y) {
            var tileCoordKey = getKeyZXY(z, x, y);
            if (this.tileCache.containsKey(tileCoordKey)) {
                this.tileCache.get(tileCoordKey);
            }
        };
        return UrlTile;
    }(TileSource));

    var __extends$17 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {import("./State.js").default} [state] Source state.
     * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
     * Default is {@link module:ol/ImageTile~ImageTile}.
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
     * service advertizes 256px by 256px tiles but actually sends 512px
     * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
     * should be set to `2`.
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
     * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
     * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
     * used instead of defining each one separately in the `urls` option.
     * @property {Array<string>} [urls] An array of URL templates.
     * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
     * request out-of-bounds tiles from the server. When set to `false`, only one
     * world will be rendered. When set to `true`, tiles will be requested for one
     * world only, but they will be wrapped horizontally to render multiple worlds.
     * @property {number} [transition] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     * @property {string} [key] Optional tile key for proper cache fetching
     * @property {number} [zDirection=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    /**
     * @classdesc
     * Base class for sources providing images divided into a tile grid.
     *
     * @fires import("./Tile.js").TileSourceEvent
     * @api
     */
    var TileImage = /** @class */ (function (_super) {
        __extends$17(TileImage, _super);
        /**
         * @param {!Options} options Image tile options.
         */
        function TileImage(options) {
            var _this = _super.call(this, {
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                opaque: options.opaque,
                projection: options.projection,
                state: options.state,
                tileGrid: options.tileGrid,
                tileLoadFunction: options.tileLoadFunction
                    ? options.tileLoadFunction
                    : defaultTileLoadFunction,
                tilePixelRatio: options.tilePixelRatio,
                tileUrlFunction: options.tileUrlFunction,
                url: options.url,
                urls: options.urls,
                wrapX: options.wrapX,
                transition: options.transition,
                key: options.key,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            }) || this;
            /**
             * @protected
             * @type {?string}
             */
            _this.crossOrigin =
                options.crossOrigin !== undefined ? options.crossOrigin : null;
            /**
             * @protected
             * @type {typeof ImageTile}
             */
            _this.tileClass =
                options.tileClass !== undefined ? options.tileClass : ImageTile;
            /**
             * @protected
             * @type {!Object<string, TileCache>}
             */
            _this.tileCacheForProjection = {};
            /**
             * @protected
             * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
             */
            _this.tileGridForProjection = {};
            /**
             * @private
             * @type {number|undefined}
             */
            _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;
            /**
             * @private
             * @type {object|undefined}
             */
            _this.contextOptions_ =
                options.imageSmoothing === false ? IMAGE_SMOOTHING_DISABLED : undefined;
            /**
             * @private
             * @type {boolean}
             */
            _this.renderReprojectionEdges_ = false;
            return _this;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        TileImage.prototype.canExpireCache = function () {
            if (this.tileCache.canExpireCache()) {
                return true;
            }
            else {
                for (var key in this.tileCacheForProjection) {
                    if (this.tileCacheForProjection[key].canExpireCache()) {
                        return true;
                    }
                }
            }
            return false;
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        TileImage.prototype.expireCache = function (projection, usedTiles) {
            var usedTileCache = this.getTileCacheForProjection(projection);
            this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
            for (var id in this.tileCacheForProjection) {
                var tileCache = this.tileCacheForProjection[id];
                tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
            }
        };
        /**
         * @return {Object|undefined} Context options.
         */
        TileImage.prototype.getContextOptions = function () {
            return this.contextOptions_;
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {number} Gutter.
         */
        TileImage.prototype.getGutterForProjection = function (projection) {
            if (this.getProjection() &&
                projection &&
                !equivalent(this.getProjection(), projection)) {
                return 0;
            }
            else {
                return this.getGutter();
            }
        };
        /**
         * @return {number} Gutter.
         */
        TileImage.prototype.getGutter = function () {
            return 0;
        };
        /**
         * Return the key to be used for all tiles in the source.
         * @return {string} The key for all tiles.
         * @protected
         */
        TileImage.prototype.getKey = function () {
            return (_super.prototype.getKey.call(this) +
                (this.contextOptions_ ? '\n' + JSON.stringify(this.contextOptions_) : ''));
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {boolean} Opaque.
         */
        TileImage.prototype.getOpaque = function (projection) {
            if (this.getProjection() &&
                projection &&
                !equivalent(this.getProjection(), projection)) {
                return false;
            }
            else {
                return _super.prototype.getOpaque.call(this, projection);
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
         */
        TileImage.prototype.getTileGridForProjection = function (projection) {
            var thisProj = this.getProjection();
            if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {
                return this.tileGrid;
            }
            else {
                var projKey = getUid(projection);
                if (!(projKey in this.tileGridForProjection)) {
                    this.tileGridForProjection[projKey] = getForProjection(projection);
                }
                return this.tileGridForProjection[projKey];
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../TileCache.js").default} Tile cache.
         */
        TileImage.prototype.getTileCacheForProjection = function (projection) {
            var thisProj = this.getProjection();
            if (!thisProj || equivalent(thisProj, projection)) {
                return this.tileCache;
            }
            else {
                var projKey = getUid(projection);
                if (!(projKey in this.tileCacheForProjection)) {
                    this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);
                }
                return this.tileCacheForProjection[projKey];
            }
        };
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {string} key The key set on the tile.
         * @return {!import("../Tile.js").default} Tile.
         * @private
         */
        TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {
            var tileCoord = [z, x, y];
            var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
            var tileUrl = urlTileCoord
                ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)
                : undefined;
            var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);
            tile.key = key;
            tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));
            return tile;
        };
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         */
        TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {
            var sourceProjection = this.getProjection();
            if (!sourceProjection ||
                !projection ||
                equivalent(sourceProjection, projection)) {
                return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
            }
            else {
                var cache = this.getTileCacheForProjection(projection);
                var tileCoord = [z, x, y];
                var tile = void 0;
                var tileCoordKey = getKey$1(tileCoord);
                if (cache.containsKey(tileCoordKey)) {
                    tile = cache.get(tileCoordKey);
                }
                var key = this.getKey();
                if (tile && tile.key == key) {
                    return tile;
                }
                else {
                    var sourceTileGrid = this.getTileGridForProjection(sourceProjection);
                    var targetTileGrid = this.getTileGridForProjection(projection);
                    var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
                    var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {
                        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
                    }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.contextOptions_);
                    newTile.key = key;
                    if (tile) {
                        newTile.interimTile = tile;
                        newTile.refreshInterimChain();
                        cache.replace(tileCoordKey, newTile);
                    }
                    else {
                        cache.set(tileCoordKey, newTile);
                    }
                    return newTile;
                }
            }
        };
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {!import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         * @protected
         */
        TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {
            var tile = null;
            var tileCoordKey = getKeyZXY(z, x, y);
            var key = this.getKey();
            if (!this.tileCache.containsKey(tileCoordKey)) {
                tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                this.tileCache.set(tileCoordKey, tile);
            }
            else {
                tile = this.tileCache.get(tileCoordKey);
                if (tile.key != key) {
                    // The source's params changed. If the tile has an interim tile and if we
                    // can use it then we use it. Otherwise we create a new tile.  In both
                    // cases we attempt to assign an interim tile to the new tile.
                    var interimTile = tile;
                    tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                    //make the new tile the head of the list,
                    if (interimTile.getState() == TileState.IDLE) {
                        //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
                        tile.interimTile = interimTile.interimTile;
                    }
                    else {
                        tile.interimTile = interimTile;
                    }
                    tile.refreshInterimChain();
                    this.tileCache.replace(tileCoordKey, tile);
                }
            }
            return tile;
        };
        /**
         * Sets whether to render reprojection edges or not (usually for debugging).
         * @param {boolean} render Render the edges.
         * @api
         */
        TileImage.prototype.setRenderReprojectionEdges = function (render) {
            if (this.renderReprojectionEdges_ == render) {
                return;
            }
            this.renderReprojectionEdges_ = render;
            for (var id in this.tileCacheForProjection) {
                this.tileCacheForProjection[id].clear();
            }
            this.changed();
        };
        /**
         * Sets the tile grid to use when reprojecting the tiles to the given
         * projection instead of the default tile grid for the projection.
         *
         * This can be useful when the default tile grid cannot be created
         * (e.g. projection has no extent defined) or
         * for optimization reasons (custom tile size, resolutions, ...).
         *
         * @param {import("../proj.js").ProjectionLike} projection Projection.
         * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
         * @api
         */
        TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {
            {
                var proj = get$2(projection);
                if (proj) {
                    var projKey = getUid(proj);
                    if (!(projKey in this.tileGridForProjection)) {
                        this.tileGridForProjection[projKey] = tilegrid;
                    }
                }
            }
        };
        return TileImage;
    }(UrlTile));
    /**
     * @param {ImageTile} imageTile Image tile.
     * @param {string} src Source.
     */
    function defaultTileLoadFunction(imageTile, src) {
        /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;
    }

    /**
     * @module ol/source/XYZ
     */
    var __extends$18 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
     * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
     * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
     * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
     * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
     * should be set to `2`.
     * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
     * Not used if `tileGrid` is provided.
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
     * tile URL given a tile coordinate and the projection.
     * Required if `url` or `urls` are not provided.
     * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
     * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
     * may be used instead of defining each one separately in the `urls` option.
     * @property {Array<string>} [urls] An array of URL templates.
     * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
     * @property {number} [transition=250] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     * @property {number} [zDirection=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    /**
     * @classdesc
     * Layer source for tile data with URLs in a set XYZ format that are
     * defined in a URL template. By default, this follows the widely-used
     * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
     * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
     * using the `{-y}` placeholder in the URL template, so long as the
     * source does not have a custom tile grid. In this case
     * a `tileUrlFunction` can be used, such as:
     * ```js
     *  tileUrlFunction: function(coordinate) {
     *    return 'http://mapserver.com/' + coordinate[0] + '/' +
     *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';
     *  }
     * ```
     * @api
     */
    var XYZ = /** @class */ (function (_super) {
        __extends$18(XYZ, _super);
        /**
         * @param {Options=} opt_options XYZ options.
         */
        function XYZ(opt_options) {
            var _this = this;
            var options = opt_options || {};
            var projection = options.projection !== undefined ? options.projection : 'EPSG:3857';
            var tileGrid = options.tileGrid !== undefined
                ? options.tileGrid
                : createXYZ({
                    extent: extentFromProjection(projection),
                    maxResolution: options.maxResolution,
                    maxZoom: options.maxZoom,
                    minZoom: options.minZoom,
                    tileSize: options.tileSize,
                });
            _this = _super.call(this, {
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                crossOrigin: options.crossOrigin,
                imageSmoothing: options.imageSmoothing,
                opaque: options.opaque,
                projection: projection,
                reprojectionErrorThreshold: options.reprojectionErrorThreshold,
                tileGrid: tileGrid,
                tileLoadFunction: options.tileLoadFunction,
                tilePixelRatio: options.tilePixelRatio,
                tileUrlFunction: options.tileUrlFunction,
                url: options.url,
                urls: options.urls,
                wrapX: options.wrapX !== undefined ? options.wrapX : true,
                transition: options.transition,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            }) || this;
            return _this;
        }
        return XYZ;
    }(TileImage));

    /**
     * @module ol/source/OSM
     */
    var __extends$19 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * The attribution containing a link to the OpenStreetMap Copyright and License
     * page.
     * @const
     * @type {string}
     * @api
     */
    var ATTRIBUTION = '&#169; ' +
        '<a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> ' +
        'contributors.';
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {number} [maxZoom=19] Max zoom.
     * @property {boolean} [opaque=true] Whether the layer is opaque.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {number} [transition=250] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
     * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
     * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
     */
    /**
     * @classdesc
     * Layer source for the OpenStreetMap tile server.
     * @api
     */
    var OSM = /** @class */ (function (_super) {
        __extends$19(OSM, _super);
        /**
         * @param {Options=} [opt_options] Open Street Map options.
         */
        function OSM(opt_options) {
            var _this = this;
            var options = opt_options || {};
            var attributions;
            if (options.attributions !== undefined) {
                attributions = options.attributions;
            }
            else {
                attributions = [ATTRIBUTION];
            }
            var crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';
            var url = options.url !== undefined
                ? options.url
                : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';
            _this = _super.call(this, {
                attributions: attributions,
                attributionsCollapsible: false,
                cacheSize: options.cacheSize,
                crossOrigin: crossOrigin,
                imageSmoothing: options.imageSmoothing,
                maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
                opaque: options.opaque !== undefined ? options.opaque : true,
                reprojectionErrorThreshold: options.reprojectionErrorThreshold,
                tileLoadFunction: options.tileLoadFunction,
                transition: options.transition,
                url: url,
                wrapX: options.wrapX,
            }) || this;
            return _this;
        }
        return OSM;
    }(XYZ));

    /**
     * @module ol/layer/TileProperty
     */
    /**
     * @enum {string}
     */
    var TileProperty = {
        PRELOAD: 'preload',
        USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',
    };

    var __extends$1a = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
     * means no preloading.
     * @property {import("../source/Tile.js").default} [source] Source for this layer.
     * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
     * this layer in its layers collection, and the layer will be rendered on top. This is useful for
     * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
     * use {@link module:ol/Map#addLayer}.
     * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
     */
    /**
     * @classdesc
     * For layer sources that provide pre-rendered, tiled images in grids that are
     * organized by zoom levels for specific resolutions.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @extends {Layer<import("../source/Tile.js").default>}
     * @api
     */
    var BaseTileLayer = /** @class */ (function (_super) {
        __extends$1a(BaseTileLayer, _super);
        /**
         * @param {Options=} opt_options Tile layer options.
         */
        function BaseTileLayer(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var baseOptions = assign$1({}, options);
            delete baseOptions.preload;
            delete baseOptions.useInterimTilesOnError;
            _this = _super.call(this, baseOptions) || this;
            _this.setPreload(options.preload !== undefined ? options.preload : 0);
            _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined
                ? options.useInterimTilesOnError
                : true);
            return _this;
        }
        /**
         * Return the level as number to which we will preload tiles up to.
         * @return {number} The level to preload tiles up to.
         * @observable
         * @api
         */
        BaseTileLayer.prototype.getPreload = function () {
            return /** @type {number} */ (this.get(TileProperty.PRELOAD));
        };
        /**
         * Set the level as number to which we will preload tiles up to.
         * @param {number} preload The level to preload tiles up to.
         * @observable
         * @api
         */
        BaseTileLayer.prototype.setPreload = function (preload) {
            this.set(TileProperty.PRELOAD, preload);
        };
        /**
         * Whether we use interim tiles on error.
         * @return {boolean} Use interim tiles on error.
         * @observable
         * @api
         */
        BaseTileLayer.prototype.getUseInterimTilesOnError = function () {
            return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
        };
        /**
         * Set whether we use interim tiles on error.
         * @param {boolean} useInterimTilesOnError Use interim tiles on error.
         * @observable
         * @api
         */
        BaseTileLayer.prototype.setUseInterimTilesOnError = function (useInterimTilesOnError) {
            this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
        };
        return BaseTileLayer;
    }(Layer));

    var __extends$1b = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Canvas renderer for tile layers.
     * @api
     */
    var CanvasTileLayerRenderer = /** @class */ (function (_super) {
        __extends$1b(CanvasTileLayerRenderer, _super);
        /**
         * @param {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default} tileLayer Tile layer.
         */
        function CanvasTileLayerRenderer(tileLayer) {
            var _this = _super.call(this, tileLayer) || this;
            /**
             * Rendered extent has changed since the previous `renderFrame()` call
             * @type {boolean}
             */
            _this.extentChanged = true;
            /**
             * @private
             * @type {?import("../../extent.js").Extent}
             */
            _this.renderedExtent_ = null;
            /**
             * @protected
             * @type {number}
             */
            _this.renderedPixelRatio;
            /**
             * @protected
             * @type {import("../../proj/Projection.js").default}
             */
            _this.renderedProjection = null;
            /**
             * @protected
             * @type {number}
             */
            _this.renderedRevision;
            /**
             * @protected
             * @type {!Array<import("../../Tile.js").default>}
             */
            _this.renderedTiles = [];
            /**
             * @private
             * @type {boolean}
             */
            _this.newTiles_ = false;
            /**
             * @protected
             * @type {import("../../extent.js").Extent}
             */
            _this.tmpExtent = createEmpty();
            /**
             * @private
             * @type {import("../../TileRange.js").default}
             */
            _this.tmpTileRange_ = new TileRange(0, 0, 0, 0);
            return _this;
        }
        /**
         * @protected
         * @param {import("../../Tile.js").default} tile Tile.
         * @return {boolean} Tile is drawable.
         */
        CanvasTileLayerRenderer.prototype.isDrawableTile = function (tile) {
            var tileLayer = this.getLayer();
            var tileState = tile.getState();
            var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
            return (tileState == TileState.LOADED ||
                tileState == TileState.EMPTY ||
                (tileState == TileState.ERROR && !useInterimTilesOnError));
        };
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {!import("../../Tile.js").default} Tile.
         */
        CanvasTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {
            var pixelRatio = frameState.pixelRatio;
            var projection = frameState.viewState.projection;
            var tileLayer = this.getLayer();
            var tileSource = tileLayer.getSource();
            var tile = tileSource.getTile(z, x, y, pixelRatio, projection);
            if (tile.getState() == TileState.ERROR) {
                if (!tileLayer.getUseInterimTilesOnError()) {
                    // When useInterimTilesOnError is false, we consider the error tile as loaded.
                    tile.setState(TileState.LOADED);
                }
                else if (tileLayer.getPreload() > 0) {
                    // Preloaded tiles for lower resolutions might have finished loading.
                    this.newTiles_ = true;
                }
            }
            if (!this.isDrawableTile(tile)) {
                tile = tile.getInterimTile();
            }
            return tile;
        };
        /**
         * @param {Object<number, Object<string, import("../../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @param {number} zoom Zoom level.
         * @param {import("../../Tile.js").default} tile Tile.
         * @return {boolean|void} If `false`, the tile will not be considered loaded.
         */
        CanvasTileLayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {
            if (this.isDrawableTile(tile)) {
                return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);
            }
            return false;
        };
        /**
         * Determine whether render should be called.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        CanvasTileLayerRenderer.prototype.prepareFrame = function (frameState) {
            return !!this.getLayer().getSource();
        };
        /**
         * Render the layer.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        CanvasTileLayerRenderer.prototype.renderFrame = function (frameState, target) {
            var layerState = frameState.layerStatesArray[frameState.layerIndex];
            var viewState = frameState.viewState;
            var projection = viewState.projection;
            var viewResolution = viewState.resolution;
            var viewCenter = viewState.center;
            var rotation = viewState.rotation;
            var pixelRatio = frameState.pixelRatio;
            var tileLayer = this.getLayer();
            var tileSource = tileLayer.getSource();
            var sourceRevision = tileSource.getRevision();
            var tileGrid = tileSource.getTileGridForProjection(projection);
            var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
            var tileResolution = tileGrid.getResolution(z);
            var extent = frameState.extent;
            var layerExtent = layerState.extent && fromUserExtent(layerState.extent);
            if (layerExtent) {
                extent = getIntersection(extent, fromUserExtent(layerState.extent));
            }
            var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
            // desired dimensions of the canvas in pixels
            var width = Math.round(frameState.size[0] * tilePixelRatio);
            var height = Math.round(frameState.size[1] * tilePixelRatio);
            if (rotation) {
                var size = Math.round(Math.sqrt(width * width + height * height));
                width = size;
                height = size;
            }
            var dx = (tileResolution * width) / 2 / tilePixelRatio;
            var dy = (tileResolution * height) / 2 / tilePixelRatio;
            var canvasExtent = [
                viewCenter[0] - dx,
                viewCenter[1] - dy,
                viewCenter[0] + dx,
                viewCenter[1] + dy,
            ];
            var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
            /**
             * @type {Object<number, Object<string, import("../../Tile.js").default>>}
             */
            var tilesToDrawByZ = {};
            tilesToDrawByZ[z] = {};
            var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);
            var tmpExtent = this.tmpExtent;
            var tmpTileRange = this.tmpTileRange_;
            this.newTiles_ = false;
            for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
                for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
                    var tile = this.getTile(z, x, y, frameState);
                    if (this.isDrawableTile(tile)) {
                        var uid = getUid(this);
                        if (tile.getState() == TileState.LOADED) {
                            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                            var inTransition = tile.inTransition(uid);
                            if (!this.newTiles_ &&
                                (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
                                this.newTiles_ = true;
                            }
                        }
                        if (tile.getAlpha(uid, frameState.time) === 1) {
                            // don't look for alt tiles if alpha is 1
                            continue;
                        }
                    }
                    var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);
                    var covered = false;
                    if (childTileRange) {
                        covered = findLoadedTiles(z + 1, childTileRange);
                    }
                    if (!covered) {
                        tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);
                    }
                }
            }
            var canvasScale = tileResolution / viewResolution;
            // set forward and inverse pixel transforms
            compose(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);
            var canvasTransform = createTransformString(this.pixelTransform);
            this.useContainer(target, canvasTransform, layerState.opacity);
            var context = this.context;
            var canvas = context.canvas;
            makeInverse(this.inversePixelTransform, this.pixelTransform);
            // set scale transform for calculating tile positions on the canvas
            compose(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);
            if (canvas.width != width || canvas.height != height) {
                canvas.width = width;
                canvas.height = height;
            }
            else if (!this.containerReused) {
                context.clearRect(0, 0, width, height);
            }
            if (layerExtent) {
                this.clipUnrotated(context, frameState, layerExtent);
            }
            assign$1(context, tileSource.getContextOptions());
            this.preRender(context, frameState);
            this.renderedTiles.length = 0;
            /** @type {Array<number>} */
            var zs = Object.keys(tilesToDrawByZ).map(Number);
            zs.sort(numberSafeCompareFunction);
            var clips, clipZs, currentClip;
            if (layerState.opacity === 1 &&
                (!this.containerReused ||
                    tileSource.getOpaque(frameState.viewState.projection))) {
                zs = zs.reverse();
            }
            else {
                clips = [];
                clipZs = [];
            }
            for (var i = zs.length - 1; i >= 0; --i) {
                var currentZ = zs[i];
                var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
                var currentResolution = tileGrid.getResolution(currentZ);
                var currentScale = currentResolution / tileResolution;
                var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;
                var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;
                var originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);
                var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
                var origin_1 = apply(this.tempTransform, [
                    (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /
                        tileResolution,
                    (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /
                        tileResolution,
                ]);
                var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
                var tilesToDraw = tilesToDrawByZ[currentZ];
                for (var tileCoordKey in tilesToDraw) {
                    var tile = /** @type {import("../../ImageTile.js").default} */ (tilesToDraw[tileCoordKey]);
                    var tileCoord = tile.tileCoord;
                    // Calculate integer positions and sizes so that tiles align
                    var floatX = origin_1[0] - (originTileCoord[1] - tileCoord[1]) * dx_1;
                    var nextX = Math.round(floatX + dx_1);
                    var floatY = origin_1[1] - (originTileCoord[2] - tileCoord[2]) * dy_1;
                    var nextY = Math.round(floatY + dy_1);
                    var x = Math.round(floatX);
                    var y = Math.round(floatY);
                    var w = nextX - x;
                    var h = nextY - y;
                    var transition = z === currentZ;
                    var inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;
                    if (!inTransition) {
                        if (clips) {
                            // Clip mask for regions in this tile that already filled by a higher z tile
                            context.save();
                            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];
                            for (var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1) {
                                if (z !== currentZ && currentZ < clipZs[i_1]) {
                                    var clip = clips[i_1];
                                    context.beginPath();
                                    // counter-clockwise (outer ring) for current tile
                                    context.moveTo(currentClip[0], currentClip[1]);
                                    context.lineTo(currentClip[2], currentClip[3]);
                                    context.lineTo(currentClip[4], currentClip[5]);
                                    context.lineTo(currentClip[6], currentClip[7]);
                                    // clockwise (inner ring) for higher z tile
                                    context.moveTo(clip[6], clip[7]);
                                    context.lineTo(clip[4], clip[5]);
                                    context.lineTo(clip[2], clip[3]);
                                    context.lineTo(clip[0], clip[1]);
                                    context.clip();
                                }
                            }
                            clips.push(currentClip);
                            clipZs.push(currentZ);
                        }
                        else {
                            context.clearRect(x, y, w, h);
                        }
                    }
                    this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition, layerState.opacity);
                    if (clips && !inTransition) {
                        context.restore();
                    }
                    this.renderedTiles.push(tile);
                    this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
                }
            }
            this.renderedRevision = sourceRevision;
            this.renderedResolution = tileResolution;
            this.extentChanged =
                !this.renderedExtent_ || !equals$1(this.renderedExtent_, canvasExtent);
            this.renderedExtent_ = canvasExtent;
            this.renderedPixelRatio = pixelRatio;
            this.renderedProjection = projection;
            this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());
            this.scheduleExpireCache(frameState, tileSource);
            this.postRender(context, frameState);
            if (layerState.extent) {
                context.restore();
            }
            if (canvasTransform !== canvas.style.transform) {
                canvas.style.transform = canvasTransform;
            }
            return this.container;
        };
        /**
         * @param {import("../../ImageTile.js").default} tile Tile.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} x Left of the tile.
         * @param {number} y Top of the tile.
         * @param {number} w Width of the tile.
         * @param {number} h Height of the tile.
         * @param {number} gutter Tile gutter.
         * @param {boolean} transition Apply an alpha transition.
         * @param {number} opacity Opacity.
         */
        CanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, x, y, w, h, gutter, transition, opacity) {
            var image = this.getTileImage(tile);
            if (!image) {
                return;
            }
            var uid = getUid(this);
            var tileAlpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
            var alpha = opacity * tileAlpha;
            var alphaChanged = alpha !== this.context.globalAlpha;
            if (alphaChanged) {
                this.context.save();
                this.context.globalAlpha = alpha;
            }
            this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
            if (alphaChanged) {
                this.context.restore();
            }
            if (tileAlpha !== 1) {
                frameState.animate = true;
            }
            else if (transition) {
                tile.endTransition(uid);
            }
        };
        /**
         * @return {HTMLCanvasElement} Image
         */
        CanvasTileLayerRenderer.prototype.getImage = function () {
            var context = this.context;
            return context ? context.canvas : null;
        };
        /**
         * Get the image from a tile.
         * @param {import("../../ImageTile.js").default} tile Tile.
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @protected
         */
        CanvasTileLayerRenderer.prototype.getTileImage = function (tile) {
            return tile.getImage();
        };
        /**
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @protected
         */
        CanvasTileLayerRenderer.prototype.scheduleExpireCache = function (frameState, tileSource) {
            if (tileSource.canExpireCache()) {
                /**
                 * @param {import("../../source/Tile.js").default} tileSource Tile source.
                 * @param {import("../../PluggableMap.js").default} map Map.
                 * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
                 */
                var postRenderFunction = function (tileSource, map, frameState) {
                    var tileSourceKey = getUid(tileSource);
                    if (tileSourceKey in frameState.usedTiles) {
                        tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);
                    }
                }.bind(null, tileSource);
                frameState.postRenderFunctions.push(
                /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction));
            }
        };
        /**
         * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @param {import('../../Tile.js').default} tile Tile.
         * @protected
         */
        CanvasTileLayerRenderer.prototype.updateUsedTiles = function (usedTiles, tileSource, tile) {
            // FIXME should we use tilesToDrawByZ instead?
            var tileSourceKey = getUid(tileSource);
            if (!(tileSourceKey in usedTiles)) {
                usedTiles[tileSourceKey] = {};
            }
            usedTiles[tileSourceKey][tile.getKey()] = true;
        };
        /**
         * Manage tile pyramid.
         * This function performs a number of functions related to the tiles at the
         * current zoom and lower zoom levels:
         * - registers idle tiles in frameState.wantedTiles so that they are not
         *   discarded by the tile queue
         * - enqueues missing tiles
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../../proj/Projection.js").default} projection Projection.
         * @param {import("../../extent.js").Extent} extent Extent.
         * @param {number} currentZ Current Z.
         * @param {number} preload Load low resolution tiles up to 'preload' levels.
         * @param {function(import("../../Tile.js").default)=} opt_tileCallback Tile callback.
         * @protected
         */
        CanvasTileLayerRenderer.prototype.manageTilePyramid = function (frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {
            var tileSourceKey = getUid(tileSource);
            if (!(tileSourceKey in frameState.wantedTiles)) {
                frameState.wantedTiles[tileSourceKey] = {};
            }
            var wantedTiles = frameState.wantedTiles[tileSourceKey];
            var tileQueue = frameState.tileQueue;
            var minZoom = tileGrid.getMinZoom();
            var tileCount = 0;
            var tile, tileRange, tileResolution, x, y, z;
            for (z = minZoom; z <= currentZ; ++z) {
                tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
                tileResolution = tileGrid.getResolution(z);
                for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
                    for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
                        if (currentZ - z <= preload) {
                            ++tileCount;
                            tile = tileSource.getTile(z, x, y, pixelRatio, projection);
                            if (tile.getState() == TileState.IDLE) {
                                wantedTiles[tile.getKey()] = true;
                                if (!tileQueue.isKeyQueued(tile.getKey())) {
                                    tileQueue.enqueue([
                                        tile,
                                        tileSourceKey,
                                        tileGrid.getTileCoordCenter(tile.tileCoord),
                                        tileResolution,
                                    ]);
                                }
                            }
                            if (opt_tileCallback !== undefined) {
                                opt_tileCallback(tile);
                            }
                        }
                        else {
                            tileSource.useTile(z, x, y, projection);
                        }
                    }
                }
            }
            tileSource.updateCacheSize(tileCount, projection);
        };
        return CanvasTileLayerRenderer;
    }(CanvasLayerRenderer));
    /**
     * @function
     * @return {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default}
     */
    CanvasTileLayerRenderer.prototype.getLayer;

    var __extends$1c = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * For layer sources that provide pre-rendered, tiled images in grids that are
     * organized by zoom levels for specific resolutions.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @api
     */
    var TileLayer = /** @class */ (function (_super) {
        __extends$1c(TileLayer, _super);
        /**
         * @param {import("./BaseTile.js").Options=} opt_options Tile layer options.
         */
        function TileLayer(opt_options) {
            return _super.call(this, opt_options) || this;
        }
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         * @protected
         */
        TileLayer.prototype.createRenderer = function () {
            return new CanvasTileLayerRenderer(this);
        };
        return TileLayer;
    }(BaseTileLayer));

    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }

    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

    function validate(uuid) {
      return typeof uuid === 'string' && REGEX.test(uuid);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    var byteToHex = [];

    for (var i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).substr(1));
    }

    function stringify(arr) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
      // of the following:
      // - One or more input array values don't map to a hex octet (leading to
      // "undefined" in the uuid)
      // - Invalid input values for the RFC `version` or `variant` fields

      if (!validate(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }

      return uuid;
    }

    function v4(options, buf, offset) {
      options = options || {};
      var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return stringify(rnds);
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends$1d(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
     */
    var CONSTANTS = {
        /**
         * @define {boolean} Whether this is the client Node.js SDK.
         */
        NODE_CLIENT: false,
        /**
         * @define {boolean} Whether this is the Admin Node.js SDK.
         */
        NODE_ADMIN: false,
        /**
         * Firebase SDK Version
         */
        SDK_VERSION: '${JSCORE_VERSION}'
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws an error if the provided assertion is falsy
     */
    var assert$1 = function (assertion, message) {
        if (!assertion) {
            throw assertionError(message);
        }
    };
    /**
     * Returns an Error object suitable for throwing.
     */
    var assertionError = function (message) {
        return new Error('Firebase Database (' +
            CONSTANTS.SDK_VERSION +
            ') INTERNAL ASSERT FAILED: ' +
            message);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var stringToByteArray = function (str) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    var byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    var base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray: function (input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            var byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                var outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray: function (input, webSafe) {
            this.init_();
            var charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            var output = [];
            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }
                var outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_: function () {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };
    /**
     * URL-safe base64 encoding
     */
    var base64Encode = function (str) {
        var utf8Bytes = stringToByteArray(str);
        return base64.encodeByteArray(utf8Bytes, true);
    };
    /**
     * URL-safe base64 decoding
     *
     * NOTE: DO NOT use the global atob() function - it does NOT support the
     * base64Url variant encoding.
     *
     * @param str To be decoded
     * @return Decoded result, if possible
     */
    var base64Decode = function (str) {
        try {
            return base64.decodeString(str, true);
        }
        catch (e) {
            console.error('base64Decode failed: ', e);
        }
        return null;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Do a deep-copy of basic JavaScript Objects or Arrays.
     */
    function deepCopy(value) {
        return deepExtend(undefined, value);
    }
    /**
     * Copy properties from source to target (recursively allows extension
     * of Objects and Arrays).  Scalar values in the target are over-written.
     * If target is undefined, an object of the appropriate type will be created
     * (and returned).
     *
     * We recursively copy all child properties of plain Objects in the source- so
     * that namespace- like dictionaries are merged.
     *
     * Note that the target can be a function, in which case the properties in
     * the source Object are copied onto it as static properties of the Function.
     *
     * Note: we don't merge __proto__ to prevent prototype pollution
     */
    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }
        switch (source.constructor) {
            case Date:
                // Treat Dates like scalars; if the target date object had any child
                // properties - they will be lost!
                var dateValue = source;
                return new Date(dateValue.getTime());
            case Object:
                if (target === undefined) {
                    target = {};
                }
                break;
            case Array:
                // Always copy the array source and overwrite the target.
                target = [];
                break;
            default:
                // Not a plain Object - treat it as a scalar.
                return source;
        }
        for (var prop in source) {
            // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
            if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
                continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
        }
        return target;
    }
    function isValidKey(key) {
        return key !== '__proto__';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Deferred = /** @class */ (function () {
        function Deferred() {
            var _this = this;
            this.reject = function () { };
            this.resolve = function () { };
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
        }
        /**
         * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        Deferred.prototype.wrapCallback = function (callback) {
            var _this = this;
            return function (error, value) {
                if (error) {
                    _this.reject(error);
                }
                else {
                    _this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    _this.promise.catch(function () { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        };
        return Deferred;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    /**
     * Detect Node.js.
     *
     * @return true if Node.js environment is detected.
     */
    // Node detection logic from: https://github.com/iliakan/detect-node/
    function isNode() {
        try {
            return (Object.prototype.toString.call(global.process) === '[object process]');
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Detect Browser Environment
     */
    function isBrowser() {
        return typeof self === 'object' && self.self === self;
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }
    /**
     * Detect whether the current SDK build is the Node version.
     *
     * @return true if it's the Node SDK build.
     */
    function isNodeSdk() {
        return CONSTANTS.NODE_ADMIN === true;
    }
    /**
     * This method checks if indexedDB is supported by current browser/service worker context
     * @return true if indexedDB is supported by current browser/service worker context
     */
    function isIndexedDBAvailable() {
        return 'indexedDB' in self && indexedDB != null;
    }
    /**
     * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject
     * if errors occur during the database open operation.
     */
    function validateIndexedDBOpenable() {
        return new Promise(function (resolve, reject) {
            try {
                var preExist_1 = true;
                var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
                var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);
                request_1.onsuccess = function () {
                    request_1.result.close();
                    // delete database only when it doesn't pre-exist
                    if (!preExist_1) {
                        window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
                    }
                    resolve(true);
                };
                request_1.onupgradeneeded = function () {
                    preExist_1 = false;
                };
                request_1.onerror = function () {
                    var _a;
                    reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
                };
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     *
     * This method checks whether cookie is enabled within current browser
     * @return true if cookie is enabled within current browser
     */
    function areCookiesEnabled() {
        if (!navigator || !navigator.cookieEnabled) {
            return false;
        }
        return true;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends$1d(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Evaluates a JSON string into a javascript object.
     *
     * @param {string} str A string containing JSON.
     * @return {*} The javascript object representing the specified JSON.
     */
    function jsonEval(str) {
        return JSON.parse(str);
    }
    /**
     * Returns JSON representing a javascript object.
     * @param {*} data Javascript object to be stringified.
     * @return {string} The JSON contents of the object.
     */
    function stringify$1(data) {
        return JSON.stringify(data);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Decodes a Firebase auth. token into constituent parts.
     *
     * Notes:
     * - May return with invalid / incomplete claims if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var decode = function (token) {
        var header = {}, claims = {}, data = {}, signature = '';
        try {
            var parts = token.split('.');
            header = jsonEval(base64Decode(parts[0]) || '');
            claims = jsonEval(base64Decode(parts[1]) || '');
            signature = parts[2];
            data = claims['d'] || {};
            delete claims['d'];
        }
        catch (e) { }
        return {
            header: header,
            claims: claims,
            data: data,
            signature: signature
        };
    };
    /**
     * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isValidFormat = function (token) {
        var decoded = decode(token), claims = decoded.claims;
        return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
    };
    /**
     * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isAdmin = function (token) {
        var claims = decode(token).claims;
        return typeof claims === 'object' && claims['admin'] === true;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return obj[key];
        }
        else {
            return undefined;
        }
    }
    function isEmpty$2(obj) {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }
    function map(obj, fn, contextObj) {
        var res = {};
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                res[key] = fn.call(contextObj, obj[key], key, obj);
            }
        }
        return res;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
     * params object (e.g. {arg: 'val', arg2: 'val2'})
     * Note: You must prepend it with ? when adding it to a URL.
     */
    function querystring(querystringParams) {
        var params = [];
        var _loop_1 = function (key, value) {
            if (Array.isArray(value)) {
                value.forEach(function (arrayVal) {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            }
            else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        };
        for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
        return params.length ? '&' + params.join('&') : '';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview SHA-1 cryptographic hash.
     * Variable names follow the notation in FIPS PUB 180-3:
     * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
     *
     * Usage:
     *   var sha1 = new sha1();
     *   sha1.update(bytes);
     *   var hash = sha1.digest();
     *
     * Performance:
     *   Chrome 23:   ~400 Mbit/s
     *   Firefox 16:  ~250 Mbit/s
     *
     */
    /**
     * SHA-1 cryptographic hash constructor.
     *
     * The properties declared here are discussed in the above algorithm document.
     * @constructor
     * @final
     * @struct
     */
    var Sha1 = /** @class */ (function () {
        function Sha1() {
            /**
             * Holds the previous values of accumulated variables a-e in the compress_
             * function.
             * @private
             */
            this.chain_ = [];
            /**
             * A buffer holding the partially computed hash result.
             * @private
             */
            this.buf_ = [];
            /**
             * An array of 80 bytes, each a part of the message to be hashed.  Referred to
             * as the message schedule in the docs.
             * @private
             */
            this.W_ = [];
            /**
             * Contains data needed to pad messages less than 64 bytes.
             * @private
             */
            this.pad_ = [];
            /**
             * @private {number}
             */
            this.inbuf_ = 0;
            /**
             * @private {number}
             */
            this.total_ = 0;
            this.blockSize = 512 / 8;
            this.pad_[0] = 128;
            for (var i = 1; i < this.blockSize; ++i) {
                this.pad_[i] = 0;
            }
            this.reset();
        }
        Sha1.prototype.reset = function () {
            this.chain_[0] = 0x67452301;
            this.chain_[1] = 0xefcdab89;
            this.chain_[2] = 0x98badcfe;
            this.chain_[3] = 0x10325476;
            this.chain_[4] = 0xc3d2e1f0;
            this.inbuf_ = 0;
            this.total_ = 0;
        };
        /**
         * Internal compress helper function.
         * @param buf Block to compress.
         * @param offset Offset of the block in the buffer.
         * @private
         */
        Sha1.prototype.compress_ = function (buf, offset) {
            if (!offset) {
                offset = 0;
            }
            var W = this.W_;
            // get 16 big endian words
            if (typeof buf === 'string') {
                for (var i = 0; i < 16; i++) {
                    // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                    // have a bug that turns the post-increment ++ operator into pre-increment
                    // during JIT compilation.  We have code that depends heavily on SHA-1 for
                    // correctness and which is affected by this bug, so I've removed all uses
                    // of post-increment ++ in which the result value is used.  We can revert
                    // this change once the Safari bug
                    // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                    // most clients have been updated.
                    W[i] =
                        (buf.charCodeAt(offset) << 24) |
                            (buf.charCodeAt(offset + 1) << 16) |
                            (buf.charCodeAt(offset + 2) << 8) |
                            buf.charCodeAt(offset + 3);
                    offset += 4;
                }
            }
            else {
                for (var i = 0; i < 16; i++) {
                    W[i] =
                        (buf[offset] << 24) |
                            (buf[offset + 1] << 16) |
                            (buf[offset + 2] << 8) |
                            buf[offset + 3];
                    offset += 4;
                }
            }
            // expand to 80 words
            for (var i = 16; i < 80; i++) {
                var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
            }
            var a = this.chain_[0];
            var b = this.chain_[1];
            var c = this.chain_[2];
            var d = this.chain_[3];
            var e = this.chain_[4];
            var f, k;
            // TODO(user): Try to unroll this loop to speed up the computation.
            for (var i = 0; i < 80; i++) {
                if (i < 40) {
                    if (i < 20) {
                        f = d ^ (b & (c ^ d));
                        k = 0x5a827999;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0x6ed9eba1;
                    }
                }
                else {
                    if (i < 60) {
                        f = (b & c) | (d & (b | c));
                        k = 0x8f1bbcdc;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0xca62c1d6;
                    }
                }
                var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
                e = d;
                d = c;
                c = ((b << 30) | (b >>> 2)) & 0xffffffff;
                b = a;
                a = t;
            }
            this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
            this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
            this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
            this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
            this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
        };
        Sha1.prototype.update = function (bytes, length) {
            // TODO(johnlenz): tighten the function signature and remove this check
            if (bytes == null) {
                return;
            }
            if (length === undefined) {
                length = bytes.length;
            }
            var lengthMinusBlock = length - this.blockSize;
            var n = 0;
            // Using local instead of member variables gives ~5% speedup on Firefox 16.
            var buf = this.buf_;
            var inbuf = this.inbuf_;
            // The outer while loop should execute at most twice.
            while (n < length) {
                // When we have no data in the block to top up, we can directly process the
                // input buffer (assuming it contains sufficient data). This gives ~25%
                // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
                // the data is provided in large chunks (or in multiples of 64 bytes).
                if (inbuf === 0) {
                    while (n <= lengthMinusBlock) {
                        this.compress_(bytes, n);
                        n += this.blockSize;
                    }
                }
                if (typeof bytes === 'string') {
                    while (n < length) {
                        buf[inbuf] = bytes.charCodeAt(n);
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
                else {
                    while (n < length) {
                        buf[inbuf] = bytes[n];
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
            }
            this.inbuf_ = inbuf;
            this.total_ += length;
        };
        /** @override */
        Sha1.prototype.digest = function () {
            var digest = [];
            var totalBits = this.total_ * 8;
            // Add pad 0x80 0x00*.
            if (this.inbuf_ < 56) {
                this.update(this.pad_, 56 - this.inbuf_);
            }
            else {
                this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
            }
            // Add # bits.
            for (var i = this.blockSize - 1; i >= 56; i--) {
                this.buf_[i] = totalBits & 255;
                totalBits /= 256; // Don't use bit-shifting here!
            }
            this.compress_(this.buf_);
            var n = 0;
            for (var i = 0; i < 5; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    digest[n] = (this.chain_[i] >> j) & 255;
                    ++n;
                }
            }
            return digest;
        };
        return Sha1;
    }());

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        var proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    var ObserverProxy = /** @class */ (function () {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        function ObserverProxy(executor, onNoObservers) {
            var _this = this;
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(function () {
                executor(_this);
            })
                .catch(function (e) {
                _this.error(e);
            });
        }
        ObserverProxy.prototype.next = function (value) {
            this.forEachObserver(function (observer) {
                observer.next(value);
            });
        };
        ObserverProxy.prototype.error = function (error) {
            this.forEachObserver(function (observer) {
                observer.error(error);
            });
            this.close(error);
        };
        ObserverProxy.prototype.complete = function () {
            this.forEachObserver(function (observer) {
                observer.complete();
            });
            this.close();
        };
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber sychronously to their
         *   call to subscribe().
         */
        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;
            var observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error: error,
                    complete: complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop$1;
            }
            if (observer.error === undefined) {
                observer.error = noop$1;
            }
            if (observer.complete === undefined) {
                observer.complete = noop$1;
            }
            var unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(function () {
                    try {
                        if (_this.finalError) {
                            observer.error(_this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        };
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        ObserverProxy.prototype.unsubscribeOne = function (i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        };
        ObserverProxy.prototype.forEachObserver = function (fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (var i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        };
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        ObserverProxy.prototype.sendOne = function (i, fn) {
            var _this = this;
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                    try {
                        fn(_this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        };
        ObserverProxy.prototype.close = function (err) {
            var _this = this;
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                _this.observers = undefined;
                _this.onNoObservers = undefined;
            });
        };
        return ObserverProxy;
    }());
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop$1() {
        // do nothing
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Check to make sure the appropriate number of arguments are provided for a public function.
     * Throws an error if it fails.
     *
     * @param fnName The function name
     * @param minCount The minimum number of arguments to allow for the function call
     * @param maxCount The maximum number of argument to allow for the function call
     * @param argCount The actual number of arguments provided.
     */
    var validateArgCount = function (fnName, minCount, maxCount, argCount) {
        var argError;
        if (argCount < minCount) {
            argError = 'at least ' + minCount;
        }
        else if (argCount > maxCount) {
            argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
        }
        if (argError) {
            var error = fnName +
                ' failed: Was called with ' +
                argCount +
                (argCount === 1 ? ' argument.' : ' arguments.') +
                ' Expects ' +
                argError +
                '.';
            throw new Error(error);
        }
    };
    /**
     * Generates a string to prefix an error message about failed argument validation
     *
     * @param fnName The function name
     * @param argumentNumber The index of the argument
     * @param optional Whether or not the argument is optional
     * @return The prefix to add to the error thrown for validation.
     */
    function errorPrefix(fnName, argumentNumber, optional) {
        var argName = '';
        switch (argumentNumber) {
            case 1:
                argName = optional ? 'first' : 'First';
                break;
            case 2:
                argName = optional ? 'second' : 'Second';
                break;
            case 3:
                argName = optional ? 'third' : 'Third';
                break;
            case 4:
                argName = optional ? 'fourth' : 'Fourth';
                break;
            default:
                throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
        }
        var error = fnName + ' failed: ';
        error += argName + ' argument ';
        return error;
    }
    function validateCallback(fnName, argumentNumber, 
    // eslint-disable-next-line @typescript-eslint/ban-types
    callback, optional) {
        if (optional && !callback) {
            return;
        }
        if (typeof callback !== 'function') {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid function.');
        }
    }
    function validateContextObject(fnName, argumentNumber, context, optional) {
        if (optional && !context) {
            return;
        }
        if (typeof context !== 'object' || context === null) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid context object.');
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
    // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
    // so it's been modified.
    // Note that not all Unicode characters appear as single characters in JavaScript strings.
    // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
    // use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
    // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
    // pair).
    // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
    /**
     * @param {string} str
     * @return {Array}
     */
    var stringToByteArray$1 = function (str) {
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            // Is this the lead surrogate in a surrogate pair?
            if (c >= 0xd800 && c <= 0xdbff) {
                var high = c - 0xd800; // the high 10 bits.
                i++;
                assert$1(i < str.length, 'Surrogate pair missing trail surrogate.');
                var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
                c = 0x10000 + (high << 10) + low;
            }
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if (c < 65536) {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Calculate length without actually converting; useful for doing cheaper validation.
     * @param {string} str
     * @return {number}
     */
    var stringLength = function (str) {
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                p++;
            }
            else if (c < 2048) {
                p += 2;
            }
            else if (c >= 0xd800 && c <= 0xdbff) {
                // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
                p += 4;
                i++; // skip trail surrogate.
            }
            else {
                p += 3;
            }
        }
        return p;
    };

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The amount of milliseconds to exponentially increase.
     */
    var DEFAULT_INTERVAL_MILLIS = 1000;
    /**
     * The factor to backoff by.
     * Should be a number greater than 1.
     */
    var DEFAULT_BACKOFF_FACTOR = 2;
    /**
     * The maximum milliseconds to increase to.
     *
     * <p>Visible for testing
     */
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
    /**
     * The percentage of backoff time to randomize by.
     * See
     * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
     * for context.
     *
     * <p>Visible for testing
     */
    var RANDOM_FACTOR = 0.5;
    /**
     * Based on the backoff method from
     * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
     * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
     */
    function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
        if (intervalMillis === void 0) { intervalMillis = DEFAULT_INTERVAL_MILLIS; }
        if (backoffFactor === void 0) { backoffFactor = DEFAULT_BACKOFF_FACTOR; }
        // Calculates an exponentially increasing value.
        // Deviation: calculates value from count and a constant interval, so we only need to save value
        // and count to restore state.
        var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
        // A random "fuzz" to avoid waves of retries.
        // Deviation: randomFactor is required.
        var randomWait = Math.round(
        // A fraction of the backoff value to add/subtract.
        // Deviation: changes multiplication order to improve readability.
        RANDOM_FACTOR *
            currBaseValue *
            // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
            // if we add or subtract.
            (Math.random() - 0.5) *
            2);
        // Limits backoff to max to avoid effectively permanent backoff.
        return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
     * NameServiceMapping[T] is an alias for the type of the instance
     */
    var Provider = /** @class */ (function () {
        function Provider(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
        }
        /**
         * @param identifier A provider can provide mulitple instances of a service
         * if this.component.multipleInstances is true.
         */
        Provider.prototype.get = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
                var deferred = new Deferred();
                this.instancesDeferred.set(normalizedIdentifier, deferred);
                // If the service instance is available, resolve the promise with it immediately
                try {
                    var instance = this.getOrInitializeService(normalizedIdentifier);
                    if (instance) {
                        deferred.resolve(instance);
                    }
                }
                catch (e) {
                    // when the instance factory throws an exception during get(), it should not cause
                    // a fatal error. We just return the unresolved promise in this case.
                }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
        };
        Provider.prototype.getImmediate = function (options) {
            var _a = __assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            try {
                var instance = this.getOrInitializeService(normalizedIdentifier);
                if (!instance) {
                    if (optional) {
                        return null;
                    }
                    throw Error("Service " + this.name + " is not available");
                }
                return instance;
            }
            catch (e) {
                if (optional) {
                    return null;
                }
                else {
                    throw e;
                }
            }
        };
        Provider.prototype.getComponent = function () {
            return this.component;
        };
        Provider.prototype.setComponent = function (component) {
            var e_1, _a;
            if (component.name !== this.name) {
                throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
            }
            if (this.component) {
                throw Error("Component for " + this.name + " has already been provided");
            }
            this.component = component;
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
                try {
                    this.getOrInitializeService(DEFAULT_ENTRY_NAME);
                }
                catch (e) {
                    // when the instance factory for an eager Component throws an exception during the eager
                    // initialization, it should not cause a fatal error.
                    // TODO: Investigate if we need to make it configurable, because some component may want to cause
                    // a fatal error in this case?
                }
            }
            try {
                // Create service instances for the pending promises and resolve them
                // NOTE: if this.multipleInstances is false, only the default instance will be created
                // and all promises with resolve with it regardless of the identifier.
                for (var _b = __values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                    var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                    try {
                        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                        var instance = this.getOrInitializeService(normalizedIdentifier);
                        instanceDeferred.resolve(instance);
                    }
                    catch (e) {
                        // when the instance factory throws an exception, it should not cause
                        // a fatal error. We just leave the promise unresolved.
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Provider.prototype.clearInstance = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
            this.instancesDeferred.delete(identifier);
            this.instances.delete(identifier);
        };
        // app.delete() will call this method on every provider to delete the services
        // TODO: should we mark the provider as deleted?
        Provider.prototype.delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                var services;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            services = Array.from(this.instances.values());
                            return [4 /*yield*/, Promise.all(__spread(services
                                    .filter(function (service) { return 'INTERNAL' in service; }) // legacy services
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    .map(function (service) { return service.INTERNAL.delete(); }), services
                                    .filter(function (service) { return '_delete' in service; }) // modularized services
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    .map(function (service) { return service._delete(); })))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Provider.prototype.isComponentSet = function () {
            return this.component != null;
        };
        Provider.prototype.getOrInitializeService = function (identifier) {
            var instance = this.instances.get(identifier);
            if (!instance && this.component) {
                instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
                this.instances.set(identifier, instance);
            }
            return instance || null;
        };
        Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
            if (this.component) {
                return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
            }
            else {
                return identifier; // assume multiple instances are supported before the component is provided.
            }
        };
        return Provider;
    }());
    // undefined should be passed to the service factory for the default instance
    function normalizeIdentifierForFactory(identifier) {
        return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
    }
    function isComponentEager(component) {
        return component.instantiationMode === "EAGER" /* EAGER */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
     */
    var ComponentContainer = /** @class */ (function () {
        function ComponentContainer(name) {
            this.name = name;
            this.providers = new Map();
        }
        /**
         *
         * @param component Component being added
         * @param overwrite When a component with the same name has already been registered,
         * if overwrite is true: overwrite the existing component with the new component and create a new
         * provider with the new component. It can be useful in tests where you want to use different mocks
         * for different tests.
         * if overwrite is false: throw an exception
         */
        ComponentContainer.prototype.addComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                throw new Error("Component " + component.name + " has already been registered with " + this.name);
            }
            provider.setComponent(component);
        };
        ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                // delete the existing provider from the container, so we can register the new component
                this.providers.delete(component.name);
            }
            this.addComponent(component);
        };
        /**
         * getProvider provides a type safe interface where it can only be called with a field name
         * present in NameServiceMapping interface.
         *
         * Firebase SDKs providing services should extend NameServiceMapping interface to register
         * themselves.
         */
        ComponentContainer.prototype.getProvider = function (name) {
            if (this.providers.has(name)) {
                return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            var provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
        };
        ComponentContainer.prototype.getProviders = function () {
            return Array.from(this.providers.values());
        };
        return ComponentContainer;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * A container for all of the Logger instances
     */
    var instances = [];
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
            /**
             * Capture the current instance for later use
             */
            instances.push(this);
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());
    function setLogLevel(level) {
        instances.forEach(function (inst) {
            inst.setLogLevel(level);
        });
    }
    function setUserLogHandler(logCallback, options) {
        var _loop_1 = function (instance) {
            var customLogLevel = null;
            if (options && options.level) {
                customLogLevel = levelStringToEnum[options.level];
            }
            if (logCallback === null) {
                instance.userLogHandler = null;
            }
            else {
                instance.userLogHandler = function (instance, level) {
                    var args = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                    }
                    var message = args
                        .map(function (arg) {
                        if (arg == null) {
                            return null;
                        }
                        else if (typeof arg === 'string') {
                            return arg;
                        }
                        else if (typeof arg === 'number' || typeof arg === 'boolean') {
                            return arg.toString();
                        }
                        else if (arg instanceof Error) {
                            return arg.message;
                        }
                        else {
                            try {
                                return JSON.stringify(arg);
                            }
                            catch (ignored) {
                                return null;
                            }
                        }
                    })
                        .filter(function (arg) { return arg; })
                        .join(' ');
                    if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                        logCallback({
                            level: LogLevel[level].toLowerCase(),
                            message: message,
                            args: args,
                            type: instance.name
                        });
                    }
                };
            }
        };
        for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
            var instance = instances_1[_i];
            _loop_1(instance);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var ERRORS = (_a$1 = {},
        _a$1["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
            'call Firebase App.initializeApp()',
        _a$1["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
        _a$1["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
        _a$1["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
        _a$1["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.',
        _a$1["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
        _a$1);
    var ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

    var name$1 = "@firebase/app";
    var version = "0.6.14";

    var name$2 = "@firebase/analytics";

    var name$3 = "@firebase/auth";

    var name$4 = "@firebase/database";

    var name$5 = "@firebase/functions";

    var name$6 = "@firebase/installations";

    var name$7 = "@firebase/messaging";

    var name$8 = "@firebase/performance";

    var name$9 = "@firebase/remote-config";

    var name$a = "@firebase/storage";

    var name$b = "@firebase/firestore";

    var name$c = "firebase-wrapper";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1$1;
    var DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';
    var PLATFORM_LOG_STRING = (_a$1$1 = {},
        _a$1$1[name$1] = 'fire-core',
        _a$1$1[name$2] = 'fire-analytics',
        _a$1$1[name$3] = 'fire-auth',
        _a$1$1[name$4] = 'fire-rtdb',
        _a$1$1[name$5] = 'fire-fn',
        _a$1$1[name$6] = 'fire-iid',
        _a$1$1[name$7] = 'fire-fcm',
        _a$1$1[name$8] = 'fire-perf',
        _a$1$1[name$9] = 'fire-rc',
        _a$1$1[name$a] = 'fire-gcs',
        _a$1$1[name$b] = 'fire-fst',
        _a$1$1['fire-js'] = 'fire-js',
        _a$1$1[name$c] = 'fire-js-all',
        _a$1$1);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger = new Logger('@firebase/app');

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Global context object for a collection of services using
     * a shared authentication state.
     */
    var FirebaseAppImpl = /** @class */ (function () {
        function FirebaseAppImpl(options, config, firebase_) {
            var e_1, _a;
            var _this = this;
            this.firebase_ = firebase_;
            this.isDeleted_ = false;
            this.name_ = config.name;
            this.automaticDataCollectionEnabled_ =
                config.automaticDataCollectionEnabled || false;
            this.options_ = deepCopy(options);
            this.container = new ComponentContainer(config.name);
            // add itself to container
            this._addComponent(new Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
            try {
                // populate ComponentContainer with existing components
                for (var _b = __values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var component = _c.value;
                    this._addComponent(component);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
            get: function () {
                this.checkDestroyed_();
                return this.automaticDataCollectionEnabled_;
            },
            set: function (val) {
                this.checkDestroyed_();
                this.automaticDataCollectionEnabled_ = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "name", {
            get: function () {
                this.checkDestroyed_();
                return this.name_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "options", {
            get: function () {
                this.checkDestroyed_();
                return this.options_;
            },
            enumerable: false,
            configurable: true
        });
        FirebaseAppImpl.prototype.delete = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.checkDestroyed_();
                resolve();
            })
                .then(function () {
                _this.firebase_.INTERNAL.removeApp(_this.name_);
                return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
            })
                .then(function () {
                _this.isDeleted_ = true;
            });
        };
        /**
         * Return a service instance associated with this app (creating it
         * on demand), identified by the passed instanceIdentifier.
         *
         * NOTE: Currently storage and functions are the only ones that are leveraging this
         * functionality. They invoke it by calling:
         *
         * ```javascript
         * firebase.app().storage('STORAGE BUCKET ID')
         * ```
         *
         * The service name is passed to this already
         * @internal
         */
        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
            this.checkDestroyed_();
            // getImmediate will always succeed because _getService is only called for registered components.
            return this.container.getProvider(name).getImmediate({
                identifier: instanceIdentifier
            });
        };
        /**
         * Remove a service instance from the cache, so we will create a new instance for this service
         * when people try to get this service again.
         *
         * NOTE: currently only firestore is using this functionality to support firestore shutdown.
         *
         * @param name The service name
         * @param instanceIdentifier instance identifier in case multiple instances are allowed
         * @internal
         */
        FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.container.getProvider(name).clearInstance(instanceIdentifier);
        };
        /**
         * @param component the component being added to this app's container
         */
        FirebaseAppImpl.prototype._addComponent = function (component) {
            try {
                this.container.addComponent(component);
            }
            catch (e) {
                logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
            }
        };
        FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
            this.container.addOrOverwriteComponent(component);
        };
        FirebaseAppImpl.prototype.toJSON = function () {
            return {
                name: this.name,
                automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
                options: this.options
            };
        };
        /**
         * This function will throw an Error if the App has already been deleted -
         * use before performing API actions on the App.
         */
        FirebaseAppImpl.prototype.checkDestroyed_ = function () {
            if (this.isDeleted_) {
                throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
            }
        };
        return FirebaseAppImpl;
    }());
    // Prevent dead-code elimination of these methods w/o invalid property
    // copying.
    (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
        FirebaseAppImpl.prototype.delete ||
        console.log('dc');

    var version$1 = "8.2.5";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Because auth can't share code with other components, we attach the utility functions
     * in an internal namespace to share code.
     * This function return a firebase namespace object without
     * any utility functions, so it can be shared between the regular firebaseNamespace and
     * the lite version.
     */
    function createFirebaseNamespaceCore(firebaseAppImpl) {
        var apps = {};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var components = new Map();
        // A namespace is a plain JavaScript Object.
        var namespace = {
            // Hack to prevent Babel from modifying the object returned
            // as the firebase namespace.
            // @ts-ignore
            __esModule: true,
            initializeApp: initializeApp,
            // @ts-ignore
            app: app,
            registerVersion: registerVersion,
            setLogLevel: setLogLevel,
            onLog: onLog,
            // @ts-ignore
            apps: null,
            SDK_VERSION: version$1,
            INTERNAL: {
                registerComponent: registerComponent,
                removeApp: removeApp,
                components: components,
                useAsService: useAsService
            }
        };
        // Inject a circular default export to allow Babel users who were previously
        // using:
        //
        //   import firebase from 'firebase';
        //   which becomes: var firebase = require('firebase').default;
        //
        // instead of
        //
        //   import * as firebase from 'firebase';
        //   which becomes: var firebase = require('firebase');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        namespace['default'] = namespace;
        // firebase.apps is a read-only getter.
        Object.defineProperty(namespace, 'apps', {
            get: getApps
        });
        /**
         * Called by App.delete() - but before any services associated with the App
         * are deleted.
         */
        function removeApp(name) {
            delete apps[name];
        }
        /**
         * Get the App object for a given name (or DEFAULT).
         */
        function app(name) {
            name = name || DEFAULT_ENTRY_NAME$1;
            if (!contains(apps, name)) {
                throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
            }
            return apps[name];
        }
        // @ts-ignore
        app['App'] = firebaseAppImpl;
        function initializeApp(options, rawConfig) {
            if (rawConfig === void 0) { rawConfig = {}; }
            if (typeof rawConfig !== 'object' || rawConfig === null) {
                var name_1 = rawConfig;
                rawConfig = { name: name_1 };
            }
            var config = rawConfig;
            if (config.name === undefined) {
                config.name = DEFAULT_ENTRY_NAME$1;
            }
            var name = config.name;
            if (typeof name !== 'string' || !name) {
                throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                    appName: String(name)
                });
            }
            if (contains(apps, name)) {
                throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
            }
            var app = new firebaseAppImpl(options, config, namespace);
            apps[name] = app;
            return app;
        }
        /*
         * Return an array of all the non-deleted FirebaseApps.
         */
        function getApps() {
            // Make a copy so caller cannot mutate the apps list.
            return Object.keys(apps).map(function (name) { return apps[name]; });
        }
        function registerComponent(component) {
            var e_1, _a;
            var componentName = component.name;
            if (components.has(componentName)) {
                logger.debug("There were multiple attempts to register component " + componentName + ".");
                return component.type === "PUBLIC" /* PUBLIC */
                    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        namespace[componentName]
                    : null;
            }
            components.set(componentName, component);
            // create service namespace for public components
            if (component.type === "PUBLIC" /* PUBLIC */) {
                // The Service namespace is an accessor function ...
                var serviceNamespace = function (appArg) {
                    if (appArg === void 0) { appArg = app(); }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (typeof appArg[componentName] !== 'function') {
                        // Invalid argument.
                        // This happens in the following case: firebase.storage('gs:/')
                        throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                            appName: componentName
                        });
                    }
                    // Forward service instance lookup to the FirebaseApp.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return appArg[componentName]();
                };
                // ... and a container for service-level properties.
                if (component.serviceProps !== undefined) {
                    deepExtend(serviceNamespace, component.serviceProps);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentName] = serviceNamespace;
                // Patch the FirebaseAppImpl prototype
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                firebaseAppImpl.prototype[componentName] =
                    // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                    // option added to the no-explicit-any rule when ESlint releases it.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var serviceFxn = this._getService.bind(this, componentName);
                        return serviceFxn.apply(this, component.multipleInstances ? args : []);
                    };
            }
            try {
                // add the component to existing app instances
                for (var _b = __values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var appName = _c.value;
                    apps[appName]._addComponent(component);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentName]
                : null;
        }
        function registerVersion(libraryKeyOrName, version, variant) {
            var _a;
            // TODO: We can use this check to whitelist strings when/if we set up
            // a good whitelist system.
            var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
            if (variant) {
                library += "-" + variant;
            }
            var libraryMismatch = library.match(/\s|\//);
            var versionMismatch = version.match(/\s|\//);
            if (libraryMismatch || versionMismatch) {
                var warning = [
                    "Unable to register library \"" + library + "\" with version \"" + version + "\":"
                ];
                if (libraryMismatch) {
                    warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
                }
                if (libraryMismatch && versionMismatch) {
                    warning.push('and');
                }
                if (versionMismatch) {
                    warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
                }
                logger.warn(warning.join(' '));
                return;
            }
            registerComponent(new Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
        }
        function onLog(logCallback, options) {
            if (logCallback !== null && typeof logCallback !== 'function') {
                throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */, {
                    appName: name
                });
            }
            setUserLogHandler(logCallback, options);
        }
        // Map the requested service to a registered service name
        // (used to map auth to serverAuth service when needed).
        function useAsService(app, name) {
            if (name === 'serverAuth') {
                return null;
            }
            var useService = name;
            return useService;
        }
        return namespace;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Return a firebase namespace object.
     *
     * In production, this will be called exactly once and the result
     * assigned to the 'firebase' global.  It may be called multiple times
     * in unit tests.
     */
    function createFirebaseNamespace() {
        var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
        namespace.INTERNAL = __assign(__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
            extendNamespace: extendNamespace,
            createSubscribe: createSubscribe,
            ErrorFactory: ErrorFactory,
            deepExtend: deepExtend });
        /**
         * Patch the top-level firebase namespace with additional properties.
         *
         * firebase.INTERNAL.extendNamespace()
         */
        function extendNamespace(props) {
            deepExtend(namespace, props);
        }
        return namespace;
    }
    var firebase = createFirebaseNamespace();

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PlatformLoggerService = /** @class */ (function () {
        function PlatformLoggerService(container) {
            this.container = container;
        }
        // In initial implementation, this will be called by installations on
        // auth token refresh, and installations will send this string.
        PlatformLoggerService.prototype.getPlatformInfoString = function () {
            var providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
                .map(function (provider) {
                if (isVersionServiceProvider(provider)) {
                    var service = provider.getImmediate();
                    return service.library + "/" + service.version;
                }
                else {
                    return null;
                }
            })
                .filter(function (logString) { return logString; })
                .join(' ');
        };
        return PlatformLoggerService;
    }());
    /**
     *
     * @param provider check if this provider provides a VersionService
     *
     * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
     * provides VersionService. The provider is not necessarily a 'app-version'
     * provider.
     */
    function isVersionServiceProvider(provider) {
        var component = provider.getComponent();
        return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(firebase, variant) {
        firebase.INTERNAL.registerComponent(new Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
        // Register `app` package.
        firebase.registerVersion(name$1, version, variant);
        // Register platform SDK identifier (no version).
        firebase.registerVersion('fire-js', '');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Firebase Lite detection test
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (isBrowser() && self.firebase !== undefined) {
        logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
        // eslint-disable-next-line
        var sdkVersion = self.firebase.SDK_VERSION;
        if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
            logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
        }
    }
    var initializeApp = firebase.initializeApp;
    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
    // the no-explicit-any rule when ESlint releases it.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    firebase.initializeApp = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // Environment check before initializing app
        // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
        // in @firebase/logger
        if (isNode()) {
            logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      ");
        }
        return initializeApp.apply(undefined, args);
    };
    var firebase$1 = firebase;
    registerCoreComponents(firebase$1);

    (function() {/*

     Copyright The Closure Library Authors.
     SPDX-License-Identifier: Apache-2.0
    */
    var k,aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);};function ba(a){a=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global,a];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}return globalThis}var ca=ba(this);
    function da(a,b){if(b){var c=ca;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b});}}function ea(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function fa(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:ea(a)}}
    da("Promise",function(a){function b(g){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{g(h.resolve,h.reject);}catch(m){h.reject(m);}}function c(){this.a=null;}function d(g){return g instanceof b?g:new b(function(h){h(g);})}if(a)return a;c.prototype.b=function(g){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g();});}this.a.push(g);};var e=ca.setTimeout;c.prototype.c=function(g){e(g,0);};c.prototype.g=function(){for(;this.a&&this.a.length;){var g=this.a;this.a=[];for(var h=0;h<g.length;++h){var m=
    g[h];g[h]=null;try{m();}catch(p){this.f(p);}}}this.a=null;};c.prototype.f=function(g){this.c(function(){throw g;});};b.prototype.f=function(){function g(p){return function(v){m||(m=!0,p.call(h,v));}}var h=this,m=!1;return {resolve:g(this.m),reject:g(this.g)}};b.prototype.m=function(g){if(g===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(g instanceof b)this.s(g);else {a:switch(typeof g){case "object":var h=null!=g;break a;case "function":h=!0;break a;default:h=!1;}h?this.v(g):this.h(g);}};
    b.prototype.v=function(g){var h=void 0;try{h=g.then;}catch(m){this.g(m);return}"function"==typeof h?this.u(h,g):this.h(g);};b.prototype.g=function(g){this.i(2,g);};b.prototype.h=function(g){this.i(1,g);};b.prototype.i=function(g,h){if(0!=this.b)throw Error("Cannot settle("+g+", "+h+"): Promise already settled in state"+this.b);this.b=g;this.c=h;this.l();};b.prototype.l=function(){if(null!=this.a){for(var g=0;g<this.a.length;++g)f.b(this.a[g]);this.a=null;}};var f=new c;b.prototype.s=function(g){var h=this.f();
    g.Qa(h.resolve,h.reject);};b.prototype.u=function(g,h){var m=this.f();try{g.call(h,m.resolve,m.reject);}catch(p){m.reject(p);}};b.prototype.then=function(g,h){function m(A,Q){return "function"==typeof A?function(ya){try{p(A(ya));}catch(Ad){v(Ad);}}:Q}var p,v,B=new b(function(A,Q){p=A;v=Q;});this.Qa(m(g,p),m(h,v));return B};b.prototype.catch=function(g){return this.then(void 0,g)};b.prototype.Qa=function(g,h){function m(){switch(p.b){case 1:g(p.c);break;case 2:h(p.c);break;default:throw Error("Unexpected state: "+
    p.b);}}var p=this;null==this.a?f.b(m):this.a.push(m);};b.resolve=d;b.reject=function(g){return new b(function(h,m){m(g);})};b.race=function(g){return new b(function(h,m){for(var p=fa(g),v=p.next();!v.done;v=p.next())d(v.value).Qa(h,m);})};b.all=function(g){var h=fa(g),m=h.next();return m.done?d([]):new b(function(p,v){function B(ya){return function(Ad){A[ya]=Ad;Q--;0==Q&&p(A);}}var A=[],Q=0;do A.push(void 0),Q++,d(m.value).Qa(B(A.length-1),v),m=h.next();while(!m.done)})};return b});
    var ha=ha||{},l=this||self,ia=/^[\w+/_-]+[=]{0,2}$/,ja=null;function ka(a){return (a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&ia.test(a)?a:""}function la(){}function ma(a){var b=typeof a;return "object"!=b?b:a?Array.isArray(a)?"array":b:"null"}function na(a){var b=ma(a);return "array"==b||"object"==b&&"number"==typeof a.length}function oa(a){return "function"==ma(a)}function n(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}
    function pa(a){return Object.prototype.hasOwnProperty.call(a,qa)&&a[qa]||(a[qa]=++ra)}var qa="closure_uid_"+(1E9*Math.random()>>>0),ra=0;function sa(a,b,c){return a.call.apply(a.bind,arguments)}function ta(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}
    function q(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?q=sa:q=ta;return q.apply(null,arguments)}function ua(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}var va=Date.now;function r(a,b){function c(){}c.prototype=b.prototype;a.ab=b.prototype;a.prototype=new c;a.prototype.constructor=a;}function wa(a){return a}function t(a,b,c){this.code=xa+a;this.message=b||za[a]||"";this.a=c||null;}r(t,Error);t.prototype.w=function(){var a={code:this.code,message:this.message};this.a&&(a.serverResponse=this.a);return a};t.prototype.toJSON=function(){return this.w()};function Aa(a){var b=a&&a.code;return b?new t(b.substring(xa.length),a.message,a.serverResponse):null}
    var xa="auth/",za={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
    "captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.",
    "requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.",
    "internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.",
    "invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
    "invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.",
    "invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.",
    "unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
    "invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.",
    "multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
    "missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
    "missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
    "no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
    "popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
    "rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.",
    "too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.",
    "unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.",
    "web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};/*

     Copyright 2017 Google LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    var Ba={ld:{Ta:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Za:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Wa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},sd:{Ta:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Za:"https://securetoken.googleapis.com/v1/token",Wa:"https://identitytoolkit.googleapis.com/v2/",id:"p"},ud:{Ta:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
    Za:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Wa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},vd:{Ta:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Za:"https://test-securetoken.sandbox.googleapis.com/v1/token",Wa:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};
    function Ca(a){for(var b in Ba)if(Ba[b].id===a)return a=Ba[b],{firebaseEndpoint:a.Ta,secureTokenEndpoint:a.Za,identityPlatformEndpoint:a.Wa};return null}var Da;Da=Ca("__EID__")?"__EID__":void 0;function Ea(a){if(!a)return !1;try{return !!a.$goog_Thenable}catch(b){return !1}}function u(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else {var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));}r(u,Error);u.prototype.name="CustomError";function Fa(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");u.call(this,c+a[d]);}r(Fa,u);Fa.prototype.name="AssertionError";function Ga(a,b){throw new Fa("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));}function Ha(a,b){this.c=a;this.f=b;this.b=0;this.a=null;}Ha.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null;}else a=this.c();return a};function Ia(a,b){a.f(b);100>a.b&&(a.b++,b.next=a.a,a.a=b);}function Ja(){this.b=this.a=null;}var La=new Ha(function(){return new Ka},function(a){a.reset();});Ja.prototype.add=function(a,b){var c=La.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c;};function Ma(){var a=Na,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Ka(){this.next=this.b=this.a=null;}Ka.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null;};Ka.prototype.reset=function(){this.next=this.b=this.a=null;};var Oa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return "string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},w=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};
    function Pa(a,b){for(var c="string"===typeof a?a.split(""):a,d=a.length-1;0<=d;--d)d in c&&b.call(void 0,c[d],d,a);}
    var Qa=Array.prototype.filter?function(a,b){return Array.prototype.filter.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=[],e=0,f="string"===typeof a?a.split(""):a,g=0;g<c;g++)if(g in f){var h=f[g];b.call(void 0,h,g,a)&&(d[e++]=h);}return d},Ra=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e="string"===typeof a?a.split(""):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},Sa=Array.prototype.some?function(a,
    b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return !0;return !1};function Ta(a){a:{var b=Ua;for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}function Va(a,b){return 0<=Oa(a,b)}
    function Wa(a,b){b=Oa(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function Xa(a,b){var c=0;Pa(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++;});}function Ya(a){return Array.prototype.concat.apply([],arguments)}function Za(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return []}var $a=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},ab=/&/g,bb=/</g,cb=/>/g,db=/"/g,eb=/'/g,fb=/\x00/g,gb=/[\x00&<>"']/;function x(a,b){return -1!=a.indexOf(b)}function hb(a,b){return a<b?-1:a>b?1:0}var ib;a:{var jb=l.navigator;if(jb){var kb=jb.userAgent;if(kb){ib=kb;break a}}ib="";}function y(a){return x(ib,a)}function lb(a,b){for(var c in a)b.call(void 0,a[c],c,a);}function mb(a){for(var b in a)return !1;return !0}function nb(a){var b={},c;for(c in a)b[c]=a[c];return b}var ob="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function z(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ob.length;f++)c=ob[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function pb(a,b){a:{try{var c=a&&a.ownerDocument,d=c&&(c.defaultView||c.parentWindow);d=d||l;if(d.Element&&d.Location){var e=d;break a}}catch(g){}e=null;}if(e&&"undefined"!=typeof e[b]&&(!a||!(a instanceof e[b])&&(a instanceof e.Location||a instanceof e.Element))){if(n(a))try{var f=a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a);}catch(g){f="<object could not be stringified>";}else f=void 0===a?"undefined":null===a?"null":typeof a;Ga("Argument is not a %s (or a non-Element, non-Location mock); got: %s",
    b,f);}}function qb(a,b){this.a=a===rb&&b||"";this.b=sb;}qb.prototype.sa=!0;qb.prototype.ra=function(){return this.a};qb.prototype.toString=function(){return "Const{"+this.a+"}"};function tb(a){if(a instanceof qb&&a.constructor===qb&&a.b===sb)return a.a;Ga("expected object of type Const, got '"+a+"'");return "type_error:Const"}var sb={},rb={};var ub;function vb(){if(void 0===ub){var a=null,b=l.trustedTypes;if(b&&b.createPolicy){try{a=b.createPolicy("goog#html",{createHTML:wa,createScript:wa,createScriptURL:wa});}catch(c){l.console&&l.console.error(c.message);}ub=a;}else ub=a;}return ub}function wb(a,b){this.a=b===xb?a:"";}wb.prototype.sa=!0;wb.prototype.ra=function(){return this.a.toString()};wb.prototype.toString=function(){return "TrustedResourceUrl{"+this.a+"}"};function yb(a){if(a instanceof wb&&a.constructor===wb)return a.a;Ga("expected object of type TrustedResourceUrl, got '"+a+"' of type "+ma(a));return "type_error:TrustedResourceUrl"}
    function zb(a,b){var c=tb(a);if(!Ab.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(Bb,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));d=b[e];return d instanceof qb?tb(d):encodeURIComponent(String(d))});return Cb(a)}var Bb=/%{(\w+)}/g,Ab=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,xb={};
    function Cb(a){var b=vb();a=b?b.createScriptURL(a):a;return new wb(a,xb)}function C(a,b){this.a=b===Db?a:"";}C.prototype.sa=!0;C.prototype.ra=function(){return this.a.toString()};C.prototype.toString=function(){return "SafeUrl{"+this.a+"}"};function Eb(a){if(a instanceof C&&a.constructor===C)return a.a;Ga("expected object of type SafeUrl, got '"+a+"' of type "+ma(a));return "type_error:SafeUrl"}
    var Fb=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Gb=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Hb=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
    function Ib(a){if(a instanceof C)return a;a="object"==typeof a&&a.sa?a.ra():String(a);if(Hb.test(a))a=new C(a,Db);else {a=String(a);a=a.replace(/(%0A|%0D)/g,"");var b=a.match(Gb);a=b&&Fb.test(b[1])?new C(a,Db):null;}return a}function Jb(a){if(a instanceof C)return a;a="object"==typeof a&&a.sa?a.ra():String(a);Hb.test(a)||(a="about:invalid#zClosurez");return new C(a,Db)}var Db={},Kb=new C("about:invalid#zClosurez",Db);function Lb(a,b,c){this.a=c===Mb?a:"";}Lb.prototype.sa=!0;Lb.prototype.ra=function(){return this.a.toString()};Lb.prototype.toString=function(){return "SafeHtml{"+this.a+"}"};function Nb(a){if(a instanceof Lb&&a.constructor===Lb)return a.a;Ga("expected object of type SafeHtml, got '"+a+"' of type "+ma(a));return "type_error:SafeHtml"}var Mb={};function Ob(a,b){pb(a,"HTMLScriptElement");a.src=yb(b);(b=a.ownerDocument&&a.ownerDocument.defaultView)&&b!=l?b=ka(b.document):(null===ja&&(ja=ka(l.document)),b=ja);b&&a.setAttribute("nonce",b);}function Pb(a,b,c,d){a=a instanceof C?a:Jb(a);b=b||l;c=c instanceof qb?tb(c):c||"";return b.open(Eb(a),c,d,void 0)}function Qb(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}function Rb(a){gb.test(a)&&(-1!=a.indexOf("&")&&(a=a.replace(ab,"&amp;")),-1!=a.indexOf("<")&&(a=a.replace(bb,"&lt;")),-1!=a.indexOf(">")&&(a=a.replace(cb,"&gt;")),-1!=a.indexOf('"')&&(a=a.replace(db,"&quot;")),-1!=a.indexOf("'")&&(a=a.replace(eb,"&#39;")),-1!=a.indexOf("\x00")&&(a=a.replace(fb,"&#0;")));return a}function Sb(a){Sb[" "](a);return a}Sb[" "]=la;function Tb(a,b){var c=Ub;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)}var Vb=y("Opera"),Wb=y("Trident")||y("MSIE"),Xb=y("Edge"),Yb=Xb||Wb,Zb=y("Gecko")&&!(x(ib.toLowerCase(),"webkit")&&!y("Edge"))&&!(y("Trident")||y("MSIE"))&&!y("Edge"),$b=x(ib.toLowerCase(),"webkit")&&!y("Edge");function ac(){var a=l.document;return a?a.documentMode:void 0}var bc;
    a:{var cc="",dc=function(){var a=ib;if(Zb)return /rv:([^\);]+)(\)|;)/.exec(a);if(Xb)return /Edge\/([\d\.]+)/.exec(a);if(Wb)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if($b)return /WebKit\/(\S+)/.exec(a);if(Vb)return /(?:Version)[ \/]?(\S+)/.exec(a)}();dc&&(cc=dc?dc[1]:"");if(Wb){var ec=ac();if(null!=ec&&ec>parseFloat(cc)){bc=String(ec);break a}}bc=cc;}var Ub={};
    function fc(a){return Tb(a,function(){for(var b=0,c=$a(String(bc)).split("."),d=$a(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",h=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==g[0].length&&0==h[0].length)break;b=hb(0==g[1].length?0:parseInt(g[1],10),0==h[1].length?0:parseInt(h[1],10))||hb(0==g[2].length,0==h[2].length)||hb(g[2],h[2]);g=g[3];h=h[3];}while(0==b)}return 0<=b})}var gc;
    if(l.document&&Wb){var hc=ac();gc=hc?hc:parseInt(bc,10)||void 0;}else gc=void 0;var ic=gc;try{(new self.OffscreenCanvas(0,0)).getContext("2d");}catch(a){}var jc=!Wb||9<=Number(ic);function kc(a){var b=document;return "string"===typeof a?b.getElementById(a):a}function lc(a,b){lb(b,function(c,d){c&&"object"==typeof c&&c.sa&&(c=c.ra());"style"==d?a.style.cssText=c:"class"==d?a.className=c:"for"==d?a.htmlFor=c:mc.hasOwnProperty(d)?a.setAttribute(mc[d],c):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,c):a[d]=c;});}
    var mc={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
    function nc(a,b,c){var d=arguments,e=document,f=String(d[0]),g=d[1];if(!jc&&g&&(g.name||g.type)){f=["<",f];g.name&&f.push(' name="',Rb(g.name),'"');if(g.type){f.push(' type="',Rb(g.type),'"');var h={};z(h,g);delete h.type;g=h;}f.push(">");f=f.join("");}f=oc(e,f);g&&("string"===typeof g?f.className=g:Array.isArray(g)?f.className=g.join(" "):lc(f,g));2<d.length&&pc(e,f,d);return f}
    function pc(a,b,c){function d(h){h&&b.appendChild("string"===typeof h?a.createTextNode(h):h);}for(var e=2;e<c.length;e++){var f=c[e];if(!na(f)||n(f)&&0<f.nodeType)d(f);else {a:{if(f&&"number"==typeof f.length){if(n(f)){var g="function"==typeof f.item||"string"==typeof f.item;break a}if(oa(f)){g="function"==typeof f.item;break a}}g=!1;}w(g?Za(f):f,d);}}}function oc(a,b){b=String(b);"application/xhtml+xml"===a.contentType&&(b=b.toLowerCase());return a.createElement(b)}function qc(a){l.setTimeout(function(){throw a;},0);}var rc;
    function sc(){var a=l.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!y("Presto")&&(a=function(){var e=oc(document,"IFRAME");e.style.display="none";document.documentElement.appendChild(e);var f=e.contentWindow;e=f.document;e.open();e.close();var g="callImmediate"+Math.random(),h="file:"==f.location.protocol?"*":f.location.protocol+"//"+f.location.host;e=q(function(m){if(("*"==h||m.origin==h)&&m.data==g)this.port1.onmessage();},this);
    f.addEventListener("message",e,!1);this.port1={};this.port2={postMessage:function(){f.postMessage(g,h);}};});if("undefined"!==typeof a&&!y("Trident")&&!y("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var e=c.Gb;c.Gb=null;e();}};return function(e){d.next={Gb:e};d=d.next;b.port2.postMessage(0);}}return function(e){l.setTimeout(e,0);}}function tc(a,b){uc||vc();wc||(uc(),wc=!0);Na.add(a,b);}var uc;function vc(){if(l.Promise&&l.Promise.resolve){var a=l.Promise.resolve(void 0);uc=function(){a.then(xc);};}else uc=function(){var b=xc;!oa(l.setImmediate)||l.Window&&l.Window.prototype&&!y("Edge")&&l.Window.prototype.setImmediate==l.setImmediate?(rc||(rc=sc()),rc(b)):l.setImmediate(b);};}var wc=!1,Na=new Ja;function xc(){for(var a;a=Ma();){try{a.a.call(a.b);}catch(b){qc(b);}Ia(La,a);}wc=!1;}function D(a,b){this.a=yc;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=la)try{var c=this;a.call(b,function(d){zc(c,Ac,d);},function(d){if(!(d instanceof Bc))try{if(d instanceof Error)throw d;throw Error("Promise rejected.");}catch(e){}zc(c,Cc,d);});}catch(d){zc(this,Cc,d);}}var yc=0,Ac=2,Cc=3;function Dc(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1;}Dc.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1;};var Ec=new Ha(function(){return new Dc},function(a){a.reset();});
    function Fc(a,b,c){var d=Ec.get();d.g=a;d.b=b;d.f=c;return d}function E(a){if(a instanceof D)return a;var b=new D(la);zc(b,Ac,a);return b}function F(a){return new D(function(b,c){c(a);})}function Gc(a,b,c){Hc(a,b,c,null)||tc(ua(b,a));}function Ic(a){return new D(function(b,c){var d=a.length,e=[];if(d)for(var f=function(p,v){d--;e[p]=v;0==d&&b(e);},g=function(p){c(p);},h=0,m;h<a.length;h++)m=a[h],Gc(m,ua(f,h),g);else b(e);})}
    function Jc(a){return new D(function(b){var c=a.length,d=[];if(c)for(var e=function(h,m,p){c--;d[h]=m?{Pb:!0,value:p}:{Pb:!1,reason:p};0==c&&b(d);},f=0,g;f<a.length;f++)g=a[f],Gc(g,ua(e,f,!0),ua(e,f,!1));else b(d);})}D.prototype.then=function(a,b,c){return Kc(this,oa(a)?a:null,oa(b)?b:null,c)};D.prototype.$goog_Thenable=!0;k=D.prototype;k.oa=function(a,b){a=Fc(a,a,b);a.c=!0;Lc(this,a);return this};k.o=function(a,b){return Kc(this,null,a,b)};
    k.cancel=function(a){if(this.a==yc){var b=new Bc(a);tc(function(){Mc(this,b);},this);}};function Mc(a,b){if(a.a==yc)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,g=c.b;g&&(g.c||(d++,g.a==a&&(e=g),!(e&&1<d)));g=g.next)e||(f=g);e&&(c.a==yc&&1==d?Mc(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):Nc(c),Oc(c,e,Cc,b)));}a.c=null;}else zc(a,Cc,b);}function Lc(a,b){a.b||a.a!=Ac&&a.a!=Cc||Pc(a);a.f?a.f.next=b:a.b=b;a.f=b;}
    function Kc(a,b,c,d){var e=Fc(null,null,null);e.a=new D(function(f,g){e.g=b?function(h){try{var m=b.call(d,h);f(m);}catch(p){g(p);}}:f;e.b=c?function(h){try{var m=c.call(d,h);void 0===m&&h instanceof Bc?g(h):f(m);}catch(p){g(p);}}:g;});e.a.c=a;Lc(a,e);return e.a}k.$c=function(a){this.a=yc;zc(this,Ac,a);};k.ad=function(a){this.a=yc;zc(this,Cc,a);};
    function zc(a,b,c){a.a==yc&&(a===c&&(b=Cc,c=new TypeError("Promise cannot resolve to itself")),a.a=1,Hc(c,a.$c,a.ad,a)||(a.i=c,a.a=b,a.c=null,Pc(a),b!=Cc||c instanceof Bc||Qc(a,c)));}function Hc(a,b,c,d){if(a instanceof D)return Lc(a,Fc(b||la,c||null,d)),!0;if(Ea(a))return a.then(b,c,d),!0;if(n(a))try{var e=a.then;if(oa(e))return Rc(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return !1}
    function Rc(a,b,c,d,e){function f(m){h||(h=!0,d.call(e,m));}function g(m){h||(h=!0,c.call(e,m));}var h=!1;try{b.call(a,g,f);}catch(m){f(m);}}function Pc(a){a.h||(a.h=!0,tc(a.gc,a));}function Nc(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}k.gc=function(){for(var a;a=Nc(this);)Oc(this,a,this.a,this.i);this.h=!1;};
    function Oc(a,b,c,d){if(c==Cc&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,Sc(b,c,d);else try{b.c?b.g.call(b.f):Sc(b,c,d);}catch(e){Tc.call(null,e);}Ia(Ec,b);}function Sc(a,b,c){b==Ac?a.g.call(a.f,c):a.b&&a.b.call(a.f,c);}function Qc(a,b){a.g=!0;tc(function(){a.g&&Tc.call(null,b);});}var Tc=qc;function Bc(a){u.call(this,a);}r(Bc,u);Bc.prototype.name="cancel";function Uc(){this.xa=this.xa;this.pa=this.pa;}var Vc=0;Uc.prototype.xa=!1;function Xc(a){if(!a.xa&&(a.xa=!0,a.Da(),0!=Vc)){pa(a);}}Uc.prototype.Da=function(){if(this.pa)for(;this.pa.length;)this.pa.shift()();};var Yc=Object.freeze||function(a){return a};var Zc=!Wb||9<=Number(ic),$c=Wb&&!fc("9"),ad=function(){if(!l.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{l.addEventListener("test",la,b),l.removeEventListener("test",la,b);}catch(c){}return a}();function G(a,b){this.type=a;this.b=this.target=b;this.defaultPrevented=!1;}G.prototype.preventDefault=function(){this.defaultPrevented=!0;};function bd(a,b){G.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(Zb){a:{try{Sb(b.nodeName);var e=!0;break a}catch(f){}e=!1;}e||(b=null);}}else "mouseover"==
    c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
    a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:cd[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.preventDefault();}}r(bd,G);var cd=Yc({2:"touch",3:"pen",4:"mouse"});bd.prototype.preventDefault=function(){bd.ab.preventDefault.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,$c)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1;}catch(b){}};bd.prototype.g=function(){return this.a};var dd="closure_listenable_"+(1E6*Math.random()|0),ed=0;function fd(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.Va=e;this.key=++ed;this.va=this.Pa=!1;}function gd(a){a.va=!0;a.listener=null;a.proxy=null;a.src=null;a.Va=null;}function hd(a){this.src=a;this.a={};this.b=0;}hd.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var g=id(a,b,d,e);-1<g?(b=a[g],c||(b.Pa=!1)):(b=new fd(b,this.src,f,!!d,e),b.Pa=c,a.push(b));return b};function jd(a,b){var c=b.type;c in a.a&&Wa(a.a[c],b)&&(gd(b),0==a.a[c].length&&(delete a.a[c],a.b--));}function id(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.va&&f.listener==b&&f.capture==!!c&&f.Va==d)return e}return -1}var kd="closure_lm_"+(1E6*Math.random()|0),ld={};function nd(a,b,c,d,e){if(d&&d.once)od(a,b,c,d,e);else if(Array.isArray(b))for(var f=0;f<b.length;f++)nd(a,b[f],c,d,e);else c=pd(c),a&&a[dd]?qd(a,b,c,n(d)?!!d.capture:!!d,e):rd(a,b,c,!1,d,e);}
    function rd(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=n(e)?!!e.capture:!!e,h=sd(a);h||(a[kd]=h=new hd(a));c=h.add(b,c,d,g,f);if(!c.proxy){d=td();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)ad||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(ud(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");}}
    function td(){var a=vd,b=Zc?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function od(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)od(a,b[f],c,d,e);else c=pd(c),a&&a[dd]?wd(a,b,c,n(d)?!!d.capture:!!d,e):rd(a,b,c,!0,d,e);}
    function xd(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)xd(a,b[f],c,d,e);else (d=n(d)?!!d.capture:!!d,c=pd(c),a&&a[dd])?(a=a.v,b=String(b).toString(),b in a.a&&(f=a.a[b],c=id(f,c,d,e),-1<c&&(gd(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=sd(a))&&(b=a.a[b.toString()],a=-1,b&&(a=id(b,c,d,e)),(c=-1<a?b[a]:null)&&yd(c));}
    function yd(a){if("number"!==typeof a&&a&&!a.va){var b=a.src;if(b&&b[dd])jd(b.v,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(ud(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=sd(b))?(jd(c,a),0==c.b&&(c.src=null,b[kd]=null)):gd(a);}}}function ud(a){return a in ld?ld[a]:ld[a]="on"+a}
    function zd(a,b,c,d){var e=!0;if(a=sd(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.va&&(f=Bd(f,d),e=e&&!1!==f);}return e}function Bd(a,b){var c=a.listener,d=a.Va||a.src;a.Pa&&yd(a);return c.call(d,b)}
    function vd(a,b){if(a.va)return !0;if(!Zc){if(!b)a:{b=["window","event"];for(var c=l,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c;}d=b;b=new bd(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0;}if(e||void 0==d.returnValue)d.returnValue=!0;}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=zd(d[e],a,!0,b);c=c&&f;}for(e=0;e<d.length;e++)b.b=d[e],f=zd(d[e],a,!1,b),c=c&&f;}return c}return Bd(a,
    new bd(b,this))}function sd(a){a=a[kd];return a instanceof hd?a:null}var Cd="__closure_events_fn_"+(1E9*Math.random()>>>0);function pd(a){if(oa(a))return a;a[Cd]||(a[Cd]=function(b){return a.handleEvent(b)});return a[Cd]}function H(){Uc.call(this);this.v=new hd(this);this.ac=this;this.gb=null;}r(H,Uc);H.prototype[dd]=!0;H.prototype.addEventListener=function(a,b,c,d){nd(this,a,b,c,d);};H.prototype.removeEventListener=function(a,b,c,d){xd(this,a,b,c,d);};
    H.prototype.dispatchEvent=function(a){var b,c=this.gb;if(c)for(b=[];c;c=c.gb)b.push(c);c=this.ac;var d=a.type||a;if("string"===typeof a)a=new G(a,c);else if(a instanceof G)a.target=a.target||c;else {var e=a;a=new G(d,c);z(a,e);}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var g=a.b=b[f];e=Dd(g,d,!0,a)&&e;}g=a.b=c;e=Dd(g,d,!0,a)&&e;e=Dd(g,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)g=a.b=b[f],e=Dd(g,d,!1,a)&&e;return e};
    H.prototype.Da=function(){H.ab.Da.call(this);if(this.v){var a=this.v,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)gd(d[e]);delete a.a[c];a.b--;}}this.gb=null;};function qd(a,b,c,d,e){a.v.add(String(b),c,!1,d,e);}function wd(a,b,c,d,e){a.v.add(String(b),c,!0,d,e);}
    function Dd(a,b,c,d){b=a.v.a[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.va&&g.capture==c){var h=g.listener,m=g.Va||g.src;g.Pa&&jd(a.v,g);e=!1!==h.call(m,d)&&e;}}return e&&!d.defaultPrevented}function Ed(a,b,c){if(oa(a))c&&(a=q(a,c));else if(a&&"function"==typeof a.handleEvent)a=q(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)}function Fd(a){var b=null;return (new D(function(c,d){b=Ed(function(){c(void 0);},a);-1==b&&d(Error("Failed to schedule timer."));})).o(function(c){l.clearTimeout(b);throw c;})}function Gd(a){if(a.W&&"function"==typeof a.W)return a.W();if("string"===typeof a)return a.split("");if(na(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function Hd(a){if(a.Y&&"function"==typeof a.Y)return a.Y();if(!a.W||"function"!=typeof a.W){if(na(a)||"string"===typeof a){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(var d in a)b[c++]=d;return b}}
    function Id(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(na(a)||"string"===typeof a)w(a,b,void 0);else for(var c=Hd(a),d=Gd(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}function Jd(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof Jd)for(c=a.Y(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}k=Jd.prototype;k.W=function(){Kd(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};k.Y=function(){Kd(this);return this.a.concat()};
    k.clear=function(){this.b={};this.c=this.a.length=0;};function Kd(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];Ld(a.b,d)&&(a.a[c++]=d);b++;}a.a.length=c;}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],Ld(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c;}}k.get=function(a,b){return Ld(this.b,a)?this.b[a]:b};k.set=function(a,b){Ld(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b;};
    k.forEach=function(a,b){for(var c=this.Y(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};function Ld(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var Md=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Nd(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function Od(a,b){this.a=this.l=this.c="";this.g=null;this.h=this.f="";this.i=!1;var c;a instanceof Od?(this.i=void 0!==b?b:a.i,Pd(this,a.c),this.l=a.l,this.a=a.a,Qd(this,a.g),this.f=a.f,Rd(this,Sd(a.b)),this.h=a.h):a&&(c=String(a).match(Md))?(this.i=!!b,Pd(this,c[1]||"",!0),this.l=Td(c[2]||""),this.a=Td(c[3]||"",!0),Qd(this,c[4]),this.f=Td(c[5]||"",!0),Rd(this,c[6]||"",!0),this.h=Td(c[7]||"")):(this.i=!!b,this.b=new Ud(null,this.i));}
    Od.prototype.toString=function(){var a=[],b=this.c;b&&a.push(Vd(b,Wd,!0),":");var c=this.a;if(c||"file"==b)a.push("//"),(b=this.l)&&a.push(Vd(b,Wd,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.g,null!=c&&a.push(":",String(c));if(c=this.f)this.a&&"/"!=c.charAt(0)&&a.push("/"),a.push(Vd(c,"/"==c.charAt(0)?Xd:Yd,!0));(c=this.b.toString())&&a.push("?",c);(c=this.h)&&a.push("#",Vd(c,Zd));return a.join("")};
    Od.prototype.resolve=function(a){var b=new Od(this),c=!!a.c;c?Pd(b,a.c):c=!!a.l;c?b.l=a.l:c=!!a.a;c?b.a=a.a:c=null!=a.g;var d=a.f;if(c)Qd(b,a.g);else if(c=!!a.f){if("/"!=d.charAt(0))if(this.a&&!this.f)d="/"+d;else {var e=b.f.lastIndexOf("/");-1!=e&&(d=b.f.substr(0,e+1)+d);}e=d;if(".."==e||"."==e)d="";else if(x(e,"./")||x(e,"/.")){d=0==e.lastIndexOf("/",0);e=e.split("/");for(var f=[],g=0;g<e.length;){var h=e[g++];"."==h?d&&g==e.length&&f.push(""):".."==h?((1<f.length||1==f.length&&""!=f[0])&&f.pop(),
    d&&g==e.length&&f.push("")):(f.push(h),d=!0);}d=f.join("/");}else d=e;}c?b.f=d:c=""!==a.b.toString();c?Rd(b,Sd(a.b)):c=!!a.h;c&&(b.h=a.h);return b};function Pd(a,b,c){a.c=c?Td(b,!0):b;a.c&&(a.c=a.c.replace(/:$/,""));}function Qd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.g=b;}else a.g=null;}function Rd(a,b,c){b instanceof Ud?(a.b=b,$d(a.b,a.i)):(c||(b=Vd(b,ae)),a.b=new Ud(b,a.i));}function I(a,b,c){a.b.set(b,c);}function be(a,b){return a.b.get(b)}
    function J(a){return a instanceof Od?new Od(a):new Od(a,void 0)}function ce(a,b,c,d){var e=new Od(null,void 0);a&&Pd(e,a);b&&(e.a=b);c&&Qd(e,c);d&&(e.f=d);return e}function Td(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Vd(a,b,c){return "string"===typeof a?(a=encodeURI(a).replace(b,de),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function de(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}
    var Wd=/[#\/\?@]/g,Yd=/[#\?:]/g,Xd=/[#\?]/g,ae=/[#\?@]/g,Zd=/#/g;function Ud(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b;}function ee(a){a.a||(a.a=new Jd,a.b=0,a.c&&Nd(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}function fe(a){var b=Hd(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new Ud(null,void 0);a=Gd(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];Array.isArray(f)?ge(c,e,f):c.add(e,f);}return c}k=Ud.prototype;
    k.add=function(a,b){ee(this);this.c=null;a=he(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function ie(a,b){ee(a);b=he(a,b);Ld(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,Ld(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&Kd(a)));}k.clear=function(){this.a=this.c=null;this.b=0;};function je(a,b){ee(a);b=he(a,b);return Ld(a.a.b,b)}k.forEach=function(a,b){ee(this);this.a.forEach(function(c,d){w(c,function(e){a.call(b,e,d,this);},this);},this);};
    k.Y=function(){ee(this);for(var a=this.a.W(),b=this.a.Y(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};k.W=function(a){ee(this);var b=[];if("string"===typeof a)je(this,a)&&(b=Ya(b,this.a.get(he(this,a))));else {a=this.a.W();for(var c=0;c<a.length;c++)b=Ya(b,a[c]);}return b};k.set=function(a,b){ee(this);this.c=null;a=he(this,a);je(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};
    k.get=function(a,b){if(!a)return b;a=this.W(a);return 0<a.length?String(a[0]):b};function ge(a,b,c){ie(a,b);0<c.length&&(a.c=null,a.a.set(he(a,b),Za(c)),a.b+=c.length);}k.toString=function(){if(this.c)return this.c;if(!this.a)return "";for(var a=[],b=this.a.Y(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.W(d);for(var f=0;f<d.length;f++){var g=e;""!==d[f]&&(g+="="+encodeURIComponent(String(d[f])));a.push(g);}}return this.c=a.join("&")};
    function Sd(a){var b=new Ud;b.c=a.c;a.a&&(b.a=new Jd(a.a),b.b=a.b);return b}function he(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function $d(a,b){b&&!a.f&&(ee(a),a.c=null,a.a.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(ie(this,d),ge(this,e,c));},a));a.f=b;}function ke(a){var b=[];le(new me,a,b);return b.join("")}function me(){}
    function le(a,b,c){if(null==b)c.push("null");else {if("object"==typeof b){if(Array.isArray(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),le(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else {c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),ne(d,c),c.push(":"),le(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":ne(b,c);break;case "number":c.push(isFinite(b)&&
    !isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var oe={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},pe=/\uffff/.test("\uffff")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
    function ne(a,b){b.push('"',a.replace(pe,function(c){var d=oe[c];d||(d="\\u"+(c.charCodeAt(0)|65536).toString(16).substr(1),oe[c]=d);return d}),'"');}function qe(){var a=K();return Wb&&!!ic&&11==ic||/Edge\/\d+/.test(a)}function re(){return l.window&&l.window.location.href||self&&self.location&&self.location.href||""}function se(a,b){b=b||l.window;var c="about:blank";a&&(c=Eb(Ib(a)||Kb));b.location.href=c;}function te(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<te(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c}
    function ue(){var a=K();a=ve(a)!=we?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!Wb||!ic||9<ic}function xe(a){a=(a||K()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function ye(a){a=a||l.window;try{a.close();}catch(b){}}
    function ze(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=K().toLowerCase();d&&(b.target=d,x(c,"crios/")&&(b.target="_blank"));ve(K())==Ae&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(a=b)||(a={});d=window;b=c instanceof C?c:Ib("undefined"!=typeof c.href?c.href:String(c))||Kb;c=a.target||c.target;e=
    [];for(g in a)switch(g){case "width":case "height":case "top":case "left":e.push(g+"="+a[g]);break;case "target":case "noopener":case "noreferrer":break;default:e.push(g+"="+(a[g]?1:0));}var g=e.join(",");if((y("iPhone")&&!y("iPod")&&!y("iPad")||y("iPad")||y("iPod"))&&d.navigator&&d.navigator.standalone&&c&&"_self"!=c)g=oc(document,"A"),pb(g,"HTMLAnchorElement"),b=b instanceof C?b:Jb(b),g.href=Eb(b),g.setAttribute("target",c),a.noreferrer&&g.setAttribute("rel","noreferrer"),a=document.createEvent("MouseEvent"),
    a.initMouseEvent("click",!0,!0,d,1),g.dispatchEvent(a),g={};else if(a.noreferrer){if(g=Pb("",d,c,g),a=Eb(b),g&&(Yb&&x(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),g.opener=null,a='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Rb(a)+'">',a=(d=vb())?d.createHTML(a):a,a=new Lb(a,null,Mb),d=g.document))d.write(Nb(a)),d.close();}else (g=Pb(b,d,c,g))&&a.noopener&&(g.opener=null);if(g)try{g.focus();}catch(h){}return g}
    function Be(a){return new D(function(b){function c(){Fd(2E3).then(function(){if(!a||a.closed)b();else return c()});}return c()})}var Ce=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,De=/^[^@]+@[^@]+$/;function Ee(){var a=null;return (new D(function(b){"complete"==l.document.readyState?b():(a=function(){b();},od(window,"load",a));})).o(function(b){xd(window,"load",a);throw b;})}
    function Fe(){return Ge(void 0)?Ee().then(function(){return new D(function(a,b){var c=l.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."));},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a();},!1);})}):F(Error("Cordova must run in an Android or iOS file scheme."))}function Ge(a){a=a||K();return !("file:"!==He()&&"ionic:"!==He()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function Ie(){var a=l.window;try{return !(!a||a==a.top)}catch(b){return !1}}
    function Je(){return "undefined"!==typeof l.WorkerGlobalScope&&"function"===typeof l.importScripts}function Ke(){return firebase$1.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase$1.INTERNAL.hasOwnProperty("node")?"Node":Je()?"Worker":"Browser"}function Le(){var a=Ke();return "ReactNative"===a||"Node"===a}function Me(){for(var a=50,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}
    var Ae="Firefox",we="Chrome";
    function ve(a){var b=a.toLowerCase();if(x(b,"opera/")||x(b,"opr/")||x(b,"opios/"))return "Opera";if(x(b,"iemobile"))return "IEMobile";if(x(b,"msie")||x(b,"trident/"))return "IE";if(x(b,"edge/"))return "Edge";if(x(b,"firefox/"))return Ae;if(x(b,"silk/"))return "Silk";if(x(b,"blackberry"))return "Blackberry";if(x(b,"webos"))return "Webos";if(!x(b,"safari/")||x(b,"chrome/")||x(b,"crios/")||x(b,"android"))if(!x(b,"chrome/")&&!x(b,"crios/")||x(b,"edge/")){if(x(b,"android"))return "Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
    2==a.length)return a[1]}else return we;else return "Safari";return "Other"}var Ne={md:"FirebaseCore-web",od:"FirebaseUI-web"};function Oe(a,b){b=b||[];var c=[],d={},e;for(e in Ne)d[Ne[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=Ke();"Browser"===c?(d=K(),c=ve(d)):"Worker"===c&&(d=K(),c=ve(d)+"-"+c);return c+"/JsCore/"+a+"/"+b.join(",")}function K(){return l.navigator&&l.navigator.userAgent||""}
    function L(a,b){a=a.split(".");b=b||l;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function Pe(){try{var a=l.localStorage,b=Qe();if(a)return a.setItem(b,"1"),a.removeItem(b),qe()?!!l.indexedDB:!0}catch(c){return Je()&&!!l.indexedDB}return !1}function Re(){return (Se()||"chrome-extension:"===He()||Ge())&&!Le()&&Pe()&&!Je()}function Se(){return "http:"===He()||"https:"===He()}function He(){return l.location&&l.location.protocol||null}
    function Te(a){a=a||K();return xe(a)||ve(a)==Ae?!1:!0}function Ue(a){return "undefined"===typeof a?null:ke(a)}function Ve(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function We(a){if(null!==a)return JSON.parse(a)}function Qe(a){return a?a:Math.floor(1E9*Math.random()).toString()}function Xe(a){a=a||K();return "Safari"==ve(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
    function Ye(){var a=l.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null;}function Ze(a,b){if(a>b)throw Error("Short delay should be less than long delay!");this.a=a;this.c=b;a=K();b=Ke();this.b=xe(a)||"ReactNative"===b;}
    Ze.prototype.get=function(){var a=l.navigator;return (a&&"boolean"===typeof a.onLine&&(Se()||"chrome-extension:"===He()||"undefined"!==typeof a.connection)?a.onLine:1)?this.b?this.c:this.a:Math.min(5E3,this.a)};function $e(){var a=l.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}
    function af(){var a=l.document,b=null;return $e()||!a?E():(new D(function(c){b=function(){$e()&&(a.removeEventListener("visibilitychange",b,!1),c());};a.addEventListener("visibilitychange",b,!1);})).o(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}function bf(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null}function cf(){return !(!L("fireauth.oauthhelper",l)&&!L("fireauth.iframe",l))}
    function df(){var a=l.navigator;return a&&a.serviceWorker&&a.serviceWorker.controller||null}function ef(){var a=l.navigator;return a&&a.serviceWorker?E().then(function(){return a.serviceWorker.ready}).then(function(b){return b.active||null}).o(function(){return null}):E(null)}var ff={};function gf(a){ff[a]||(ff[a]=!0,"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn(a));}var hf;try{var jf={};Object.defineProperty(jf,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(jf,"abcd",{configurable:!0,enumerable:!0,value:2});hf=2==jf.abcd;}catch(a){hf=!1;}function M(a,b,c){hf?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c;}function N(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&M(a,c,b[c]);}function kf(a){var b={};N(b,a);return b}function lf(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
    function mf(a,b){if(!b||!b.length)return !0;if(!a)return !1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return !1}return !0}function nf(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)M(b,c,nf(a[c]));}return b}function of(a){var b=a&&(a[pf]?"phone":null);if(b&&a&&a[qf]){M(this,"uid",a[qf]);M(this,"displayName",a[rf]||null);var c=null;a[sf]&&(c=(new Date(a[sf])).toUTCString());M(this,"enrollmentTime",c);M(this,"factorId",b);}else throw new t("internal-error","Internal assert: invalid MultiFactorInfo object");}of.prototype.w=function(){return {uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};function tf(a){try{var b=new uf(a);}catch(c){b=null;}return b}
    var rf="displayName",sf="enrolledAt",qf="mfaEnrollmentId",pf="phoneInfo";function uf(a){of.call(this,a);M(this,"phoneNumber",a[pf]);}r(uf,of);uf.prototype.w=function(){var a=uf.ab.w.call(this);a.phoneNumber=this.phoneNumber;return a};function vf(a){var b={},c=a[wf],d=a[xf],e=a[yf];a=tf(a[zf]);if(!e||e!=Af&&e!=Bf&&!c||e==Bf&&!d||e==Cf&&!a)throw Error("Invalid checkActionCode response!");e==Bf?(b[Df]=c||null,b[Ef]=c||null,b[Ff]=d):(b[Df]=d||null,b[Ef]=d||null,b[Ff]=c||null);b[Gf]=a||null;M(this,Hf,e);M(this,If,nf(b));}
    var Cf="REVERT_SECOND_FACTOR_ADDITION",Af="EMAIL_SIGNIN",Bf="VERIFY_AND_CHANGE_EMAIL",wf="email",zf="mfaInfo",xf="newEmail",yf="requestType",Ff="email",Df="fromEmail",Gf="multiFactorInfo",Ef="previousEmail",If="data",Hf="operation";function Jf(a){a=J(a);var b=be(a,Kf)||null,c=be(a,Lf)||null,d=be(a,Mf)||null;d=d?Nf[d]||null:null;if(!b||!c||!d)throw new t("argument-error",Kf+", "+Lf+"and "+Mf+" are required in a valid action code URL.");N(this,{apiKey:b,operation:d,code:c,continueUrl:be(a,Of)||null,languageCode:be(a,Pf)||null,tenantId:be(a,Qf)||null});}
    var Kf="apiKey",Lf="oobCode",Of="continueUrl",Pf="languageCode",Mf="mode",Qf="tenantId",Nf={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:Cf,signIn:Af,verifyAndChangeEmail:Bf,verifyEmail:"VERIFY_EMAIL"};function Rf(a){try{return new Jf(a)}catch(b){return null}}function Sf(a){var b=a[Tf];if("undefined"===typeof b)throw new t("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new t("invalid-continue-uri");this.h=b;this.b=this.a=null;this.g=!1;var c=a[Uf];if(c&&"object"===typeof c){b=c[Vf];var d=c[Wf];c=c[Xf];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new t("argument-error",Wf+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
    typeof c||"string"===typeof c&&!c.length))throw new t("argument-error",Xf+" property must be a non empty string when specified.");this.b=c||null;}else {if("undefined"!==typeof b)throw new t("argument-error",Vf+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new t("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new t("argument-error",Uf+" property must be a non null object when specified.");this.f=null;if((b=a[Yf])&&"object"===
    typeof b)if(b=b[Zf],"string"===typeof b&&b.length)this.f=b;else {if("undefined"!==typeof b)throw new t("argument-error",Zf+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new t("argument-error",Yf+" property must be a non null object when specified.");b=a[$f];if("undefined"!==typeof b&&"boolean"!==typeof b)throw new t("argument-error",$f+" property must be a boolean when specified.");this.c=!!b;a=a[ag];if("undefined"!==typeof a&&("string"!==typeof a||"string"===
    typeof a&&!a.length))throw new t("argument-error",ag+" property must be a non empty string when specified.");this.i=a||null;}var Uf="android",ag="dynamicLinkDomain",$f="handleCodeInApp",Yf="iOS",Tf="url",Wf="installApp",Xf="minimumVersion",Vf="packageName",Zf="bundleId";
    function bg(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.c;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.b,b.androidInstallApp=a.g;b.iOSBundleId=a.f;b.dynamicLinkDomain=a.i;for(var c in b)null===b[c]&&delete b[c];return b}function cg(a){return Ra(a,function(b){b=b.toString(16);return 1<b.length?b:"0"+b}).join("")}var dg=null;function eg(a){var b=[];fg(a,function(c){b.push(c);});return b}function fg(a,b){function c(m){for(;d<a.length;){var p=a.charAt(d++),v=dg[p];if(null!=v)return v;if(!/^[\s\xa0]*$/.test(p))throw Error("Unknown base64 encoding at char: "+p);}return m}gg();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}}
    function gg(){if(!dg){dg={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++)for(var d=a.concat(b[c].split("")),e=0;e<d.length;e++){var f=d[e];void 0===dg[f]&&(dg[f]=e);}}}function hg(a){var b=ig(a);if(!(b&&b.sub&&b.iss&&b.aud&&b.exp))throw Error("Invalid JWT");this.h=a;this.a=b.exp;this.i=b.sub;a=Date.now()/1E3;this.g=b.iat||(a>this.a?this.a:a);this.b=b.provider_id||b.firebase&&b.firebase.sign_in_provider||null;this.f=b.firebase&&b.firebase.tenant||null;this.c=!!b.is_anonymous||"anonymous"==this.b;}hg.prototype.T=function(){return this.f};hg.prototype.l=function(){return this.c};hg.prototype.toString=function(){return this.h};
    function jg(a){try{return new hg(a)}catch(b){return null}}
    function ig(a){if(!a)return null;a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{var d=eg(a);a=[];for(c=b=0;b<d.length;){var e=d[b++];if(128>e)a[c++]=String.fromCharCode(e);else if(191<e&&224>e){var f=d[b++];a[c++]=String.fromCharCode((e&31)<<6|f&63);}else if(239<e&&365>e){f=d[b++];var g=d[b++],h=d[b++],m=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;a[c++]=String.fromCharCode(55296+(m>>10));a[c++]=String.fromCharCode(56320+(m&1023));}else f=d[b++],g=
    d[b++],a[c++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63);}return JSON.parse(a.join(""))}catch(p){}return null}var kg="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),lg=["client_id","response_type","scope","redirect_uri","state"],mg={nd:{Ja:"locale",ua:700,ta:600,fa:"facebook.com",Xa:lg},pd:{Ja:null,ua:500,ta:750,fa:"github.com",Xa:lg},qd:{Ja:"hl",ua:515,ta:680,fa:"google.com",Xa:lg},wd:{Ja:"lang",ua:485,ta:705,fa:"twitter.com",Xa:kg},kd:{Ja:"locale",ua:640,ta:600,fa:"apple.com",Xa:[]}};
    function ng(a){for(var b in mg)if(mg[b].fa==a)return mg[b];return null}function og(a){var b={};b["facebook.com"]=pg;b["google.com"]=qg;b["github.com"]=rg;b["twitter.com"]=sg;var c=a&&a[tg];try{if(c)return b[c]?new b[c](a):new ug(a);if("undefined"!==typeof a[vg])return new wg(a)}catch(d){}return null}var vg="idToken",tg="providerId";
    function wg(a){var b=a[tg];if(!b&&a[vg]){var c=jg(a[vg]);c&&c.b&&(b=c.b);}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);M(this,"providerId",b);M(this,"isNewUser",c);}function ug(a){wg.call(this,a);a=We(a.rawUserInfo||"{}");M(this,"profile",nf(a||{}));}r(ug,wg);
    function pg(a){ug.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}r(pg,ug);function rg(a){ug.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",this.profile&&this.profile.login||null);}r(rg,ug);function qg(a){ug.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}r(qg,ug);
    function sg(a){ug.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",a.screenName||null);}r(sg,ug);function xg(a){var b=J(a),c=be(b,"link"),d=be(J(c),"link");b=be(b,"deep_link_id");return be(J(b),"link")||b||d||c||a}function yg(a,b){if(!a&&!b)throw new t("internal-error","Internal assert: no raw session string available");if(a&&b)throw new t("internal-error","Internal assert: unable to determine the session type");this.a=a||null;this.b=b||null;this.type=this.a?zg:Ag;}var zg="enroll",Ag="signin";yg.prototype.Ha=function(){return this.a?E(this.a):E(this.b)};yg.prototype.w=function(){return this.type==zg?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}};function Bg(){}Bg.prototype.ka=function(){};Bg.prototype.b=function(){};Bg.prototype.c=function(){};Bg.prototype.w=function(){};function Cg(a,b){return a.then(function(c){if(c[Dg]){var d=jg(c[Dg]);if(!d||b!=d.i)throw new t("user-mismatch");return c}throw new t("user-mismatch");}).o(function(c){throw c&&c.code&&c.code==xa+"user-not-found"?new t("user-mismatch"):c;})}
    function Eg(a,b){if(b)this.a=b;else throw new t("internal-error","failed to construct a credential");M(this,"providerId",a);M(this,"signInMethod",a);}Eg.prototype.ka=function(a){return Fg(a,Gg(this))};Eg.prototype.b=function(a,b){var c=Gg(this);c.idToken=b;return Hg(a,c)};Eg.prototype.c=function(a,b){return Cg(Ig(a,Gg(this)),b)};function Gg(a){return {pendingToken:a.a,requestUri:"http://localhost"}}Eg.prototype.w=function(){return {providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}};
    function Jg(a){if(a&&a.providerId&&a.signInMethod&&0==a.providerId.indexOf("saml.")&&a.pendingToken)try{return new Eg(a.providerId,a.pendingToken)}catch(b){}return null}
    function Kg(a,b,c){this.a=null;if(b.idToken||b.accessToken)b.idToken&&M(this,"idToken",b.idToken),b.accessToken&&M(this,"accessToken",b.accessToken),b.nonce&&!b.pendingToken&&M(this,"nonce",b.nonce),b.pendingToken&&(this.a=b.pendingToken);else if(b.oauthToken&&b.oauthTokenSecret)M(this,"accessToken",b.oauthToken),M(this,"secret",b.oauthTokenSecret);else throw new t("internal-error","failed to construct a credential");M(this,"providerId",a);M(this,"signInMethod",c);}
    Kg.prototype.ka=function(a){return Fg(a,Lg(this))};Kg.prototype.b=function(a,b){var c=Lg(this);c.idToken=b;return Hg(a,c)};Kg.prototype.c=function(a,b){var c=Lg(this);return Cg(Ig(a,c),b)};
    function Lg(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;a.nonce&&!a.a&&(b.nonce=a.nonce);b={postBody:fe(b).toString(),requestUri:"http://localhost"};a.a&&(delete b.postBody,b.pendingToken=a.a);return b}
    Kg.prototype.w=function(){var a={providerId:this.providerId,signInMethod:this.signInMethod};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);this.nonce&&(a.nonce=this.nonce);this.a&&(a.pendingToken=this.a);return a};
    function Mg(a){if(a&&a.providerId&&a.signInMethod){var b={idToken:a.oauthIdToken,accessToken:a.oauthTokenSecret?null:a.oauthAccessToken,oauthTokenSecret:a.oauthTokenSecret,oauthToken:a.oauthTokenSecret&&a.oauthAccessToken,nonce:a.nonce,pendingToken:a.pendingToken};try{return new Kg(a.providerId,b,a.signInMethod)}catch(c){}}return null}function Ng(a,b){this.Qc=b||[];N(this,{providerId:a,isOAuthProvider:!0});this.Ib={};this.pb=(ng(a)||{}).Ja||null;this.ob=null;}
    Ng.prototype.Ka=function(a){this.Ib=nb(a);return this};function Og(a){if("string"!==typeof a||0!=a.indexOf("saml."))throw new t("argument-error",'SAML provider IDs must be prefixed with "saml."');Ng.call(this,a,[]);}r(Og,Ng);function Pg(a){Ng.call(this,a,lg);this.a=[];}r(Pg,Ng);Pg.prototype.Ca=function(a){Va(this.a,a)||this.a.push(a);return this};Pg.prototype.Qb=function(){return Za(this.a)};
    Pg.prototype.credential=function(a,b){var c;n(a)?c={idToken:a.idToken||null,accessToken:a.accessToken||null,nonce:a.rawNonce||null}:c={idToken:a||null,accessToken:b||null};if(!c.idToken&&!c.accessToken)throw new t("argument-error","credential failed: must provide the ID token and/or the access token.");return new Kg(this.providerId,c,this.providerId)};function Qg(){Pg.call(this,"facebook.com");}r(Qg,Pg);M(Qg,"PROVIDER_ID","facebook.com");M(Qg,"FACEBOOK_SIGN_IN_METHOD","facebook.com");
    function Rg(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;n(a)&&(b=a.accessToken);return (new Qg).credential({accessToken:b})}function Sg(){Pg.call(this,"github.com");}r(Sg,Pg);M(Sg,"PROVIDER_ID","github.com");M(Sg,"GITHUB_SIGN_IN_METHOD","github.com");
    function Tg(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;n(a)&&(b=a.accessToken);return (new Sg).credential({accessToken:b})}function Ug(){Pg.call(this,"google.com");this.Ca("profile");}r(Ug,Pg);M(Ug,"PROVIDER_ID","google.com");M(Ug,"GOOGLE_SIGN_IN_METHOD","google.com");function Vg(a,b){var c=a;n(a)&&(c=a.idToken,b=a.accessToken);return (new Ug).credential({idToken:c,accessToken:b})}function Wg(){Ng.call(this,"twitter.com",kg);}
    r(Wg,Ng);M(Wg,"PROVIDER_ID","twitter.com");M(Wg,"TWITTER_SIGN_IN_METHOD","twitter.com");function Xg(a,b){var c=a;n(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new t("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Kg("twitter.com",c,"twitter.com")}
    function Yg(a,b,c){this.a=a;this.f=b;M(this,"providerId","password");M(this,"signInMethod",c===Zg.EMAIL_LINK_SIGN_IN_METHOD?Zg.EMAIL_LINK_SIGN_IN_METHOD:Zg.EMAIL_PASSWORD_SIGN_IN_METHOD);}Yg.prototype.ka=function(a){return this.signInMethod==Zg.EMAIL_LINK_SIGN_IN_METHOD?O(a,$g,{email:this.a,oobCode:this.f}):O(a,ah,{email:this.a,password:this.f})};
    Yg.prototype.b=function(a,b){return this.signInMethod==Zg.EMAIL_LINK_SIGN_IN_METHOD?O(a,bh,{idToken:b,email:this.a,oobCode:this.f}):O(a,ch,{idToken:b,email:this.a,password:this.f})};Yg.prototype.c=function(a,b){return Cg(this.ka(a),b)};Yg.prototype.w=function(){return {email:this.a,password:this.f,signInMethod:this.signInMethod}};function dh(a){return a&&a.email&&a.password?new Yg(a.email,a.password,a.signInMethod):null}function Zg(){N(this,{providerId:"password",isOAuthProvider:!1});}
    function eh(a,b){b=fh(b);if(!b)throw new t("argument-error","Invalid email link!");return new Yg(a,b.code,Zg.EMAIL_LINK_SIGN_IN_METHOD)}function fh(a){a=xg(a);return (a=Rf(a))&&a.operation===Af?a:null}N(Zg,{PROVIDER_ID:"password"});N(Zg,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"});N(Zg,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"});function gh(a){if(!(a.eb&&a.cb||a.La&&a.ea))throw new t("internal-error");this.a=a;M(this,"providerId","phone");this.fa="phone";M(this,"signInMethod","phone");}
    gh.prototype.ka=function(a){return a.fb(hh(this))};gh.prototype.b=function(a,b){var c=hh(this);c.idToken=b;return O(a,ih,c)};gh.prototype.c=function(a,b){var c=hh(this);c.operation="REAUTH";a=O(a,jh,c);return Cg(a,b)};gh.prototype.w=function(){var a={providerId:"phone"};this.a.eb&&(a.verificationId=this.a.eb);this.a.cb&&(a.verificationCode=this.a.cb);this.a.La&&(a.temporaryProof=this.a.La);this.a.ea&&(a.phoneNumber=this.a.ea);return a};
    function kh(a){if(a&&"phone"===a.providerId&&(a.verificationId&&a.verificationCode||a.temporaryProof&&a.phoneNumber)){var b={};w(["verificationId","verificationCode","temporaryProof","phoneNumber"],function(c){a[c]&&(b[c]=a[c]);});return new gh(b)}return null}function hh(a){return a.a.La&&a.a.ea?{temporaryProof:a.a.La,phoneNumber:a.a.ea}:{sessionInfo:a.a.eb,code:a.a.cb}}
    function lh(a){try{this.a=a||firebase$1.auth();}catch(b){throw new t("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}N(this,{providerId:"phone",isOAuthProvider:!1});}
    lh.prototype.fb=function(a,b){var c=this.a.a;return E(b.verify()).then(function(d){if("string"!==typeof d)throw new t("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":var e=n(a)?a.session:null,f=n(a)?a.phoneNumber:a,g;e&&e.type==zg?g=e.Ha().then(function(h){return mh(c,{idToken:h,phoneEnrollmentInfo:{phoneNumber:f,recaptchaToken:d}})}):e&&e.type==Ag?g=e.Ha().then(function(h){return nh(c,
    {mfaPendingCredential:h,mfaEnrollmentId:a.multiFactorHint&&a.multiFactorHint.uid||a.multiFactorUid,phoneSignInInfo:{recaptchaToken:d}})}):g=oh(c,{phoneNumber:f,recaptchaToken:d});return g.then(function(h){"function"===typeof b.reset&&b.reset();return h},function(h){"function"===typeof b.reset&&b.reset();throw h;});default:throw new t("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};
    function ph(a,b){if(!a)throw new t("missing-verification-id");if(!b)throw new t("missing-verification-code");return new gh({eb:a,cb:b})}N(lh,{PROVIDER_ID:"phone"});N(lh,{PHONE_SIGN_IN_METHOD:"phone"});
    function qh(a){if(a.temporaryProof&&a.phoneNumber)return new gh({La:a.temporaryProof,ea:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret,e=a&&a.nonce,f=a&&a.oauthIdToken,g=a&&a.pendingToken;try{switch(b){case "google.com":return Vg(f,c);case "facebook.com":return Rg(c);case "github.com":return Tg(c);case "twitter.com":return Xg(c,d);default:return c||d||f||g?g?0==b.indexOf("saml.")?new Eg(b,g):new Kg(b,{pendingToken:g,idToken:a.oauthIdToken,
    accessToken:a.oauthAccessToken},b):(new Pg(b)).credential({idToken:f,accessToken:c,rawNonce:e}):null}}catch(h){return null}}function rh(a){if(!a.isOAuthProvider)throw new t("invalid-oauth-provider");}function sh(a,b,c,d,e,f,g){this.c=a;this.b=b||null;this.g=c||null;this.f=d||null;this.i=f||null;this.h=g||null;this.a=e||null;if(this.g||this.a){if(this.g&&this.a)throw new t("invalid-auth-event");if(this.g&&!this.f)throw new t("invalid-auth-event");}else throw new t("invalid-auth-event");}sh.prototype.getUid=function(){var a=[];a.push(this.c);this.b&&a.push(this.b);this.f&&a.push(this.f);this.h&&a.push(this.h);return a.join("-")};sh.prototype.T=function(){return this.h};
    sh.prototype.w=function(){return {type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};function th(a){a=a||{};return a.type?new sh(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&Aa(a.error),a.postBody,a.tenantId):null}function uh(){this.b=null;this.a=[];}var vh=null;function wh(a){var b=vh;b.a.push(a);b.b||(b.b=function(c){for(var d=0;d<b.a.length;d++)b.a[d](c);},a=L("universalLinks.subscribe",l),"function"===typeof a&&a(null,b.b));}function xh(a){var b="unauthorized-domain",c=void 0,d=J(a);a=d.a;d=d.c;"chrome-extension"==d?c=Qb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=Qb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
    t.call(this,b,c);}r(xh,t);function yh(a,b,c){t.call(this,a,c);a=b||{};a.Jb&&M(this,"email",a.Jb);a.ea&&M(this,"phoneNumber",a.ea);a.credential&&M(this,"credential",a.credential);a.Zb&&M(this,"tenantId",a.Zb);}r(yh,t);yh.prototype.w=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);this.tenantId&&(a.tenantId=this.tenantId);var b=this.credential&&this.credential.w();b&&z(a,b);return a};yh.prototype.toJSON=function(){return this.w()};
    function zh(a){if(a.code){var b=a.code||"";0==b.indexOf(xa)&&(b=b.substring(xa.length));var c={credential:qh(a),Zb:a.tenantId};if(a.email)c.Jb=a.email;else if(a.phoneNumber)c.ea=a.phoneNumber;else if(!c.credential)return new t(b,a.message||void 0);return new yh(b,c,a.message)}return null}function Ah(){}Ah.prototype.c=null;function Bh(a){return a.c||(a.c=a.b())}var Ch;function Dh(){}r(Dh,Ah);Dh.prototype.a=function(){var a=Eh(this);return a?new ActiveXObject(a):new XMLHttpRequest};Dh.prototype.b=function(){var a={};Eh(this)&&(a[0]=!0,a[1]=!0);return a};
    function Eh(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}Ch=new Dh;function Fh(){}r(Fh,Ah);Fh.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new Gh;throw Error("Unsupported browser");};Fh.prototype.b=function(){return {}};
    function Gh(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseType=this.responseText=this.response="";this.status=-1;this.statusText="";this.a.onload=q(this.qc,this);this.a.onerror=q(this.Sb,this);this.a.onprogress=q(this.rc,this);this.a.ontimeout=q(this.vc,this);}k=Gh.prototype;k.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b);};
    k.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send();};k.abort=function(){this.a.abort();};k.setRequestHeader=function(){};k.getResponseHeader=function(a){return "content-type"==a.toLowerCase()?this.a.contentType:""};k.qc=function(){this.status=200;this.response=this.responseText=this.a.responseText;Hh(this,4);};k.Sb=function(){this.status=500;this.response=this.responseText="";Hh(this,4);};k.vc=function(){this.Sb();};
    k.rc=function(){this.status=200;Hh(this,1);};function Hh(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange();}k.getAllResponseHeaders=function(){return "content-type: "+this.a.contentType};function Ih(a,b,c){this.reset(a,b,c,void 0,void 0);}Ih.prototype.a=null;Ih.prototype.reset=function(a,b,c,d,e){delete this.a;};function Kh(a){this.f=a;this.b=this.c=this.a=null;}function Lh(a,b){this.name=a;this.value=b;}Lh.prototype.toString=function(){return this.name};var Mh=new Lh("SEVERE",1E3),Nh=new Lh("WARNING",900),Oh=new Lh("CONFIG",700),Ph=new Lh("FINE",500);function Qh(a){if(a.c)return a.c;if(a.a)return Qh(a.a);Ga("Root logger has no level set.");return null}Kh.prototype.log=function(a,b,c){if(a.value>=Qh(this).value)for(oa(b)&&(b=b()),a=new Ih(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a;};var Rh={},Sh=null;
    function Th(a){Sh||(Sh=new Kh(""),Rh[""]=Sh,Sh.c=Oh);var b;if(!(b=Rh[a])){b=new Kh(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Th(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Rh[a]=b;}return b}function Uh(a,b){a&&a.log(Ph,b,void 0);}function Vh(a){this.f=a;}r(Vh,Ah);Vh.prototype.a=function(){return new Wh(this.f)};Vh.prototype.b=function(a){return function(){return a}}({});function Wh(a){H.call(this);this.u=a;this.h=void 0;this.readyState=Xh;this.status=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.l=new Headers;this.b=null;this.s="GET";this.f="";this.a=!1;this.i=Th("goog.net.FetchXmlHttp");this.m=this.c=this.g=null;}r(Wh,H);var Xh=0;k=Wh.prototype;
    k.open=function(a,b){if(this.readyState!=Xh)throw this.abort(),Error("Error reopening a connection");this.s=a;this.f=b;this.readyState=1;Yh(this);};k.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var b={headers:this.l,method:this.s,credentials:this.h,cache:void 0};a&&(b.body=a);this.u.fetch(new Request(this.f,b)).then(this.uc.bind(this),this.Ua.bind(this));};
    k.abort=function(){this.response=this.responseText="";this.l=new Headers;this.status=0;this.c&&this.c.cancel("Request was aborted.");1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,Zh(this));this.readyState=Xh;};
    k.uc=function(a){this.a&&(this.g=a,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=a.headers,this.readyState=2,Yh(this)),this.a&&(this.readyState=3,Yh(this),this.a&&("arraybuffer"===this.responseType?a.arrayBuffer().then(this.sc.bind(this),this.Ua.bind(this)):"undefined"!==typeof l.ReadableStream&&"body"in a?(this.response=this.responseText="",this.c=a.body.getReader(),this.m=new TextDecoder,$h(this)):a.text().then(this.tc.bind(this),this.Ua.bind(this)))));};
    function $h(a){a.c.read().then(a.pc.bind(a)).catch(a.Ua.bind(a));}k.pc=function(a){if(this.a){var b=this.m.decode(a.value?a.value:new Uint8Array(0),{stream:!a.done});b&&(this.response=this.responseText+=b);a.done?Zh(this):Yh(this);3==this.readyState&&$h(this);}};k.tc=function(a){this.a&&(this.response=this.responseText=a,Zh(this));};k.sc=function(a){this.a&&(this.response=a,Zh(this));};k.Ua=function(a){var b=this.i;b&&b.log(Nh,"Failed to fetch url "+this.f,a instanceof Error?a:Error(a));this.a&&Zh(this);};
    function Zh(a){a.readyState=4;a.g=null;a.c=null;a.m=null;Yh(a);}k.setRequestHeader=function(a,b){this.l.append(a,b);};k.getResponseHeader=function(a){return this.b?this.b.get(a.toLowerCase())||"":((a=this.i)&&a.log(Nh,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")};
    k.getAllResponseHeaders=function(){if(!this.b){var a=this.i;a&&a.log(Nh,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0);return ""}a=[];for(var b=this.b.entries(),c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Yh(a){a.onreadystatechange&&a.onreadystatechange.call(a);}Object.defineProperty(Wh.prototype,"withCredentials",{get:function(){return "include"===this.h},set:function(a){this.h=a?"include":"same-origin";}});function ai(a){H.call(this);this.headers=new Jd;this.D=a||null;this.c=!1;this.C=this.a=null;this.h=this.R=this.l="";this.f=this.O=this.i=this.J=!1;this.g=0;this.s=null;this.m=bi;this.u=this.S=!1;}r(ai,H);var bi="";ai.prototype.b=Th("goog.net.XhrIo");var ci=/^https?$/i,di=["POST","PUT"];
    function ei(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.l+"; newUri="+b);c=c?c.toUpperCase():"GET";a.l=b;a.h="";a.R=c;a.J=!1;a.c=!0;a.a=a.D?a.D.a():Ch.a();a.C=a.D?Bh(a.D):Bh(Ch);a.a.onreadystatechange=q(a.Vb,a);try{Uh(a.b,fi(a,"Opening Xhr")),a.O=!0,a.a.open(c,String(b),!0),a.O=!1;}catch(g){Uh(a.b,fi(a,"Error opening Xhr: "+g.message));gi(a,g);return}b=d||"";var f=new Jd(a.headers);e&&Id(e,function(g,h){f.set(h,g);});e=Ta(f.Y());d=l.FormData&&b instanceof
    l.FormData;!Va(di,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(g,h){this.a.setRequestHeader(h,g);},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.S&&(a.a.withCredentials=a.S);try{hi(a),0<a.g&&(a.u=ii(a.a),Uh(a.b,fi(a,"Will abort after "+a.g+"ms if incomplete, xhr2 "+a.u)),a.u?(a.a.timeout=a.g,a.a.ontimeout=q(a.Ma,a)):a.s=Ed(a.Ma,a.g,a)),Uh(a.b,fi(a,"Sending request")),a.i=!0,a.a.send(b),a.i=!1;}catch(g){Uh(a.b,
    fi(a,"Send error: "+g.message)),gi(a,g);}}function ii(a){return Wb&&fc(9)&&"number"===typeof a.timeout&&void 0!==a.ontimeout}function Ua(a){return "content-type"==a.toLowerCase()}k=ai.prototype;k.Ma=function(){"undefined"!=typeof ha&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Uh(this.b,fi(this,this.h)),this.dispatchEvent("timeout"),this.abort(8));};function gi(a,b){a.c=!1;a.a&&(a.f=!0,a.a.abort(),a.f=!1);a.h=b;ji(a);ki(a);}
    function ji(a){a.J||(a.J=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"));}k.abort=function(){this.a&&this.c&&(Uh(this.b,fi(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),ki(this));};k.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),ki(this,!0));ai.ab.Da.call(this);};k.Vb=function(){this.xa||(this.O||this.i||this.f?li(this):this.Jc());};k.Jc=function(){li(this);};
    function li(a){if(a.c&&"undefined"!=typeof ha)if(a.C[1]&&4==mi(a)&&2==ni(a))Uh(a.b,fi(a,"Local request error detected and ignored"));else if(a.i&&4==mi(a))Ed(a.Vb,0,a);else if(a.dispatchEvent("readystatechange"),4==mi(a)){Uh(a.b,fi(a,"Request complete"));a.c=!1;try{var b=ni(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.l).match(Md)[1]||null;if(!f&&l.self&&l.self.location){var g=l.self.location.protocol;
    f=g.substr(0,g.length-1);}e=!ci.test(f?f.toLowerCase():"");}d=e;}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else {try{var h=2<mi(a)?a.a.statusText:"";}catch(m){Uh(a.b,"Can not get status: "+m.message),h="";}a.h=h+" ["+ni(a)+"]";ji(a);}}finally{ki(a);}}}function ki(a,b){if(a.a){hi(a);var c=a.a,d=a.C[0]?la:null;a.a=null;a.C=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d;}catch(e){(a=a.b)&&a.log(Mh,"Problem encountered resetting onreadystatechange: "+e.message,void 0);}}}
    function hi(a){a.a&&a.u&&(a.a.ontimeout=null);a.s&&(l.clearTimeout(a.s),a.s=null);}function mi(a){return a.a?a.a.readyState:0}function ni(a){try{return 2<mi(a)?a.a.status:-1}catch(b){return -1}}function oi(a){try{return a.a?a.a.responseText:""}catch(b){return Uh(a.b,"Can not get responseText: "+b.message),""}}
    k.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case bi:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.b;a&&a.log(Mh,"Response type "+this.m+" is not supported on this browser",void 0);return null}catch(b){return Uh(this.b,"Can not get response: "+b.message),null}};function fi(a,b){return b+" ["+a.R+" "+a.l+" "+ni(a)+"]"}function pi(a){var b=qi;this.g=[];this.u=b;this.s=a||null;this.f=this.a=!1;this.c=void 0;this.v=this.C=this.i=!1;this.h=0;this.b=null;this.l=0;}pi.prototype.cancel=function(a){if(this.a)this.c instanceof pi&&this.c.cancel();else {if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel());}this.u?this.u.call(this.s,this):this.v=!0;this.a||(a=new ri(this),si(this),ti(this,!1,a));}};pi.prototype.m=function(a,b){this.i=!1;ti(this,a,b);};function ti(a,b,c){a.a=!0;a.c=c;a.f=!b;ui(a);}
    function si(a){if(a.a){if(!a.v)throw new vi(a);a.v=!1;}}function wi(a,b){xi(a,null,b,void 0);}function xi(a,b,c,d){a.g.push([b,c,d]);a.a&&ui(a);}pi.prototype.then=function(a,b,c){var d,e,f=new D(function(g,h){d=g;e=h;});xi(this,d,function(g){g instanceof ri?f.cancel():e(g);});return f.then(a,b,c)};pi.prototype.$goog_Thenable=!0;function yi(a){return Sa(a.g,function(b){return oa(b[1])})}
    function ui(a){if(a.h&&a.a&&yi(a)){var b=a.h,c=zi[b];c&&(l.clearTimeout(c.a),delete zi[b]);a.h=0;}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],g=e[1];e=e[2];if(f=a.f?g:f)try{var h=f.call(e||a.s,b);void 0!==h&&(a.f=a.f&&(h==b||h instanceof Error),a.c=b=h);if(Ea(b)||"function"===typeof l.Promise&&b instanceof l.Promise)d=!0,a.i=!0;}catch(m){b=m,a.f=!0,yi(a)||(c=!0);}}a.c=b;d&&(h=q(a.m,a,!0),d=q(a.m,a,!1),b instanceof pi?(xi(b,h,d),b.C=!0):b.then(h,d));c&&(b=
    new Ai(b),zi[b.a]=b,a.h=b.a);}function vi(){u.call(this);}r(vi,u);vi.prototype.message="Deferred has already fired";vi.prototype.name="AlreadyCalledError";function ri(){u.call(this);}r(ri,u);ri.prototype.message="Deferred was canceled";ri.prototype.name="CanceledError";function Ai(a){this.a=l.setTimeout(q(this.c,this),0);this.b=a;}Ai.prototype.c=function(){delete zi[this.a];throw this.b;};var zi={};function Bi(a){var c=document,d=yb(a).toString(),e=oc(document,"SCRIPT"),f={Wb:e,Ma:void 0},g=new pi(f),h=null,m=5E3;(h=window.setTimeout(function(){Ci(e,!0);var p=new Di(Ei,"Timeout reached for loading script "+d);si(g);ti(g,!1,p);},m),f.Ma=h);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(Ci(e,!1,h),si(g),ti(g,!0,null));};e.onerror=function(){Ci(e,!0,h);var p=new Di(Fi,"Error while loading script "+
    d);si(g);ti(g,!1,p);};f={};z(f,{type:"text/javascript",charset:"UTF-8"});lc(e,f);Ob(e,a);Gi(c).appendChild(e);return g}function Gi(a){var b;return (b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function qi(){if(this&&this.Wb){var a=this.Wb;a&&"SCRIPT"==a.tagName&&Ci(a,!0,this.Ma);}}
    function Ci(a,b,c){null!=c&&l.clearTimeout(c);a.onload=la;a.onerror=la;a.onreadystatechange=la;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a);},0);}var Fi=0,Ei=1;function Di(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a;}r(Di,u);function Hi(a){this.f=a;}r(Hi,Ah);Hi.prototype.a=function(){return new this.f};Hi.prototype.b=function(){return {}};
    function Ii(a,b,c){this.c=a;a=b||{};this.l=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.m=a.secureTokenTimeout||Ji;this.g=nb(a.secureTokenHeaders||Ki);this.h=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.i=a.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/";this.v=a.firebaseTimeout||Li;this.a=nb(a.firebaseHeaders||Mi);c&&(this.a["X-Client-Version"]=c,this.g["X-Client-Version"]=c);c="Node"==Ke();c=l.XMLHttpRequest||
    c&&firebase$1.INTERNAL.node&&firebase$1.INTERNAL.node.XMLHttpRequest;if(!c&&!Je())throw new t("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0;Je()?this.f=new Vh(self):Le()?this.f=new Hi(c):this.f=new Fh;this.b=null;}var Ni,Dg="idToken",Ji=new Ze(3E4,6E4),Ki={"Content-Type":"application/x-www-form-urlencoded"},Li=new Ze(3E4,6E4),Mi={"Content-Type":"application/json"};function Oi(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"];}
    function Pi(a,b){b&&(a.l=Qi("https://securetoken.googleapis.com/v1/token",b),a.h=Qi("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",b),a.i=Qi("https://identitytoolkit.googleapis.com/v2/",b));}function Qi(a,b){a=J(a);b=J(b.url);a.f=a.a+a.f;Pd(a,b.c);a.a=b.a;Qd(a,b.g);return a.toString()}function Ri(a,b){b?(a.a["X-Client-Version"]=b,a.g["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.g["X-Client-Version"]);}Ii.prototype.T=function(){return this.b};
    function Si(a,b,c,d,e,f,g){ue()||Je()?a=q(a.u,a):(Ni||(Ni=new D(function(h,m){Ti(h,m);})),a=q(a.s,a));a(b,c,d,e,f,g);}
    Ii.prototype.u=function(a,b,c,d,e,f){if(Je()&&("undefined"===typeof l.fetch||"undefined"===typeof l.Headers||"undefined"===typeof l.Request))throw new t("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var g=new ai(this.f);if(f){g.g=Math.max(0,f);var h=setTimeout(function(){g.dispatchEvent("timeout");},f);}qd(g,"complete",function(){h&&clearTimeout(h);var m=null;try{m=
    JSON.parse(oi(this))||null;}catch(p){m=null;}b&&b(m);});wd(g,"ready",function(){h&&clearTimeout(h);Xc(this);});wd(g,"timeout",function(){h&&clearTimeout(h);Xc(this);b&&b(null);});ei(g,a,c,d,e);};var Ui=new qb(rb,"https://apis.google.com/js/client.js?onload=%{onload}"),Vi="__fcb"+Math.floor(1E6*Math.random()).toString();
    function Ti(a,b){if(((window.gapi||{}).client||{}).request)a();else {l[Vi]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"));};var c=zb(Ui,{onload:Vi});wi(Bi(c),function(){b(Error("CORS_UNSUPPORTED"));});}}
    Ii.prototype.s=function(a,b,c,d,e){var f=this;Ni.then(function(){window.gapi.client.setApiKey(f.c);var g=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(h){window.gapi.auth.setToken(g);b&&b(h);}});}).o(function(g){b&&b({error:{message:g&&g.message||"CORS_UNSUPPORTED"}});});};
    function Wi(a,b){return new D(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?Si(a,a.l+"?key="+encodeURIComponent(a.c),function(e){e?e.error?d(Xi(e)):e.access_token&&e.refresh_token?c(e):d(new t("internal-error")):d(new t("network-request-failed"));},"POST",fe(b).toString(),a.g,a.m.get()):d(new t("internal-error"));})}
    function Yi(a,b,c,d,e,f,g){var h=J(b+c);I(h,"key",a.c);g&&I(h,"cb",va().toString());var m="GET"==d;if(m)for(var p in e)e.hasOwnProperty(p)&&I(h,p,e[p]);return new D(function(v,B){Si(a,h.toString(),function(A){A?A.error?B(Xi(A,f||{})):v(A):B(new t("network-request-failed"));},d,m?void 0:ke(Ve(e)),a.a,a.v.get());})}function Zi(a){a=a.email;if("string"!==typeof a||!De.test(a))throw new t("invalid-email");}function $i(a){"email"in a&&Zi(a);}
    function aj(a,b){return O(a,bj,{identifier:b,continueUri:Se()?re():"http://localhost"}).then(function(c){return c.signinMethods||[]})}function cj(a){return O(a,dj,{}).then(function(b){return b.authorizedDomains||[]})}function P(a){if(!a[Dg]){if(a.mfaPendingCredential)throw new t("multi-factor-auth-required",null,nb(a));throw new t("internal-error");}}
    function ej(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new t("internal-error");}else {if(!a.sessionInfo)throw new t("missing-verification-id");if(!a.code)throw new t("missing-verification-code");}}Ii.prototype.zb=function(){return O(this,fj,{})};Ii.prototype.Bb=function(a,b){return O(this,gj,{idToken:a,email:b})};Ii.prototype.Cb=function(a,b){return O(this,ch,{idToken:a,password:b})};var hj={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};k=Ii.prototype;
    k.Db=function(a,b){var c={idToken:a},d=[];lb(hj,function(e,f){var g=b[f];null===g?d.push(e):f in b&&(c[f]=g);});d.length&&(c.deleteAttribute=d);return O(this,gj,c)};k.vb=function(a,b){a={requestType:"PASSWORD_RESET",email:a};z(a,b);return O(this,ij,a)};k.wb=function(a,b){a={requestType:"EMAIL_SIGNIN",email:a};z(a,b);return O(this,jj,a)};k.ub=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};z(a,b);return O(this,kj,a)};
    k.Eb=function(a,b,c){a={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:a,newEmail:b};z(a,c);return O(this,lj,a)};function oh(a,b){return O(a,mj,b)}k.fb=function(a){return O(this,nj,a)};function mh(a,b){return O(a,oj,b).then(function(c){return c.phoneSessionInfo.sessionInfo})}
    function pj(a){if(!a.phoneVerificationInfo)throw new t("internal-error");if(!a.phoneVerificationInfo.sessionInfo)throw new t("missing-verification-id");if(!a.phoneVerificationInfo.code)throw new t("missing-verification-code");}function nh(a,b){return O(a,qj,b).then(function(c){return c.phoneResponseInfo.sessionInfo})}function rj(a,b,c){return O(a,sj,{idToken:b,deleteProvider:c})}function tj(a){if(!a.requestUri||!a.sessionId&&!a.postBody&&!a.pendingToken)throw new t("internal-error");}
    function uj(a,b){b.oauthIdToken&&b.providerId&&0==b.providerId.indexOf("oidc.")&&!b.pendingToken&&(a.sessionId?b.nonce=a.sessionId:a.postBody&&(a=new Ud(a.postBody),je(a,"nonce")&&(b.nonce=a.get("nonce"))));return b}
    function vj(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=zh(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=zh(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=zh(a)):a.errorMessage&&(b=wj(a.errorMessage));if(b)throw b;P(a);}function Fg(a,b){b.returnIdpCredential=!0;return O(a,xj,b)}function Hg(a,b){b.returnIdpCredential=!0;return O(a,yj,b)}
    function Ig(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return O(a,zj,b)}function Aj(a){if(!a.oobCode)throw new t("invalid-action-code");}k.nb=function(a,b){return O(this,Bj,{oobCode:a,newPassword:b})};k.Ra=function(a){return O(this,Cj,{oobCode:a})};k.jb=function(a){return O(this,Dj,{oobCode:a})};
    var Dj={endpoint:"setAccountInfo",A:Aj,Z:"email",B:!0},Cj={endpoint:"resetPassword",A:Aj,G:function(a){var b=a.requestType;if(!b||!a.email&&"EMAIL_SIGNIN"!=b&&"VERIFY_AND_CHANGE_EMAIL"!=b)throw new t("internal-error");},B:!0},Ej={endpoint:"signupNewUser",A:function(a){Zi(a);if(!a.password)throw new t("weak-password");},G:P,V:!0,B:!0},bj={endpoint:"createAuthUri",B:!0},Fj={endpoint:"deleteAccount",N:["idToken"]},sj={endpoint:"setAccountInfo",N:["idToken","deleteProvider"],A:function(a){if(!Array.isArray(a.deleteProvider))throw new t("internal-error");
    }},$g={endpoint:"emailLinkSignin",N:["email","oobCode"],A:Zi,G:P,V:!0,B:!0},bh={endpoint:"emailLinkSignin",N:["idToken","email","oobCode"],A:Zi,G:P,V:!0},Gj={endpoint:"accounts/mfaEnrollment:finalize",N:["idToken","phoneVerificationInfo"],A:pj,G:P,B:!0,Na:!0},Hj={endpoint:"accounts/mfaSignIn:finalize",N:["mfaPendingCredential","phoneVerificationInfo"],A:pj,G:P,B:!0,Na:!0},Ij={endpoint:"getAccountInfo"},jj={endpoint:"getOobConfirmationCode",N:["requestType"],A:function(a){if("EMAIL_SIGNIN"!=a.requestType)throw new t("internal-error");
    Zi(a);},Z:"email",B:!0},kj={endpoint:"getOobConfirmationCode",N:["idToken","requestType"],A:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new t("internal-error");},Z:"email",B:!0},lj={endpoint:"getOobConfirmationCode",N:["idToken","newEmail","requestType"],A:function(a){if("VERIFY_AND_CHANGE_EMAIL"!=a.requestType)throw new t("internal-error");},Z:"email",B:!0},ij={endpoint:"getOobConfirmationCode",N:["requestType"],A:function(a){if("PASSWORD_RESET"!=a.requestType)throw new t("internal-error");
    Zi(a);},Z:"email",B:!0},dj={lb:!0,endpoint:"getProjectConfig",Ub:"GET"},Jj={lb:!0,endpoint:"getRecaptchaParam",Ub:"GET",G:function(a){if(!a.recaptchaSiteKey)throw new t("internal-error");}},Bj={endpoint:"resetPassword",A:Aj,Z:"email",B:!0},mj={endpoint:"sendVerificationCode",N:["phoneNumber","recaptchaToken"],Z:"sessionInfo",B:!0},gj={endpoint:"setAccountInfo",N:["idToken"],A:$i,V:!0},ch={endpoint:"setAccountInfo",N:["idToken"],A:function(a){$i(a);if(!a.password)throw new t("weak-password");},G:P,
    V:!0},fj={endpoint:"signupNewUser",G:P,V:!0,B:!0},oj={endpoint:"accounts/mfaEnrollment:start",N:["idToken","phoneEnrollmentInfo"],A:function(a){if(!a.phoneEnrollmentInfo)throw new t("internal-error");if(!a.phoneEnrollmentInfo.phoneNumber)throw new t("missing-phone-number");if(!a.phoneEnrollmentInfo.recaptchaToken)throw new t("missing-app-credential");},G:function(a){if(!a.phoneSessionInfo||!a.phoneSessionInfo.sessionInfo)throw new t("internal-error");},B:!0,Na:!0},qj={endpoint:"accounts/mfaSignIn:start",
    N:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(a){if(!a.phoneSignInInfo||!a.phoneSignInInfo.recaptchaToken)throw new t("missing-app-credential");},G:function(a){if(!a.phoneResponseInfo||!a.phoneResponseInfo.sessionInfo)throw new t("internal-error");},B:!0,Na:!0},xj={endpoint:"verifyAssertion",A:tj,Ya:uj,G:vj,V:!0,B:!0},zj={endpoint:"verifyAssertion",A:tj,Ya:uj,G:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new t("user-not-found");if(a.errorMessage)throw wj(a.errorMessage);
    P(a);},V:!0,B:!0},yj={endpoint:"verifyAssertion",A:function(a){tj(a);if(!a.idToken)throw new t("internal-error");},Ya:uj,G:vj,V:!0},Kj={endpoint:"verifyCustomToken",A:function(a){if(!a.token)throw new t("invalid-custom-token");},G:P,V:!0,B:!0},ah={endpoint:"verifyPassword",A:function(a){Zi(a);if(!a.password)throw new t("wrong-password");},G:P,V:!0,B:!0},nj={endpoint:"verifyPhoneNumber",A:ej,G:P,B:!0},ih={endpoint:"verifyPhoneNumber",A:function(a){if(!a.idToken)throw new t("internal-error");ej(a);},
    G:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",zh(a);P(a);}},jh={Hb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:ej,G:P,B:!0},Lj={endpoint:"accounts/mfaEnrollment:withdraw",N:["idToken","mfaEnrollmentId"],G:function(a){if(!!a[Dg]^!!a.refreshToken)throw new t("internal-error");},B:!0,Na:!0};
    function O(a,b,c){if(!mf(c,b.N))return F(new t("internal-error"));var d=!!b.Na,e=b.Ub||"POST",f;return E(c).then(b.A).then(function(){b.V&&(c.returnSecureToken=!0);b.B&&a.b&&"undefined"===typeof c.tenantId&&(c.tenantId=a.b);return d?Yi(a,a.i,b.endpoint,e,c,b.Hb,b.lb||!1):Yi(a,a.h,b.endpoint,e,c,b.Hb,b.lb||!1)}).then(function(g){f=g;return b.Ya?b.Ya(c,f):f}).then(b.G).then(function(){if(!b.Z)return f;if(!(b.Z in f))throw new t("internal-error");return f[b.Z]})}
    function wj(a){return Xi({error:{errors:[{message:a}],code:400,message:a}})}
    function Xi(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new t(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
    MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",
    EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",
    OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",
    QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",
    INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",
    UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"};z(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new t(d[e],b);!b&&a&&(b=Ue(a));return new t("internal-error",b)}function Mj(a){this.b=a;this.a=null;this.rb=Nj(this);}
    function Nj(a){return Oj().then(function(){return new D(function(b,c){L("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b();}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"));},Pj.get());d.ping(e).then(e,function(){c(Error("Network Error"));});});})})}
    function Qj(a,b){return a.rb.then(function(){return new D(function(c){a.a.send(b.type,b,c,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));})})}function Rj(a,b){a.rb.then(function(){a.a.register("authEvent",b,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));});}var Sj=new qb(rb,"https://apis.google.com/js/api.js?onload=%{onload}"),Tj=new Ze(3E4,6E4),Pj=new Ze(5E3,15E3),Uj=null;
    function Oj(){return Uj?Uj:Uj=(new D(function(a,b){function c(){Ye();L("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){Ye();b(Error("Network Error"));},timeout:Tj.get()});}if(L("gapi.iframes.Iframe"))a();else if(L("gapi.load"))c();else {var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();l[d]=function(){L("gapi.load")?c():b(Error("Network Error"));};d=zb(Sj,{onload:d});E(Bi(d)).o(function(){b(Error("Network Error"));});}})).o(function(a){Uj=null;throw a;})}function Vj(a,b,c,d){this.l=a;this.h=b;this.i=c;this.g=d;this.f=null;this.g?(a=J(this.g.url),a=ce(a.c,a.a,a.g,"/emulator/auth/iframe")):a=ce("https",this.l,null,"/__/auth/iframe");this.a=a;I(this.a,"apiKey",this.h);I(this.a,"appName",this.i);this.b=null;this.c=[];}Vj.prototype.toString=function(){this.f?I(this.a,"v",this.f):ie(this.a.b,"v");this.b?I(this.a,"eid",this.b):ie(this.a.b,"eid");this.c.length?I(this.a,"fw",this.c.join(",")):ie(this.a.b,"fw");return this.a.toString()};
    function Wj(a,b,c,d,e,f){this.u=a;this.s=b;this.c=c;this.m=d;this.v=f;this.i=this.g=this.l=null;this.a=e;this.h=this.f=null;}Wj.prototype.yb=function(a){this.h=a;return this};
    Wj.prototype.toString=function(){if(this.v){var a=J(this.v.url);a=ce(a.c,a.a,a.g,"/emulator/auth/handler");}else a=ce("https",this.u,null,"/__/auth/handler");I(a,"apiKey",this.s);I(a,"appName",this.c);I(a,"authType",this.m);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase$1.app(this.c).auth().la();}catch(h){c=null;}b.ob=c;I(a,"providerId",this.a.providerId);c=this.a;b=Ve(c.Ib);for(var d in b)b[d]=b[d].toString();d=c.Qc;b=nb(b);for(var e=0;e<d.length;e++){var f=d[e];f in b&&delete b[f];}c.pb&&
    c.ob&&!b[c.pb]&&(b[c.pb]=c.ob);mb(b)||I(a,"customParameters",Ue(b));}"function"===typeof this.a.Qb&&(c=this.a.Qb(),c.length&&I(a,"scopes",c.join(",")));this.l?I(a,"redirectUrl",this.l):ie(a.b,"redirectUrl");this.g?I(a,"eventId",this.g):ie(a.b,"eventId");this.i?I(a,"v",this.i):ie(a.b,"v");if(this.b)for(var g in this.b)this.b.hasOwnProperty(g)&&!be(a,g)&&I(a,g,this.b[g]);this.h?I(a,"tid",this.h):ie(a.b,"tid");this.f?I(a,"eid",this.f):ie(a.b,"eid");g=Xj(this.c);g.length&&I(a,"fw",g.join(","));return a.toString()};
    function Xj(a){try{return firebase$1.app(a).auth().Ga()}catch(b){return []}}function Yj(a,b,c,d,e,f){this.s=a;this.g=b;this.b=c;this.f=f;this.c=d||null;this.i=e||null;this.l=this.u=this.C=null;this.h=[];this.m=this.a=null;}
    function Zj(a){var b=re();return cj(a).then(function(c){a:{var d=J(b),e=d.c;d=d.a;for(var f=0;f<c.length;f++){var g=c[f];var h=d;var m=e;0==g.indexOf("chrome-extension://")?h=J(g).a==h&&"chrome-extension"==m:"http"!=m&&"https"!=m?h=!1:Ce.test(g)?h=h==g:(g=g.split(".").join("\\."),h=(new RegExp("^(.+\\."+g+"|"+g+")$","i")).test(h));if(h){c=!0;break a}}c=!1;}if(!c)throw new xh(re());})}
    function ak(a){if(a.m)return a.m;a.m=Ee().then(function(){if(!a.u){var b=a.c,c=a.i,d=Xj(a.b),e=new Vj(a.s,a.g,a.b,a.f);e.f=b;e.b=c;e.c=Za(d||[]);a.u=e.toString();}a.v=new Mj(a.u);bk(a);});return a.m}k=Yj.prototype;k.Ob=function(a,b,c){var d=new t("popup-closed-by-user"),e=new t("web-storage-unsupported"),f=this,g=!1;return this.ma().then(function(){ck(f).then(function(h){h||(a&&ye(a),b(e),g=!0);});}).o(function(){}).then(function(){if(!g)return Be(a)}).then(function(){if(!g)return Fd(c).then(function(){b(d);})})};
    k.Xb=function(){var a=K();return !Te(a)&&!Xe(a)};k.Tb=function(){return !1};
    k.Mb=function(a,b,c,d,e,f,g,h){if(!a)return F(new t("popup-blocked"));if(g&&!Te())return this.ma().o(function(p){ye(a);e(p);}),d(),E();this.a||(this.a=Zj(dk(this)));var m=this;return this.a.then(function(){var p=m.ma().o(function(v){ye(a);e(v);throw v;});d();return p}).then(function(){rh(c);if(!g){var p=ek(m.s,m.g,m.b,b,c,null,f,m.c,void 0,m.i,h,m.f);se(p,a);}}).o(function(p){"auth/network-request-failed"==p.code&&(m.a=null);throw p;})};
    function dk(a){a.l||(a.C=a.c?Oe(a.c,Xj(a.b)):null,a.l=new Ii(a.g,Ca(a.i),a.C),a.f&&Pi(a.l,a.f));return a.l}k.Nb=function(a,b,c,d){this.a||(this.a=Zj(dk(this)));var e=this;return this.a.then(function(){rh(b);var f=ek(e.s,e.g,e.b,a,b,re(),c,e.c,void 0,e.i,d,e.f);se(f);}).o(function(f){"auth/network-request-failed"==f.code&&(e.a=null);throw f;})};k.ma=function(){var a=this;return ak(this).then(function(){return a.v.rb}).o(function(){a.a=null;throw new t("network-request-failed");})};k.$b=function(){return !0};
    function ek(a,b,c,d,e,f,g,h,m,p,v,B){a=new Wj(a,b,c,d,e,B);a.l=f;a.g=g;a.i=h;a.b=nb(m||null);a.f=p;return a.yb(v).toString()}function bk(a){if(!a.v)throw Error("IfcHandler must be initialized!");Rj(a.v,function(b){var c={};if(b&&b.authEvent){var d=!1;b=th(b.authEvent);for(c=0;c<a.h.length;c++)d=a.h[c](b)||d;c={};c.status=d?"ACK":"ERROR";return E(c)}c.status="ERROR";return E(c)});}
    function ck(a){var b={type:"webStorageSupport"};return ak(a).then(function(){return Qj(a.v,b)}).then(function(c){if(c&&c.length&&"undefined"!==typeof c[0].webStorageSupport)return c[0].webStorageSupport;throw Error();})}k.Ea=function(a){this.h.push(a);};k.Sa=function(a){Xa(this.h,function(b){return b==a});};function fk(a){this.a=a||firebase$1.INTERNAL.reactNative&&firebase$1.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new t("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage";}k=fk.prototype;k.get=function(a){return E(this.a.getItem(a)).then(function(b){return b&&We(b)})};k.set=function(a,b){return E(this.a.setItem(a,Ue(b)))};k.U=function(a){return E(this.a.removeItem(a))};k.ca=function(){};k.ia=function(){};function gk(a){this.b=a;this.a={};this.f=q(this.c,this);}var hk=[];function ik(){var a=Je()?self:null;w(hk,function(c){c.b==a&&(b=c);});if(!b){var b=new gk(a);hk.push(b);}return b}
    gk.prototype.c=function(a){var b=a.data.eventType,c=a.data.eventId,d=this.a[b];if(d&&0<d.length){a.ports[0].postMessage({status:"ack",eventId:c,eventType:b,response:null});var e=[];w(d,function(f){e.push(E().then(function(){return f(a.origin,a.data.data)}));});Jc(e).then(function(f){var g=[];w(f,function(h){g.push({fulfilled:h.Pb,value:h.value,reason:h.reason?h.reason.message:void 0});});w(g,function(h){for(var m in h)"undefined"===typeof h[m]&&delete h[m];});a.ports[0].postMessage({status:"done",eventId:c,
    eventType:b,response:g});});}};function jk(a,b,c){mb(a.a)&&a.b.addEventListener("message",a.f);"undefined"===typeof a.a[b]&&(a.a[b]=[]);a.a[b].push(c);}function kk(a){this.a=a;}kk.prototype.postMessage=function(a,b){this.a.postMessage(a,b);};function lk(a){this.c=a;this.b=!1;this.a=[];}
    function mk(a,b,c,d){var e,f=c||{},g,h,m,p=null;if(a.b)return F(Error("connection_unavailable"));var v=d?800:50,B="undefined"!==typeof MessageChannel?new MessageChannel:null;return (new D(function(A,Q){B?(e=Math.floor(Math.random()*Math.pow(10,20)).toString(),B.port1.start(),h=setTimeout(function(){Q(Error("unsupported_event"));},v),g=function(ya){ya.data.eventId===e&&("ack"===ya.data.status?(clearTimeout(h),m=setTimeout(function(){Q(Error("timeout"));},3E3)):"done"===ya.data.status?(clearTimeout(m),
    "undefined"!==typeof ya.data.response?A(ya.data.response):Q(Error("unknown_error"))):(clearTimeout(h),clearTimeout(m),Q(Error("invalid_response"))));},p={messageChannel:B,onMessage:g},a.a.push(p),B.port1.addEventListener("message",g),a.c.postMessage({eventType:b,eventId:e,data:f},[B.port2])):Q(Error("connection_unavailable"));})).then(function(A){nk(a,p);return A}).o(function(A){nk(a,p);throw A;})}
    function nk(a,b){if(b){var c=b.messageChannel,d=b.onMessage;c&&(c.port1.removeEventListener("message",d),c.port1.close());Xa(a.a,function(e){return e==b});}}lk.prototype.close=function(){for(;0<this.a.length;)nk(this,this.a[0]);this.b=!0;};function ok(){if(!pk())throw new t("web-storage-unsupported");this.c={};this.a=[];this.b=0;this.m=l.indexedDB;this.type="indexedDB";this.g=this.v=this.f=this.l=null;this.s=!1;this.h=null;var a=this;Je()&&self?(this.v=ik(),jk(this.v,"keyChanged",function(b,c){return qk(a).then(function(d){0<d.length&&w(a.a,function(e){e(d);});return {keyProcessed:Va(d,c.key)}})}),jk(this.v,"ping",function(){return E(["keyChanged"])})):ef().then(function(b){if(a.h=b)a.g=new lk(new kk(b)),mk(a.g,"ping",null,!0).then(function(c){c[0].fulfilled&&
    Va(c[0].value,"keyChanged")&&(a.s=!0);}).o(function(){});});}var rk;function sk(a){return new D(function(b,c){var d=a.m.deleteDatabase("firebaseLocalStorageDb");d.onsuccess=function(){b();};d.onerror=function(e){c(Error(e.target.error));};})}
    function tk(a){return new D(function(b,c){var d=a.m.open("firebaseLocalStorageDb",1);d.onerror=function(e){try{e.preventDefault();}catch(f){}c(Error(e.target.error));};d.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"});}catch(f){c(f);}};d.onsuccess=function(e){e=e.target.result;e.objectStoreNames.contains("firebaseLocalStorage")?b(e):sk(a).then(function(){return tk(a)}).then(function(f){b(f);}).o(function(f){c(f);});};})}
    function uk(a){a.i||(a.i=tk(a));return a.i}function vk(a,b){function c(e,f){uk(a).then(b).then(e).o(function(g){if(3<++d)f(g);else return uk(a).then(function(h){h.close();a.i=void 0;return c(e,f)}).o(function(h){f(h);})});}var d=0;return new D(c)}function pk(){try{return !!l.indexedDB}catch(a){return !1}}function wk(a){return a.objectStore("firebaseLocalStorage")}function xk(a,b){return a.transaction(["firebaseLocalStorage"],b?"readwrite":"readonly")}
    function yk(a){return new D(function(b,c){a.onsuccess=function(d){d&&d.target?b(d.target.result):b();};a.onerror=function(d){c(d.target.error);};})}k=ok.prototype;k.set=function(a,b){var c=this,d=!1;return vk(this,function(e){e=wk(xk(e,!0));return yk(e.get(a))}).then(function(e){return vk(c,function(f){f=wk(xk(f,!0));if(e)return e.value=b,yk(f.put(e));c.b++;d=!0;var g={};g.fbase_key=a;g.value=b;return yk(f.add(g))})}).then(function(){c.c[a]=b;return zk(c,a)}).oa(function(){d&&c.b--;})};
    function zk(a,b){return a.g&&a.h&&df()===a.h?mk(a.g,"keyChanged",{key:b},a.s).then(function(){}).o(function(){}):E()}k.get=function(a){return vk(this,function(b){return yk(wk(xk(b,!1)).get(a))}).then(function(b){return b&&b.value})};k.U=function(a){var b=this,c=!1;return vk(this,function(d){c=!0;b.b++;return yk(wk(xk(d,!0))["delete"](a))}).then(function(){delete b.c[a];return zk(b,a)}).oa(function(){c&&b.b--;})};
    function qk(a){return uk(a).then(function(b){var c=wk(xk(b,!1));return c.getAll?yk(c.getAll()):new D(function(d,e){var f=[],g=c.openCursor();g.onsuccess=function(h){(h=h.target.result)?(f.push(h.value),h["continue"]()):d(f);};g.onerror=function(h){e(h.target.error);};})}).then(function(b){var c={},d=[];if(0==a.b){for(d=0;d<b.length;d++)c[b[d].fbase_key]=b[d].value;d=te(a.c,c);a.c=c;}return d})}k.ca=function(a){0==this.a.length&&Ak(this);this.a.push(a);};
    k.ia=function(a){Xa(this.a,function(b){return b==a});0==this.a.length&&Bk(this);};function Ak(a){function b(){a.f=setTimeout(function(){a.l=qk(a).then(function(c){0<c.length&&w(a.a,function(d){d(c);});}).then(function(){b();}).o(function(c){"STOP_EVENT"!=c.message&&b();});},800);}Bk(a);b();}function Bk(a){a.l&&a.l.cancel("STOP_EVENT");a.f&&(clearTimeout(a.f),a.f=null);}function Ck(a){var b=this,c=null;this.a=[];this.type="indexedDB";this.c=a;this.b=E().then(function(){if(pk()){var d=Qe(),e="__sak"+d;rk||(rk=new ok);c=rk;return c.set(e,d).then(function(){return c.get(e)}).then(function(f){if(f!==d)throw Error("indexedDB not supported!");return c.U(e)}).then(function(){return c}).o(function(){return b.c})}return b.c}).then(function(d){b.type=d.type;d.ca(function(e){w(b.a,function(f){f(e);});});return d});}k=Ck.prototype;k.get=function(a){return this.b.then(function(b){return b.get(a)})};
    k.set=function(a,b){return this.b.then(function(c){return c.set(a,b)})};k.U=function(a){return this.b.then(function(b){return b.U(a)})};k.ca=function(a){this.a.push(a);};k.ia=function(a){Xa(this.a,function(b){return b==a});};function Dk(){this.a={};this.type="inMemory";}k=Dk.prototype;k.get=function(a){return E(this.a[a])};k.set=function(a,b){this.a[a]=b;return E()};k.U=function(a){delete this.a[a];return E()};k.ca=function(){};k.ia=function(){};function Ek(){if(!Fk()){if("Node"==Ke())throw new t("internal-error","The LocalStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Gk()||firebase$1.INTERNAL.node.localStorage;this.type="localStorage";}function Gk(){try{var a=l.localStorage,b=Qe();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
    function Fk(){var a="Node"==Ke();a=Gk()||a&&firebase$1.INTERNAL.node&&firebase$1.INTERNAL.node.localStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Ek.prototype;k.get=function(a){var b=this;return E().then(function(){var c=b.a.getItem(a);return We(c)})};k.set=function(a,b){var c=this;return E().then(function(){var d=Ue(b);null===d?c.U(a):c.a.setItem(a,d);})};k.U=function(a){var b=this;return E().then(function(){b.a.removeItem(a);})};
    k.ca=function(a){l.window&&nd(l.window,"storage",a);};k.ia=function(a){l.window&&xd(l.window,"storage",a);};function Hk(){this.type="nullStorage";}k=Hk.prototype;k.get=function(){return E(null)};k.set=function(){return E()};k.U=function(){return E()};k.ca=function(){};k.ia=function(){};function Ik(){if(!Jk()){if("Node"==Ke())throw new t("internal-error","The SessionStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Kk()||firebase$1.INTERNAL.node.sessionStorage;this.type="sessionStorage";}function Kk(){try{var a=l.sessionStorage,b=Qe();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
    function Jk(){var a="Node"==Ke();a=Kk()||a&&firebase$1.INTERNAL.node&&firebase$1.INTERNAL.node.sessionStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Ik.prototype;k.get=function(a){var b=this;return E().then(function(){var c=b.a.getItem(a);return We(c)})};k.set=function(a,b){var c=this;return E().then(function(){var d=Ue(b);null===d?c.U(a):c.a.setItem(a,d);})};k.U=function(a){var b=this;return E().then(function(){b.a.removeItem(a);})};k.ca=function(){};
    k.ia=function(){};function Lk(){var a={};a.Browser=Mk;a.Node=Nk;a.ReactNative=Ok;a.Worker=Pk;this.a=a[Ke()];}var Qk,Mk={F:Ek,bb:Ik},Nk={F:Ek,bb:Ik},Ok={F:fk,bb:Hk},Pk={F:Ek,bb:Hk};var Rk={rd:"local",NONE:"none",td:"session"};function Sk(a){var b=new t("invalid-persistence-type"),c=new t("unsupported-persistence-type");a:{for(d in Rk)if(Rk[d]==a){var d=!0;break a}d=!1;}if(!d||"string"!==typeof a)throw b;switch(Ke()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;case "Worker":if("session"===a||!pk()&&"none"!==a)throw c;break;default:if(!Pe()&&"none"!==a)throw c;}}
    function Tk(){var a=!Xe(K())&&Ie()?!0:!1,b=Te(),c=Pe();this.m=a;this.h=b;this.l=c;this.a={};Qk||(Qk=new Lk);a=Qk;try{this.g=!qe()&&cf()||!l.indexedDB?new a.a.F:new Ck(Je()?new Dk:new a.a.F);}catch(d){this.g=new Dk,this.h=!0;}try{this.i=new a.a.bb;}catch(d){this.i=new Dk;}this.v=new Dk;this.f=q(this.Yb,this);this.b={};}var Uk;function Vk(){Uk||(Uk=new Tk);return Uk}function Wk(a,b){switch(b){case "session":return a.i;case "none":return a.v;default:return a.g}}
    function Xk(a,b){return "firebase:"+a.name+(b?":"+b:"")}function Yk(a,b,c){var d=Xk(b,c),e=Wk(a,b.F);return a.get(b,c).then(function(f){var g=null;try{g=We(l.localStorage.getItem(d));}catch(h){}if(g&&!f)return l.localStorage.removeItem(d),a.set(b,g,c);g&&f&&"localStorage"!=e.type&&l.localStorage.removeItem(d);})}k=Tk.prototype;k.get=function(a,b){return Wk(this,a.F).get(Xk(a,b))};function Zk(a,b,c){c=Xk(b,c);"local"==b.F&&(a.b[c]=null);return Wk(a,b.F).U(c)}
    k.set=function(a,b,c){var d=Xk(a,c),e=this,f=Wk(this,a.F);return f.set(d,b).then(function(){return f.get(d)}).then(function(g){"local"==a.F&&(e.b[d]=g);})};k.addListener=function(a,b,c){a=Xk(a,b);this.l&&(this.b[a]=l.localStorage.getItem(a));mb(this.a)&&(Wk(this,"local").ca(this.f),this.h||(qe()||!cf())&&l.indexedDB||!this.l||$k(this));this.a[a]||(this.a[a]=[]);this.a[a].push(c);};
    k.removeListener=function(a,b,c){a=Xk(a,b);this.a[a]&&(Xa(this.a[a],function(d){return d==c}),0==this.a[a].length&&delete this.a[a]);mb(this.a)&&(Wk(this,"local").ia(this.f),al(this));};function $k(a){al(a);a.c=setInterval(function(){for(var b in a.a){var c=l.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new bd({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.Yb(c));}},1E3);}function al(a){a.c&&(clearInterval(a.c),a.c=null);}
    k.Yb=function(a){if(a&&a.g){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=l.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.mb(c));}else if(0==b.indexOf("firebase:")&&this.a[b]){"undefined"!==typeof a.a.a?Wk(this,"local").ia(this.f):al(this);if(this.m)if(c=l.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?l.localStorage.setItem(b,d):l.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;c=function(){if("undefined"!==
    typeof a.a.a||f.b[b]!==l.localStorage.getItem(b))f.b[b]=l.localStorage.getItem(b),f.mb(b);};Wb&&ic&&10==ic&&l.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c();}}else w(a,q(this.mb,this));};k.mb=function(a){this.a[a]&&w(this.a[a],function(b){b();});};function bl(a){this.a=a;this.b=Vk();}var cl={name:"authEvent",F:"local"};function dl(a){return a.b.get(cl,a.a).then(function(b){return th(b)})}function el(){this.a=Vk();}function fl(){this.b=-1;}function gl(a,b){this.b=hl;this.f=l.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=l.Int32Array?new Int32Array(64):Array(64);void 0===il&&(l.Int32Array?il=new Int32Array(jl):il=jl);this.reset();}var il;r(gl,fl);for(var hl=64,kl=hl-1,ll=[],ml=0;ml<kl;ml++)ll[ml]=0;var nl=Ya(128,ll);gl.prototype.reset=function(){this.g=this.c=0;this.a=l.Int32Array?new Int32Array(this.h):Za(this.h);};
    function ol(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,g=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+g|0;}d=a.a[0]|0;e=a.a[1]|0;var h=a.a[2]|0,m=a.a[3]|0,p=a.a[4]|0,v=a.a[5]|0,B=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var A=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&h^e&h)|0;g=p&v^~p&B;f=f+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<
    7))|0;g=g+(il[b]|0)|0;g=f+(g+(c[b]|0)|0)|0;f=B;B=v;v=p;p=m+g|0;m=h;h=e;e=d;d=g+A|0;}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+h|0;a.a[3]=a.a[3]+m|0;a.a[4]=a.a[4]+p|0;a.a[5]=a.a[5]+v|0;a.a[6]=a.a[6]+B|0;a.a[7]=a.a[7]+f|0;}
    function pl(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if("string"===typeof b)for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(ol(a),e=0);else if(na(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(ol(a),e=0);}else throw Error("message must be string or array");a.c=e;a.g+=c;}
    var jl=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
    4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function ql(){gl.call(this,8,rl);}r(ql,gl);var rl=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function sl(a,b,c,d,e,f){this.v=a;this.i=b;this.l=c;this.m=d||null;this.u=e||null;this.s=f;this.h=b+":"+c;this.C=new el;this.g=new bl(this.h);this.f=null;this.b=[];this.a=this.c=null;}function tl(a){return new t("invalid-cordova-configuration",a)}k=sl.prototype;
    k.ma=function(){return this.Ia?this.Ia:this.Ia=Fe().then(function(){if("function"!==typeof L("universalLinks.subscribe",l))throw tl("cordova-universal-links-plugin-fix is not installed");if("undefined"===typeof L("BuildInfo.packageName",l))throw tl("cordova-plugin-buildinfo is not installed");if("function"!==typeof L("cordova.plugins.browsertab.openUrl",l))throw tl("cordova-plugin-browsertab is not installed");if("function"!==typeof L("cordova.InAppBrowser.open",l))throw tl("cordova-plugin-inappbrowser is not installed");
    },function(){throw new t("cordova-not-ready");})};function ul(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function vl(a){var b=new ql;pl(b,a);a=[];var c=8*b.g;56>b.c?pl(b,nl,56-b.c):pl(b,nl,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;ol(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return cg(a)}
    k.Ob=function(a,b){b(new t("operation-not-supported-in-this-environment"));return E()};k.Mb=function(){return F(new t("operation-not-supported-in-this-environment"))};k.$b=function(){return !1};k.Xb=function(){return !0};k.Tb=function(){return !0};
    k.Nb=function(a,b,c,d){if(this.c)return F(new t("redirect-operation-pending"));var e=this,f=l.document,g=null,h=null,m=null,p=null;return this.c=E().then(function(){rh(b);return wl(e)}).then(function(){return xl(e,a,b,c,d)}).then(function(){return (new D(function(v,B){h=function(){var A=L("cordova.plugins.browsertab.close",l);v();"function"===typeof A&&A();e.a&&"function"===typeof e.a.close&&(e.a.close(),e.a=null);return !1};e.Ea(h);m=function(){g||(g=Fd(2E3).then(function(){B(new t("redirect-cancelled-by-user"));}));};
    p=function(){$e()&&m();};f.addEventListener("resume",m,!1);K().toLowerCase().match(/android/)||f.addEventListener("visibilitychange",p,!1);})).o(function(v){return yl(e).then(function(){throw v;})})}).oa(function(){m&&f.removeEventListener("resume",m,!1);p&&f.removeEventListener("visibilitychange",p,!1);g&&g.cancel();h&&e.Sa(h);e.c=null;})};
    function xl(a,b,c,d,e){var f=ul(),g=new sh(b,d,null,f,new t("no-auth-event"),null,e),h=L("BuildInfo.packageName",l);if("string"!==typeof h)throw new t("invalid-cordova-configuration");var m=L("BuildInfo.displayName",l),p={};if(K().toLowerCase().match(/iphone|ipad|ipod/))p.ibi=h;else if(K().toLowerCase().match(/android/))p.apn=h;else return F(new t("operation-not-supported-in-this-environment"));m&&(p.appDisplayName=m);f=vl(f);p.sessionId=f;var v=ek(a.v,a.i,a.l,b,c,null,d,a.m,p,a.u,e,a.s);return a.ma().then(function(){var B=
    a.h;return a.C.a.set(cl,g.w(),B)}).then(function(){var B=L("cordova.plugins.browsertab.isAvailable",l);if("function"!==typeof B)throw new t("invalid-cordova-configuration");var A=null;B(function(Q){if(Q){A=L("cordova.plugins.browsertab.openUrl",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");A(v);}else {A=L("cordova.InAppBrowser.open",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");Q=K();a.a=A(v,Q.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||Q.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?
    "_blank":"_system","location=yes");}});})}function zl(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b);}catch(d){}}function wl(a){a.f||(a.f=a.ma().then(function(){return new D(function(b){function c(d){b(d);a.Sa(c);return !1}a.Ea(c);Al(a);})}));return a.f}function yl(a){var b=null;return dl(a.g).then(function(c){b=c;c=a.g;return Zk(c.b,cl,c.a)}).then(function(){return b})}
    function Al(a){function b(g){d=!0;e&&e.cancel();yl(a).then(function(h){var m=c;if(h&&g&&g.url){var p=null;m=xg(g.url);-1!=m.indexOf("/__/auth/callback")&&(p=J(m),p=We(be(p,"firebaseError")||null),p=(p="object"===typeof p?Aa(p):null)?new sh(h.c,h.b,null,null,p,null,h.T()):new sh(h.c,h.b,m,h.f,null,null,h.T()));m=p||c;}zl(a,m);});}var c=new sh("unknown",null,null,null,new t("no-auth-event")),d=!1,e=Fd(500).then(function(){return yl(a).then(function(){d||zl(a,c);})}),f=l.handleOpenURL;l.handleOpenURL=function(g){0==
    g.toLowerCase().indexOf(L("BuildInfo.packageName",l).toLowerCase()+"://")&&b({url:g});if("function"===typeof f)try{f(g);}catch(h){console.error(h);}};vh||(vh=new uh);wh(b);}k.Ea=function(a){this.b.push(a);wl(this).o(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new sh("unknown",null,null,null,new t("no-auth-event")),a(b));});};k.Sa=function(a){Xa(this.b,function(b){return b==a});};function Bl(a){this.a=a;this.b=Vk();}var Cl={name:"pendingRedirect",F:"session"};function Dl(a){return a.b.set(Cl,"pending",a.a)}function El(a){return Zk(a.b,Cl,a.a)}function Fl(a){return a.b.get(Cl,a.a).then(function(b){return "pending"==b})}function Gl(a,b,c,d){this.i={};this.u=0;this.D=a;this.v=b;this.m=c;this.J=d;this.h=[];this.f=!1;this.l=q(this.s,this);this.b=new Hl;this.C=new Il;this.g=new Bl(Jl(this.v,this.m));this.c={};this.c.unknown=this.b;this.c.signInViaRedirect=this.b;this.c.linkViaRedirect=this.b;this.c.reauthViaRedirect=this.b;this.c.signInViaPopup=this.C;this.c.linkViaPopup=this.C;this.c.reauthViaPopup=this.C;this.a=Kl(this.D,this.v,this.m,Da,this.J);}
    function Kl(a,b,c,d,e){var f=firebase$1.SDK_VERSION||null;return Ge()?new sl(a,b,c,f,d,e):new Yj(a,b,c,f,d,e)}Gl.prototype.reset=function(){this.f=!1;this.a.Sa(this.l);this.a=Kl(this.D,this.v,this.m,null,this.J);this.i={};};function Ll(a){a.f||(a.f=!0,a.a.Ea(a.l));var b=a.a;return a.a.ma().o(function(c){a.a==b&&a.reset();throw c;})}
    function Ml(a){a.a.Xb()&&Ll(a).o(function(b){var c=new sh("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Nl(b)&&a.s(c);});a.a.Tb()||Ol(a.b);}function Pl(a,b){Va(a.h,b)||a.h.push(b);a.f||Fl(a.g).then(function(c){c?El(a.g).then(function(){Ll(a).o(function(d){var e=new sh("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Nl(d)&&a.s(e);});}):Ml(a);}).o(function(){Ml(a);});}function Ql(a,b){Xa(a.h,function(c){return c==b});}
    Gl.prototype.s=function(a){if(!a)throw new t("invalid-auth-event");6E5<=va()-this.u&&(this.i={},this.u=0);if(a&&a.getUid()&&this.i.hasOwnProperty(a.getUid()))return !1;for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.Fb(a.c,a.b)){if(b=this.c[a.c])b.h(a,d),a&&(a.f||a.b)&&(this.i[a.getUid()]=!0,this.u=va());b=!0;break}}Ol(this.b);return b};var Rl=new Ze(2E3,1E4),Sl=new Ze(3E4,6E4);Gl.prototype.qa=function(){return this.b.qa()};
    function Tl(a,b,c,d,e,f,g){return a.a.Mb(b,c,d,function(){a.f||(a.f=!0,a.a.Ea(a.l));},function(){a.reset();},e,f,g)}function Nl(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
    function Ul(a,b,c,d,e){var f;return Dl(a.g).then(function(){return a.a.Nb(b,c,d,e).o(function(g){if(Nl(g))throw new t("operation-not-supported-in-this-environment");f=g;return El(a.g).then(function(){throw f;})}).then(function(){return a.a.$b()?new D(function(){}):El(a.g).then(function(){return a.qa()}).then(function(){}).o(function(){})})})}function Vl(a,b,c,d,e){return a.a.Ob(d,function(f){b.na(c,null,f,e);},Rl.get())}var Wl={};function Jl(a,b,c){a=a+":"+b;c&&(a=a+":"+c.url);return a}
    function Xl(a,b,c,d){var e=Jl(b,c,d);Wl[e]||(Wl[e]=new Gl(a,b,c,d));return Wl[e]}function Hl(){this.b=null;this.f=[];this.c=[];this.a=null;this.i=this.g=!1;}Hl.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null);};
    Hl.prototype.h=function(a,b){if(a){this.reset();this.g=!0;var c=a.c,d=a.b,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;this.i=!(!e&&!f);"unknown"!=c||e||f?a.a?(Yl(this,!0,null,a.a),E()):b.Fa(c,d)?Zl(this,a,b):F(new t("invalid-auth-event")):(Yl(this,!1,null,null),E());}else F(new t("invalid-auth-event"));};function Ol(a){a.g||(a.g=!0,Yl(a,!1,null,null));}function $l(a){a.g&&!a.i&&Yl(a,!1,null,null);}
    function Zl(a,b,c){c=c.Fa(b.c,b.b);var d=b.g,e=b.f,f=b.i,g=b.T(),h=!!b.c.match(/Redirect$/);c(d,e,g,f).then(function(m){Yl(a,h,m,null);}).o(function(m){Yl(a,h,null,m);});}function am(a,b){a.b=function(){return F(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b);}function bm(a,b){a.b=function(){return E(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b);}function Yl(a,b,c,d){b?d?am(a,d):bm(a,c):bm(a,{user:null});a.f=[];a.c=[];}
    Hl.prototype.qa=function(){var a=this;return new D(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),cm(a));})};function cm(a){var b=new t("timeout");a.a&&a.a.cancel();a.a=Fd(Sl.get()).then(function(){a.b||(a.g=!0,Yl(a,!0,null,b));});}function Il(){}Il.prototype.h=function(a,b){if(a){var c=a.c,d=a.b;a.a?(b.na(a.c,null,a.a,a.b),E()):b.Fa(c,d)?dm(a,b):F(new t("invalid-auth-event"));}else F(new t("invalid-auth-event"));};
    function dm(a,b){var c=a.b,d=a.c;b.Fa(d,c)(a.g,a.f,a.T(),a.i).then(function(e){b.na(d,e,null,c);}).o(function(e){b.na(d,null,e,c);});}function em(){this.ib=!1;Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.ib},set:function(a){this.ib=a;},enumerable:!1});}function fm(a,b){this.a=b;M(this,"verificationId",a);}fm.prototype.confirm=function(a){a=ph(this.verificationId,a);return this.a(a)};function gm(a,b,c,d){return (new lh(a)).fb(b,c).then(function(e){return new fm(e,d)})}function hm(a){var b=ig(a);if(!(b&&b.exp&&b.auth_time&&b.iat))throw new t("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");N(this,{token:a,expirationTime:bf(1E3*b.exp),authTime:bf(1E3*b.auth_time),issuedAtTime:bf(1E3*b.iat),signInProvider:b.firebase&&b.firebase.sign_in_provider?b.firebase.sign_in_provider:null,signInSecondFactor:b.firebase&&b.firebase.sign_in_second_factor?b.firebase.sign_in_second_factor:null,claims:b});}
    function im(a,b,c){var d=b&&b[jm];if(!d)throw new t("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=a;this.f=nb(b);this.g=c;this.c=new yg(null,d);this.b=[];var e=this;w(b[km]||[],function(f){(f=tf(f))&&e.b.push(f);});M(this,"auth",this.a);M(this,"session",this.c);M(this,"hints",this.b);}var km="mfaInfo",jm="mfaPendingCredential";im.prototype.Rc=function(a){var b=this;return a.sb(this.a.a,this.c).then(function(c){var d=nb(b.f);delete d[km];delete d[jm];z(d,c);return b.g(d)})};function lm(a,b,c,d){t.call(this,"multi-factor-auth-required",d,b);this.b=new im(a,b,c);M(this,"resolver",this.b);}r(lm,t);function mm(a,b,c){if(a&&n(a.serverResponse)&&"auth/multi-factor-auth-required"===a.code)try{return new lm(b,a.serverResponse,c,a.message)}catch(d){}return null}function nm(){}nm.prototype.sb=function(a,b,c){return b.type==zg?om(this,a,b,c):pm(this,a,b)};function om(a,b,c,d){return c.Ha().then(function(e){e={idToken:e};"undefined"!==typeof d&&(e.displayName=d);z(e,{phoneVerificationInfo:hh(a.a)});return O(b,Gj,e)})}function pm(a,b,c){return c.Ha().then(function(d){d={mfaPendingCredential:d};z(d,{phoneVerificationInfo:hh(a.a)});return O(b,Hj,d)})}function qm(a){M(this,"factorId",a.fa);this.a=a;}r(qm,nm);
    function rm(a){qm.call(this,a);if(this.a.fa!=lh.PROVIDER_ID)throw new t("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");}r(rm,qm);function sm(a,b){G.call(this,a);for(var c in b)this[c]=b[c];}r(sm,G);function tm(a,b){this.a=a;this.b=[];this.c=q(this.yc,this);nd(this.a,"userReloaded",this.c);var c=[];b&&b.multiFactor&&b.multiFactor.enrolledFactors&&w(b.multiFactor.enrolledFactors,function(d){var e=null,f={};if(d){d.uid&&(f[qf]=d.uid);d.displayName&&(f[rf]=d.displayName);d.enrollmentTime&&(f[sf]=(new Date(d.enrollmentTime)).toISOString());d.phoneNumber&&(f[pf]=d.phoneNumber);try{e=new uf(f);}catch(g){}d=e;}else d=null;d&&c.push(d);});um(this,c);}
    function vm(a){var b=[];w(a.mfaInfo||[],function(c){(c=tf(c))&&b.push(c);});return b}k=tm.prototype;k.yc=function(a){um(this,vm(a.hd));};function um(a,b){a.b=b;M(a,"enrolledFactors",b);}k.Rb=function(){return this.a.I().then(function(a){return new yg(a,null)})};k.fc=function(a,b){var c=this,d=this.a.a;return this.Rb().then(function(e){return a.sb(d,e,b)}).then(function(e){wm(c.a,e);return c.a.reload()})};
    k.bd=function(a){var b=this,c="string"===typeof a?a:a.uid,d=this.a.a;return this.a.I().then(function(e){return O(d,Lj,{idToken:e,mfaEnrollmentId:c})}).then(function(e){var f=Qa(b.b,function(g){return g.uid!=c});um(b,f);wm(b.a,e);return b.a.reload().o(function(g){if("auth/user-token-expired"!=g.code)throw g;})})};k.w=function(){return {multiFactor:{enrolledFactors:Ra(this.b,function(a){return a.w()})}}};function xm(a,b,c){this.h=a;this.i=b;this.g=c;this.c=3E4;this.f=96E4;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}xm.prototype.start=function(){this.a=this.c;ym(this,!0);};function zm(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}function ym(a,b){a.stop();a.b=Fd(zm(a,b)).then(function(){return af()}).then(function(){return a.h()}).then(function(){ym(a,!0);}).o(function(c){a.i(c)&&ym(a,!1);});}
    xm.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null);};function Am(a){this.f=a;this.b=this.a=null;this.c=Date.now();}Am.prototype.w=function(){return {apiKey:this.f.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:this.c}};function Bm(a,b){"undefined"===typeof b&&(a.b?(b=a.b,b=b.a-b.g):b=0);a.c=Date.now()+1E3*b;}function Cm(a,b){a.b=jg(b[Dg]||"");a.a=b.refreshToken;b=b.expiresIn;Bm(a,"undefined"!==typeof b?Number(b):void 0);}function Dm(a,b){a.b=b.b;a.a=b.a;a.c=b.c;}
    function Em(a,b){return Wi(a.f,b).then(function(c){a.b=jg(c.access_token);a.a=c.refresh_token;Bm(a,c.expires_in);return {accessToken:a.b.toString(),refreshToken:a.a}}).o(function(c){"auth/user-token-expired"==c.code&&(a.a=null);throw c;})}Am.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?F(new t("user-token-expired")):a||!this.b||Date.now()>this.c-3E4?this.a?Em(this,{grant_type:"refresh_token",refresh_token:this.a}):E(null):E({accessToken:this.b.toString(),refreshToken:this.a})};function Fm(a,b){this.a=a||null;this.b=b||null;N(this,{lastSignInTime:bf(b||null),creationTime:bf(a||null)});}function Gm(a){return new Fm(a.a,a.b)}Fm.prototype.w=function(){return {lastLoginAt:this.b,createdAt:this.a}};function Hm(a,b,c,d,e,f){N(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b});}
    function Im(a,b,c){this.J=[];this.l=a.apiKey;this.m=a.appName;this.s=a.authDomain||null;var d=firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION):null;this.a=new Ii(this.l,Ca(Da),d);a.emulatorConfig&&Pi(this.a,a.emulatorConfig);this.b=new Am(this.a);Jm(this,b[Dg]);Cm(this.b,b);M(this,"refreshToken",this.b.a);Km(this,c||{});H.call(this);this.R=!1;this.s&&Re()&&(this.i=Xl(this.s,this.l,this.m));this.S=[];this.h=null;this.u=Lm(this);this.aa=q(this.hb,this);var e=this;this.ya=null;this.Oa=function(f){e.wa(f.h);};
    this.ja=null;this.Aa=function(f){Pi(e.a,f.c);};this.X=null;this.$=[];this.Ba=function(f){Mm(e,f.f);};this.ba=null;this.O=new tm(this,c);M(this,"multiFactor",this.O);}r(Im,H);Im.prototype.wa=function(a){this.ya=a;Oi(this.a,a);};Im.prototype.la=function(){return this.ya};function Nm(a,b){a.ja&&xd(a.ja,"languageCodeChanged",a.Oa);(a.ja=b)&&nd(b,"languageCodeChanged",a.Oa);}function Om(a,b){a.X&&xd(a.X,"emulatorConfigChanged",a.Aa);(a.X=b)&&nd(b,"emulatorConfigChanged",a.Aa);}
    function Mm(a,b){a.$=b;Ri(a.a,firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION,a.$):null);}Im.prototype.Ga=function(){return Za(this.$)};function Pm(a,b){a.ba&&xd(a.ba,"frameworkChanged",a.Ba);(a.ba=b)&&nd(b,"frameworkChanged",a.Ba);}Im.prototype.hb=function(){this.u.b&&(this.u.stop(),this.u.start());};function Qm(a){try{return firebase$1.app(a.m).auth()}catch(b){throw new t("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.m+"'!");}}
    function Lm(a){return new xm(function(){return a.I(!0)},function(b){return b&&"auth/network-request-failed"==b.code?!0:!1},function(){var b=a.b.c-Date.now()-3E5;return 0<b?b:0})}function Rm(a){a.D||a.u.b||(a.u.start(),xd(a,"tokenChanged",a.aa),nd(a,"tokenChanged",a.aa));}function Sm(a){xd(a,"tokenChanged",a.aa);a.u.stop();}function Jm(a,b){a.za=b;M(a,"_lat",b);}function Tm(a,b){Xa(a.S,function(c){return c==b});}
    function Um(a){for(var b=[],c=0;c<a.S.length;c++)b.push(a.S[c](a));return Jc(b).then(function(){return a})}function Vm(a){a.i&&!a.R&&(a.R=!0,Pl(a.i,a));}function Km(a,b){N(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,tenantId:b.tenantId||null,metadata:new Fm(b.createdAt,b.lastLoginAt),providerData:[]});a.a.b=a.tenantId;}M(Im.prototype,"providerId","firebase");
    function Wm(){}function Xm(a){return E().then(function(){if(a.D)throw new t("app-deleted");})}function Ym(a){return Ra(a.providerData,function(b){return b.providerId})}function Zm(a,b){b&&($m(a,b.providerId),a.providerData.push(b));}function $m(a,b){Xa(a.providerData,function(c){return c.providerId==b});}function an(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&M(a,b,c);}
    function bn(a,b){a!=b&&(N(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,tenantId:b.tenantId,providerData:[]}),b.metadata?M(a,"metadata",Gm(b.metadata)):M(a,"metadata",new Fm),w(b.providerData,function(c){Zm(a,c);}),Dm(a.b,b.b),M(a,"refreshToken",a.b.a),um(a.O,b.O.b));}k=Im.prototype;k.reload=function(){var a=this;return R(this,Xm(this).then(function(){return cn(a).then(function(){return Um(a)}).then(Wm)}))};
    function cn(a){return a.I().then(function(b){var c=a.isAnonymous;return dn(a,b).then(function(){c||an(a,"isAnonymous",!1);return b})})}k.oc=function(a){return this.I(a).then(function(b){return new hm(b)})};k.I=function(a){var b=this;return R(this,Xm(this).then(function(){return b.b.getToken(a)}).then(function(c){if(!c)throw new t("internal-error");c.accessToken!=b.za&&(Jm(b,c.accessToken),b.dispatchEvent(new sm("tokenChanged")));an(b,"refreshToken",c.refreshToken);return c.accessToken}))};
    function wm(a,b){b[Dg]&&a.za!=b[Dg]&&(Cm(a.b,b),a.dispatchEvent(new sm("tokenChanged")),Jm(a,b[Dg]),an(a,"refreshToken",a.b.a));}function dn(a,b){return O(a.a,Ij,{idToken:b}).then(q(a.Kc,a))}
    k.Kc=function(a){a=a.users;if(!a||!a.length)throw new t("internal-error");a=a[0];Km(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt,tenantId:a.tenantId});for(var b=en(a),c=0;c<b.length;c++)Zm(this,b[c]);an(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length));this.dispatchEvent(new sm("userReloaded",{hd:a}));};
    function en(a){return (a=a.providerUserInfo)&&a.length?Ra(a,function(b){return new Hm(b.rawId,b.providerId,b.email,b.displayName,b.photoUrl,b.phoneNumber)}):[]}k.Lc=function(a){gf("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");return this.tb(a)};
    k.tb=function(a){var b=this,c=null;return R(this,a.c(this.a,this.uid).then(function(d){wm(b,d);c=fn(b,d,"reauthenticate");b.h=null;return b.reload()}).then(function(){return c}),!0)};function gn(a,b){return cn(a).then(function(){if(Va(Ym(a),b))return Um(a).then(function(){throw new t("provider-already-linked");})})}k.Cc=function(a){gf("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");return this.qb(a)};
    k.qb=function(a){var b=this,c=null;return R(this,gn(this,a.providerId).then(function(){return b.I()}).then(function(d){return a.b(b.a,d)}).then(function(d){c=fn(b,d,"link");return hn(b,d)}).then(function(){return c}))};k.Dc=function(a,b){var c=this;return R(this,gn(this,"phone").then(function(){return gm(Qm(c),a,b,q(c.qb,c))}))};k.Mc=function(a,b){var c=this;return R(this,E().then(function(){return gm(Qm(c),a,b,q(c.tb,c))}),!0)};
    function fn(a,b,c){var d=qh(b);b=og(b);return kf({user:a,credential:d,additionalUserInfo:b,operationType:c})}function hn(a,b){wm(a,b);return a.reload().then(function(){return a})}k.Bb=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.Bb(c,a)}).then(function(c){wm(b,c);return b.reload()}))};k.ed=function(a){var b=this;return R(this,this.I().then(function(c){return a.b(b.a,c)}).then(function(c){wm(b,c);return b.reload()}))};
    k.Cb=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.Cb(c,a)}).then(function(c){wm(b,c);return b.reload()}))};
    k.Db=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return Xm(this);var b=this;return R(this,this.I().then(function(c){return b.a.Db(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(c){wm(b,c);an(b,"displayName",c.displayName||null);an(b,"photoURL",c.photoUrl||null);w(b.providerData,function(d){"password"===d.providerId&&(M(d,"displayName",b.displayName),M(d,"photoURL",b.photoURL));});return Um(b)}).then(Wm))};
    k.cd=function(a){var b=this;return R(this,cn(this).then(function(c){return Va(Ym(b),a)?rj(b.a,c,[a]).then(function(d){var e={};w(d.providerUserInfo||[],function(f){e[f.providerId]=!0;});w(Ym(b),function(f){e[f]||$m(b,f);});e[lh.PROVIDER_ID]||M(b,"phoneNumber",null);return Um(b)}):Um(b).then(function(){throw new t("no-such-provider");})}))};
    k.delete=function(){var a=this;return R(this,this.I().then(function(b){return O(a.a,Fj,{idToken:b})}).then(function(){a.dispatchEvent(new sm("userDeleted"));})).then(function(){for(var b=0;b<a.J.length;b++)a.J[b].cancel("app-deleted");Nm(a,null);Om(a,null);Pm(a,null);a.J=[];a.D=!0;Sm(a);M(a,"refreshToken",null);a.i&&Ql(a.i,a);})};
    k.Fb=function(a,b){return "linkViaPopup"==a&&(this.g||null)==b&&this.f||"reauthViaPopup"==a&&(this.g||null)==b&&this.f||"linkViaRedirect"==a&&(this.ga||null)==b||"reauthViaRedirect"==a&&(this.ga||null)==b?!0:!1};k.na=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.g||null)||(c&&this.C?this.C(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C);};
    k.Fa=function(a,b){return "linkViaPopup"==a&&b==(this.g||null)?q(this.Kb,this):"reauthViaPopup"==a&&b==(this.g||null)?q(this.Lb,this):"linkViaRedirect"==a&&(this.ga||null)==b?q(this.Kb,this):"reauthViaRedirect"==a&&(this.ga||null)==b?q(this.Lb,this):null};k.Ec=function(a){var b=this;return jn(this,"linkViaPopup",a,function(){return gn(b,a.providerId).then(function(){return Um(b)})},!1)};k.Nc=function(a){return jn(this,"reauthViaPopup",a,function(){return E()},!0)};
    function jn(a,b,c,d,e){if(!Re())return F(new t("operation-not-supported-in-this-environment"));if(a.h&&!e)return F(a.h);var f=ng(c.providerId),g=Qe(a.uid+":::"),h=null;(!Te()||Ie())&&a.s&&c.isOAuthProvider&&(h=ek(a.s,a.l,a.m,b,c,null,g,firebase$1.SDK_VERSION||null,null,null,a.tenantId));var m=ze(h,f&&f.ua,f&&f.ta);d=d().then(function(){kn(a);if(!e)return a.I().then(function(){})}).then(function(){return Tl(a.i,m,b,c,g,!!h,a.tenantId)}).then(function(){return new D(function(p,v){a.na(b,null,new t("cancelled-popup-request"),
    a.g||null);a.f=p;a.C=v;a.g=g;a.c=Vl(a.i,a,b,m,g);})}).then(function(p){m&&ye(m);return p?kf(p):null}).o(function(p){m&&ye(m);throw p;});return R(a,d,e)}k.Fc=function(a){var b=this;return ln(this,"linkViaRedirect",a,function(){return gn(b,a.providerId)},!1)};k.Oc=function(a){return ln(this,"reauthViaRedirect",a,function(){return E()},!0)};
    function ln(a,b,c,d,e){if(!Re())return F(new t("operation-not-supported-in-this-environment"));if(a.h&&!e)return F(a.h);var f=null,g=Qe(a.uid+":::");d=d().then(function(){kn(a);if(!e)return a.I().then(function(){})}).then(function(){a.ga=g;return Um(a)}).then(function(h){a.ha&&(h=a.ha,h=h.b.set(mn,a.w(),h.a));return h}).then(function(){return Ul(a.i,b,c,g,a.tenantId)}).o(function(h){f=h;if(a.ha)return nn(a.ha);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
    function kn(a){if(!a.i||!a.R){if(a.i&&!a.R)throw new t("internal-error");throw new t("auth-domain-config-required");}}k.Kb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null;c=this.I().then(function(g){return Hg(e.a,{requestUri:a,postBody:d,sessionId:b,idToken:g})}).then(function(g){f=fn(e,g,"link");return hn(e,g)}).then(function(){return f});return R(this,c)};
    k.Lb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null,g=E().then(function(){return Cg(Ig(e.a,{requestUri:a,sessionId:b,postBody:d,tenantId:c}),e.uid)}).then(function(h){f=fn(e,h,"reauthenticate");wm(e,h);e.h=null;return e.reload()}).then(function(){return f});return R(this,g,!0)};
    k.ub=function(a){var b=this,c=null;return R(this,this.I().then(function(d){c=d;return "undefined"===typeof a||mb(a)?{}:bg(new Sf(a))}).then(function(d){return b.a.ub(c,d)}).then(function(d){if(b.email!=d)return b.reload()}).then(function(){}))};k.Eb=function(a,b){var c=this,d=null;return R(this,this.I().then(function(e){d=e;return "undefined"===typeof b||mb(b)?{}:bg(new Sf(b))}).then(function(e){return c.a.Eb(d,a,e)}).then(function(e){if(c.email!=e)return c.reload()}).then(function(){}))};
    function R(a,b,c){var d=on(a,b,c);a.J.push(d);d.oa(function(){Wa(a.J,d);});return d.o(function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=mm(e.w(),Qm(a),q(a.jc,a)));throw f||e;})}k.jc=function(a){var b=null,c=this;a=Cg(E(a),c.uid).then(function(d){b=fn(c,d,"reauthenticate");wm(c,d);c.h=null;return c.reload()}).then(function(){return b});return R(this,a,!0)};
    function on(a,b,c){return a.h&&!c?(b.cancel(),F(a.h)):b.o(function(d){!d||"auth/user-disabled"!=d.code&&"auth/user-token-expired"!=d.code||(a.h||a.dispatchEvent(new sm("userInvalidated")),a.h=d);throw d;})}k.toJSON=function(){return this.w()};
    k.w=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.b.w(),redirectEventId:this.ga||null};this.metadata&&z(a,this.metadata.w());w(this.providerData,function(b){a.providerData.push(lf(b));});z(a,this.O.w());return a};
    function pn(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName,emulatorConfig:a.emulatorConfig},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken){c[Dg]=a.stsTokenManager.accessToken;c.refreshToken=a.stsTokenManager.refreshToken||null;var d=a.stsTokenManager.expirationTime;d&&(c.expiresIn=(d-Date.now())/1E3);}else return null;var e=new Im(b,c,a);a.providerData&&w(a.providerData,function(f){f&&Zm(e,kf(f));});a.redirectEventId&&(e.ga=a.redirectEventId);
    return e}function qn(a,b,c,d){var e=new Im(a,b);c&&(e.ha=c);d&&Mm(e,d);return e.reload().then(function(){return e})}function rn(a,b,c,d){var e=a.b,f={};f[Dg]=e.b&&e.b.toString();f.refreshToken=e.a;b=new Im(b||{apiKey:a.l,authDomain:a.s,appName:a.m},f);c&&(b.ha=c);d&&Mm(b,d);bn(b,a);return b}function sn(a){this.a=a;this.b=Vk();}var mn={name:"redirectUser",F:"session"};function nn(a){return Zk(a.b,mn,a.a)}function tn(a,b){return a.b.get(mn,a.a).then(function(c){c&&b&&(c.authDomain=b);return pn(c||{})})}function un(a){this.a=a;this.b=Vk();this.c=null;this.f=vn(this);this.b.addListener(wn("local"),this.a,q(this.g,this));}un.prototype.g=function(){var a=this,b=wn("local");xn(this,function(){return E().then(function(){return a.c&&"local"!=a.c.F?a.b.get(b,a.a):null}).then(function(c){if(c)return yn(a,"local").then(function(){a.c=b;})})});};function yn(a,b){var c=[],d;for(d in Rk)Rk[d]!==b&&c.push(Zk(a.b,wn(Rk[d]),a.a));c.push(Zk(a.b,zn,a.a));return Ic(c)}
    function vn(a){var b=wn("local"),c=wn("session"),d=wn("none");return Yk(a.b,b,a.a).then(function(){return a.b.get(c,a.a)}).then(function(e){return e?c:a.b.get(d,a.a).then(function(f){return f?d:a.b.get(b,a.a).then(function(g){return g?b:a.b.get(zn,a.a).then(function(h){return h?wn(h):b})})})}).then(function(e){a.c=e;return yn(a,e.F)}).o(function(){a.c||(a.c=b);})}var zn={name:"persistence",F:"session"};function wn(a){return {name:"authUser",F:a}}
    un.prototype.xb=function(a){var b=null,c=this;Sk(a);return xn(this,function(){return a!=c.c.F?c.b.get(c.c,c.a).then(function(d){b=d;return yn(c,a)}).then(function(){c.c=wn(a);if(b)return c.b.set(c.c,b,c.a)}):E()})};function An(a){return xn(a,function(){return a.b.set(zn,a.c.F,a.a)})}function Bn(a,b){return xn(a,function(){return a.b.set(a.c,b.w(),a.a)})}function Cn(a){return xn(a,function(){return Zk(a.b,a.c,a.a)})}
    function Dn(a,b,c){return xn(a,function(){return a.b.get(a.c,a.a).then(function(d){d&&b&&(d.authDomain=b);d&&c&&(d.emulatorConfig=c);return pn(d||{})})})}function xn(a,b){a.f=a.f.then(b,b);return a.f}function En(a){this.l=!1;M(this,"settings",new em);M(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION):null,this.a=new Ii(S(this).options&&S(this).options.apiKey,Ca(Da),a);else throw new t("invalid-api-key");this.R=[];this.s=[];this.O=[];this.hb=firebase$1.INTERNAL.createSubscribe(q(this.zc,this));this.X=void 0;this.bc=firebase$1.INTERNAL.createSubscribe(q(this.Ac,this));Fn(this,null);this.i=new un(S(this).options.apiKey+":"+S(this).name);this.D=
    new sn(S(this).options.apiKey+":"+S(this).name);this.$=T(this,Gn(this));this.h=T(this,Hn(this));this.ba=!1;this.ja=q(this.Zc,this);this.Ba=q(this.da,this);this.ya=q(this.mc,this);this.za=q(this.wc,this);this.Aa=q(this.xc,this);this.b=null;In(this);this.INTERNAL={};this.INTERNAL["delete"]=q(this.delete,this);this.INTERNAL.logFramework=q(this.Gc,this);this.u=0;H.call(this);Jn(this);this.J=[];this.P=null;}r(En,H);function Kn(a){G.call(this,"languageCodeChanged");this.h=a;}r(Kn,G);
    function Ln(a){G.call(this,"emulatorConfigChanged");this.c=a;}r(Ln,G);function Mn(a){G.call(this,"frameworkChanged");this.f=a;}r(Mn,G);k=En.prototype;k.xb=function(a){a=this.i.xb(a);return T(this,a)};k.wa=function(a){this.aa===a||this.l||(this.aa=a,Oi(this.a,this.aa),this.dispatchEvent(new Kn(this.la())));};k.la=function(){return this.aa};k.fd=function(){var a=l.navigator;this.wa(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null);};
    k.gd=function(a,b){if(!this.P){if(!/^https?:\/\//.test(a))throw new t("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");b=b?!!b.disableWarnings:!1;Nn(b);this.P={url:a,ec:b};this.settings.ib=!0;Pi(this.a,this.P);this.dispatchEvent(new Ln(this.P));}};
    function Nn(a){"undefined"!==typeof console&&"function"===typeof console.info&&console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");l.document&&!a&&Ee().then(function(){var b=l.document.createElement("div");b.innerText="Running in emulator mode. Do not use with production credentials.";b.style.position="fixed";b.style.width="100%";b.style.backgroundColor="#ffffff";b.style.border=".1em solid #000000";b.style.color=
    "#ff0000";b.style.bottom="0px";b.style.left="0px";b.style.margin="0px";b.style.zIndex=1E4;b.style.textAlign="center";b.classList.add("firebase-emulator-warning");l.document.body.appendChild(b);});}k.Gc=function(a){this.J.push(a);Ri(this.a,firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION,this.J):null);this.dispatchEvent(new Mn(this.J));};k.Ga=function(){return Za(this.J)};k.yb=function(a){this.S===a||this.l||(this.S=a,this.a.b=this.S);};k.T=function(){return this.S};
    function Jn(a){Object.defineProperty(a,"lc",{get:function(){return this.la()},set:function(b){this.wa(b);},enumerable:!1});a.aa=null;Object.defineProperty(a,"ti",{get:function(){return this.T()},set:function(b){this.yb(b);},enumerable:!1});a.S=null;Object.defineProperty(a,"emulatorConfig",{get:function(){if(this.P){var b=J(this.P.url);b=kf({protocol:b.c,host:b.a,port:b.g,options:kf({disableWarnings:this.P.ec})});}else b=null;return b},enumerable:!1});}
    k.toJSON=function(){return {apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).w()}};function On(a){return a.Oa||F(new t("auth-domain-config-required"))}
    function In(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&Re()&&(a.Oa=a.$.then(function(){if(!a.l){a.b=Xl(b,c,S(a).name,a.P);Pl(a.b,a);U(a)&&Vm(U(a));if(a.m){Vm(a.m);var d=a.m;d.wa(a.la());Nm(d,a);d=a.m;Mm(d,a.J);Pm(d,a);d=a.m;Pi(d.a,a.P);Om(d,a);a.m=null;}return a.b}}));}k.Fb=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return !0;case "signInViaPopup":return this.g==b&&!!this.f;default:return !1}};
    k.na=function(a,b,c,d){"signInViaPopup"==a&&this.g==d&&(c&&this.C?this.C(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C);};k.Fa=function(a,b){return "signInViaRedirect"==a||"signInViaPopup"==a&&this.g==b&&this.f?q(this.ic,this):null};k.ic=function(a,b,c,d){var e=this,f={requestUri:a,postBody:d,sessionId:b,tenantId:c};this.c&&(this.c.cancel(),this.c=null);return e.$.then(function(){return Pn(e,Fg(e.a,f))})};
    k.Xc=function(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=this,c=ng(a.providerId),d=Qe(),e=null;(!Te()||Ie())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=ek(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase$1.SDK_VERSION||null,null,null,this.T(),this.P));var f=ze(e,c&&c.ua,c&&c.ta);c=On(this).then(function(g){return Tl(g,f,"signInViaPopup",a,d,!!e,b.T())}).then(function(){return new D(function(g,h){b.na("signInViaPopup",
    null,new t("cancelled-popup-request"),b.g);b.f=g;b.C=h;b.g=d;b.c=Vl(b.b,b,"signInViaPopup",f,d);})}).then(function(g){f&&ye(f);return g?kf(g):null}).o(function(g){f&&ye(f);throw g;});return T(this,c)};k.Yc=function(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=this,c=On(this).then(function(){return An(b.i)}).then(function(){return Ul(b.b,"signInViaRedirect",a,void 0,b.T())});return T(this,c)};
    function Qn(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=On(a).then(function(){return a.b.qa()}).then(function(c){return c?kf(c):null});return T(a,b)}k.qa=function(){var a=this;return Qn(this).then(function(b){a.b&&$l(a.b.b);return b}).o(function(b){a.b&&$l(a.b.b);throw b;})};
    k.dd=function(a){if(!a)return F(new t("null-user"));if(this.S!=a.tenantId)return F(new t("tenant-id-mismatch"));var b=this,c={};c.apiKey=S(this).options.apiKey;c.authDomain=S(this).options.authDomain;c.appName=S(this).name;var d=rn(a,c,b.D,b.Ga());return T(this,this.h.then(function(){if(S(b).options.apiKey!=a.l)return d.reload()}).then(function(){if(U(b)&&a.uid==U(b).uid)return bn(U(b),a),b.da(a);Fn(b,d);Vm(d);return b.da(d)}).then(function(){Rn(b);}))};
    function Sn(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;a.P&&(c.emulatorConfig=a.P);return a.$.then(function(){return qn(c,b,a.D,a.Ga())}).then(function(d){if(U(a)&&d.uid==U(a).uid)return bn(U(a),d),a.da(d);Fn(a,d);Vm(d);return a.da(d)}).then(function(){Rn(a);})}
    function Fn(a,b){U(a)&&(Tm(U(a),a.Ba),xd(U(a),"tokenChanged",a.ya),xd(U(a),"userDeleted",a.za),xd(U(a),"userInvalidated",a.Aa),Sm(U(a)));b&&(b.S.push(a.Ba),nd(b,"tokenChanged",a.ya),nd(b,"userDeleted",a.za),nd(b,"userInvalidated",a.Aa),0<a.u&&Rm(b));M(a,"currentUser",b);b&&(b.wa(a.la()),Nm(b,a),Mm(b,a.J),Pm(b,a),Pi(b.a,a.P),Om(b,a));}k.Ab=function(){var a=this,b=this.h.then(function(){a.b&&$l(a.b.b);if(!U(a))return E();Fn(a,null);return Cn(a.i).then(function(){Rn(a);})});return T(this,b)};
    function Tn(a){var b=tn(a.D,S(a).options.authDomain).then(function(c){if(a.m=c)c.ha=a.D;return nn(a.D)});return T(a,b)}function Gn(a){var b=S(a).options.authDomain,c=Tn(a).then(function(){return Dn(a.i,b,a.P)}).then(function(d){return d?(d.ha=a.D,a.m&&(a.m.ga||null)==(d.ga||null)?d:d.reload().then(function(){return Bn(a.i,d).then(function(){return d})}).o(function(e){return "auth/network-request-failed"==e.code?d:Cn(a.i)})):null}).then(function(d){Fn(a,d||null);});return T(a,c)}
    function Hn(a){return a.$.then(function(){return Qn(a)}).o(function(){}).then(function(){if(!a.l)return a.ja()}).o(function(){}).then(function(){if(!a.l){a.ba=!0;var b=a.i;b.b.addListener(wn("local"),b.a,a.ja);}})}
    k.Zc=function(){var a=this;return Dn(this.i,S(this).options.authDomain).then(function(b){if(!a.l){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d;}if(c)return bn(U(a),b),U(a).I();if(U(a)||b)Fn(a,b),b&&(Vm(b),b.ha=a.D),a.b&&Pl(a.b,a),Rn(a);}})};k.da=function(a){return Bn(this.i,a)};k.mc=function(){Rn(this);this.da(U(this));};k.wc=function(){this.Ab();};k.xc=function(){this.Ab();};
    function Pn(a,b){var c=null,d=null;return T(a,b.then(function(e){c=qh(e);d=og(e);return Sn(a,e)},function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=mm(e.w(),a,q(a.kc,a)));throw f||e;}).then(function(){return kf({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}k.kc=function(a){var b=this;return this.h.then(function(){return Pn(b,E(a))})};k.zc=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b));});};
    k.Ac=function(a){var b=this;Un(this,function(){a.next(U(b));});};k.Ic=function(a,b,c){var d=this;this.ba&&Promise.resolve().then(function(){"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.hb(a,b,c)};k.Hc=function(a,b,c){var d=this;this.ba&&Promise.resolve().then(function(){d.X=d.getUid();"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.bc(a,b,c)};
    k.nc=function(a){var b=this,c=this.h.then(function(){return U(b)?U(b).I(a).then(function(d){return {accessToken:d}}):null});return T(this,c)};k.Tc=function(a){var b=this;return this.h.then(function(){return Pn(b,O(b.a,Kj,{token:a}))}).then(function(c){var d=c.user;an(d,"isAnonymous",!1);b.da(d);return c})};k.Uc=function(a,b){var c=this;return this.h.then(function(){return Pn(c,O(c.a,ah,{email:a,password:b}))})};
    k.dc=function(a,b){var c=this;return this.h.then(function(){return Pn(c,O(c.a,Ej,{email:a,password:b}))})};k.$a=function(a){var b=this;return this.h.then(function(){return Pn(b,a.ka(b.a))})};k.Sc=function(a){gf("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");return this.$a(a)};
    k.zb=function(){var a=this;return this.h.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=kf({providerId:null,isNewUser:!1});return kf({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return Pn(a,a.a.zb()).then(function(d){var e=d.user;an(e,"isAnonymous",!0);a.da(e);return d})})};function S(a){return a.app}function U(a){return a.currentUser}k.getUid=function(){return U(this)&&U(this).uid||null};function Vn(a){return U(a)&&U(a)._lat||null}
    function Rn(a){if(a.ba){for(var b=0;b<a.s.length;b++)if(a.s[b])a.s[b](Vn(a));if(a.X!==a.getUid()&&a.O.length)for(a.X=a.getUid(),b=0;b<a.O.length;b++)if(a.O[b])a.O[b](Vn(a));}}k.cc=function(a){this.addAuthTokenListener(a);this.u++;0<this.u&&U(this)&&Rm(U(this));};k.Pc=function(a){var b=this;w(this.s,function(c){c==a&&b.u--;});0>this.u&&(this.u=0);0==this.u&&U(this)&&Sm(U(this));this.removeAuthTokenListener(a);};
    k.addAuthTokenListener=function(a){var b=this;this.s.push(a);T(this,this.h.then(function(){b.l||Va(b.s,a)&&a(Vn(b));}));};k.removeAuthTokenListener=function(a){Xa(this.s,function(b){return b==a});};function Un(a,b){a.O.push(b);T(a,a.h.then(function(){!a.l&&Va(a.O,b)&&a.X!==a.getUid()&&(a.X=a.getUid(),b(Vn(a)));}));}
    k.delete=function(){this.l=!0;for(var a=0;a<this.R.length;a++)this.R[a].cancel("app-deleted");this.R=[];this.i&&(a=this.i,a.b.removeListener(wn("local"),a.a,this.ja));this.b&&(Ql(this.b,this),$l(this.b.b));return Promise.resolve()};function T(a,b){a.R.push(b);b.oa(function(){Wa(a.R,b);});return b}k.hc=function(a){return T(this,aj(this.a,a))};k.Bc=function(a){return !!fh(a)};
    k.wb=function(a,b){var c=this;return T(this,E().then(function(){var d=new Sf(b);if(!d.c)throw new t("argument-error",$f+" must be true when sending sign in link to email");return bg(d)}).then(function(d){return c.a.wb(a,d)}).then(function(){}))};k.jd=function(a){return this.Ra(a).then(function(b){return b.data.email})};k.nb=function(a,b){return T(this,this.a.nb(a,b).then(function(){}))};k.Ra=function(a){return T(this,this.a.Ra(a).then(function(b){return new vf(b)}))};
    k.jb=function(a){return T(this,this.a.jb(a).then(function(){}))};k.vb=function(a,b){var c=this;return T(this,E().then(function(){return "undefined"===typeof b||mb(b)?{}:bg(new Sf(b))}).then(function(d){return c.a.vb(a,d)}).then(function(){}))};k.Wc=function(a,b){return T(this,gm(this,a,b,q(this.$a,this)))};
    k.Vc=function(a,b){var c=this;return T(this,E().then(function(){var d=b||re(),e=eh(a,d);d=fh(d);if(!d)throw new t("argument-error","Invalid email link!");if(d.tenantId!==c.T())throw new t("tenant-id-mismatch");return c.$a(e)}))};function Wn(){}Wn.prototype.render=function(){};Wn.prototype.reset=function(){};Wn.prototype.getResponse=function(){};Wn.prototype.execute=function(){};function Xn(){this.a={};this.b=1E12;}var Yn=null;Xn.prototype.render=function(a,b){this.a[this.b.toString()]=new Zn(a,b);return this.b++};Xn.prototype.reset=function(a){var b=$n(this,a);a=ao(a);b&&a&&(b.delete(),delete this.a[a]);};Xn.prototype.getResponse=function(a){return (a=$n(this,a))?a.getResponse():null};Xn.prototype.execute=function(a){(a=$n(this,a))&&a.execute();};function $n(a,b){return (b=ao(b))?a.a[b]||null:null}function ao(a){return (a="undefined"===typeof a?1E12:a)?a.toString():null}
    function Zn(a,b){this.g=!1;this.c=b;this.a=this.b=null;this.h="invisible"!==this.c.size;this.f=kc(a);var c=this;this.i=function(){c.execute();};this.h?this.execute():nd(this.f,"click",this.i);}Zn.prototype.getResponse=function(){bo(this);return this.b};
    Zn.prototype.execute=function(){bo(this);var a=this;this.a||(this.a=setTimeout(function(){a.b=Me();var b=a.c.callback,c=a.c["expired-callback"];if(b)try{b(a.b);}catch(d){}a.a=setTimeout(function(){a.a=null;a.b=null;if(c)try{c();}catch(d){}a.h&&a.execute();},6E4);},500));};Zn.prototype.delete=function(){bo(this);this.g=!0;clearTimeout(this.a);this.a=null;xd(this.f,"click",this.i);};function bo(a){if(a.g)throw Error("reCAPTCHA mock was already deleted!");}function co(){}M(co,"FACTOR_ID","phone");function eo(){}eo.prototype.g=function(){Yn||(Yn=new Xn);return E(Yn)};eo.prototype.c=function(){};var fo=null;function go(){this.b=l.grecaptcha?Infinity:0;this.f=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString();}var ho=new qb(rb,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),io=new Ze(3E4,6E4);
    go.prototype.g=function(a){var b=this;return new D(function(c,d){var e=setTimeout(function(){d(new t("network-request-failed"));},io.get());if(!l.grecaptcha||a!==b.f&&!b.b){l[b.a]=function(){if(l.grecaptcha){b.f=a;var g=l.grecaptcha.render;l.grecaptcha.render=function(h,m){h=g(h,m);b.b++;return h};clearTimeout(e);c(l.grecaptcha);}else clearTimeout(e),d(new t("internal-error"));delete l[b.a];};var f=zb(ho,{onload:b.a,hl:a||""});E(Bi(f)).o(function(){clearTimeout(e);d(new t("internal-error","Unable to load external reCAPTCHA dependencies!"));});}else clearTimeout(e),
    c(l.grecaptcha);})};go.prototype.c=function(){this.b--;};var jo=null;function ko(a,b,c,d,e,f,g){M(this,"type","recaptcha");this.c=this.f=null;this.D=!1;this.v=b;this.g=null;g?(fo||(fo=new eo),g=fo):(jo||(jo=new go),g=jo);this.m=g;this.a=c||{theme:"light",type:"image"};this.h=[];if(this.a[lo])throw new t("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.i="invisible"===this.a[mo];if(!l.document)throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
    if(!kc(b)||!this.i&&kc(b).hasChildNodes())throw new t("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new Ii(a,f||null,e||null);this.u=d||function(){return null};var h=this;this.l=[];var m=this.a[no];this.a[no]=function(v){oo(h,v);if("function"===typeof m)m(v);else if("string"===typeof m){var B=L(m,l);"function"===typeof B&&B(v);}};var p=this.a[po];this.a[po]=function(){oo(h,null);if("function"===typeof p)p();else if("string"===typeof p){var v=
    L(p,l);"function"===typeof v&&v();}};}var no="callback",po="expired-callback",lo="sitekey",mo="size";function oo(a,b){for(var c=0;c<a.l.length;c++)try{a.l[c](b);}catch(d){}}function qo(a,b){Xa(a.l,function(c){return c==b});}function ro(a,b){a.h.push(b);b.oa(function(){Wa(a.h,b);});return b}k=ko.prototype;
    k.Ia=function(){var a=this;return this.f?this.f:this.f=ro(this,E().then(function(){if(Se()&&!Je())return Ee();throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return a.m.g(a.u())}).then(function(b){a.g=b;return O(a.s,Jj,{})}).then(function(b){a.a[lo]=b.recaptchaSiteKey;}).o(function(b){a.f=null;throw b;}))};
    k.render=function(){so(this);var a=this;return ro(this,this.Ia().then(function(){if(null===a.c){var b=a.v;if(!a.i){var c=kc(b);b=nc("DIV");c.appendChild(b);}a.c=a.g.render(b,a.a);}return a.c}))};k.verify=function(){so(this);var a=this;return ro(this,this.render().then(function(b){return new D(function(c){var d=a.g.getResponse(b);if(d)c(d);else {var e=function(f){f&&(qo(a,e),c(f));};a.l.push(e);a.i&&a.g.execute(a.c);}})}))};k.reset=function(){so(this);null!==this.c&&this.g.reset(this.c);};
    function so(a){if(a.D)throw new t("internal-error","RecaptchaVerifier instance has been destroyed.");}k.clear=function(){so(this);this.D=!0;this.m.c();for(var a=0;a<this.h.length;a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){a=kc(this.v);for(var b;b=a.firstChild;)a.removeChild(b);}};
    function to(a,b,c){var d=!1;try{this.b=c||firebase$1.app();}catch(g){throw new t("argument-error","No firebase.app.App instance is currently initialized.");}if(this.b.options&&this.b.options.apiKey)c=this.b.options.apiKey;else throw new t("invalid-api-key");var e=this,f=null;try{f=this.b.auth().Ga();}catch(g){}try{d=this.b.auth().settings.appVerificationDisabledForTesting;}catch(g){}f=firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION,f):null;ko.call(this,c,a,b,function(){try{var g=e.b.auth().la();}catch(h){g=
    null;}return g},f,Ca(Da),d);}r(to,ko);function uo(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,g=0;g<b.length;g++)if(b[g].optional)f=!0;else {if(f)throw new t("internal-error","Argument validator encountered a required argument after an optional argument.");e++;}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else {for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].M(c[e])&&!f){b=b[e];if(0>e||e>=vo.length)throw new t("internal-error",
    "Argument validator received an unsupported number of arguments.");c=vo[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.K+".";break a}d=null;}}if(d)throw new t("argument-error",a+" failed: "+d);}var vo="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return {name:a||"",K:"a valid string",optional:!!b,M:function(c){return "string"===typeof c}}}
    function wo(a,b){return {name:a||"",K:"a boolean",optional:!!b,M:function(c){return "boolean"===typeof c}}}function W(a,b){return {name:a||"",K:"a valid object",optional:!!b,M:n}}function xo(a,b){return {name:a||"",K:"a function",optional:!!b,M:function(c){return "function"===typeof c}}}function yo(a,b){return {name:a||"",K:"null",optional:!!b,M:function(c){return null===c}}}function zo(){return {name:"",K:"an HTML element",optional:!1,M:function(a){return !!(a&&a instanceof Element)}}}
    function Ao(){return {name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(a){return !!(a&&a instanceof En)}}}function Bo(){return {name:"app",K:"an instance of Firebase App",optional:!0,M:function(a){return !!(a&&a instanceof firebase$1.app.App)}}}function Co(a){return {name:a?a+"Credential":"credential",K:a?"a valid "+a+" credential":"a valid credential",optional:!1,M:function(b){if(!b)return !1;var c=!a||b.providerId===a;return !(!b.ka||!c)}}}
    function Do(){return {name:"multiFactorAssertion",K:"a valid multiFactorAssertion",optional:!1,M:function(a){return a?!!a.sb:!1}}}function Eo(){return {name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(a){return !!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function Fo(a,b){return n(a)&&"string"===typeof a.type&&a.type===b&&"function"===typeof a.Ha}function Go(a){return n(a)&&"string"===typeof a.uid}
    function Ho(){return {name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(a){return !(!a||"string"!==typeof a.type||"function"!==typeof a.verify)}}}function X(a,b,c,d){return {name:c||"",K:a.K+" or "+b.K,optional:!!d,M:function(e){return a.M(e)||b.M(e)}}}function Y(a,b){for(var c in b){var d=b[c].name;a[d]=Io(d,a[c],b[c].j);}}function Jo(a,b){for(var c in b){var d=b[c].name;d!==c&&Object.defineProperty(a,d,{get:ua(function(e){return this[e]},c),set:ua(function(e,f,g,h){uo(e,[g],[h],!0);this[f]=h;},d,c,b[c].kb),enumerable:!0});}}function Z(a,b,c,d){a[b]=Io(b,c,d);}
    function Io(a,b,c){function d(){var g=Array.prototype.slice.call(arguments);uo(e,c,g);return b.apply(this,g)}if(!c)return b;var e=Ko(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function Ko(a){a=a.split(".");return a[a.length-1]}Y(En.prototype,{jb:{name:"applyActionCode",j:[V("code")]},Ra:{name:"checkActionCode",j:[V("code")]},nb:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},hc:{name:"fetchSignInMethodsForEmail",j:[V("email")]},qa:{name:"getRedirectResult",j:[]},Bc:{name:"isSignInWithEmailLink",j:[V("emailLink")]},Hc:{name:"onAuthStateChanged",j:[X(W(),xo(),"nextOrObserver"),xo("opt_error",!0),xo("opt_completed",!0)]},Ic:{name:"onIdTokenChanged",
    j:[X(W(),xo(),"nextOrObserver"),xo("opt_error",!0),xo("opt_completed",!0)]},vb:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),yo(null,!0),"opt_actionCodeSettings",!0)]},wb:{name:"sendSignInLinkToEmail",j:[V("email"),W("actionCodeSettings")]},xb:{name:"setPersistence",j:[V("persistence")]},Sc:{name:"signInAndRetrieveDataWithCredential",j:[Co()]},zb:{name:"signInAnonymously",j:[]},$a:{name:"signInWithCredential",j:[Co()]},Tc:{name:"signInWithCustomToken",j:[V("token")]},
    Uc:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Vc:{name:"signInWithEmailLink",j:[V("email"),V("emailLink",!0)]},Wc:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),Ho()]},Xc:{name:"signInWithPopup",j:[Eo()]},Yc:{name:"signInWithRedirect",j:[Eo()]},dd:{name:"updateCurrentUser",j:[X(function(a){return {name:"user",K:"an instance of Firebase User",optional:!!a,M:function(b){return !!(b&&b instanceof Im)}}}(),yo(),"user")]},Ab:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,
    !0)]},fd:{name:"useDeviceLanguage",j:[]},gd:{name:"useEmulator",j:[V("url"),W("options",!0)]},jd:{name:"verifyPasswordResetCode",j:[V("code")]}});Jo(En.prototype,{lc:{name:"languageCode",kb:X(V(),yo(),"languageCode")},ti:{name:"tenantId",kb:X(V(),yo(),"tenantId")}});En.Persistence=Rk;En.Persistence.LOCAL="local";En.Persistence.SESSION="session";En.Persistence.NONE="none";
    Y(Im.prototype,{"delete":{name:"delete",j:[]},oc:{name:"getIdTokenResult",j:[wo("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[wo("opt_forceRefresh",!0)]},Cc:{name:"linkAndRetrieveDataWithCredential",j:[Co()]},qb:{name:"linkWithCredential",j:[Co()]},Dc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),Ho()]},Ec:{name:"linkWithPopup",j:[Eo()]},Fc:{name:"linkWithRedirect",j:[Eo()]},Lc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Co()]},tb:{name:"reauthenticateWithCredential",j:[Co()]},Mc:{name:"reauthenticateWithPhoneNumber",
    j:[V("phoneNumber"),Ho()]},Nc:{name:"reauthenticateWithPopup",j:[Eo()]},Oc:{name:"reauthenticateWithRedirect",j:[Eo()]},reload:{name:"reload",j:[]},ub:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),yo(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},cd:{name:"unlink",j:[V("provider")]},Bb:{name:"updateEmail",j:[V("email")]},Cb:{name:"updatePassword",j:[V("password")]},ed:{name:"updatePhoneNumber",j:[Co("phone")]},Db:{name:"updateProfile",j:[W("profile")]},
    Eb:{name:"verifyBeforeUpdateEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),yo(null,!0),"opt_actionCodeSettings",!0)]}});Y(Xn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(Wn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(D.prototype,{oa:{name:"finally"},o:{name:"catch"},then:{name:"then"}});
    Jo(em.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",kb:wo("appVerificationDisabledForTesting")}});Y(fm.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});Z(Bg,"fromJSON",function(a){a="string"===typeof a?JSON.parse(a):a;for(var b,c=[Mg,dh,kh,Jg],d=0;d<c.length;d++)if(b=c[d](a))return b;return null},[X(V(),W(),"json")]);Z(Zg,"credential",function(a,b){return new Yg(a,b)},[V("email"),V("password")]);Y(Yg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});
    Y(Qg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Qg,"credential",Rg,[X(V(),W(),"token")]);Z(Zg,"credentialWithLink",eh,[V("email"),V("emailLink")]);Y(Sg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Sg,"credential",Tg,[X(V(),W(),"token")]);Y(Ug.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});
    Z(Ug,"credential",Vg,[X(V(),X(W(),yo()),"idToken"),X(V(),yo(),"accessToken",!0)]);Y(Wg.prototype,{Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Wg,"credential",Xg,[X(V(),W(),"token"),V("secret",!0)]);Y(Pg.prototype,{Ca:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),X(W(),yo()),"optionsOrIdToken"),X(V(),yo(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Y(Kg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});
    Y(Eg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});Z(lh,"credential",ph,[V("verificationId"),V("verificationCode")]);
    Y(lh.prototype,{fb:{name:"verifyPhoneNumber",j:[X(V(),function(a,b){return {name:a||"phoneInfoOptions",K:"valid phone info options",optional:!!b,M:function(c){return c?c.session&&c.phoneNumber?Fo(c.session,zg)&&"string"===typeof c.phoneNumber:c.session&&c.multiFactorHint?Fo(c.session,Ag)&&Go(c.multiFactorHint):c.session&&c.multiFactorUid?Fo(c.session,Ag)&&"string"===typeof c.multiFactorUid:c.phoneNumber?"string"===typeof c.phoneNumber:!1:!1}}}(),"phoneInfoOptions"),Ho()]}});
    Y(gh.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});Y(t.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(yh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(xh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(lm.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(im.prototype,{Rc:{name:"resolveSignIn",j:[Do()]}});
    Y(tm.prototype,{Rb:{name:"getSession",j:[]},fc:{name:"enroll",j:[Do(),V("displayName",!0)]},bd:{name:"unenroll",j:[X({name:"multiFactorInfo",K:"a valid multiFactorInfo",optional:!1,M:Go},V(),"multiFactorInfoIdentifier")]}});Y(to.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});Z(Jf,"parseLink",Rf,[V("link")]);Z(co,"assertion",function(a){return new rm(a)},[Co("phone")]);
    (function(){if("undefined"!==typeof firebase$1&&firebase$1.INTERNAL&&firebase$1.INTERNAL.registerComponent){var a={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:Af,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:Cf,VERIFY_AND_CHANGE_EMAIL:Bf,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:En,AuthCredential:Bg,Error:t};Z(a,"EmailAuthProvider",Zg,[]);Z(a,"FacebookAuthProvider",Qg,[]);Z(a,"GithubAuthProvider",Sg,[]);Z(a,"GoogleAuthProvider",Ug,[]);Z(a,"TwitterAuthProvider",Wg,[]);
    Z(a,"OAuthProvider",Pg,[V("providerId")]);Z(a,"SAMLAuthProvider",Og,[V("providerId")]);Z(a,"PhoneAuthProvider",lh,[Ao()]);Z(a,"RecaptchaVerifier",to,[X(V(),zo(),"recaptchaContainer"),W("recaptchaParameters",!0),Bo()]);Z(a,"ActionCodeURL",Jf,[]);Z(a,"PhoneMultiFactorGenerator",co,[]);firebase$1.INTERNAL.registerComponent({name:"auth",instanceFactory:function(b){b=b.getProvider("app").getImmediate();return new En(b)},multipleInstances:!1,serviceProps:a,instantiationMode:"LAZY",type:"PUBLIC"});firebase$1.INTERNAL.registerComponent({name:"auth-internal",
    instanceFactory:function(b){b=b.getProvider("auth").getImmediate();return {getUid:q(b.getUid,b),getToken:q(b.nc,b),addAuthTokenListener:q(b.cc,b),removeAuthTokenListener:q(b.Pc,b)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"});firebase$1.registerVersion("@firebase/auth","0.16.3");firebase$1.INTERNAL.extendNamespace({User:Im});}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");})();}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Wraps a DOM Storage object and:
     * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
     * - prefixes names with "firebase:" to avoid collisions with app data.
     *
     * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
     * and one for localStorage.
     *
     * @constructor
     */
    var DOMStorageWrapper = /** @class */ (function () {
        /**
         * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
         */
        function DOMStorageWrapper(domStorage_) {
            this.domStorage_ = domStorage_;
            // Use a prefix to avoid collisions with other stuff saved by the app.
            this.prefix_ = 'firebase:';
        }
        /**
         * @param {string} key The key to save the value under
         * @param {?Object} value The value being stored, or null to remove the key.
         */
        DOMStorageWrapper.prototype.set = function (key, value) {
            if (value == null) {
                this.domStorage_.removeItem(this.prefixedName_(key));
            }
            else {
                this.domStorage_.setItem(this.prefixedName_(key), stringify$1(value));
            }
        };
        /**
         * @param {string} key
         * @return {*} The value that was stored under this key, or null
         */
        DOMStorageWrapper.prototype.get = function (key) {
            var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
            if (storedVal == null) {
                return null;
            }
            else {
                return jsonEval(storedVal);
            }
        };
        /**
         * @param {string} key
         */
        DOMStorageWrapper.prototype.remove = function (key) {
            this.domStorage_.removeItem(this.prefixedName_(key));
        };
        /**
         * @param {string} name
         * @return {string}
         */
        DOMStorageWrapper.prototype.prefixedName_ = function (name) {
            return this.prefix_ + name;
        };
        DOMStorageWrapper.prototype.toString = function () {
            return this.domStorage_.toString();
        };
        return DOMStorageWrapper;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory storage implementation that matches the API of DOMStorageWrapper
     * (TODO: create interface for both to implement).
     *
     * @constructor
     */
    var MemoryStorage = /** @class */ (function () {
        function MemoryStorage() {
            this.cache_ = {};
            this.isInMemoryStorage = true;
        }
        MemoryStorage.prototype.set = function (key, value) {
            if (value == null) {
                delete this.cache_[key];
            }
            else {
                this.cache_[key] = value;
            }
        };
        MemoryStorage.prototype.get = function (key) {
            if (contains(this.cache_, key)) {
                return this.cache_[key];
            }
            return null;
        };
        MemoryStorage.prototype.remove = function (key) {
            delete this.cache_[key];
        };
        return MemoryStorage;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
     * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
     * to reflect this type
     *
     * @param {string} domStorageName Name of the underlying storage object
     *   (e.g. 'localStorage' or 'sessionStorage').
     * @return {?} Turning off type information until a common interface is defined.
     */
    var createStoragefor = function (domStorageName) {
        try {
            // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
            // so it must be inside the try/catch.
            if (typeof window !== 'undefined' &&
                typeof window[domStorageName] !== 'undefined') {
                // Need to test cache. Just because it's here doesn't mean it works
                var domStorage = window[domStorageName];
                domStorage.setItem('firebase:sentinel', 'cache');
                domStorage.removeItem('firebase:sentinel');
                return new DOMStorageWrapper(domStorage);
            }
        }
        catch (e) { }
        // Failed to create wrapper.  Just return in-memory storage.
        // TODO: log?
        return new MemoryStorage();
    };
    /** A storage object that lasts across sessions */
    var PersistentStorage = createStoragefor('localStorage');
    /** A storage object that only lasts one session */
    var SessionStorage = createStoragefor('sessionStorage');

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logClient = new Logger('@firebase/database');
    /**
     * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
     * @type {function(): number} Generated ID.
     */
    var LUIDGenerator = (function () {
        var id = 1;
        return function () {
            return id++;
        };
    })();
    /**
     * Sha1 hash of the input string
     * @param {!string} str The string to hash
     * @return {!string} The resulting hash
     */
    var sha1 = function (str) {
        var utf8Bytes = stringToByteArray$1(str);
        var sha1 = new Sha1();
        sha1.update(utf8Bytes);
        var sha1Bytes = sha1.digest();
        return base64.encodeByteArray(sha1Bytes);
    };
    /**
     * @param {...*} varArgs
     * @return {string}
     * @private
     */
    var buildLogMessage_ = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = '';
        for (var i = 0; i < varArgs.length; i++) {
            var arg = varArgs[i];
            if (Array.isArray(arg) ||
                (arg &&
                    typeof arg === 'object' &&
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    typeof arg.length === 'number')) {
                message += buildLogMessage_.apply(null, arg);
            }
            else if (typeof arg === 'object') {
                message += stringify$1(arg);
            }
            else {
                message += arg;
            }
            message += ' ';
        }
        return message;
    };
    /**
     * Use this for all debug messages in Firebase.
     * @type {?function(string)}
     */
    var logger$1 = null;
    /**
     * Flag to check for log availability on first log message
     * @type {boolean}
     * @private
     */
    var firstLog_ = true;
    /**
     * The implementation of Firebase.enableLogging (defined here to break dependencies)
     * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
     * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
     */
    var enableLogging = function (logger_, persistent) {
        assert$1(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
        if (logger_ === true) {
            logClient.logLevel = LogLevel.VERBOSE;
            logger$1 = logClient.log.bind(logClient);
            if (persistent) {
                SessionStorage.set('logging_enabled', true);
            }
        }
        else if (typeof logger_ === 'function') {
            logger$1 = logger_;
        }
        else {
            logger$1 = null;
            SessionStorage.remove('logging_enabled');
        }
    };
    /**
     *
     * @param {...(string|Arguments)} varArgs
     */
    var log = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        if (firstLog_ === true) {
            firstLog_ = false;
            if (logger$1 === null && SessionStorage.get('logging_enabled') === true) {
                enableLogging(true);
            }
        }
        if (logger$1) {
            var message = buildLogMessage_.apply(null, varArgs);
            logger$1(message);
        }
    };
    /**
     * @param {!string} prefix
     * @return {function(...[*])}
     */
    var logWrapper = function (prefix) {
        return function () {
            var varArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                varArgs[_i] = arguments[_i];
            }
            log.apply(void 0, __spread([prefix], varArgs));
        };
    };
    /**
     * @param {...string} varArgs
     */
    var error = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, __spread(varArgs));
        logClient.error(message);
    };
    /**
     * @param {...string} varArgs
     */
    var fatal = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, __spread(varArgs));
        logClient.error(message);
        throw new Error(message);
    };
    /**
     * @param {...*} varArgs
     */
    var warn = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, __spread(varArgs));
        logClient.warn(message);
    };
    /**
     * Logs a warning if the containing page uses https. Called when a call to new Firebase
     * does not use https.
     */
    var warnIfPageIsSecure = function () {
        // Be very careful accessing browser globals. Who knows what may or may not exist.
        if (typeof window !== 'undefined' &&
            window.location &&
            window.location.protocol &&
            window.location.protocol.indexOf('https:') !== -1) {
            warn('Insecure Firebase access from a secure page. ' +
                'Please use https in calls to new Firebase().');
        }
    };
    /**
     * Returns true if data is NaN, or +/- Infinity.
     * @param {*} data
     * @return {boolean}
     */
    var isInvalidJSONNumber = function (data) {
        return (typeof data === 'number' &&
            (data !== data || // NaN
                data === Number.POSITIVE_INFINITY ||
                data === Number.NEGATIVE_INFINITY));
    };
    /**
     * @param {function()} fn
     */
    var executeWhenDOMReady = function (fn) {
        if (document.readyState === 'complete') {
            fn();
        }
        else {
            // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
            // fire before onload), but fall back to onload.
            var called_1 = false;
            var wrappedFn_1 = function () {
                if (!document.body) {
                    setTimeout(wrappedFn_1, Math.floor(10));
                    return;
                }
                if (!called_1) {
                    called_1 = true;
                    fn();
                }
            };
            if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
                // fallback to onload.
                window.addEventListener('load', wrappedFn_1, false);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (document.attachEvent) {
                // IE.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                document.attachEvent('onreadystatechange', function () {
                    if (document.readyState === 'complete') {
                        wrappedFn_1();
                    }
                });
                // fallback to onload.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                window.attachEvent('onload', wrappedFn_1);
                // jQuery has an extra hack for IE that we could employ (based on
                // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
                // I'm hoping we don't need it.
            }
        }
    };
    /**
     * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
     * @type {!string}
     */
    var MIN_NAME = '[MIN_NAME]';
    /**
     * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
     * @type {!string}
     */
    var MAX_NAME = '[MAX_NAME]';
    /**
     * Compares valid Firebase key names, plus min and max name
     * @param {!string} a
     * @param {!string} b
     * @return {!number}
     */
    var nameCompare = function (a, b) {
        if (a === b) {
            return 0;
        }
        else if (a === MIN_NAME || b === MAX_NAME) {
            return -1;
        }
        else if (b === MIN_NAME || a === MAX_NAME) {
            return 1;
        }
        else {
            var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
            if (aAsInt !== null) {
                if (bAsInt !== null) {
                    return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
                }
                else {
                    return -1;
                }
            }
            else if (bAsInt !== null) {
                return 1;
            }
            else {
                return a < b ? -1 : 1;
            }
        }
    };
    /**
     * @param {!string} a
     * @param {!string} b
     * @return {!number} comparison result.
     */
    var stringCompare = function (a, b) {
        if (a === b) {
            return 0;
        }
        else if (a < b) {
            return -1;
        }
        else {
            return 1;
        }
    };
    /**
     * @param {string} key
     * @param {Object} obj
     * @return {*}
     */
    var requireKey = function (key, obj) {
        if (obj && key in obj) {
            return obj[key];
        }
        else {
            throw new Error('Missing required key (' + key + ') in object: ' + stringify$1(obj));
        }
    };
    /**
     * @param {*} obj
     * @return {string}
     */
    var ObjectToUniqueKey = function (obj) {
        if (typeof obj !== 'object' || obj === null) {
            return stringify$1(obj);
        }
        var keys = [];
        // eslint-disable-next-line guard-for-in
        for (var k in obj) {
            keys.push(k);
        }
        // Export as json, but with the keys sorted.
        keys.sort();
        var key = '{';
        for (var i = 0; i < keys.length; i++) {
            if (i !== 0) {
                key += ',';
            }
            key += stringify$1(keys[i]);
            key += ':';
            key += ObjectToUniqueKey(obj[keys[i]]);
        }
        key += '}';
        return key;
    };
    /**
     * Splits a string into a number of smaller segments of maximum size
     * @param {!string} str The string
     * @param {!number} segsize The maximum number of chars in the string.
     * @return {Array.<string>} The string, split into appropriately-sized chunks
     */
    var splitStringBySize = function (str, segsize) {
        var len = str.length;
        if (len <= segsize) {
            return [str];
        }
        var dataSegs = [];
        for (var c = 0; c < len; c += segsize) {
            if (c + segsize > len) {
                dataSegs.push(str.substring(c, len));
            }
            else {
                dataSegs.push(str.substring(c, c + segsize));
            }
        }
        return dataSegs;
    };
    /**
     * Apply a function to each (key, value) pair in an object or
     * apply a function to each (index, value) pair in an array
     * @param obj The object or array to iterate over
     * @param fn The function to apply
     */
    function each(obj, fn) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                fn(key, obj[key]);
            }
        }
    }
    /**
     * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
     * I made one modification at the end and removed the NaN / Infinity
     * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
     * @param {!number} v A double
     * @return {string}
     */
    var doubleToIEEE754String = function (v) {
        assert$1(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
        var ebits = 11, fbits = 52;
        var bias = (1 << (ebits - 1)) - 1;
        var s, e, f, ln, i;
        // Compute sign, exponent, fraction
        // Skip NaN / Infinity handling --MJL.
        if (v === 0) {
            e = 0;
            f = 0;
            s = 1 / v === -Infinity ? 1 : 0;
        }
        else {
            s = v < 0;
            v = Math.abs(v);
            if (v >= Math.pow(2, 1 - bias)) {
                // Normalized
                ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
                e = ln + bias;
                f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
            }
            else {
                // Denormalized
                e = 0;
                f = Math.round(v / Math.pow(2, 1 - bias - fbits));
            }
        }
        // Pack sign, exponent, fraction
        var bits = [];
        for (i = fbits; i; i -= 1) {
            bits.push(f % 2 ? 1 : 0);
            f = Math.floor(f / 2);
        }
        for (i = ebits; i; i -= 1) {
            bits.push(e % 2 ? 1 : 0);
            e = Math.floor(e / 2);
        }
        bits.push(s ? 1 : 0);
        bits.reverse();
        var str = bits.join('');
        // Return the data as a hex string. --MJL
        var hexByteString = '';
        for (i = 0; i < 64; i += 8) {
            var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
            if (hexByte.length === 1) {
                hexByte = '0' + hexByte;
            }
            hexByteString = hexByteString + hexByte;
        }
        return hexByteString.toLowerCase();
    };
    /**
     * Used to detect if we're in a Chrome content script (which executes in an
     * isolated environment where long-polling doesn't work).
     * @return {boolean}
     */
    var isChromeExtensionContentScript = function () {
        return !!(typeof window === 'object' &&
            window['chrome'] &&
            window['chrome']['extension'] &&
            !/^chrome/.test(window.location.href));
    };
    /**
     * Used to detect if we're in a Windows 8 Store app.
     * @return {boolean}
     */
    var isWindowsStoreApp = function () {
        // Check for the presence of a couple WinRT globals
        return typeof Windows === 'object' && typeof Windows.UI === 'object';
    };
    /**
     * Converts a server error code to a Javascript Error
     * @param {!string} code
     * @param {!Query} query
     * @return {Error}
     */
    var errorForServerCode = function (code, query) {
        var reason = 'Unknown Error';
        if (code === 'too_big') {
            reason =
                'The data requested exceeds the maximum size ' +
                    'that can be accessed with a single request.';
        }
        else if (code === 'permission_denied') {
            reason = "Client doesn't have permission to access the desired data.";
        }
        else if (code === 'unavailable') {
            reason = 'The service is unavailable';
        }
        var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        error.code = code.toUpperCase();
        return error;
    };
    /**
     * Used to test for integer-looking strings
     * @type {RegExp}
     * @private
     */
    var INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
    /**
     * For use in keys, the minimum possible 32-bit integer.
     */
    var INTEGER_32_MIN = -2147483648;
    /**
     * For use in kyes, the maximum possible 32-bit integer.
     */
    var INTEGER_32_MAX = 2147483647;
    /**
     * If the string contains a 32-bit integer, return it.  Else return null.
     * @param {!string} str
     * @return {?number}
     */
    var tryParseInt = function (str) {
        if (INTEGER_REGEXP_.test(str)) {
            var intVal = Number(str);
            if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
                return intVal;
            }
        }
        return null;
    };
    /**
     * Helper to run some code but catch any exceptions and re-throw them later.
     * Useful for preventing user callbacks from breaking internal code.
     *
     * Re-throwing the exception from a setTimeout is a little evil, but it's very
     * convenient (we don't have to try to figure out when is a safe point to
     * re-throw it), and the behavior seems reasonable:
     *
     * * If you aren't pausing on exceptions, you get an error in the console with
     *   the correct stack trace.
     * * If you're pausing on all exceptions, the debugger will pause on your
     *   exception and then again when we rethrow it.
     * * If you're only pausing on uncaught exceptions, the debugger will only pause
     *   on us re-throwing it.
     *
     * @param {!function()} fn The code to guard.
     */
    var exceptionGuard = function (fn) {
        try {
            fn();
        }
        catch (e) {
            // Re-throw exception when it's safe.
            setTimeout(function () {
                // It used to be that "throw e" would result in a good console error with
                // relevant context, but as of Chrome 39, you just get the firebase.js
                // file/line number where we re-throw it, which is useless. So we log
                // e.stack explicitly.
                var stack = e.stack || '';
                warn('Exception was thrown by user callback.', stack);
                throw e;
            }, Math.floor(0));
        }
    };
    /**
     * @return {boolean} true if we think we're currently being crawled.
     */
    var beingCrawled = function () {
        var userAgent = (typeof window === 'object' &&
            window['navigator'] &&
            window['navigator']['userAgent']) ||
            '';
        // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
        // believe to support JavaScript/AJAX rendering.
        // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
        // would have seen the page" is flaky if we don't treat it as a crawler.
        return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
    };
    /**
     * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
     *
     * It is removed with clearTimeout() as normal.
     *
     * @param {Function} fn Function to run.
     * @param {number} time Milliseconds to wait before running.
     * @return {number|Object} The setTimeout() return value.
     */
    var setTimeoutNonBlocking = function (fn, time) {
        var timeout = setTimeout(fn, time);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (typeof timeout === 'object' && timeout['unref']) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            timeout['unref']();
        }
        return timeout;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a parsed path.  It's immutable so that you
     * can pass them around to other functions without worrying about them changing
     * it.
     */
    var Path = /** @class */ (function () {
        /**
         * @param {string|Array.<string>} pathOrString Path string to parse,
         *      or another path, or the raw tokens array
         * @param {number=} pieceNum
         */
        function Path(pathOrString, pieceNum) {
            if (pieceNum === void 0) {
                this.pieces_ = pathOrString.split('/');
                // Remove empty pieces.
                var copyTo = 0;
                for (var i = 0; i < this.pieces_.length; i++) {
                    if (this.pieces_[i].length > 0) {
                        this.pieces_[copyTo] = this.pieces_[i];
                        copyTo++;
                    }
                }
                this.pieces_.length = copyTo;
                this.pieceNum_ = 0;
            }
            else {
                this.pieces_ = pathOrString;
                this.pieceNum_ = pieceNum;
            }
        }
        Object.defineProperty(Path, "Empty", {
            /**
             * Singleton to represent an empty path
             *
             * @const
             */
            get: function () {
                return new Path('');
            },
            enumerable: false,
            configurable: true
        });
        Path.prototype.getFront = function () {
            if (this.pieceNum_ >= this.pieces_.length) {
                return null;
            }
            return this.pieces_[this.pieceNum_];
        };
        /**
         * @return {number} The number of segments in this path
         */
        Path.prototype.getLength = function () {
            return this.pieces_.length - this.pieceNum_;
        };
        /**
         * @return {!Path}
         */
        Path.prototype.popFront = function () {
            var pieceNum = this.pieceNum_;
            if (pieceNum < this.pieces_.length) {
                pieceNum++;
            }
            return new Path(this.pieces_, pieceNum);
        };
        /**
         * @return {?string}
         */
        Path.prototype.getBack = function () {
            if (this.pieceNum_ < this.pieces_.length) {
                return this.pieces_[this.pieces_.length - 1];
            }
            return null;
        };
        Path.prototype.toString = function () {
            var pathString = '';
            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                if (this.pieces_[i] !== '') {
                    pathString += '/' + this.pieces_[i];
                }
            }
            return pathString || '/';
        };
        Path.prototype.toUrlEncodedString = function () {
            var pathString = '';
            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                if (this.pieces_[i] !== '') {
                    pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
                }
            }
            return pathString || '/';
        };
        /**
         * Shallow copy of the parts of the path.
         *
         * @param {number=} begin
         * @return {!Array<string>}
         */
        Path.prototype.slice = function (begin) {
            if (begin === void 0) { begin = 0; }
            return this.pieces_.slice(this.pieceNum_ + begin);
        };
        /**
         * @return {?Path}
         */
        Path.prototype.parent = function () {
            if (this.pieceNum_ >= this.pieces_.length) {
                return null;
            }
            var pieces = [];
            for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {
                pieces.push(this.pieces_[i]);
            }
            return new Path(pieces, 0);
        };
        /**
         * @param {string|!Path} childPathObj
         * @return {!Path}
         */
        Path.prototype.child = function (childPathObj) {
            var pieces = [];
            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                pieces.push(this.pieces_[i]);
            }
            if (childPathObj instanceof Path) {
                for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
                    pieces.push(childPathObj.pieces_[i]);
                }
            }
            else {
                var childPieces = childPathObj.split('/');
                for (var i = 0; i < childPieces.length; i++) {
                    if (childPieces[i].length > 0) {
                        pieces.push(childPieces[i]);
                    }
                }
            }
            return new Path(pieces, 0);
        };
        /**
         * @return {boolean} True if there are no segments in this path
         */
        Path.prototype.isEmpty = function () {
            return this.pieceNum_ >= this.pieces_.length;
        };
        /**
         * @param {!Path} outerPath
         * @param {!Path} innerPath
         * @return {!Path} The path from outerPath to innerPath
         */
        Path.relativePath = function (outerPath, innerPath) {
            var outer = outerPath.getFront(), inner = innerPath.getFront();
            if (outer === null) {
                return innerPath;
            }
            else if (outer === inner) {
                return Path.relativePath(outerPath.popFront(), innerPath.popFront());
            }
            else {
                throw new Error('INTERNAL ERROR: innerPath (' +
                    innerPath +
                    ') is not within ' +
                    'outerPath (' +
                    outerPath +
                    ')');
            }
        };
        /**
         * @param {!Path} left
         * @param {!Path} right
         * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
         */
        Path.comparePaths = function (left, right) {
            var leftKeys = left.slice();
            var rightKeys = right.slice();
            for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
                var cmp = nameCompare(leftKeys[i], rightKeys[i]);
                if (cmp !== 0) {
                    return cmp;
                }
            }
            if (leftKeys.length === rightKeys.length) {
                return 0;
            }
            return leftKeys.length < rightKeys.length ? -1 : 1;
        };
        /**
         *
         * @param {Path} other
         * @return {boolean} true if paths are the same.
         */
        Path.prototype.equals = function (other) {
            if (this.getLength() !== other.getLength()) {
                return false;
            }
            for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
                if (this.pieces_[i] !== other.pieces_[j]) {
                    return false;
                }
            }
            return true;
        };
        /**
         *
         * @param {!Path} other
         * @return {boolean} True if this path is a parent (or the same as) other
         */
        Path.prototype.contains = function (other) {
            var i = this.pieceNum_;
            var j = other.pieceNum_;
            if (this.getLength() > other.getLength()) {
                return false;
            }
            while (i < this.pieces_.length) {
                if (this.pieces_[i] !== other.pieces_[j]) {
                    return false;
                }
                ++i;
                ++j;
            }
            return true;
        };
        return Path;
    }()); // end Path
    /**
     * Dynamic (mutable) path used to count path lengths.
     *
     * This class is used to efficiently check paths for valid
     * length (in UTF8 bytes) and depth (used in path validation).
     *
     * Throws Error exception if path is ever invalid.
     *
     * The definition of a path always begins with '/'.
     */
    var ValidationPath = /** @class */ (function () {
        /**
         * @param {!Path} path Initial Path.
         * @param {string} errorPrefix_ Prefix for any error messages.
         */
        function ValidationPath(path, errorPrefix_) {
            this.errorPrefix_ = errorPrefix_;
            /** @type {!Array<string>} */
            this.parts_ = path.slice();
            /** @type {number} Initialize to number of '/' chars needed in path. */
            this.byteLength_ = Math.max(1, this.parts_.length);
            for (var i = 0; i < this.parts_.length; i++) {
                this.byteLength_ += stringLength(this.parts_[i]);
            }
            this.checkValid_();
        }
        Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
            /** @const {number} Maximum key depth. */
            get: function () {
                return 32;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
            /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
            get: function () {
                return 768;
            },
            enumerable: false,
            configurable: true
        });
        /** @param {string} child */
        ValidationPath.prototype.push = function (child) {
            // Count the needed '/'
            if (this.parts_.length > 0) {
                this.byteLength_ += 1;
            }
            this.parts_.push(child);
            this.byteLength_ += stringLength(child);
            this.checkValid_();
        };
        ValidationPath.prototype.pop = function () {
            var last = this.parts_.pop();
            this.byteLength_ -= stringLength(last);
            // Un-count the previous '/'
            if (this.parts_.length > 0) {
                this.byteLength_ -= 1;
            }
        };
        ValidationPath.prototype.checkValid_ = function () {
            if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
                throw new Error(this.errorPrefix_ +
                    'has a key path longer than ' +
                    ValidationPath.MAX_PATH_LENGTH_BYTES +
                    ' bytes (' +
                    this.byteLength_ +
                    ').');
            }
            if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
                throw new Error(this.errorPrefix_ +
                    'path specified exceeds the maximum depth that can be written (' +
                    ValidationPath.MAX_PATH_DEPTH +
                    ') or object contains a cycle ' +
                    this.toErrorString());
            }
        };
        /**
         * String for use in error messages - uses '.' notation for path.
         *
         * @return {string}
         */
        ValidationPath.prototype.toErrorString = function () {
            if (this.parts_.length === 0) {
                return '';
            }
            return "in property '" + this.parts_.join('.') + "'";
        };
        return ValidationPath;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PROTOCOL_VERSION = '5';
    var VERSION_PARAM = 'v';
    var TRANSPORT_SESSION_PARAM = 's';
    var REFERER_PARAM = 'r';
    var FORGE_REF = 'f';
    // Matches console.firebase.google.com, firebase-console-*.corp.google.com and
    // firebase.corp.google.com
    var FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
    var LAST_SESSION_PARAM = 'ls';
    var APPLICATION_ID_PARAM = 'p';
    var WEBSOCKET = 'websocket';
    var LONG_POLLING = 'long_polling';

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class that holds metadata about a Repo object
     *
     * @constructor
     */
    var RepoInfo = /** @class */ (function () {
        /**
         * @param host Hostname portion of the url for the repo
         * @param secure Whether or not this repo is accessed over ssl
         * @param namespace The namespace represented by the repo
         * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
         * @param nodeAdmin Whether this instance uses Admin SDK credentials
         * @param persistenceKey Override the default session persistence storage key
         */
        function RepoInfo(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {
            if (nodeAdmin === void 0) { nodeAdmin = false; }
            if (persistenceKey === void 0) { persistenceKey = ''; }
            if (includeNamespaceInQueryParams === void 0) { includeNamespaceInQueryParams = false; }
            this.secure = secure;
            this.namespace = namespace;
            this.webSocketOnly = webSocketOnly;
            this.nodeAdmin = nodeAdmin;
            this.persistenceKey = persistenceKey;
            this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
            this.host = host.toLowerCase();
            this.domain = this.host.substr(this.host.indexOf('.') + 1);
            this.internalHost =
                PersistentStorage.get('host:' + host) || this.host;
        }
        RepoInfo.prototype.needsQueryParam = function () {
            return (this.host !== this.internalHost ||
                this.isCustomHost() ||
                this.includeNamespaceInQueryParams);
        };
        RepoInfo.prototype.isCacheableHost = function () {
            return this.internalHost.substr(0, 2) === 's-';
        };
        RepoInfo.prototype.isDemoHost = function () {
            return this.domain === 'firebaseio-demo.com';
        };
        RepoInfo.prototype.isCustomHost = function () {
            return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');
        };
        RepoInfo.prototype.updateHost = function (newHost) {
            if (newHost !== this.internalHost) {
                this.internalHost = newHost;
                if (this.isCacheableHost()) {
                    PersistentStorage.set('host:' + this.host, this.internalHost);
                }
            }
        };
        /**
         * Returns the websocket URL for this repo
         * @param {string} type of connection
         * @param {Object} params list
         * @return {string} The URL for this repo
         */
        RepoInfo.prototype.connectionURL = function (type, params) {
            assert$1(typeof type === 'string', 'typeof type must == string');
            assert$1(typeof params === 'object', 'typeof params must == object');
            var connURL;
            if (type === WEBSOCKET) {
                connURL =
                    (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
            }
            else if (type === LONG_POLLING) {
                connURL =
                    (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
            }
            else {
                throw new Error('Unknown connection type: ' + type);
            }
            if (this.needsQueryParam()) {
                params['ns'] = this.namespace;
            }
            var pairs = [];
            each(params, function (key, value) {
                pairs.push(key + '=' + value);
            });
            return connURL + pairs.join('&');
        };
        /** @return {string} */
        RepoInfo.prototype.toString = function () {
            var str = this.toURLString();
            if (this.persistenceKey) {
                str += '<' + this.persistenceKey + '>';
            }
            return str;
        };
        /** @return {string} */
        RepoInfo.prototype.toURLString = function () {
            var protocol = this.secure ? 'https://' : 'http://';
            var query = this.includeNamespaceInQueryParams
                ? "?ns=" + this.namespace
                : '';
            return "" + protocol + this.host + "/" + query;
        };
        return RepoInfo;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!string} pathString
     * @return {string}
     */
    function decodePath(pathString) {
        var pathStringDecoded = '';
        var pieces = pathString.split('/');
        for (var i = 0; i < pieces.length; i++) {
            if (pieces[i].length > 0) {
                var piece = pieces[i];
                try {
                    piece = decodeURIComponent(piece.replace(/\+/g, ' '));
                }
                catch (e) { }
                pathStringDecoded += '/' + piece;
            }
        }
        return pathStringDecoded;
    }
    /**
     * @param {!string} queryString
     * @return {!{[key:string]:string}} key value hash
     */
    function decodeQuery(queryString) {
        var e_1, _a;
        var results = {};
        if (queryString.charAt(0) === '?') {
            queryString = queryString.substring(1);
        }
        try {
            for (var _b = __values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {
                var segment = _c.value;
                if (segment.length === 0) {
                    continue;
                }
                var kv = segment.split('=');
                if (kv.length === 2) {
                    results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
                }
                else {
                    warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return results;
    }
    var parseRepoInfo = function (dataURL, nodeAdmin) {
        var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
        if (parsedUrl.domain === 'firebase.com') {
            fatal(parsedUrl.host +
                ' is no longer supported. ' +
                'Please use <YOUR FIREBASE>.firebaseio.com instead');
        }
        // Catch common error of uninitialized namespace value.
        if ((!namespace || namespace === 'undefined') &&
            parsedUrl.domain !== 'localhost') {
            fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
        }
        if (!parsedUrl.secure) {
            warnIfPageIsSecure();
        }
        var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
        return {
            repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, 
            /*persistenceKey=*/ '', 
            /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
            path: new Path(parsedUrl.pathString)
        };
    };
    /**
     *
     * @param {!string} dataURL
     * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}
     */
    var parseDatabaseURL = function (dataURL) {
        // Default to empty strings in the event of a malformed string.
        var host = '', domain = '', subdomain = '', pathString = '', namespace = '';
        // Always default to SSL, unless otherwise specified.
        var secure = true, scheme = 'https', port = 443;
        // Don't do any validation here. The caller is responsible for validating the result of parsing.
        if (typeof dataURL === 'string') {
            // Parse scheme.
            var colonInd = dataURL.indexOf('//');
            if (colonInd >= 0) {
                scheme = dataURL.substring(0, colonInd - 1);
                dataURL = dataURL.substring(colonInd + 2);
            }
            // Parse host, path, and query string.
            var slashInd = dataURL.indexOf('/');
            if (slashInd === -1) {
                slashInd = dataURL.length;
            }
            var questionMarkInd = dataURL.indexOf('?');
            if (questionMarkInd === -1) {
                questionMarkInd = dataURL.length;
            }
            host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
            if (slashInd < questionMarkInd) {
                // For pathString, questionMarkInd will always come after slashInd
                pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
            }
            var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
            // If we have a port, use scheme for determining if it's secure.
            colonInd = host.indexOf(':');
            if (colonInd >= 0) {
                secure = scheme === 'https' || scheme === 'wss';
                port = parseInt(host.substring(colonInd + 1), 10);
            }
            else {
                colonInd = host.length;
            }
            var hostWithoutPort = host.slice(0, colonInd);
            if (hostWithoutPort.toLowerCase() === 'localhost') {
                domain = 'localhost';
            }
            else if (hostWithoutPort.split('.').length <= 2) {
                domain = hostWithoutPort;
            }
            else {
                // Interpret the subdomain of a 3 or more component URL as the namespace name.
                var dotInd = host.indexOf('.');
                subdomain = host.substring(0, dotInd).toLowerCase();
                domain = host.substring(dotInd + 1);
                // Normalize namespaces to lowercase to share storage / connection.
                namespace = subdomain;
            }
            // Always treat the value of the `ns` as the namespace name if it is present.
            if ('ns' in queryParams) {
                namespace = queryParams['ns'];
            }
        }
        return {
            host: host,
            port: port,
            domain: domain,
            subdomain: subdomain,
            secure: secure,
            scheme: scheme,
            pathString: pathString,
            namespace: namespace
        };
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * True for invalid Firebase keys
     * @type {RegExp}
     * @private
     */
    var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
    /**
     * True for invalid Firebase paths.
     * Allows '/' in paths.
     * @type {RegExp}
     * @private
     */
    var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
    /**
     * Maximum number of characters to allow in leaf value
     * @type {number}
     * @private
     */
    var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
    /**
     * @param {*} key
     * @return {boolean}
     */
    var isValidKey$1 = function (key) {
        return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
    };
    /**
     * @param {string} pathString
     * @return {boolean}
     */
    var isValidPathString = function (pathString) {
        return (typeof pathString === 'string' &&
            pathString.length !== 0 &&
            !INVALID_PATH_REGEX_.test(pathString));
    };
    /**
     * @param {string} pathString
     * @return {boolean}
     */
    var isValidRootPathString = function (pathString) {
        if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }
        return isValidPathString(pathString);
    };
    /**
     * @param {*} priority
     * @return {boolean}
     */
    var isValidPriority = function (priority) {
        return (priority === null ||
            typeof priority === 'string' ||
            (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||
            (priority &&
                typeof priority === 'object' &&
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                contains(priority, '.sv')));
    };
    /**
     * Pre-validate a datum passed as an argument to Firebase function.
     *
     * @param {string} fnName
     * @param {number} argumentNumber
     * @param {*} data
     * @param {!Path} path
     * @param {boolean} optional
     */
    var validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
        if (optional && data === undefined) {
            return;
        }
        validateFirebaseData(errorPrefix(fnName, argumentNumber, optional), data, path);
    };
    /**
     * Validate a data object client-side before sending to server.
     *
     * @param {string} errorPrefix
     * @param {*} data
     * @param {!Path|!ValidationPath} path_
     */
    var validateFirebaseData = function (errorPrefix, data, path_) {
        var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
        if (data === undefined) {
            throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
        }
        if (typeof data === 'function') {
            throw new Error(errorPrefix +
                'contains a function ' +
                path.toErrorString() +
                ' with contents = ' +
                data.toString());
        }
        if (isInvalidJSONNumber(data)) {
            throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
        }
        // Check max leaf size, but try to avoid the utf8 conversion if we can.
        if (typeof data === 'string' &&
            data.length > MAX_LEAF_SIZE_ / 3 &&
            stringLength(data) > MAX_LEAF_SIZE_) {
            throw new Error(errorPrefix +
                'contains a string greater than ' +
                MAX_LEAF_SIZE_ +
                ' utf8 bytes ' +
                path.toErrorString() +
                " ('" +
                data.substring(0, 50) +
                "...')");
        }
        // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
        // to save extra walking of large objects.
        if (data && typeof data === 'object') {
            var hasDotValue_1 = false;
            var hasActualChild_1 = false;
            each(data, function (key, value) {
                if (key === '.value') {
                    hasDotValue_1 = true;
                }
                else if (key !== '.priority' && key !== '.sv') {
                    hasActualChild_1 = true;
                    if (!isValidKey$1(key)) {
                        throw new Error(errorPrefix +
                            ' contains an invalid key (' +
                            key +
                            ') ' +
                            path.toErrorString() +
                            '.  Keys must be non-empty strings ' +
                            'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                    }
                }
                path.push(key);
                validateFirebaseData(errorPrefix, value, path);
                path.pop();
            });
            if (hasDotValue_1 && hasActualChild_1) {
                throw new Error(errorPrefix +
                    ' contains ".value" child ' +
                    path.toErrorString() +
                    ' in addition to actual children.');
            }
        }
    };
    /**
     * Pre-validate paths passed in the firebase function.
     *
     * @param {string} errorPrefix
     * @param {Array<!Path>} mergePaths
     */
    var validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
        var i, curPath;
        for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            var keys = curPath.slice();
            for (var j = 0; j < keys.length; j++) {
                if (keys[j] === '.priority' && j === keys.length - 1) ;
                else if (!isValidKey$1(keys[j])) {
                    throw new Error(errorPrefix +
                        'contains an invalid key (' +
                        keys[j] +
                        ') in path ' +
                        curPath.toString() +
                        '. Keys must be non-empty strings ' +
                        'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                }
            }
        }
        // Check that update keys are not descendants of each other.
        // We rely on the property that sorting guarantees that ancestors come
        // right before descendants.
        mergePaths.sort(Path.comparePaths);
        var prevPath = null;
        for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            if (prevPath !== null && prevPath.contains(curPath)) {
                throw new Error(errorPrefix +
                    'contains a path ' +
                    prevPath.toString() +
                    ' that is ancestor of another path ' +
                    curPath.toString());
            }
            prevPath = curPath;
        }
    };
    /**
     * pre-validate an object passed as an argument to firebase function (
     * must be an object - e.g. for firebase.update()).
     *
     * @param {string} fnName
     * @param {number} argumentNumber
     * @param {*} data
     * @param {!Path} path
     * @param {boolean} optional
     */
    var validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
        if (optional && data === undefined) {
            return;
        }
        var errorPrefix$1 = errorPrefix(fnName, argumentNumber, optional);
        if (!(data && typeof data === 'object') || Array.isArray(data)) {
            throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');
        }
        var mergePaths = [];
        each(data, function (key, value) {
            var curPath = new Path(key);
            validateFirebaseData(errorPrefix$1, value, path.child(curPath));
            if (curPath.getBack() === '.priority') {
                if (!isValidPriority(value)) {
                    throw new Error(errorPrefix$1 +
                        "contains an invalid value for '" +
                        curPath.toString() +
                        "', which must be a valid " +
                        'Firebase priority (a string, finite number, server value, or null).');
                }
            }
            mergePaths.push(curPath);
        });
        validateFirebaseMergePaths(errorPrefix$1, mergePaths);
    };
    var validatePriority = function (fnName, argumentNumber, priority, optional) {
        if (optional && priority === undefined) {
            return;
        }
        if (isInvalidJSONNumber(priority)) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'is ' +
                priority.toString() +
                ', but must be a valid Firebase priority (a string, finite number, ' +
                'server value, or null).');
        }
        // Special case to allow importing data with a .sv.
        if (!isValidPriority(priority)) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid Firebase priority ' +
                '(a string, finite number, server value, or null).');
        }
    };
    var validateEventType = function (fnName, argumentNumber, eventType, optional) {
        if (optional && eventType === undefined) {
            return;
        }
        switch (eventType) {
            case 'value':
            case 'child_added':
            case 'child_removed':
            case 'child_changed':
            case 'child_moved':
                break;
            default:
                throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                    'must be a valid event type = "value", "child_added", "child_removed", ' +
                    '"child_changed", or "child_moved".');
        }
    };
    var validateKey = function (fnName, argumentNumber, key, optional) {
        if (optional && key === undefined) {
            return;
        }
        if (!isValidKey$1(key)) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'was an invalid key = "' +
                key +
                '".  Firebase keys must be non-empty strings and ' +
                'can\'t contain ".", "#", "$", "/", "[", or "]").');
        }
    };
    var validatePathString = function (fnName, argumentNumber, pathString, optional) {
        if (optional && pathString === undefined) {
            return;
        }
        if (!isValidPathString(pathString)) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'was an invalid path = "' +
                pathString +
                '". Paths must be non-empty strings and ' +
                'can\'t contain ".", "#", "$", "[", or "]"');
        }
    };
    var validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
        if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }
        validatePathString(fnName, argumentNumber, pathString, optional);
    };
    var validateWritablePath = function (fnName, path) {
        if (path.getFront() === '.info') {
            throw new Error(fnName + " failed = Can't modify data under /.info/");
        }
    };
    var validateUrl = function (fnName, argumentNumber, parsedUrl) {
        // TODO = Validate server better.
        var pathString = parsedUrl.path.toString();
        if (!(typeof parsedUrl.repoInfo.host === 'string') ||
            parsedUrl.repoInfo.host.length === 0 ||
            (!isValidKey$1(parsedUrl.repoInfo.namespace) &&
                parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
            (pathString.length !== 0 && !isValidRootPathString(pathString))) {
            throw new Error(errorPrefix(fnName, argumentNumber, false) +
                'must be a valid firebase URL and ' +
                'the path can\'t contain ".", "#", "$", "[", or "]".');
        }
    };
    var validateBoolean = function (fnName, argumentNumber, bool, optional) {
        if (optional && bool === undefined) {
            return;
        }
        if (typeof bool !== 'boolean') {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
        }
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @constructor
     */
    var OnDisconnect = /** @class */ (function () {
        /**
         * @param {!Repo} repo_
         * @param {!Path} path_
         */
        function OnDisconnect(repo_, path_) {
            this.repo_ = repo_;
            this.path_ = path_;
        }
        /**
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.cancel = function (onComplete) {
            validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
            validateCallback('OnDisconnect.cancel', 1, onComplete, true);
            var deferred = new Deferred();
            this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.remove = function (onComplete) {
            validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
            validateWritablePath('OnDisconnect.remove', this.path_);
            validateCallback('OnDisconnect.remove', 1, onComplete, true);
            var deferred = new Deferred();
            this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {*} value
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.set = function (value, onComplete) {
            validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
            validateWritablePath('OnDisconnect.set', this.path_);
            validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
            validateCallback('OnDisconnect.set', 2, onComplete, true);
            var deferred = new Deferred();
            this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {*} value
         * @param {number|string|null} priority
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
            validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
            validateWritablePath('OnDisconnect.setWithPriority', this.path_);
            validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
            validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
            validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
            var deferred = new Deferred();
            this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {!Object} objectToMerge
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
            validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
            validateWritablePath('OnDisconnect.update', this.path_);
            if (Array.isArray(objectToMerge)) {
                var newObjectToMerge = {};
                for (var i = 0; i < objectToMerge.length; ++i) {
                    newObjectToMerge['' + i] = objectToMerge[i];
                }
                objectToMerge = newObjectToMerge;
                warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
                    'existing data, or an Object with integer keys if you really do want to only update some of the children.');
            }
            validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
            validateCallback('OnDisconnect.update', 2, onComplete, true);
            var deferred = new Deferred();
            this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        return OnDisconnect;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TransactionResult = /** @class */ (function () {
        /**
         * A type for the resolve value of Firebase.transaction.
         * @constructor
         * @dict
         * @param {boolean} committed
         * @param {DataSnapshot} snapshot
         */
        function TransactionResult(committed, snapshot) {
            this.committed = committed;
            this.snapshot = snapshot;
        }
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users
        TransactionResult.prototype.toJSON = function () {
            validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
            return { committed: this.committed, snapshot: this.snapshot.toJSON() };
        };
        return TransactionResult;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Modeled after base64 web-safe chars, but ordered by ASCII.
    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
    var MIN_PUSH_CHAR = '-';
    var MAX_PUSH_CHAR = 'z';
    var MAX_KEY_LEN = 786;
    /**
     * Fancy ID generator that creates 20-character string identifiers with the
     * following properties:
     *
     * 1. They're based on timestamp so that they sort *after* any existing ids.
     * 2. They contain 72-bits of random data after the timestamp so that IDs won't
     *    collide with other clients' IDs.
     * 3. They sort *lexicographically* (so the timestamp is converted to characters
     *    that will sort properly).
     * 4. They're monotonically increasing. Even if you generate more than one in
     *    the same timestamp, the latter ones will sort after the former ones. We do
     *    this by using the previous random bits but "incrementing" them by 1 (only
     *    in the case of a timestamp collision).
     */
    var nextPushId = (function () {
        // Timestamp of last push, used to prevent local collisions if you push twice
        // in one ms.
        var lastPushTime = 0;
        // We generate 72-bits of randomness which get turned into 12 characters and
        // appended to the timestamp to prevent collisions with other clients. We
        // store the last characters we generated because in the event of a collision,
        // we'll use those same characters except "incremented" by one.
        var lastRandChars = [];
        return function (now) {
            var duplicateTime = now === lastPushTime;
            lastPushTime = now;
            var i;
            var timeStampChars = new Array(8);
            for (i = 7; i >= 0; i--) {
                timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
                // NOTE: Can't use << here because javascript will convert to int and lose
                // the upper bits.
                now = Math.floor(now / 64);
            }
            assert$1(now === 0, 'Cannot push at time == 0');
            var id = timeStampChars.join('');
            if (!duplicateTime) {
                for (i = 0; i < 12; i++) {
                    lastRandChars[i] = Math.floor(Math.random() * 64);
                }
            }
            else {
                // If the timestamp hasn't changed since last push, use the same random
                // number, except incremented by 1.
                for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                    lastRandChars[i] = 0;
                }
                lastRandChars[i]++;
            }
            for (i = 0; i < 12; i++) {
                id += PUSH_CHARS.charAt(lastRandChars[i]);
            }
            assert$1(id.length === 20, 'nextPushId: Length should be 20.');
            return id;
        };
    })();
    var successor = function (key) {
        if (key === '' + INTEGER_32_MAX) {
            // See https://firebase.google.com/docs/database/web/lists-of-data#data-order
            return MIN_PUSH_CHAR;
        }
        var keyAsInt = tryParseInt(key);
        if (keyAsInt != null) {
            return '' + (keyAsInt + 1);
        }
        var next = new Array(key.length);
        for (var i_1 = 0; i_1 < next.length; i_1++) {
            next[i_1] = key.charAt(i_1);
        }
        if (next.length < MAX_KEY_LEN) {
            next.push(MIN_PUSH_CHAR);
            return next.join('');
        }
        var i = next.length - 1;
        while (i >= 0 && next[i] === MAX_PUSH_CHAR) {
            i--;
        }
        // `successor` was called on the largest possible key, so return the
        // MAX_NAME, which sorts larger than all keys.
        if (i === -1) {
            return MAX_NAME;
        }
        var source = next[i];
        var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);
        next[i] = sourcePlusOne;
        return next.slice(0, i + 1).join('');
    };
    // `key` is assumed to be non-empty.
    var predecessor = function (key) {
        if (key === '' + INTEGER_32_MIN) {
            return MIN_NAME;
        }
        var keyAsInt = tryParseInt(key);
        if (keyAsInt != null) {
            return '' + (keyAsInt - 1);
        }
        var next = new Array(key.length);
        for (var i = 0; i < next.length; i++) {
            next[i] = key.charAt(i);
        }
        // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically
        // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller
        // than that, `predecessor(predecessor(key))`, is
        //
        // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \
        //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }
        //
        // analogous to increment/decrement for base-10 integers.
        //
        // This works because lexigographic comparison works character-by-character,
        // using length as a tie-breaker if one key is a prefix of the other.
        if (next[next.length - 1] === MIN_PUSH_CHAR) {
            if (next.length === 1) {
                // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey
                return '' + INTEGER_32_MAX;
            }
            delete next[next.length - 1];
            return next.join('');
        }
        // Replace the last character with it's immediate predecessor, and
        // fill the suffix of the key with MAX_PUSH_CHAR. This is the
        // lexicographically largest possible key smaller than `key`.
        next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);
        return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @param {!string} name
     * @param {!Node} node
     * @constructor
     * @struct
     */
    var NamedNode = /** @class */ (function () {
        function NamedNode(name, node) {
            this.name = name;
            this.node = node;
        }
        /**
         *
         * @param {!string} name
         * @param {!Node} node
         * @return {NamedNode}
         */
        NamedNode.Wrap = function (name, node) {
            return new NamedNode(name, node);
        };
        return NamedNode;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @constructor
     */
    var Index = /** @class */ (function () {
        function Index() {
        }
        /**
         * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
         * this index
         */
        Index.prototype.getCompare = function () {
            return this.compare.bind(this);
        };
        /**
         * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
         * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
         *
         * @param {!Node} oldNode
         * @param {!Node} newNode
         * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
         */
        Index.prototype.indexedValueChanged = function (oldNode, newNode) {
            var oldWrapped = new NamedNode(MIN_NAME, oldNode);
            var newWrapped = new NamedNode(MIN_NAME, newNode);
            return this.compare(oldWrapped, newWrapped) !== 0;
        };
        /**
         * @return {!NamedNode} a node wrapper that will sort equal to or less than
         * any other node wrapper, using this index
         */
        Index.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        return Index;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __EMPTY_NODE;
    var KeyIndex = /** @class */ (function (_super) {
        __extends$1d(KeyIndex, _super);
        function KeyIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
            get: function () {
                return __EMPTY_NODE;
            },
            set: function (val) {
                __EMPTY_NODE = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.compare = function (a, b) {
            return nameCompare(a.name, b.name);
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.isDefinedOn = function (node) {
            // We could probably return true here (since every node has a key), but it's never called
            // so just leaving unimplemented for now.
            throw assertionError('KeyIndex.isDefinedOn not expected to be called.');
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return false; // The key for a node never changes.
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.maxPost = function () {
            // TODO: This should really be created once and cached in a static property, but
            // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
            return new NamedNode(MAX_NAME, __EMPTY_NODE);
        };
        /**
         * @param {*} indexValue
         * @param {string} name
         * @return {!NamedNode}
         */
        KeyIndex.prototype.makePost = function (indexValue, name) {
            assert$1(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
            // We just use empty node, but it'll never be compared, since our comparator only looks at name.
            return new NamedNode(indexValue, __EMPTY_NODE);
        };
        /**
         * @return {!string} String representation for inclusion in a query spec
         */
        KeyIndex.prototype.toString = function () {
            return '.key';
        };
        return KeyIndex;
    }(Index));
    var KEY_INDEX = new KeyIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_NODE;
    function setMaxNode(val) {
        MAX_NODE = val;
    }
    /**
     * @param {(!string|!number)} priority
     * @return {!string}
     */
    var priorityHashText = function (priority) {
        if (typeof priority === 'number') {
            return 'number:' + doubleToIEEE754String(priority);
        }
        else {
            return 'string:' + priority;
        }
    };
    /**
     * Validates that a priority snapshot Node is valid.
     *
     * @param {!Node} priorityNode
     */
    var validatePriorityNode = function (priorityNode) {
        if (priorityNode.isLeafNode()) {
            var val = priorityNode.val();
            assert$1(typeof val === 'string' ||
                typeof val === 'number' ||
                (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');
        }
        else {
            assert$1(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
        }
        // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
        assert$1(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __childrenNodeConstructor;
    /**
     * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
     * implements Node and stores the value of the node (a string,
     * number, or boolean) accessible via getValue().
     */
    var LeafNode = /** @class */ (function () {
        /**
         * @implements {Node}
         * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
         *                                         The object type is possible in the event of a deferred value
         * @param {!Node=} priorityNode_ The priority of this node.
         */
        function LeafNode(value_, priorityNode_) {
            if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
            this.value_ = value_;
            this.priorityNode_ = priorityNode_;
            this.lazyHash_ = null;
            assert$1(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
            validatePriorityNode(this.priorityNode_);
        }
        Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
            get: function () {
                return __childrenNodeConstructor;
            },
            set: function (val) {
                __childrenNodeConstructor = val;
            },
            enumerable: false,
            configurable: true
        });
        /** @inheritDoc */
        LeafNode.prototype.isLeafNode = function () {
            return true;
        };
        /** @inheritDoc */
        LeafNode.prototype.getPriority = function () {
            return this.priorityNode_;
        };
        /** @inheritDoc */
        LeafNode.prototype.updatePriority = function (newPriorityNode) {
            return new LeafNode(this.value_, newPriorityNode);
        };
        /** @inheritDoc */
        LeafNode.prototype.getImmediateChild = function (childName) {
            // Hack to treat priority as a regular child
            if (childName === '.priority') {
                return this.priorityNode_;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.getChild = function (path) {
            if (path.isEmpty()) {
                return this;
            }
            else if (path.getFront() === '.priority') {
                return this.priorityNode_;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.hasChild = function () {
            return false;
        };
        /** @inheritDoc */
        LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
            return null;
        };
        /** @inheritDoc */
        LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            }
            else if (newChildNode.isEmpty() && childName !== '.priority') {
                return this;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.updateChild = function (path, newChildNode) {
            var front = path.getFront();
            if (front === null) {
                return newChildNode;
            }
            else if (newChildNode.isEmpty() && front !== '.priority') {
                return this;
            }
            else {
                assert$1(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
                return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.isEmpty = function () {
            return false;
        };
        /** @inheritDoc */
        LeafNode.prototype.numChildren = function () {
            return 0;
        };
        /** @inheritDoc */
        LeafNode.prototype.forEachChild = function (index, action) {
            return false;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.val = function (exportFormat) {
            if (exportFormat && !this.getPriority().isEmpty()) {
                return {
                    '.value': this.getValue(),
                    '.priority': this.getPriority().val()
                };
            }
            else {
                return this.getValue();
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.hash = function () {
            if (this.lazyHash_ === null) {
                var toHash = '';
                if (!this.priorityNode_.isEmpty()) {
                    toHash +=
                        'priority:' +
                            priorityHashText(this.priorityNode_.val()) +
                            ':';
                }
                var type = typeof this.value_;
                toHash += type + ':';
                if (type === 'number') {
                    toHash += doubleToIEEE754String(this.value_);
                }
                else {
                    toHash += this.value_;
                }
                this.lazyHash_ = sha1(toHash);
            }
            return this.lazyHash_;
        };
        /**
         * Returns the value of the leaf node.
         * @return {Object|string|number|boolean} The value of the node.
         */
        LeafNode.prototype.getValue = function () {
            return this.value_;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.compareTo = function (other) {
            if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
                return 1;
            }
            else if (other instanceof LeafNode.__childrenNodeConstructor) {
                return -1;
            }
            else {
                assert$1(other.isLeafNode(), 'Unknown node type');
                return this.compareToLeafNode_(other);
            }
        };
        /**
         * Comparison specifically for two leaf nodes
         * @param {!LeafNode} otherLeaf
         * @return {!number}
         * @private
         */
        LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
            var otherLeafType = typeof otherLeaf.value_;
            var thisLeafType = typeof this.value_;
            var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
            var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
            assert$1(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
            assert$1(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
            if (otherIndex === thisIndex) {
                // Same type, compare values
                if (thisLeafType === 'object') {
                    // Deferred value nodes are all equal, but we should also never get to this point...
                    return 0;
                }
                else {
                    // Note that this works because true > false, all others are number or string comparisons
                    if (this.value_ < otherLeaf.value_) {
                        return -1;
                    }
                    else if (this.value_ === otherLeaf.value_) {
                        return 0;
                    }
                    else {
                        return 1;
                    }
                }
            }
            else {
                return thisIndex - otherIndex;
            }
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.withIndex = function () {
            return this;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.isIndexed = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.equals = function (other) {
            /**
             * @inheritDoc
             */
            if (other === this) {
                return true;
            }
            else if (other.isLeafNode()) {
                var otherLeaf = other;
                return (this.value_ === otherLeaf.value_ &&
                    this.priorityNode_.equals(otherLeaf.priorityNode_));
            }
            else {
                return false;
            }
        };
        /**
         * The sort order for comparing leaf nodes of different types. If two leaf nodes have
         * the same type, the comparison falls back to their value
         * @type {Array.<!string>}
         * @const
         */
        LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
        return LeafNode;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var nodeFromJSON;
    var MAX_NODE$1;
    function setNodeFromJSON(val) {
        nodeFromJSON = val;
    }
    function setMaxNode$1(val) {
        MAX_NODE$1 = val;
    }
    /**
     * @constructor
     * @extends {Index}
     * @private
     */
    var PriorityIndex = /** @class */ (function (_super) {
        __extends$1d(PriorityIndex, _super);
        function PriorityIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.compare = function (a, b) {
            var aPriority = a.node.getPriority();
            var bPriority = b.node.getPriority();
            var indexCmp = aPriority.compareTo(bPriority);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.isDefinedOn = function (node) {
            return !node.getPriority().isEmpty();
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return !oldNode.getPriority().equals(newNode.getPriority());
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.maxPost = function () {
            return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
        };
        /**
         * @param {*} indexValue
         * @param {string} name
         * @return {!NamedNode}
         */
        PriorityIndex.prototype.makePost = function (indexValue, name) {
            var priorityNode = nodeFromJSON(indexValue);
            return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
        };
        /**
         * @return {!string} String representation for inclusion in a query spec
         */
        PriorityIndex.prototype.toString = function () {
            return '.priority';
        };
        return PriorityIndex;
    }(Index));
    var PRIORITY_INDEX = new PriorityIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An iterator over an LLRBNode.
     */
    var SortedMapIterator = /** @class */ (function () {
        /**
         * @template K, V, T
         * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
         * @param {?K} startKey
         * @param {function(K, K): number} comparator
         * @param {boolean} isReverse_ Whether or not to iterate in reverse
         * @param {(function(K, V):T)=} resultGenerator_
         */
        function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
            if (resultGenerator_ === void 0) { resultGenerator_ = null; }
            this.isReverse_ = isReverse_;
            this.resultGenerator_ = resultGenerator_;
            /** @private
             * @type {Array.<!LLRBNode>}
             */
            this.nodeStack_ = [];
            var cmp = 1;
            while (!node.isEmpty()) {
                node = node;
                cmp = startKey ? comparator(node.key, startKey) : 1;
                // flip the comparison if we're going in reverse
                if (isReverse_) {
                    cmp *= -1;
                }
                if (cmp < 0) {
                    // This node is less than our start key. ignore it
                    if (this.isReverse_) {
                        node = node.left;
                    }
                    else {
                        node = node.right;
                    }
                }
                else if (cmp === 0) {
                    // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                    this.nodeStack_.push(node);
                    break;
                }
                else {
                    // This node is greater than our start key, add it to the stack and move to the next one
                    this.nodeStack_.push(node);
                    if (this.isReverse_) {
                        node = node.right;
                    }
                    else {
                        node = node.left;
                    }
                }
            }
        }
        SortedMapIterator.prototype.getNext = function () {
            if (this.nodeStack_.length === 0) {
                return null;
            }
            var node = this.nodeStack_.pop();
            var result;
            if (this.resultGenerator_) {
                result = this.resultGenerator_(node.key, node.value);
            }
            else {
                result = { key: node.key, value: node.value };
            }
            if (this.isReverse_) {
                node = node.left;
                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.right;
                }
            }
            else {
                node = node.right;
                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.left;
                }
            }
            return result;
        };
        SortedMapIterator.prototype.hasNext = function () {
            return this.nodeStack_.length > 0;
        };
        SortedMapIterator.prototype.peek = function () {
            if (this.nodeStack_.length === 0) {
                return null;
            }
            var node = this.nodeStack_[this.nodeStack_.length - 1];
            if (this.resultGenerator_) {
                return this.resultGenerator_(node.key, node.value);
            }
            else {
                return { key: node.key, value: node.value };
            }
        };
        return SortedMapIterator;
    }());
    /**
     * Represents a node in a Left-leaning Red-Black tree.
     */
    var LLRBNode = /** @class */ (function () {
        /**
         * @template K, V
         * @param {!K} key Key associated with this node.
         * @param {!V} value Value associated with this node.
         * @param {?boolean} color Whether this node is red.
         * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
         * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
         */
        function LLRBNode(key, value, color, left, right) {
            this.key = key;
            this.value = value;
            this.color = color != null ? color : LLRBNode.RED;
            this.left =
                left != null ? left : SortedMap.EMPTY_NODE;
            this.right =
                right != null ? right : SortedMap.EMPTY_NODE;
        }
        /**
         * Returns a copy of the current node, optionally replacing pieces of it.
         *
         * @param {?K} key New key for the node, or null.
         * @param {?V} value New value for the node, or null.
         * @param {?boolean} color New color for the node, or null.
         * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
         * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
         * @return {!LLRBNode} The node copy.
         */
        LLRBNode.prototype.copy = function (key, value, color, left, right) {
            return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
        };
        /**
         * @return {number} The total number of nodes in the tree.
         */
        LLRBNode.prototype.count = function () {
            return this.left.count() + 1 + this.right.count();
        };
        /**
         * @return {boolean} True if the tree is empty.
         */
        LLRBNode.prototype.isEmpty = function () {
            return false;
        };
        /**
         * Traverses the tree in key order and calls the specified action function
         * for each node.
         *
         * @param {function(!K, !V):*} action Callback function to be called for each
         *   node.  If it returns true, traversal is aborted.
         * @return {*} The first truthy value returned by action, or the last falsey
         *   value returned by action
         */
        LLRBNode.prototype.inorderTraversal = function (action) {
            return (this.left.inorderTraversal(action) ||
                !!action(this.key, this.value) ||
                this.right.inorderTraversal(action));
        };
        /**
         * Traverses the tree in reverse key order and calls the specified action function
         * for each node.
         *
         * @param {function(!Object, !Object)} action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return {*} True if traversal was aborted.
         */
        LLRBNode.prototype.reverseTraversal = function (action) {
            return (this.right.reverseTraversal(action) ||
                action(this.key, this.value) ||
                this.left.reverseTraversal(action));
        };
        /**
         * @return {!Object} The minimum node in the tree.
         * @private
         */
        LLRBNode.prototype.min_ = function () {
            if (this.left.isEmpty()) {
                return this;
            }
            else {
                return this.left.min_();
            }
        };
        /**
         * @return {!K} The maximum key in the tree.
         */
        LLRBNode.prototype.minKey = function () {
            return this.min_().key;
        };
        /**
         * @return {!K} The maximum key in the tree.
         */
        LLRBNode.prototype.maxKey = function () {
            if (this.right.isEmpty()) {
                return this.key;
            }
            else {
                return this.right.maxKey();
            }
        };
        /**
         *
         * @param {!Object} key Key to insert.
         * @param {!Object} value Value to insert.
         * @param {Comparator} comparator Comparator.
         * @return {!LLRBNode} New tree, with the key/value added.
         */
        LLRBNode.prototype.insert = function (key, value, comparator) {
            var n = this;
            var cmp = comparator(key, n.key);
            if (cmp < 0) {
                n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
            }
            else if (cmp === 0) {
                n = n.copy(null, value, null, null, null);
            }
            else {
                n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
            }
            return n.fixUp_();
        };
        /**
         * @private
         * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
         */
        LLRBNode.prototype.removeMin_ = function () {
            if (this.left.isEmpty()) {
                return SortedMap.EMPTY_NODE;
            }
            var n = this;
            if (!n.left.isRed_() && !n.left.left.isRed_()) {
                n = n.moveRedLeft_();
            }
            n = n.copy(null, null, null, n.left.removeMin_(), null);
            return n.fixUp_();
        };
        /**
         * @param {!Object} key The key of the item to remove.
         * @param {Comparator} comparator Comparator.
         * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
         */
        LLRBNode.prototype.remove = function (key, comparator) {
            var n, smallest;
            n = this;
            if (comparator(key, n.key) < 0) {
                if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                    n = n.moveRedLeft_();
                }
                n = n.copy(null, null, null, n.left.remove(key, comparator), null);
            }
            else {
                if (n.left.isRed_()) {
                    n = n.rotateRight_();
                }
                if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                    n = n.moveRedRight_();
                }
                if (comparator(key, n.key) === 0) {
                    if (n.right.isEmpty()) {
                        return SortedMap.EMPTY_NODE;
                    }
                    else {
                        smallest = n.right.min_();
                        n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                    }
                }
                n = n.copy(null, null, null, null, n.right.remove(key, comparator));
            }
            return n.fixUp_();
        };
        /**
         * @private
         * @return {boolean} Whether this is a RED node.
         */
        LLRBNode.prototype.isRed_ = function () {
            return this.color;
        };
        /**
         * @private
         * @return {!LLRBNode} New tree after performing any needed rotations.
         */
        LLRBNode.prototype.fixUp_ = function () {
            var n = this;
            if (n.right.isRed_() && !n.left.isRed_()) {
                n = n.rotateLeft_();
            }
            if (n.left.isRed_() && n.left.left.isRed_()) {
                n = n.rotateRight_();
            }
            if (n.left.isRed_() && n.right.isRed_()) {
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after moveRedLeft.
         */
        LLRBNode.prototype.moveRedLeft_ = function () {
            var n = this.colorFlip_();
            if (n.right.left.isRed_()) {
                n = n.copy(null, null, null, null, n.right.rotateRight_());
                n = n.rotateLeft_();
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after moveRedRight.
         */
        LLRBNode.prototype.moveRedRight_ = function () {
            var n = this.colorFlip_();
            if (n.left.left.isRed_()) {
                n = n.rotateRight_();
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after rotateLeft.
         */
        LLRBNode.prototype.rotateLeft_ = function () {
            var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, nl, null);
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after rotateRight.
         */
        LLRBNode.prototype.rotateRight_ = function () {
            var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, nr);
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after colorFlip.
         */
        LLRBNode.prototype.colorFlip_ = function () {
            var left = this.left.copy(null, null, !this.left.color, null, null);
            var right = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, left, right);
        };
        /**
         * For testing.
         *
         * @private
         * @return {boolean} True if all is well.
         */
        LLRBNode.prototype.checkMaxDepth_ = function () {
            var blackDepth = this.check_();
            return Math.pow(2.0, blackDepth) <= this.count() + 1;
        };
        /**
         * @private
         * @return {number} Not sure what this returns exactly. :-).
         */
        LLRBNode.prototype.check_ = function () {
            if (this.isRed_() && this.left.isRed_()) {
                throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
            }
            if (this.right.isRed_()) {
                throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
            }
            var blackDepth = this.left.check_();
            if (blackDepth !== this.right.check_()) {
                throw new Error('Black depths differ');
            }
            else {
                return blackDepth + (this.isRed_() ? 0 : 1);
            }
        };
        LLRBNode.RED = true;
        LLRBNode.BLACK = false;
        return LLRBNode;
    }());
    /**
     * Represents an empty node (a leaf node in the Red-Black Tree).
     */
    var LLRBEmptyNode = /** @class */ (function () {
        function LLRBEmptyNode() {
        }
        /**
         * Returns a copy of the current node.
         *
         * @return {!LLRBEmptyNode} The node copy.
         */
        LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
            return this;
        };
        /**
         * Returns a copy of the tree, with the specified key/value added.
         *
         * @param {!K} key Key to be added.
         * @param {!V} value Value to be added.
         * @param {Comparator} comparator Comparator.
         * @return {!LLRBNode} New tree, with item added.
         */
        LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
            return new LLRBNode(key, value, null);
        };
        /**
         * Returns a copy of the tree, with the specified key removed.
         *
         * @param {!K} key The key to remove.
         * @param {Comparator} comparator Comparator.
         * @return {!LLRBEmptyNode} New tree, with item removed.
         */
        LLRBEmptyNode.prototype.remove = function (key, comparator) {
            return this;
        };
        /**
         * @return {number} The total number of nodes in the tree.
         */
        LLRBEmptyNode.prototype.count = function () {
            return 0;
        };
        /**
         * @return {boolean} True if the tree is empty.
         */
        LLRBEmptyNode.prototype.isEmpty = function () {
            return true;
        };
        /**
         * Traverses the tree in key order and calls the specified action function
         * for each node.
         *
         * @param {function(!K, !V):*} action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return {boolean} True if traversal was aborted.
         */
        LLRBEmptyNode.prototype.inorderTraversal = function (action) {
            return false;
        };
        /**
         * Traverses the tree in reverse key order and calls the specified action function
         * for each node.
         *
         * @param {function(!K, !V)} action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return {boolean} True if traversal was aborted.
         */
        LLRBEmptyNode.prototype.reverseTraversal = function (action) {
            return false;
        };
        /**
         * @return {null}
         */
        LLRBEmptyNode.prototype.minKey = function () {
            return null;
        };
        /**
         * @return {null}
         */
        LLRBEmptyNode.prototype.maxKey = function () {
            return null;
        };
        /**
         * @private
         * @return {number} Not sure what this returns exactly. :-).
         */
        LLRBEmptyNode.prototype.check_ = function () {
            return 0;
        };
        /**
         * @private
         * @return {boolean} Whether this node is red.
         */
        LLRBEmptyNode.prototype.isRed_ = function () {
            return false;
        };
        return LLRBEmptyNode;
    }());
    /**
     * An immutable sorted map implementation, based on a Left-leaning Red-Black
     * tree.
     */
    var SortedMap = /** @class */ (function () {
        /**
         * @template K, V
         * @param {function(K, K):number} comparator_ Key comparator.
         * @param {LLRBNode=} root_ (Optional) Root node for the map.
         */
        function SortedMap(comparator_, root_) {
            if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
            this.comparator_ = comparator_;
            this.root_ = root_;
        }
        /**
         * Returns a copy of the map, with the specified key/value added or replaced.
         * (TODO: We should perhaps rename this method to 'put')
         *
         * @param {!K} key Key to be added.
         * @param {!V} value Value to be added.
         * @return {!SortedMap.<K, V>} New map, with item added.
         */
        SortedMap.prototype.insert = function (key, value) {
            return new SortedMap(this.comparator_, this.root_
                .insert(key, value, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null));
        };
        /**
         * Returns a copy of the map, with the specified key removed.
         *
         * @param {!K} key The key to remove.
         * @return {!SortedMap.<K, V>} New map, with item removed.
         */
        SortedMap.prototype.remove = function (key) {
            return new SortedMap(this.comparator_, this.root_
                .remove(key, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null));
        };
        /**
         * Returns the value of the node with the given key, or null.
         *
         * @param {!K} key The key to look up.
         * @return {?V} The value of the node with the given key, or null if the
         * key doesn't exist.
         */
        SortedMap.prototype.get = function (key) {
            var cmp;
            var node = this.root_;
            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);
                if (cmp === 0) {
                    return node.value;
                }
                else if (cmp < 0) {
                    node = node.left;
                }
                else if (cmp > 0) {
                    node = node.right;
                }
            }
            return null;
        };
        /**
         * Returns the key of the item *before* the specified key, or null if key is the first item.
         * @param {K} key The key to find the predecessor of
         * @return {?K} The predecessor key.
         */
        SortedMap.prototype.getPredecessorKey = function (key) {
            var cmp, node = this.root_, rightParent = null;
            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);
                if (cmp === 0) {
                    if (!node.left.isEmpty()) {
                        node = node.left;
                        while (!node.right.isEmpty()) {
                            node = node.right;
                        }
                        return node.key;
                    }
                    else if (rightParent) {
                        return rightParent.key;
                    }
                    else {
                        return null; // first item.
                    }
                }
                else if (cmp < 0) {
                    node = node.left;
                }
                else if (cmp > 0) {
                    rightParent = node;
                    node = node.right;
                }
            }
            throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
        };
        /**
         * @return {boolean} True if the map is empty.
         */
        SortedMap.prototype.isEmpty = function () {
            return this.root_.isEmpty();
        };
        /**
         * @return {number} The total number of nodes in the map.
         */
        SortedMap.prototype.count = function () {
            return this.root_.count();
        };
        /**
         * @return {?K} The minimum key in the map.
         */
        SortedMap.prototype.minKey = function () {
            return this.root_.minKey();
        };
        /**
         * @return {?K} The maximum key in the map.
         */
        SortedMap.prototype.maxKey = function () {
            return this.root_.maxKey();
        };
        /**
         * Traverses the map in key order and calls the specified action function
         * for each key/value pair.
         *
         * @param {function(!K, !V):*} action Callback function to be called
         * for each key/value pair.  If action returns true, traversal is aborted.
         * @return {*} The first truthy value returned by action, or the last falsey
         *   value returned by action
         */
        SortedMap.prototype.inorderTraversal = function (action) {
            return this.root_.inorderTraversal(action);
        };
        /**
         * Traverses the map in reverse key order and calls the specified action function
         * for each key/value pair.
         *
         * @param {function(!Object, !Object)} action Callback function to be called
         * for each key/value pair.  If action returns true, traversal is aborted.
         * @return {*} True if the traversal was aborted.
         */
        SortedMap.prototype.reverseTraversal = function (action) {
            return this.root_.reverseTraversal(action);
        };
        /**
         * Returns an iterator over the SortedMap.
         * @template T
         * @param {(function(K, V):T)=} resultGenerator
         * @return {SortedMapIterator.<K, V, T>} The iterator.
         */
        SortedMap.prototype.getIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
        };
        SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
        };
        SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
        };
        SortedMap.prototype.getReverseIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
        };
        /**
         * Always use the same empty node, to reduce memory.
         * @const
         */
        SortedMap.EMPTY_NODE = new LLRBEmptyNode();
        return SortedMap;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LOG_2 = Math.log(2);
    /**
     * @constructor
     */
    var Base12Num = /** @class */ (function () {
        /**
         * @param {number} length
         */
        function Base12Num(length) {
            var logBase2 = function (num) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return parseInt((Math.log(num) / LOG_2), 10);
            };
            var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
            this.count = logBase2(length + 1);
            this.current_ = this.count - 1;
            var mask = bitMask(this.count);
            this.bits_ = (length + 1) & mask;
        }
        /**
         * @return {boolean}
         */
        Base12Num.prototype.nextBitIsOne = function () {
            //noinspection JSBitwiseOperatorUsage
            var result = !(this.bits_ & (0x1 << this.current_));
            this.current_--;
            return result;
        };
        return Base12Num;
    }());
    /**
     * Takes a list of child nodes and constructs a SortedSet using the given comparison
     * function
     *
     * Uses the algorithm described in the paper linked here:
     * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
     *
     * @template K, V
     * @param {Array.<!NamedNode>} childList Unsorted list of children
     * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
     * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
     *                                                        type is not NamedNode
     * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
     * @return {SortedMap.<K, V>}
     */
    var buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
        childList.sort(cmp);
        var buildBalancedTree = function (low, high) {
            var length = high - low;
            var namedNode;
            var key;
            if (length === 0) {
                return null;
            }
            else if (length === 1) {
                namedNode = childList[low];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var middle = parseInt((length / 2), 10) + low;
                var left = buildBalancedTree(low, middle);
                var right = buildBalancedTree(middle + 1, high);
                namedNode = childList[middle];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
            }
        };
        var buildFrom12Array = function (base12) {
            var node = null;
            var root = null;
            var index = childList.length;
            var buildPennant = function (chunkSize, color) {
                var low = index - chunkSize;
                var high = index;
                index -= chunkSize;
                var childTree = buildBalancedTree(low + 1, high);
                var namedNode = childList[low];
                var key = keyFn ? keyFn(namedNode) : namedNode;
                attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
            };
            var attachPennant = function (pennant) {
                if (node) {
                    node.left = pennant;
                    node = pennant;
                }
                else {
                    root = pennant;
                    node = pennant;
                }
            };
            for (var i = 0; i < base12.count; ++i) {
                var isOne = base12.nextBitIsOne();
                // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
                var chunkSize = Math.pow(2, base12.count - (i + 1));
                if (isOne) {
                    buildPennant(chunkSize, LLRBNode.BLACK);
                }
                else {
                    // current == 2
                    buildPennant(chunkSize, LLRBNode.BLACK);
                    buildPennant(chunkSize, LLRBNode.RED);
                }
            }
            return root;
        };
        var base12 = new Base12Num(childList.length);
        var root = buildFrom12Array(base12);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new SortedMap(mapSortFn || cmp, root);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _defaultIndexMap;
    var fallbackObject = {};
    var IndexMap = /** @class */ (function () {
        function IndexMap(indexes_, indexSet_) {
            this.indexes_ = indexes_;
            this.indexSet_ = indexSet_;
        }
        Object.defineProperty(IndexMap, "Default", {
            /**
             * The default IndexMap for nodes without a priority
             */
            get: function () {
                assert$1(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
                _defaultIndexMap =
                    _defaultIndexMap ||
                        new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
                return _defaultIndexMap;
            },
            enumerable: false,
            configurable: true
        });
        IndexMap.prototype.get = function (indexKey) {
            var sortedMap = safeGet(this.indexes_, indexKey);
            if (!sortedMap) {
                throw new Error('No index defined for ' + indexKey);
            }
            if (sortedMap instanceof SortedMap) {
                return sortedMap;
            }
            else {
                // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
                // regular child map
                return null;
            }
        };
        IndexMap.prototype.hasIndex = function (indexDefinition) {
            return contains(this.indexSet_, indexDefinition.toString());
        };
        IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
            assert$1(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
            var childList = [];
            var sawIndexedValue = false;
            var iter = existingChildren.getIterator(NamedNode.Wrap);
            var next = iter.getNext();
            while (next) {
                sawIndexedValue =
                    sawIndexedValue || indexDefinition.isDefinedOn(next.node);
                childList.push(next);
                next = iter.getNext();
            }
            var newIndex;
            if (sawIndexedValue) {
                newIndex = buildChildSet(childList, indexDefinition.getCompare());
            }
            else {
                newIndex = fallbackObject;
            }
            var indexName = indexDefinition.toString();
            var newIndexSet = __assign({}, this.indexSet_);
            newIndexSet[indexName] = indexDefinition;
            var newIndexes = __assign({}, this.indexes_);
            newIndexes[indexName] = newIndex;
            return new IndexMap(newIndexes, newIndexSet);
        };
        /**
         * Ensure that this node is properly tracked in any indexes that we're maintaining
         */
        IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
            var _this = this;
            var newIndexes = map(this.indexes_, function (indexedChildren, indexName) {
                var index = safeGet(_this.indexSet_, indexName);
                assert$1(index, 'Missing index implementation for ' + indexName);
                if (indexedChildren === fallbackObject) {
                    // Check to see if we need to index everything
                    if (index.isDefinedOn(namedNode.node)) {
                        // We need to build this index
                        var childList = [];
                        var iter = existingChildren.getIterator(NamedNode.Wrap);
                        var next = iter.getNext();
                        while (next) {
                            if (next.name !== namedNode.name) {
                                childList.push(next);
                            }
                            next = iter.getNext();
                        }
                        childList.push(namedNode);
                        return buildChildSet(childList, index.getCompare());
                    }
                    else {
                        // No change, this remains a fallback
                        return fallbackObject;
                    }
                }
                else {
                    var existingSnap = existingChildren.get(namedNode.name);
                    var newChildren = indexedChildren;
                    if (existingSnap) {
                        newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
                    }
                    return newChildren.insert(namedNode, namedNode.node);
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };
        /**
         * Create a new IndexMap instance with the given value removed
         */
        IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
            var newIndexes = map(this.indexes_, function (indexedChildren) {
                if (indexedChildren === fallbackObject) {
                    // This is the fallback. Just return it, nothing to do in this case
                    return indexedChildren;
                }
                else {
                    var existingSnap = existingChildren.get(namedNode.name);
                    if (existingSnap) {
                        return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
                    }
                    else {
                        // No record of this child
                        return indexedChildren;
                    }
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };
        return IndexMap;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function NAME_ONLY_COMPARATOR(left, right) {
        return nameCompare(left.name, right.name);
    }
    function NAME_COMPARATOR(left, right) {
        return nameCompare(left, right);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO: For memory savings, don't store priorityNode_ if it's empty.
    var EMPTY_NODE;
    /**
     * ChildrenNode is a class for storing internal nodes in a DataSnapshot
     * (i.e. nodes with children).  It implements Node and stores the
     * list of children in the children property, sorted by child name.
     *
     * @constructor
     * @implements {Node}
     */
    var ChildrenNode = /** @class */ (function () {
        /**
         *
         * @param {!SortedMap.<string, !Node>} children_ List of children
         * of this node..
         * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
         * @param {!IndexMap} indexMap_
         */
        function ChildrenNode(children_, priorityNode_, indexMap_) {
            this.children_ = children_;
            this.priorityNode_ = priorityNode_;
            this.indexMap_ = indexMap_;
            this.lazyHash_ = null;
            /**
             * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
             * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
             * class instead of an empty ChildrenNode.
             */
            if (this.priorityNode_) {
                validatePriorityNode(this.priorityNode_);
            }
            if (this.children_.isEmpty()) {
                assert$1(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
            }
        }
        Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
            get: function () {
                return (EMPTY_NODE ||
                    (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
            },
            enumerable: false,
            configurable: true
        });
        /** @inheritDoc */
        ChildrenNode.prototype.isLeafNode = function () {
            return false;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getPriority = function () {
            return this.priorityNode_ || EMPTY_NODE;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
            if (this.children_.isEmpty()) {
                // Don't allow priorities on empty nodes
                return this;
            }
            else {
                return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getImmediateChild = function (childName) {
            // Hack to treat priority as a regular child
            if (childName === '.priority') {
                return this.getPriority();
            }
            else {
                var child = this.children_.get(childName);
                return child === null ? EMPTY_NODE : child;
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getChild = function (path) {
            var front = path.getFront();
            if (front === null) {
                return this;
            }
            return this.getImmediateChild(front).getChild(path.popFront());
        };
        /** @inheritDoc */
        ChildrenNode.prototype.hasChild = function (childName) {
            return this.children_.get(childName) !== null;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
            assert$1(newChildNode, 'We should always be passing snapshot nodes');
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            }
            else {
                var namedNode = new NamedNode(childName, newChildNode);
                var newChildren = void 0, newIndexMap = void 0;
                if (newChildNode.isEmpty()) {
                    newChildren = this.children_.remove(childName);
                    newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
                }
                else {
                    newChildren = this.children_.insert(childName, newChildNode);
                    newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
                }
                var newPriority = newChildren.isEmpty()
                    ? EMPTY_NODE
                    : this.priorityNode_;
                return new ChildrenNode(newChildren, newPriority, newIndexMap);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updateChild = function (path, newChildNode) {
            var front = path.getFront();
            if (front === null) {
                return newChildNode;
            }
            else {
                assert$1(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
                var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
                return this.updateImmediateChild(front, newImmediateChild);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.isEmpty = function () {
            return this.children_.isEmpty();
        };
        /** @inheritDoc */
        ChildrenNode.prototype.numChildren = function () {
            return this.children_.count();
        };
        /** @inheritDoc */
        ChildrenNode.prototype.val = function (exportFormat) {
            if (this.isEmpty()) {
                return null;
            }
            var obj = {};
            var numKeys = 0, maxKey = 0, allIntegerKeys = true;
            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                obj[key] = childNode.val(exportFormat);
                numKeys++;
                if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                    maxKey = Math.max(maxKey, Number(key));
                }
                else {
                    allIntegerKeys = false;
                }
            });
            if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
                // convert to array.
                var array = [];
                // eslint-disable-next-line guard-for-in
                for (var key in obj) {
                    array[key] = obj[key];
                }
                return array;
            }
            else {
                if (exportFormat && !this.getPriority().isEmpty()) {
                    obj['.priority'] = this.getPriority().val();
                }
                return obj;
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.hash = function () {
            if (this.lazyHash_ === null) {
                var toHash_1 = '';
                if (!this.getPriority().isEmpty()) {
                    toHash_1 +=
                        'priority:' +
                            priorityHashText(this.getPriority().val()) +
                            ':';
                }
                this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                    var childHash = childNode.hash();
                    if (childHash !== '') {
                        toHash_1 += ':' + key + ':' + childHash;
                    }
                });
                this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
            }
            return this.lazyHash_;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
            var idx = this.resolveIndex_(index);
            if (idx) {
                var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
                return predecessor ? predecessor.name : null;
            }
            else {
                return this.children_.getPredecessorKey(childName);
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {?string}
         */
        ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                var minKey = idx.minKey();
                return minKey && minKey.name;
            }
            else {
                return this.children_.minKey();
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {?NamedNode}
         */
        ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
            var minKey = this.getFirstChildName(indexDefinition);
            if (minKey) {
                return new NamedNode(minKey, this.children_.get(minKey));
            }
            else {
                return null;
            }
        };
        /**
         * Given an index, return the key name of the largest value we have, according to that index
         * @param {!Index} indexDefinition
         * @return {?string}
         */
        ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                var maxKey = idx.maxKey();
                return maxKey && maxKey.name;
            }
            else {
                return this.children_.maxKey();
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {?NamedNode}
         */
        ChildrenNode.prototype.getLastChild = function (indexDefinition) {
            var maxKey = this.getLastChildName(indexDefinition);
            if (maxKey) {
                return new NamedNode(maxKey, this.children_.get(maxKey));
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.forEachChild = function (index, action) {
            var idx = this.resolveIndex_(index);
            if (idx) {
                return idx.inorderTraversal(function (wrappedNode) {
                    return action(wrappedNode.name, wrappedNode.node);
                });
            }
            else {
                return this.children_.inorderTraversal(action);
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {SortedMapIterator}
         */
        ChildrenNode.prototype.getIterator = function (indexDefinition) {
            return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
        };
        /**
         *
         * @param {!NamedNode} startPost
         * @param {!Index} indexDefinition
         * @return {!SortedMapIterator}
         */
        ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                return idx.getIteratorFrom(startPost, function (key) { return key; });
            }
            else {
                var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
                var next = iterator.peek();
                while (next != null && indexDefinition.compare(next, startPost) < 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }
                return iterator;
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {!SortedMapIterator}
         */
        ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
            return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
        };
        /**
         * @param {!NamedNode} endPost
         * @param {!Index} indexDefinition
         * @return {!SortedMapIterator}
         */
        ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                return idx.getReverseIteratorFrom(endPost, function (key) {
                    return key;
                });
            }
            else {
                var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
                var next = iterator.peek();
                while (next != null && indexDefinition.compare(next, endPost) > 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }
                return iterator;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.compareTo = function (other) {
            if (this.isEmpty()) {
                if (other.isEmpty()) {
                    return 0;
                }
                else {
                    return -1;
                }
            }
            else if (other.isLeafNode() || other.isEmpty()) {
                return 1;
            }
            else if (other === MAX_NODE$2) {
                return -1;
            }
            else {
                // Must be another node with children.
                return 0;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.withIndex = function (indexDefinition) {
            if (indexDefinition === KEY_INDEX ||
                this.indexMap_.hasIndex(indexDefinition)) {
                return this;
            }
            else {
                var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
                return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.isIndexed = function (index) {
            return index === KEY_INDEX || this.indexMap_.hasIndex(index);
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.equals = function (other) {
            if (other === this) {
                return true;
            }
            else if (other.isLeafNode()) {
                return false;
            }
            else {
                var otherChildrenNode = other;
                if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                    return false;
                }
                else if (this.children_.count() === otherChildrenNode.children_.count()) {
                    var thisIter = this.getIterator(PRIORITY_INDEX);
                    var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                    var thisCurrent = thisIter.getNext();
                    var otherCurrent = otherIter.getNext();
                    while (thisCurrent && otherCurrent) {
                        if (thisCurrent.name !== otherCurrent.name ||
                            !thisCurrent.node.equals(otherCurrent.node)) {
                            return false;
                        }
                        thisCurrent = thisIter.getNext();
                        otherCurrent = otherIter.getNext();
                    }
                    return thisCurrent === null && otherCurrent === null;
                }
                else {
                    return false;
                }
            }
        };
        /**
         * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
         * instead.
         *
         * @private
         * @param {!Index} indexDefinition
         * @return {?SortedMap.<NamedNode, Node>}
         */
        ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
            if (indexDefinition === KEY_INDEX) {
                return null;
            }
            else {
                return this.indexMap_.get(indexDefinition.toString());
            }
        };
        /**
         * @private
         * @type {RegExp}
         */
        ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
        return ChildrenNode;
    }());
    /**
     * @constructor
     * @extends {ChildrenNode}
     * @private
     */
    var MaxNode = /** @class */ (function (_super) {
        __extends$1d(MaxNode, _super);
        function MaxNode() {
            return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
        }
        MaxNode.prototype.compareTo = function (other) {
            if (other === this) {
                return 0;
            }
            else {
                return 1;
            }
        };
        MaxNode.prototype.equals = function (other) {
            // Not that we every compare it, but MAX_NODE is only ever equal to itself
            return other === this;
        };
        MaxNode.prototype.getPriority = function () {
            return this;
        };
        MaxNode.prototype.getImmediateChild = function (childName) {
            return ChildrenNode.EMPTY_NODE;
        };
        MaxNode.prototype.isEmpty = function () {
            return false;
        };
        return MaxNode;
    }(ChildrenNode));
    /**
     * Marker that will sort higher than any other snapshot.
     * @type {!MAX_NODE}
     * @const
     */
    var MAX_NODE$2 = new MaxNode();
    Object.defineProperties(NamedNode, {
        MIN: {
            value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
        },
        MAX: {
            value: new NamedNode(MAX_NAME, MAX_NODE$2)
        }
    });
    /**
     * Reference Extensions
     */
    KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
    LeafNode.__childrenNodeConstructor = ChildrenNode;
    setMaxNode(MAX_NODE$2);
    setMaxNode$1(MAX_NODE$2);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var USE_HINZE = true;
    /**
     * Constructs a snapshot node representing the passed JSON and returns it.
     * @param {*} json JSON to create a node for.
     * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
     * passed JSON contains a .priority property.
     * @return {!Node}
     */
    function nodeFromJSON$1(json, priority) {
        if (priority === void 0) { priority = null; }
        if (json === null) {
            return ChildrenNode.EMPTY_NODE;
        }
        if (typeof json === 'object' && '.priority' in json) {
            priority = json['.priority'];
        }
        assert$1(priority === null ||
            typeof priority === 'string' ||
            typeof priority === 'number' ||
            (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
        if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
            json = json['.value'];
        }
        // Valid leaf nodes include non-objects or server-value wrapper objects
        if (typeof json !== 'object' || '.sv' in json) {
            var jsonLeaf = json;
            return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));
        }
        if (!(json instanceof Array) && USE_HINZE) {
            var children_1 = [];
            var childrenHavePriority_1 = false;
            var hinzeJsonObj = json;
            each(hinzeJsonObj, function (key, child) {
                if (key.substring(0, 1) !== '.') {
                    // Ignore metadata nodes
                    var childNode = nodeFromJSON$1(child);
                    if (!childNode.isEmpty()) {
                        childrenHavePriority_1 =
                            childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                        children_1.push(new NamedNode(key, childNode));
                    }
                }
            });
            if (children_1.length === 0) {
                return ChildrenNode.EMPTY_NODE;
            }
            var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);
            if (childrenHavePriority_1) {
                var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
                return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
            }
            else {
                return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);
            }
        }
        else {
            var node_1 = ChildrenNode.EMPTY_NODE;
            each(json, function (key, childData) {
                if (contains(json, key)) {
                    if (key.substring(0, 1) !== '.') {
                        // ignore metadata nodes.
                        var childNode = nodeFromJSON$1(childData);
                        if (childNode.isLeafNode() || !childNode.isEmpty()) {
                            node_1 = node_1.updateImmediateChild(key, childNode);
                        }
                    }
                }
            });
            return node_1.updatePriority(nodeFromJSON$1(priority));
        }
    }
    setNodeFromJSON(nodeFromJSON$1);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @constructor
     * @extends {Index}
     * @private
     */
    var ValueIndex = /** @class */ (function (_super) {
        __extends$1d(ValueIndex, _super);
        function ValueIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.compare = function (a, b) {
            var indexCmp = a.node.compareTo(b.node);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.isDefinedOn = function (node) {
            return true;
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return !oldNode.equals(newNode);
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.maxPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MAX;
        };
        /**
         * @param {*} indexValue
         * @param {string} name
         * @return {!NamedNode}
         */
        ValueIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON$1(indexValue);
            return new NamedNode(name, valueNode);
        };
        /**
         * @return {!string} String representation for inclusion in a query spec
         */
        ValueIndex.prototype.toString = function () {
            return '.value';
        };
        return ValueIndex;
    }(Index));
    var VALUE_INDEX = new ValueIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!Path} indexPath
     * @constructor
     * @extends {Index}
     */
    var PathIndex = /** @class */ (function (_super) {
        __extends$1d(PathIndex, _super);
        function PathIndex(indexPath_) {
            var _this = _super.call(this) || this;
            _this.indexPath_ = indexPath_;
            assert$1(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
            return _this;
        }
        /**
         * @param {!Node} snap
         * @return {!Node}
         * @protected
         */
        PathIndex.prototype.extractChild = function (snap) {
            return snap.getChild(this.indexPath_);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.isDefinedOn = function (node) {
            return !node.getChild(this.indexPath_).isEmpty();
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.compare = function (a, b) {
            var aChild = this.extractChild(a.node);
            var bChild = this.extractChild(b.node);
            var indexCmp = aChild.compareTo(bChild);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON$1(indexValue);
            var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
            return new NamedNode(name, node);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.maxPost = function () {
            var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);
            return new NamedNode(MAX_NAME, node);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.toString = function () {
            return this.indexPath_.slice().join('/');
        };
        return PathIndex;
    }(Index));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
     * surfaces the public methods (val, forEach, etc.) we want to expose.
     */
    var DataSnapshot = /** @class */ (function () {
        /**
         * @param {!Node} node_ A SnapshotNode to wrap.
         * @param {!Reference} ref_ The ref of the location this snapshot came from.
         * @param {!Index} index_ The iteration order for this snapshot
         */
        function DataSnapshot(node_, ref_, index_) {
            this.node_ = node_;
            this.ref_ = ref_;
            this.index_ = index_;
        }
        /**
         * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
         * empty.
         *
         * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
         */
        DataSnapshot.prototype.val = function () {
            validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
            return this.node_.val();
        };
        /**
         * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
         * the entire node contents.
         * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
         */
        DataSnapshot.prototype.exportVal = function () {
            validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
            return this.node_.val(true);
        };
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users
        DataSnapshot.prototype.toJSON = function () {
            // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
            validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
            return this.exportVal();
        };
        /**
         * Returns whether the snapshot contains a non-null value.
         *
         * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
         */
        DataSnapshot.prototype.exists = function () {
            validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
            return !this.node_.isEmpty();
        };
        /**
         * Returns a DataSnapshot of the specified child node's contents.
         *
         * @param {!string} childPathString Path to a child.
         * @return {!DataSnapshot} DataSnapshot for child node.
         */
        DataSnapshot.prototype.child = function (childPathString) {
            validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
            // Ensure the childPath is a string (can be a number)
            childPathString = String(childPathString);
            validatePathString('DataSnapshot.child', 1, childPathString, false);
            var childPath = new Path(childPathString);
            var childRef = this.ref_.child(childPath);
            return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);
        };
        /**
         * Returns whether the snapshot contains a child at the specified path.
         *
         * @param {!string} childPathString Path to a child.
         * @return {boolean} Whether the child exists.
         */
        DataSnapshot.prototype.hasChild = function (childPathString) {
            validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
            validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
            var childPath = new Path(childPathString);
            return !this.node_.getChild(childPath).isEmpty();
        };
        /**
         * Returns the priority of the object, or null if no priority was set.
         *
         * @return {string|number|null} The priority.
         */
        DataSnapshot.prototype.getPriority = function () {
            validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
            // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
            return this.node_.getPriority().val();
        };
        /**
         * Iterates through child nodes and calls the specified action for each one.
         *
         * @param {function(!DataSnapshot)} action Callback function to be called
         * for each child.
         * @return {boolean} True if forEach was canceled by action returning true for
         * one of the child nodes.
         */
        DataSnapshot.prototype.forEach = function (action) {
            var _this = this;
            validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
            validateCallback('DataSnapshot.forEach', 1, action, false);
            if (this.node_.isLeafNode()) {
                return false;
            }
            var childrenNode = this.node_;
            // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
            return !!childrenNode.forEachChild(this.index_, function (key, node) {
                return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));
            });
        };
        /**
         * Returns whether this DataSnapshot has children.
         * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
         */
        DataSnapshot.prototype.hasChildren = function () {
            validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
            if (this.node_.isLeafNode()) {
                return false;
            }
            else {
                return !this.node_.isEmpty();
            }
        };
        Object.defineProperty(DataSnapshot.prototype, "key", {
            get: function () {
                return this.ref_.getKey();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the number of children for this DataSnapshot.
         * @return {number} The number of children that this DataSnapshot contains.
         */
        DataSnapshot.prototype.numChildren = function () {
            validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
            return this.node_.numChildren();
        };
        /**
         * @return {Reference} The Firebase reference for the location this snapshot's data came from.
         */
        DataSnapshot.prototype.getRef = function () {
            validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
            return this.ref_;
        };
        Object.defineProperty(DataSnapshot.prototype, "ref", {
            get: function () {
                return this.getRef();
            },
            enumerable: false,
            configurable: true
        });
        return DataSnapshot;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encapsulates the data needed to raise an event
     * @implements {Event}
     */
    var DataEvent = /** @class */ (function () {
        /**
         * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
         * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
         * @param {!DataSnapshot} snapshot The data backing the event
         * @param {?string=} prevName Optional, the name of the previous child for child_* events.
         */
        function DataEvent(eventType, eventRegistration, snapshot, prevName) {
            this.eventType = eventType;
            this.eventRegistration = eventRegistration;
            this.snapshot = snapshot;
            this.prevName = prevName;
        }
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getPath = function () {
            var ref = this.snapshot.getRef();
            if (this.eventType === 'value') {
                return ref.path;
            }
            else {
                return ref.getParent().path;
            }
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getEventType = function () {
            return this.eventType;
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getEventRunner = function () {
            return this.eventRegistration.getEventRunner(this);
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.toString = function () {
            return (this.getPath().toString() +
                ':' +
                this.eventType +
                ':' +
                stringify$1(this.snapshot.exportVal()));
        };
        return DataEvent;
    }());
    var CancelEvent = /** @class */ (function () {
        /**
         * @param {EventRegistration} eventRegistration
         * @param {Error} error
         * @param {!Path} path
         */
        function CancelEvent(eventRegistration, error, path) {
            this.eventRegistration = eventRegistration;
            this.error = error;
            this.path = path;
        }
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getPath = function () {
            return this.path;
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getEventType = function () {
            return 'cancel';
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getEventRunner = function () {
            return this.eventRegistration.getEventRunner(this);
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.toString = function () {
            return this.path.toString() + ':cancel';
        };
        return CancelEvent;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents registration for 'value' events.
     */
    var ValueEventRegistration = /** @class */ (function () {
        /**
         * @param {?function(!DataSnapshot)} callback_
         * @param {?function(Error)} cancelCallback_
         * @param {?Object} context_
         */
        function ValueEventRegistration(callback_, cancelCallback_, context_) {
            this.callback_ = callback_;
            this.cancelCallback_ = cancelCallback_;
            this.context_ = context_;
        }
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.respondsTo = function (eventType) {
            return eventType === 'value';
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.createEvent = function (change, query) {
            var index = query.getQueryParams().getIndex();
            return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.getEventRunner = function (eventData) {
            var ctx = this.context_;
            if (eventData.getEventType() === 'cancel') {
                assert$1(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
                var cancelCB_1 = this.cancelCallback_;
                return function () {
                    // We know that error exists, we checked above that this is a cancel event
                    cancelCB_1.call(ctx, eventData.error);
                };
            }
            else {
                var cb_1 = this.callback_;
                return function () {
                    cb_1.call(ctx, eventData.snapshot);
                };
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
            if (this.cancelCallback_) {
                return new CancelEvent(this, error, path);
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.matches = function (other) {
            if (!(other instanceof ValueEventRegistration)) {
                return false;
            }
            else if (!other.callback_ || !this.callback_) {
                // If no callback specified, we consider it to match any callback.
                return true;
            }
            else {
                return (other.callback_ === this.callback_ && other.context_ === this.context_);
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.hasAnyCallback = function () {
            return this.callback_ !== null;
        };
        return ValueEventRegistration;
    }());
    /**
     * Represents the registration of 1 or more child_xxx events.
     *
     * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
     * register a group of callbacks together in the future.
     *
     * @constructor
     * @implements {EventRegistration}
     */
    var ChildEventRegistration = /** @class */ (function () {
        /**
         * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
         * @param {?function(Error)} cancelCallback_
         * @param {Object=} context_
         */
        function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
            this.callbacks_ = callbacks_;
            this.cancelCallback_ = cancelCallback_;
            this.context_ = context_;
        }
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.respondsTo = function (eventType) {
            var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
            eventToCheck =
                eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
            return contains(this.callbacks_, eventToCheck);
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
            if (this.cancelCallback_) {
                return new CancelEvent(this, error, path);
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.createEvent = function (change, query) {
            assert$1(change.childName != null, 'Child events should have a childName.');
            var ref = query.getRef().child(/** @type {!string} */ change.childName);
            var index = query.getQueryParams().getIndex();
            return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.getEventRunner = function (eventData) {
            var ctx = this.context_;
            if (eventData.getEventType() === 'cancel') {
                assert$1(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
                var cancelCB_2 = this.cancelCallback_;
                return function () {
                    // We know that error exists, we checked above that this is a cancel event
                    cancelCB_2.call(ctx, eventData.error);
                };
            }
            else {
                var cb_2 = this.callbacks_[eventData.eventType];
                return function () {
                    cb_2.call(ctx, eventData.snapshot, eventData.prevName);
                };
            }
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.matches = function (other) {
            var _this = this;
            if (other instanceof ChildEventRegistration) {
                if (!this.callbacks_ || !other.callbacks_) {
                    return true;
                }
                else if (this.context_ === other.context_) {
                    var otherKeys = Object.keys(other.callbacks_);
                    var thisKeys = Object.keys(this.callbacks_);
                    var otherCount = otherKeys.length;
                    var thisCount = thisKeys.length;
                    if (otherCount === thisCount) {
                        // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
                        // If event types don't match, not a match
                        // If count is not 1, exact match across all
                        if (otherCount === 1) {
                            var otherKey = otherKeys[0];
                            var thisKey = thisKeys[0];
                            return (thisKey === otherKey &&
                                (!other.callbacks_[otherKey] ||
                                    !this.callbacks_[thisKey] ||
                                    other.callbacks_[otherKey] === this.callbacks_[thisKey]));
                        }
                        else {
                            // Exact match on each key.
                            return thisKeys.every(function (eventType) {
                                return other.callbacks_[eventType] === _this.callbacks_[eventType];
                            });
                        }
                    }
                }
            }
            return false;
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.hasAnyCallback = function () {
            return this.callbacks_ !== null;
        };
        return ChildEventRegistration;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __referenceConstructor;
    /**
     * A Query represents a filter to be applied to a firebase location.  This object purely represents the
     * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
     *
     * Since every Firebase reference is a query, Firebase inherits from this object.
     */
    var Query = /** @class */ (function () {
        function Query(repo, path, queryParams_, orderByCalled_) {
            this.repo = repo;
            this.path = path;
            this.queryParams_ = queryParams_;
            this.orderByCalled_ = orderByCalled_;
        }
        Object.defineProperty(Query, "__referenceConstructor", {
            get: function () {
                assert$1(__referenceConstructor, 'Reference.ts has not been loaded');
                return __referenceConstructor;
            },
            set: function (val) {
                __referenceConstructor = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Validates start/end values for queries.
         * @param {!QueryParams} params
         * @private
         */
        Query.validateQueryEndpoints_ = function (params) {
            var startNode = null;
            var endNode = null;
            if (params.hasStart()) {
                startNode = params.getIndexStartValue();
            }
            if (params.hasEnd()) {
                endNode = params.getIndexEndValue();
            }
            if (params.getIndex() === KEY_INDEX) {
                var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
                    'startAt(), endAt(), or equalTo().';
                var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +
                    'endAt(), endBefore(), or equalTo() must be a string.';
                if (params.hasStart()) {
                    var startName = params.getIndexStartName();
                    if (startName !== MIN_NAME) {
                        throw new Error(tooManyArgsError);
                    }
                    else if (typeof startNode !== 'string') {
                        throw new Error(wrongArgTypeError);
                    }
                }
                if (params.hasEnd()) {
                    var endName = params.getIndexEndName();
                    if (endName !== MAX_NAME) {
                        throw new Error(tooManyArgsError);
                    }
                    else if (typeof endNode !== 'string') {
                        throw new Error(wrongArgTypeError);
                    }
                }
            }
            else if (params.getIndex() === PRIORITY_INDEX) {
                if ((startNode != null && !isValidPriority(startNode)) ||
                    (endNode != null && !isValidPriority(endNode))) {
                    throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
                        'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +
                        '(null, a number, or a string).');
                }
            }
            else {
                assert$1(params.getIndex() instanceof PathIndex ||
                    params.getIndex() === VALUE_INDEX, 'unknown index type.');
                if ((startNode != null && typeof startNode === 'object') ||
                    (endNode != null && typeof endNode === 'object')) {
                    throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +
                        'equalTo() cannot be an object.');
                }
            }
        };
        /**
         * Validates that limit* has been called with the correct combination of parameters
         * @param {!QueryParams} params
         * @private
         */
        Query.validateLimit_ = function (params) {
            if (params.hasStart() &&
                params.hasEnd() &&
                params.hasLimit() &&
                !params.hasAnchoredLimit()) {
                throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use " +
                    'limitToFirst() or limitToLast() instead.');
            }
        };
        /**
         * Validates that no other order by call has been made
         * @param {!string} fnName
         * @private
         */
        Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
            if (this.orderByCalled_ === true) {
                throw new Error(fnName + ": You can't combine multiple orderBy calls.");
            }
        };
        /**
         * @return {!QueryParams}
         */
        Query.prototype.getQueryParams = function () {
            return this.queryParams_;
        };
        /**
         * @return {!Reference}
         */
        Query.prototype.getRef = function () {
            validateArgCount('Query.ref', 0, 0, arguments.length);
            // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
            // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
            // method gets called.
            return new Query.__referenceConstructor(this.repo, this.path);
        };
        /**
         * @param {!string} eventType
         * @param {!function(DataSnapshot, string=)} callback
         * @param {(function(Error)|Object)=} cancelCallbackOrContext
         * @param {Object=} context
         * @return {!function(DataSnapshot, string=)}
         */
        Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
            validateArgCount('Query.on', 2, 4, arguments.length);
            validateEventType('Query.on', 1, eventType, false);
            validateCallback('Query.on', 2, callback, false);
            var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
            if (eventType === 'value') {
                this.onValueEvent(callback, ret.cancel, ret.context);
            }
            else {
                var callbacks = {};
                callbacks[eventType] = callback;
                this.onChildEvent(callbacks, ret.cancel, ret.context);
            }
            return callback;
        };
        /**
         * @param {!function(!DataSnapshot)} callback
         * @param {?function(Error)} cancelCallback
         * @param {?Object} context
         * @protected
         */
        Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
            var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);
            this.repo.addEventCallbackForQuery(this, container);
        };
        /**
         * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
         * @param {?function(Error)} cancelCallback
         * @param {?Object} context
         * @protected
         */
        Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
            var container = new ChildEventRegistration(callbacks, cancelCallback, context);
            this.repo.addEventCallbackForQuery(this, container);
        };
        /**
         * @param {string=} eventType
         * @param {(function(!DataSnapshot, ?string=))=} callback
         * @param {Object=} context
         */
        Query.prototype.off = function (eventType, callback, context) {
            validateArgCount('Query.off', 0, 3, arguments.length);
            validateEventType('Query.off', 1, eventType, true);
            validateCallback('Query.off', 2, callback, true);
            validateContextObject('Query.off', 3, context, true);
            var container = null;
            var callbacks = null;
            if (eventType === 'value') {
                var valueCallback = callback || null;
                container = new ValueEventRegistration(valueCallback, null, context || null);
            }
            else if (eventType) {
                if (callback) {
                    callbacks = {};
                    callbacks[eventType] = callback;
                }
                container = new ChildEventRegistration(callbacks, null, context || null);
            }
            this.repo.removeEventCallbackForQuery(this, container);
        };
        /**
         * Get the server-value for this query, or return a cached value if not connected.
         */
        Query.prototype.get = function () {
            return this.repo.getValue(this);
        };
        /**
         * Attaches a listener, waits for the first event, and then removes the listener
         * @param {!string} eventType
         * @param {!function(!DataSnapshot, string=)} userCallback
         * @param failureCallbackOrContext
         * @param context
         * @return {!firebase.Promise}
         */
        Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {
            var _this = this;
            validateArgCount('Query.once', 1, 4, arguments.length);
            validateEventType('Query.once', 1, eventType, false);
            validateCallback('Query.once', 2, userCallback, true);
            var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);
            // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
            // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
            // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
            // against the Promise specification.
            var firstCall = true;
            var deferred = new Deferred();
            // A dummy error handler in case a user wasn't expecting promises
            deferred.promise.catch(function () { });
            var onceCallback = function (snapshot) {
                // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
                // triggers multiple events (e.g. child_added or child_changed).
                if (firstCall) {
                    firstCall = false;
                    _this.off(eventType, onceCallback);
                    if (userCallback) {
                        userCallback.bind(ret.context)(snapshot);
                    }
                    deferred.resolve(snapshot);
                }
            };
            this.on(eventType, onceCallback, 
            /*cancel=*/ function (err) {
                _this.off(eventType, onceCallback);
                if (ret.cancel) {
                    ret.cancel.bind(ret.context)(err);
                }
                deferred.reject(err);
            });
            return deferred.promise;
        };
        /**
         * Set a limit and anchor it to the start of the window.
         * @param {!number} limit
         * @return {!Query}
         */
        Query.prototype.limitToFirst = function (limit) {
            validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
            if (typeof limit !== 'number' ||
                Math.floor(limit) !== limit ||
                limit <= 0) {
                throw new Error('Query.limitToFirst: First argument must be a positive integer.');
            }
            if (this.queryParams_.hasLimit()) {
                throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +
                    'limitToFirst, or limitToLast).');
            }
            return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
        };
        /**
         * Set a limit and anchor it to the end of the window.
         * @param {!number} limit
         * @return {!Query}
         */
        Query.prototype.limitToLast = function (limit) {
            validateArgCount('Query.limitToLast', 1, 1, arguments.length);
            if (typeof limit !== 'number' ||
                Math.floor(limit) !== limit ||
                limit <= 0) {
                throw new Error('Query.limitToLast: First argument must be a positive integer.');
            }
            if (this.queryParams_.hasLimit()) {
                throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +
                    'limitToFirst, or limitToLast).');
            }
            return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
        };
        /**
         * Given a child path, return a new query ordered by the specified grandchild path.
         * @param {!string} path
         * @return {!Query}
         */
        Query.prototype.orderByChild = function (path) {
            validateArgCount('Query.orderByChild', 1, 1, arguments.length);
            if (path === '$key') {
                throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
            }
            else if (path === '$priority') {
                throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
            }
            else if (path === '$value') {
                throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
            }
            validatePathString('Query.orderByChild', 1, path, false);
            this.validateNoPreviousOrderByCall_('Query.orderByChild');
            var parsedPath = new Path(path);
            if (parsedPath.isEmpty()) {
                throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
            }
            var index = new PathIndex(parsedPath);
            var newParams = this.queryParams_.orderBy(index);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the KeyIndex
         * @return {!Query}
         */
        Query.prototype.orderByKey = function () {
            validateArgCount('Query.orderByKey', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByKey');
            var newParams = this.queryParams_.orderBy(KEY_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the PriorityIndex
         * @return {!Query}
         */
        Query.prototype.orderByPriority = function () {
            validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByPriority');
            var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the ValueIndex
         * @return {!Query}
         */
        Query.prototype.orderByValue = function () {
            validateArgCount('Query.orderByValue', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByValue');
            var newParams = this.queryParams_.orderBy(VALUE_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * @param {number|string|boolean|null} value
         * @param {?string=} name
         * @return {!Query}
         */
        Query.prototype.startAt = function (value, name) {
            if (value === void 0) { value = null; }
            validateArgCount('Query.startAt', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
            validateKey('Query.startAt', 2, name, true);
            var newParams = this.queryParams_.startAt(value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasStart()) {
                throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +
                    'or equalTo).');
            }
            // Calling with no params tells us to start at the beginning.
            if (value === undefined) {
                value = null;
                name = null;
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        Query.prototype.startAfter = function (value, name) {
            if (value === void 0) { value = null; }
            validateArgCount('Query.startAfter', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.startAfter', 1, value, this.path, false);
            validateKey('Query.startAfter', 2, name, true);
            var newParams = this.queryParams_.startAfter(value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasStart()) {
                throw new Error('Query.startAfter: Starting point was already set (by another call to startAt, startAfter ' +
                    'or equalTo).');
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        /**
         * @param {number|string|boolean|null} value
         * @param {?string=} name
         * @return {!Query}
         */
        Query.prototype.endAt = function (value, name) {
            if (value === void 0) { value = null; }
            validateArgCount('Query.endAt', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
            validateKey('Query.endAt', 2, name, true);
            var newParams = this.queryParams_.endAt(value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.endAt: Ending point was already set (by another call to endAt, endBefore, or ' +
                    'equalTo).');
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        Query.prototype.endBefore = function (value, name) {
            if (value === void 0) { value = null; }
            validateArgCount('Query.endBefore', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.endBefore', 1, value, this.path, false);
            validateKey('Query.endBefore', 2, name, true);
            var newParams = this.queryParams_.endBefore(value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.endBefore: Ending point was already set (by another call to endAt, endBefore, or ' +
                    'equalTo).');
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        /**
         * Load the selection of children with exactly the specified value, and, optionally,
         * the specified name.
         * @param {number|string|boolean|null} value
         * @param {string=} name
         * @return {!Query}
         */
        Query.prototype.equalTo = function (value, name) {
            validateArgCount('Query.equalTo', 1, 2, arguments.length);
            validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
            validateKey('Query.equalTo', 2, name, true);
            if (this.queryParams_.hasStart()) {
                throw new Error('Query.equalTo: Starting point was already set (by another call to startAt/startAfter or ' +
                    'equalTo).');
            }
            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.equalTo: Ending point was already set (by another call to endAt/endBefore or ' +
                    'equalTo).');
            }
            return this.startAt(value, name).endAt(value, name);
        };
        /**
         * @return {!string} URL for this location.
         */
        Query.prototype.toString = function () {
            validateArgCount('Query.toString', 0, 0, arguments.length);
            return this.repo.toString() + this.path.toUrlEncodedString();
        };
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users.
        Query.prototype.toJSON = function () {
            // An optional spacer argument is unnecessary for a string.
            validateArgCount('Query.toJSON', 0, 1, arguments.length);
            return this.toString();
        };
        /**
         * An object representation of the query parameters used by this Query.
         * @return {!Object}
         */
        Query.prototype.queryObject = function () {
            return this.queryParams_.getQueryObject();
        };
        /**
         * @return {!string}
         */
        Query.prototype.queryIdentifier = function () {
            var obj = this.queryObject();
            var id = ObjectToUniqueKey(obj);
            return id === '{}' ? 'default' : id;
        };
        /**
         * Return true if this query and the provided query are equivalent; otherwise, return false.
         * @param {Query} other
         * @return {boolean}
         */
        Query.prototype.isEqual = function (other) {
            validateArgCount('Query.isEqual', 1, 1, arguments.length);
            if (!(other instanceof Query)) {
                var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
                throw new Error(error);
            }
            var sameRepo = this.repo === other.repo;
            var samePath = this.path.equals(other.path);
            var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
            return sameRepo && samePath && sameQueryIdentifier;
        };
        /**
         * Helper used by .on and .once to extract the context and or cancel arguments.
         * @param {!string} fnName The function name (on or once)
         * @param {(function(Error)|Object)=} cancelOrContext
         * @param {Object=} context
         * @return {{cancel: ?function(Error), context: ?Object}}
         * @private
         */
        Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
            var ret = { cancel: null, context: null };
            if (cancelOrContext && context) {
                ret.cancel = cancelOrContext;
                validateCallback(fnName, 3, ret.cancel, true);
                ret.context = context;
                validateContextObject(fnName, 4, ret.context, true);
            }
            else if (cancelOrContext) {
                // we have either a cancel callback or a context.
                if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
                    // it's a context!
                    ret.context = cancelOrContext;
                }
                else if (typeof cancelOrContext === 'function') {
                    ret.cancel = cancelOrContext;
                }
                else {
                    throw new Error(errorPrefix(fnName, 3, true) +
                        ' must either be a cancel callback or a context object.');
                }
            }
            return ret;
        };
        Object.defineProperty(Query.prototype, "ref", {
            get: function () {
                return this.getRef();
            },
            enumerable: false,
            configurable: true
        });
        return Query;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ExistingValueProvider = /** @class */ (function () {
        function ExistingValueProvider(node_) {
            this.node_ = node_;
        }
        ExistingValueProvider.prototype.getImmediateChild = function (childName) {
            var child = this.node_.getImmediateChild(childName);
            return new ExistingValueProvider(child);
        };
        ExistingValueProvider.prototype.node = function () {
            return this.node_;
        };
        return ExistingValueProvider;
    }());
    var DeferredValueProvider = /** @class */ (function () {
        function DeferredValueProvider(syncTree, path) {
            this.syncTree_ = syncTree;
            this.path_ = path;
        }
        DeferredValueProvider.prototype.getImmediateChild = function (childName) {
            var childPath = this.path_.child(childName);
            return new DeferredValueProvider(this.syncTree_, childPath);
        };
        DeferredValueProvider.prototype.node = function () {
            return this.syncTree_.calcCompleteEventCache(this.path_);
        };
        return DeferredValueProvider;
    }());
    /**
     * Generate placeholders for deferred values.
     * @param {?Object} values
     * @return {!Object}
     */
    var generateWithValues = function (values) {
        values = values || {};
        values['timestamp'] = values['timestamp'] || new Date().getTime();
        return values;
    };
    /**
     * Value to use when firing local events. When writing server values, fire
     * local events with an approximate value, otherwise return value as-is.
     * @param {(Object|string|number|boolean)} value
     * @param {!Object} serverValues
     * @return {!(string|number|boolean)}
     */
    var resolveDeferredLeafValue = function (value, existingVal, serverValues) {
        if (!value || typeof value !== 'object') {
            return value;
        }
        assert$1('.sv' in value, 'Unexpected leaf node or priority contents');
        if (typeof value['.sv'] === 'string') {
            return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
        }
        else if (typeof value['.sv'] === 'object') {
            return resolveComplexDeferredValue(value['.sv'], existingVal);
        }
        else {
            assert$1(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
        }
    };
    var resolveScalarDeferredValue = function (op, existing, serverValues) {
        switch (op) {
            case 'timestamp':
                return serverValues['timestamp'];
            default:
                assert$1(false, 'Unexpected server value: ' + op);
        }
    };
    var resolveComplexDeferredValue = function (op, existing, unused) {
        if (!op.hasOwnProperty('increment')) {
            assert$1(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
        }
        var delta = op['increment'];
        if (typeof delta !== 'number') {
            assert$1(false, 'Unexpected increment value: ' + delta);
        }
        var existingNode = existing.node();
        assert$1(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
        // Incrementing a non-number sets the value to the incremented amount
        if (!existingNode.isLeafNode()) {
            return delta;
        }
        var leaf = existingNode;
        var existingVal = leaf.getValue();
        if (typeof existingVal !== 'number') {
            return delta;
        }
        // No need to do over/underflow arithmetic here because JS only handles floats under the covers
        return existingVal + delta;
    };
    /**
     * Recursively replace all deferred values and priorities in the tree with the
     * specified generated replacement values.
     * @param {!Path} path path to which write is relative
     * @param {!Node} node new data written at path
     * @param {!SyncTree} syncTree current data
     * @param {!Object} serverValues
     * @return {!SparseSnapshotTree}
     */
    var resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
        return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
    };
    /**
     * Recursively replace all deferred values and priorities in the node with the
     * specified generated replacement values.  If there are no server values in the node,
     * it'll be returned as-is.
     * @param {!Node} node
     * @param {!Object} serverValues
     * @return {!Node}
     */
    var resolveDeferredValueSnapshot = function (node, existing, serverValues) {
        return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
    };
    function resolveDeferredValue(node, existingVal, serverValues) {
        var rawPri = node.getPriority().val();
        var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
        var newNode;
        if (node.isLeafNode()) {
            var leafNode = node;
            var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
            if (value !== leafNode.getValue() ||
                priority !== leafNode.getPriority().val()) {
                return new LeafNode(value, nodeFromJSON$1(priority));
            }
            else {
                return node;
            }
        }
        else {
            var childrenNode = node;
            newNode = childrenNode;
            if (priority !== childrenNode.getPriority().val()) {
                newNode = newNode.updatePriority(new LeafNode(priority));
            }
            childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
                if (newChildNode !== childNode) {
                    newNode = newNode.updateImmediateChild(childName, newChildNode);
                }
            });
            return newNode;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper class to store a sparse set of snapshots.
     */
    var SparseSnapshotTree = /** @class */ (function () {
        function SparseSnapshotTree() {
            this.value = null;
            this.children = new Map();
        }
        /**
         * Gets the node stored at the given path if one exists.
         *
         * @param path Path to look up snapshot for.
         * @return The retrieved node, or null.
         */
        SparseSnapshotTree.prototype.find = function (path) {
            if (this.value != null) {
                return this.value.getChild(path);
            }
            else if (!path.isEmpty() && this.children.size > 0) {
                var childKey = path.getFront();
                path = path.popFront();
                if (this.children.has(childKey)) {
                    var childTree = this.children.get(childKey);
                    return childTree.find(path);
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        };
        /**
         * Stores the given node at the specified path. If there is already a node
         * at a shallower path, it merges the new data into that snapshot node.
         *
         * @param path Path to look up snapshot for.
         * @param data The new data, or null.
         */
        SparseSnapshotTree.prototype.remember = function (path, data) {
            if (path.isEmpty()) {
                this.value = data;
                this.children.clear();
            }
            else if (this.value !== null) {
                this.value = this.value.updateChild(path, data);
            }
            else {
                var childKey = path.getFront();
                if (!this.children.has(childKey)) {
                    this.children.set(childKey, new SparseSnapshotTree());
                }
                var child = this.children.get(childKey);
                path = path.popFront();
                child.remember(path, data);
            }
        };
        /**
         * Purge the data at path from the cache.
         *
         * @param path Path to look up snapshot for.
         * @return True if this node should now be removed.
         */
        SparseSnapshotTree.prototype.forget = function (path) {
            if (path.isEmpty()) {
                this.value = null;
                this.children.clear();
                return true;
            }
            else {
                if (this.value !== null) {
                    if (this.value.isLeafNode()) {
                        // We're trying to forget a node that doesn't exist
                        return false;
                    }
                    else {
                        var value = this.value;
                        this.value = null;
                        var self_1 = this;
                        value.forEachChild(PRIORITY_INDEX, function (key, tree) {
                            self_1.remember(new Path(key), tree);
                        });
                        return this.forget(path);
                    }
                }
                else if (this.children.size > 0) {
                    var childKey = path.getFront();
                    path = path.popFront();
                    if (this.children.has(childKey)) {
                        var safeToRemove = this.children.get(childKey).forget(path);
                        if (safeToRemove) {
                            this.children.delete(childKey);
                        }
                    }
                    return this.children.size === 0;
                }
                else {
                    return true;
                }
            }
        };
        /**
         * Recursively iterates through all of the stored tree and calls the
         * callback on each one.
         *
         * @param prefixPath Path to look up node for.
         * @param func The function to invoke for each tree.
         */
        SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
            if (this.value !== null) {
                func(prefixPath, this.value);
            }
            else {
                this.forEachChild(function (key, tree) {
                    var path = new Path(prefixPath.toString() + '/' + key);
                    tree.forEachTree(path, func);
                });
            }
        };
        /**
         * Iterates through each immediate child and triggers the callback.
         *
         * @param func The function to invoke for each child.
         */
        SparseSnapshotTree.prototype.forEachChild = function (func) {
            this.children.forEach(function (tree, key) {
                func(key, tree);
            });
        };
        return SparseSnapshotTree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @enum
     */
    var OperationType;
    (function (OperationType) {
        OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
        OperationType[OperationType["MERGE"] = 1] = "MERGE";
        OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
        OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
    })(OperationType || (OperationType = {}));
    /**
     * @param {boolean} fromUser
     * @param {boolean} fromServer
     * @param {?string} queryId
     * @param {boolean} tagged
     * @constructor
     */
    var OperationSource = /** @class */ (function () {
        function OperationSource(fromUser, fromServer, queryId, tagged) {
            this.fromUser = fromUser;
            this.fromServer = fromServer;
            this.queryId = queryId;
            this.tagged = tagged;
            assert$1(!tagged || fromServer, 'Tagged queries must be from server.');
        }
        /**
         * @const
         * @type {!OperationSource}
         */
        OperationSource.User = new OperationSource(
        /*fromUser=*/ true, false, null, 
        /*tagged=*/ false);
        /**
         * @const
         * @type {!OperationSource}
         */
        OperationSource.Server = new OperationSource(false, 
        /*fromServer=*/ true, null, 
        /*tagged=*/ false);
        /**
         * @param {string} queryId
         * @return {!OperationSource}
         */
        OperationSource.forServerTaggedQuery = function (queryId) {
            return new OperationSource(false, 
            /*fromServer=*/ true, queryId, 
            /*tagged=*/ true);
        };
        return OperationSource;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AckUserWrite = /** @class */ (function () {
        /**
         *
         * @param {!Path} path
         * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
         * @param {!boolean} revert
         */
        function AckUserWrite(
        /** @inheritDoc */ path, 
        /** @inheritDoc */ affectedTree, 
        /** @inheritDoc */ revert) {
            this.path = path;
            this.affectedTree = affectedTree;
            this.revert = revert;
            /** @inheritDoc */
            this.type = OperationType.ACK_USER_WRITE;
            /** @inheritDoc */
            this.source = OperationSource.User;
        }
        /**
         * @inheritDoc
         */
        AckUserWrite.prototype.operationForChild = function (childName) {
            if (!this.path.isEmpty()) {
                assert$1(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
                return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
            }
            else if (this.affectedTree.value != null) {
                assert$1(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
                // All child locations are affected as well; just return same operation.
                return this;
            }
            else {
                var childTree = this.affectedTree.subtree(new Path(childName));
                return new AckUserWrite(Path.Empty, childTree, this.revert);
            }
        };
        return AckUserWrite;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var emptyChildrenSingleton;
    /**
     * Singleton empty children collection.
     *
     * @const
     * @type {!SortedMap.<string, !ImmutableTree.<?>>}
     */
    var EmptyChildren = function () {
        if (!emptyChildrenSingleton) {
            emptyChildrenSingleton = new SortedMap(stringCompare);
        }
        return emptyChildrenSingleton;
    };
    /**
     * A tree with immutable elements.
     */
    var ImmutableTree = /** @class */ (function () {
        /**
         * @template T
         * @param {?T} value
         * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
         */
        function ImmutableTree(value, children) {
            if (children === void 0) { children = EmptyChildren(); }
            this.value = value;
            this.children = children;
        }
        /**
         * @template T
         * @param {!Object.<string, !T>} obj
         * @return {!ImmutableTree.<!T>}
         */
        ImmutableTree.fromObject = function (obj) {
            var tree = ImmutableTree.Empty;
            each(obj, function (childPath, childSnap) {
                tree = tree.set(new Path(childPath), childSnap);
            });
            return tree;
        };
        /**
         * True if the value is empty and there are no children
         * @return {boolean}
         */
        ImmutableTree.prototype.isEmpty = function () {
            return this.value === null && this.children.isEmpty();
        };
        /**
         * Given a path and predicate, return the first node and the path to that node
         * where the predicate returns true.
         *
         * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
         * on the way back out, it may be better to pass down a pathSoFar obj.
         *
         * @param {!Path} relativePath The remainder of the path
         * @param {function(T):boolean} predicate The predicate to satisfy to return a
         *   node
         * @return {?{path:!Path, value:!T}}
         */
        ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
            if (this.value != null && predicate(this.value)) {
                return { path: Path.Empty, value: this.value };
            }
            else {
                if (relativePath.isEmpty()) {
                    return null;
                }
                else {
                    var front = relativePath.getFront();
                    var child = this.children.get(front);
                    if (child !== null) {
                        var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);
                        if (childExistingPathAndValue != null) {
                            var fullPath = new Path(front).child(childExistingPathAndValue.path);
                            return { path: fullPath, value: childExistingPathAndValue.value };
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        };
        /**
         * Find, if it exists, the shortest subpath of the given path that points a defined
         * value in the tree
         * @param {!Path} relativePath
         * @return {?{path: !Path, value: !T}}
         */
        ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
            return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
        };
        /**
         * @param {!Path} relativePath
         * @return {!ImmutableTree.<T>} The subtree at the given path
         */
        ImmutableTree.prototype.subtree = function (relativePath) {
            if (relativePath.isEmpty()) {
                return this;
            }
            else {
                var front = relativePath.getFront();
                var childTree = this.children.get(front);
                if (childTree !== null) {
                    return childTree.subtree(relativePath.popFront());
                }
                else {
                    return ImmutableTree.Empty;
                }
            }
        };
        /**
         * Sets a value at the specified path.
         *
         * @param {!Path} relativePath Path to set value at.
         * @param {?T} toSet Value to set.
         * @return {!ImmutableTree.<T>} Resulting tree.
         */
        ImmutableTree.prototype.set = function (relativePath, toSet) {
            if (relativePath.isEmpty()) {
                return new ImmutableTree(toSet, this.children);
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front) || ImmutableTree.Empty;
                var newChild = child.set(relativePath.popFront(), toSet);
                var newChildren = this.children.insert(front, newChild);
                return new ImmutableTree(this.value, newChildren);
            }
        };
        /**
         * Removes the value at the specified path.
         *
         * @param {!Path} relativePath Path to value to remove.
         * @return {!ImmutableTree.<T>} Resulting tree.
         */
        ImmutableTree.prototype.remove = function (relativePath) {
            if (relativePath.isEmpty()) {
                if (this.children.isEmpty()) {
                    return ImmutableTree.Empty;
                }
                else {
                    return new ImmutableTree(null, this.children);
                }
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front);
                if (child) {
                    var newChild = child.remove(relativePath.popFront());
                    var newChildren = void 0;
                    if (newChild.isEmpty()) {
                        newChildren = this.children.remove(front);
                    }
                    else {
                        newChildren = this.children.insert(front, newChild);
                    }
                    if (this.value === null && newChildren.isEmpty()) {
                        return ImmutableTree.Empty;
                    }
                    else {
                        return new ImmutableTree(this.value, newChildren);
                    }
                }
                else {
                    return this;
                }
            }
        };
        /**
         * Gets a value from the tree.
         *
         * @param {!Path} relativePath Path to get value for.
         * @return {?T} Value at path, or null.
         */
        ImmutableTree.prototype.get = function (relativePath) {
            if (relativePath.isEmpty()) {
                return this.value;
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front);
                if (child) {
                    return child.get(relativePath.popFront());
                }
                else {
                    return null;
                }
            }
        };
        /**
         * Replace the subtree at the specified path with the given new tree.
         *
         * @param {!Path} relativePath Path to replace subtree for.
         * @param {!ImmutableTree} newTree New tree.
         * @return {!ImmutableTree} Resulting tree.
         */
        ImmutableTree.prototype.setTree = function (relativePath, newTree) {
            if (relativePath.isEmpty()) {
                return newTree;
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front) || ImmutableTree.Empty;
                var newChild = child.setTree(relativePath.popFront(), newTree);
                var newChildren = void 0;
                if (newChild.isEmpty()) {
                    newChildren = this.children.remove(front);
                }
                else {
                    newChildren = this.children.insert(front, newChild);
                }
                return new ImmutableTree(this.value, newChildren);
            }
        };
        /**
         * Performs a depth first fold on this tree. Transforms a tree into a single
         * value, given a function that operates on the path to a node, an optional
         * current value, and a map of child names to folded subtrees
         * @template V
         * @param {function(Path, ?T, Object.<string, V>):V} fn
         * @return {V}
         */
        ImmutableTree.prototype.fold = function (fn) {
            return this.fold_(Path.Empty, fn);
        };
        /**
         * Recursive helper for public-facing fold() method
         * @template V
         * @param {!Path} pathSoFar
         * @param {function(Path, ?T, Object.<string, V>):V} fn
         * @return {V}
         * @private
         */
        ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
            var accum = {};
            this.children.inorderTraversal(function (childKey, childTree) {
                accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
            });
            return fn(pathSoFar, this.value, accum);
        };
        /**
         * Find the first matching value on the given path. Return the result of applying f to it.
         * @template V
         * @param {!Path} path
         * @param {!function(!Path, !T):?V} f
         * @return {?V}
         */
        ImmutableTree.prototype.findOnPath = function (path, f) {
            return this.findOnPath_(path, Path.Empty, f);
        };
        ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
            var result = this.value ? f(pathSoFar, this.value) : false;
            if (result) {
                return result;
            }
            else {
                if (pathToFollow.isEmpty()) {
                    return null;
                }
                else {
                    var front = pathToFollow.getFront();
                    var nextChild = this.children.get(front);
                    if (nextChild) {
                        return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
                    }
                    else {
                        return null;
                    }
                }
            }
        };
        /**
         *
         * @param {!Path} path
         * @param {!function(!Path, !T)} f
         * @returns {!ImmutableTree.<T>}
         */
        ImmutableTree.prototype.foreachOnPath = function (path, f) {
            return this.foreachOnPath_(path, Path.Empty, f);
        };
        ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
            if (pathToFollow.isEmpty()) {
                return this;
            }
            else {
                if (this.value) {
                    f(currentRelativePath, this.value);
                }
                var front = pathToFollow.getFront();
                var nextChild = this.children.get(front);
                if (nextChild) {
                    return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
                }
                else {
                    return ImmutableTree.Empty;
                }
            }
        };
        /**
         * Calls the given function for each node in the tree that has a value.
         *
         * @param {function(!Path, !T)} f A function to be called with
         *   the path from the root of the tree to a node, and the value at that node.
         *   Called in depth-first order.
         */
        ImmutableTree.prototype.foreach = function (f) {
            this.foreach_(Path.Empty, f);
        };
        ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
            this.children.inorderTraversal(function (childName, childTree) {
                childTree.foreach_(currentRelativePath.child(childName), f);
            });
            if (this.value) {
                f(currentRelativePath, this.value);
            }
        };
        /**
         *
         * @param {function(string, !T)} f
         */
        ImmutableTree.prototype.foreachChild = function (f) {
            this.children.inorderTraversal(function (childName, childTree) {
                if (childTree.value) {
                    f(childName, childTree.value);
                }
            });
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ImmutableTree.Empty = new ImmutableTree(null);
        return ImmutableTree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!OperationSource} source
     * @param {!Path} path
     * @constructor
     * @implements {Operation}
     */
    var ListenComplete = /** @class */ (function () {
        function ListenComplete(source, path) {
            this.source = source;
            this.path = path;
            /** @inheritDoc */
            this.type = OperationType.LISTEN_COMPLETE;
        }
        ListenComplete.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                return new ListenComplete(this.source, Path.Empty);
            }
            else {
                return new ListenComplete(this.source, this.path.popFront());
            }
        };
        return ListenComplete;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!OperationSource} source
     * @param {!Path} path
     * @param {!Node} snap
     * @constructor
     * @implements {Operation}
     */
    var Overwrite = /** @class */ (function () {
        function Overwrite(source, path, snap) {
            this.source = source;
            this.path = path;
            this.snap = snap;
            /** @inheritDoc */
            this.type = OperationType.OVERWRITE;
        }
        Overwrite.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));
            }
            else {
                return new Overwrite(this.source, this.path.popFront(), this.snap);
            }
        };
        return Overwrite;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!OperationSource} source
     * @param {!Path} path
     * @param {!ImmutableTree.<!Node>} children
     * @constructor
     * @implements {Operation}
     */
    var Merge = /** @class */ (function () {
        function Merge(
        /** @inheritDoc */ source, 
        /** @inheritDoc */ path, 
        /** @inheritDoc */ children) {
            this.source = source;
            this.path = path;
            this.children = children;
            /** @inheritDoc */
            this.type = OperationType.MERGE;
        }
        /**
         * @inheritDoc
         */
        Merge.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                var childTree = this.children.subtree(new Path(childName));
                if (childTree.isEmpty()) {
                    // This child is unaffected
                    return null;
                }
                else if (childTree.value) {
                    // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                    return new Overwrite(this.source, Path.Empty, childTree.value);
                }
                else {
                    // This is a merge at a deeper level
                    return new Merge(this.source, Path.Empty, childTree);
                }
            }
            else {
                assert$1(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
                return new Merge(this.source, this.path.popFront(), this.children);
            }
        };
        /**
         * @inheritDoc
         */
        Merge.prototype.toString = function () {
            return ('Operation(' +
                this.path +
                ': ' +
                this.source.toString() +
                ' merge: ' +
                this.children.toString() +
                ')');
        };
        return Merge;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
     * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
     * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
     * whether a node potentially had children removed due to a filter.
     */
    var CacheNode = /** @class */ (function () {
        /**
         * @param {!Node} node_
         * @param {boolean} fullyInitialized_
         * @param {boolean} filtered_
         */
        function CacheNode(node_, fullyInitialized_, filtered_) {
            this.node_ = node_;
            this.fullyInitialized_ = fullyInitialized_;
            this.filtered_ = filtered_;
        }
        /**
         * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
         * @return {boolean}
         */
        CacheNode.prototype.isFullyInitialized = function () {
            return this.fullyInitialized_;
        };
        /**
         * Returns whether this node is potentially missing children due to a filter applied to the node
         * @return {boolean}
         */
        CacheNode.prototype.isFiltered = function () {
            return this.filtered_;
        };
        /**
         * @param {!Path} path
         * @return {boolean}
         */
        CacheNode.prototype.isCompleteForPath = function (path) {
            if (path.isEmpty()) {
                return this.isFullyInitialized() && !this.filtered_;
            }
            var childKey = path.getFront();
            return this.isCompleteForChild(childKey);
        };
        /**
         * @param {!string} key
         * @return {boolean}
         */
        CacheNode.prototype.isCompleteForChild = function (key) {
            return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
        };
        /**
         * @return {!Node}
         */
        CacheNode.prototype.getNode = function () {
            return this.node_;
        };
        return CacheNode;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Stores the data we have cached for a view.
     *
     * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
     *
     * @constructor
     */
    var ViewCache = /** @class */ (function () {
        /**
         *
         * @param {!CacheNode} eventCache_
         * @param {!CacheNode} serverCache_
         */
        function ViewCache(eventCache_, serverCache_) {
            this.eventCache_ = eventCache_;
            this.serverCache_ = serverCache_;
        }
        /**
         * @param {!Node} eventSnap
         * @param {boolean} complete
         * @param {boolean} filtered
         * @return {!ViewCache}
         */
        ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
            return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);
        };
        /**
         * @param {!Node} serverSnap
         * @param {boolean} complete
         * @param {boolean} filtered
         * @return {!ViewCache}
         */
        ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
            return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));
        };
        /**
         * @return {!CacheNode}
         */
        ViewCache.prototype.getEventCache = function () {
            return this.eventCache_;
        };
        /**
         * @return {?Node}
         */
        ViewCache.prototype.getCompleteEventSnap = function () {
            return this.eventCache_.isFullyInitialized()
                ? this.eventCache_.getNode()
                : null;
        };
        /**
         * @return {!CacheNode}
         */
        ViewCache.prototype.getServerCache = function () {
            return this.serverCache_;
        };
        /**
         * @return {?Node}
         */
        ViewCache.prototype.getCompleteServerSnap = function () {
            return this.serverCache_.isFullyInitialized()
                ? this.serverCache_.getNode()
                : null;
        };
        /**
         * @const
         * @type {ViewCache}
         */
        ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, 
        /*fullyInitialized=*/ false, 
        /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, 
        /*fullyInitialized=*/ false, 
        /*filtered=*/ false));
        return ViewCache;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @constructor
     * @struct
     * @param {!string} type The event type
     * @param {!Node} snapshotNode The data
     * @param {string=} childName The name for this child, if it's a child event
     * @param {Node=} oldSnap Used for intermediate processing of child changed events
     * @param {string=} prevName The name for the previous child, if applicable
     */
    var Change = /** @class */ (function () {
        function Change(type, snapshotNode, childName, oldSnap, prevName) {
            this.type = type;
            this.snapshotNode = snapshotNode;
            this.childName = childName;
            this.oldSnap = oldSnap;
            this.prevName = prevName;
        }
        /**
         * @param {!Node} snapshot
         * @return {!Change}
         */
        Change.valueChange = function (snapshot) {
            return new Change(Change.VALUE, snapshot);
        };
        /**
         * @param {string} childKey
         * @param {!Node} snapshot
         * @return {!Change}
         */
        Change.childAddedChange = function (childKey, snapshot) {
            return new Change(Change.CHILD_ADDED, snapshot, childKey);
        };
        /**
         * @param {string} childKey
         * @param {!Node} snapshot
         * @return {!Change}
         */
        Change.childRemovedChange = function (childKey, snapshot) {
            return new Change(Change.CHILD_REMOVED, snapshot, childKey);
        };
        /**
         * @param {string} childKey
         * @param {!Node} newSnapshot
         * @param {!Node} oldSnapshot
         * @return {!Change}
         */
        Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
            return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
        };
        /**
         * @param {string} childKey
         * @param {!Node} snapshot
         * @return {!Change}
         */
        Change.childMovedChange = function (childKey, snapshot) {
            return new Change(Change.CHILD_MOVED, snapshot, childKey);
        };
        //event types
        /** Event type for a child added */
        Change.CHILD_ADDED = 'child_added';
        /** Event type for a child removed */
        Change.CHILD_REMOVED = 'child_removed';
        /** Event type for a child changed */
        Change.CHILD_CHANGED = 'child_changed';
        /** Event type for a child moved */
        Change.CHILD_MOVED = 'child_moved';
        /** Event type for a value change */
        Change.VALUE = 'value';
        return Change;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
     *
     * @constructor
     * @implements {NodeFilter}
     * @param {!Index} index
     */
    var IndexedFilter = /** @class */ (function () {
        function IndexedFilter(index_) {
            this.index_ = index_;
        }
        IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            assert$1(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
            var oldChild = snap.getImmediateChild(key);
            // Check if anything actually changed.
            if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
                // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
                // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
                // to avoid treating these cases as "nothing changed."
                if (oldChild.isEmpty() === newChild.isEmpty()) {
                    // Nothing changed.
                    // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                    //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                    return snap;
                }
            }
            if (optChangeAccumulator != null) {
                if (newChild.isEmpty()) {
                    if (snap.hasChild(key)) {
                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));
                    }
                    else {
                        assert$1(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                    }
                }
                else if (oldChild.isEmpty()) {
                    optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));
                }
                else {
                    optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));
                }
            }
            if (snap.isLeafNode() && newChild.isEmpty()) {
                return snap;
            }
            else {
                // Make sure the node is indexed
                return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
            }
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            if (optChangeAccumulator != null) {
                if (!oldSnap.isLeafNode()) {
                    oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                        if (!newSnap.hasChild(key)) {
                            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));
                        }
                    });
                }
                if (!newSnap.isLeafNode()) {
                    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                        if (oldSnap.hasChild(key)) {
                            var oldChild = oldSnap.getImmediateChild(key);
                            if (!oldChild.equals(childNode)) {
                                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));
                            }
                        }
                        else {
                            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));
                        }
                    });
                }
            }
            return newSnap.withIndex(this.index_);
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            if (oldSnap.isEmpty()) {
                return ChildrenNode.EMPTY_NODE;
            }
            else {
                return oldSnap.updatePriority(newPriority);
            }
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.filtersNodes = function () {
            return false;
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.getIndexedFilter = function () {
            return this;
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        return IndexedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ChildChangeAccumulator = /** @class */ (function () {
        function ChildChangeAccumulator() {
            this.changeMap = new Map();
        }
        ChildChangeAccumulator.prototype.trackChildChange = function (change) {
            var type = change.type;
            var childKey = change.childName;
            assert$1(type === Change.CHILD_ADDED ||
                type === Change.CHILD_CHANGED ||
                type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');
            assert$1(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
            var oldChange = this.changeMap.get(childKey);
            if (oldChange) {
                var oldType = oldChange.type;
                if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {
                    this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));
                }
                else if (type === Change.CHILD_REMOVED &&
                    oldType === Change.CHILD_ADDED) {
                    this.changeMap.delete(childKey);
                }
                else if (type === Change.CHILD_REMOVED &&
                    oldType === Change.CHILD_CHANGED) {
                    this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));
                }
                else if (type === Change.CHILD_CHANGED &&
                    oldType === Change.CHILD_ADDED) {
                    this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));
                }
                else if (type === Change.CHILD_CHANGED &&
                    oldType === Change.CHILD_CHANGED) {
                    this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));
                }
                else {
                    throw assertionError('Illegal combination of changes: ' +
                        change +
                        ' occurred after ' +
                        oldChange);
                }
            }
            else {
                this.changeMap.set(childKey, change);
            }
        };
        ChildChangeAccumulator.prototype.getChanges = function () {
            return Array.from(this.changeMap.values());
        };
        return ChildChangeAccumulator;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An implementation of CompleteChildSource that never returns any additional children
     *
     * @private
     * @constructor
     * @implements CompleteChildSource
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    var NoCompleteChildSource_ = /** @class */ (function () {
        function NoCompleteChildSource_() {
        }
        /**
         * @inheritDoc
         */
        NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
            return null;
        };
        /**
         * @inheritDoc
         */
        NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
            return null;
        };
        return NoCompleteChildSource_;
    }());
    /**
     * Singleton instance.
     * @const
     * @type {!CompleteChildSource}
     */
    var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
    /**
     * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
     * old event caches available to calculate complete children.
     *
     *
     * @implements CompleteChildSource
     */
    var WriteTreeCompleteChildSource = /** @class */ (function () {
        /**
         * @param {!WriteTreeRef} writes_
         * @param {!ViewCache} viewCache_
         * @param {?Node} optCompleteServerCache_
         */
        function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
            if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
            this.writes_ = writes_;
            this.viewCache_ = viewCache_;
            this.optCompleteServerCache_ = optCompleteServerCache_;
        }
        /**
         * @inheritDoc
         */
        WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
            var node = this.viewCache_.getEventCache();
            if (node.isCompleteForChild(childKey)) {
                return node.getNode().getImmediateChild(childKey);
            }
            else {
                var serverNode = this.optCompleteServerCache_ != null
                    ? new CacheNode(this.optCompleteServerCache_, true, false)
                    : this.viewCache_.getServerCache();
                return this.writes_.calcCompleteChild(childKey, serverNode);
            }
        };
        /**
         * @inheritDoc
         */
        WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
            var completeServerData = this.optCompleteServerCache_ != null
                ? this.optCompleteServerCache_
                : this.viewCache_.getCompleteServerSnap();
            var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);
            if (nodes.length === 0) {
                return null;
            }
            else {
                return nodes[0];
            }
        };
        return WriteTreeCompleteChildSource;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @constructor
     * @struct
     */
    var ProcessorResult = /** @class */ (function () {
        /**
         * @param {!ViewCache} viewCache
         * @param {!Array.<!Change>} changes
         */
        function ProcessorResult(viewCache, changes) {
            this.viewCache = viewCache;
            this.changes = changes;
        }
        return ProcessorResult;
    }());
    /**
     * @constructor
     */
    var ViewProcessor = /** @class */ (function () {
        /**
         * @param {!NodeFilter} filter_
         */
        function ViewProcessor(filter_) {
            this.filter_ = filter_;
        }
        /**
         * @param {!ViewCache} viewCache
         */
        ViewProcessor.prototype.assertIndexed = function (viewCache) {
            assert$1(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
            assert$1(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
        };
        /**
         * @param {!ViewCache} oldViewCache
         * @param {!Operation} operation
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeCache
         * @return {!ProcessorResult}
         */
        ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
            var accumulator = new ChildChangeAccumulator();
            var newViewCache, filterServerNode;
            if (operation.type === OperationType.OVERWRITE) {
                var overwrite = operation;
                if (overwrite.source.fromUser) {
                    newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
                }
                else {
                    assert$1(overwrite.source.fromServer, 'Unknown source.');
                    // We filter the node if it's a tagged update or the node has been previously filtered  and the
                    // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
                    // again
                    filterServerNode =
                        overwrite.source.tagged ||
                            (oldViewCache.getServerCache().isFiltered() &&
                                !overwrite.path.isEmpty());
                    newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
                }
            }
            else if (operation.type === OperationType.MERGE) {
                var merge = operation;
                if (merge.source.fromUser) {
                    newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
                }
                else {
                    assert$1(merge.source.fromServer, 'Unknown source.');
                    // We filter the node if it's a tagged update or the node has been previously filtered
                    filterServerNode =
                        merge.source.tagged || oldViewCache.getServerCache().isFiltered();
                    newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
                }
            }
            else if (operation.type === OperationType.ACK_USER_WRITE) {
                var ackUserWrite = operation;
                if (!ackUserWrite.revert) {
                    newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
                }
                else {
                    newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
                }
            }
            else if (operation.type === OperationType.LISTEN_COMPLETE) {
                newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
            }
            else {
                throw assertionError('Unknown operation type: ' + operation.type);
            }
            var changes = accumulator.getChanges();
            ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
            return new ProcessorResult(newViewCache, changes);
        };
        /**
         * @param {!ViewCache} oldViewCache
         * @param {!ViewCache} newViewCache
         * @param {!Array.<!Change>} accumulator
         * @private
         */
        ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
            var eventSnap = newViewCache.getEventCache();
            if (eventSnap.isFullyInitialized()) {
                var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
                var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
                if (accumulator.length > 0 ||
                    !oldViewCache.getEventCache().isFullyInitialized() ||
                    (isLeafOrEmpty &&
                        !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||
                    !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
                    accumulator.push(Change.valueChange(
                    /** @type {!Node} */ newViewCache.getCompleteEventSnap()));
                }
            }
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} changePath
         * @param {!WriteTreeRef} writesCache
         * @param {!CompleteChildSource} source
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
            var oldEventSnap = viewCache.getEventCache();
            if (writesCache.shadowingWrite(changePath) != null) {
                // we have a shadowing write, ignore changes
                return viewCache;
            }
            else {
                var newEventCache = void 0, serverNode = void 0;
                if (changePath.isEmpty()) {
                    // TODO: figure out how this plays with "sliding ack windows"
                    assert$1(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');
                    if (viewCache.getServerCache().isFiltered()) {
                        // We need to special case this, because we need to only apply writes to complete children, or
                        // we might end up raising events for incomplete children. If the server data is filtered deep
                        // writes cannot be guaranteed to be complete
                        var serverCache = viewCache.getCompleteServerSnap();
                        var completeChildren = serverCache instanceof ChildrenNode
                            ? serverCache
                            : ChildrenNode.EMPTY_NODE;
                        var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
                    }
                    else {
                        var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
                    }
                }
                else {
                    var childKey = changePath.getFront();
                    if (childKey === '.priority') {
                        assert$1(changePath.getLength() === 1, "Can't have a priority with additional path components");
                        var oldEventNode = oldEventSnap.getNode();
                        serverNode = viewCache.getServerCache().getNode();
                        // we might have overwrites for this priority
                        var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
                        if (updatedPriority != null) {
                            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
                        }
                        else {
                            // priority didn't change, keep old node
                            newEventCache = oldEventSnap.getNode();
                        }
                    }
                    else {
                        var childChangePath = changePath.popFront();
                        // update child
                        var newEventChild = void 0;
                        if (oldEventSnap.isCompleteForChild(childKey)) {
                            serverNode = viewCache.getServerCache().getNode();
                            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
                            if (eventChildUpdate != null) {
                                newEventChild = oldEventSnap
                                    .getNode()
                                    .getImmediateChild(childKey)
                                    .updateChild(childChangePath, eventChildUpdate);
                            }
                            else {
                                // Nothing changed, just keep the old child
                                newEventChild = oldEventSnap
                                    .getNode()
                                    .getImmediateChild(childKey);
                            }
                        }
                        else {
                            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                        }
                        if (newEventChild != null) {
                            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                        }
                        else {
                            // no complete child available or no change
                            newEventCache = oldEventSnap.getNode();
                        }
                    }
                }
                return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
            }
        };
        /**
         * @param {!ViewCache} oldViewCache
         * @param {!Path} changePath
         * @param {!Node} changedSnap
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeCache
         * @param {boolean} filterServerNode
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
            var oldServerSnap = oldViewCache.getServerCache();
            var newServerCache;
            var serverFilter = filterServerNode
                ? this.filter_
                : this.filter_.getIndexedFilter();
            if (changePath.isEmpty()) {
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
            }
            else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
                // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
                var newServerNode = oldServerSnap
                    .getNode()
                    .updateChild(changePath, changedSnap);
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
            }
            else {
                var childKey = changePath.getFront();
                if (!oldServerSnap.isCompleteForPath(changePath) &&
                    changePath.getLength() > 1) {
                    // We don't update incomplete nodes with updates intended for other listeners
                    return oldViewCache;
                }
                var childChangePath = changePath.popFront();
                var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
                var newChildNode = childNode.updateChild(childChangePath, changedSnap);
                if (childKey === '.priority') {
                    newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
                }
                else {
                    newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
                }
            }
            var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
            var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
            return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
        };
        /**
         * @param {!ViewCache} oldViewCache
         * @param {!Path} changePath
         * @param {!Node} changedSnap
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
            var oldEventSnap = oldViewCache.getEventCache();
            var newViewCache, newEventCache;
            var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
            if (changePath.isEmpty()) {
                newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
                newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
            }
            else {
                var childKey = changePath.getFront();
                if (childKey === '.priority') {
                    newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
                    newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
                }
                else {
                    var childChangePath = changePath.popFront();
                    var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                    var newChild = void 0;
                    if (childChangePath.isEmpty()) {
                        // Child overwrite, we can replace the child
                        newChild = changedSnap;
                    }
                    else {
                        var childNode = source.getCompleteChild(childKey);
                        if (childNode != null) {
                            if (childChangePath.getBack() === '.priority' &&
                                childNode.getChild(childChangePath.parent()).isEmpty()) {
                                // This is a priority update on an empty node. If this node exists on the server, the
                                // server will send down the priority in the update, so ignore for now
                                newChild = childNode;
                            }
                            else {
                                newChild = childNode.updateChild(childChangePath, changedSnap);
                            }
                        }
                        else {
                            // There is no complete child node available
                            newChild = ChildrenNode.EMPTY_NODE;
                        }
                    }
                    if (!oldChild.equals(newChild)) {
                        var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                        newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
                    }
                    else {
                        newViewCache = oldViewCache;
                    }
                }
            }
            return newViewCache;
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {string} childKey
         * @return {boolean}
         * @private
         */
        ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
            return viewCache.getEventCache().isCompleteForChild(childKey);
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} path
         * @param {ImmutableTree.<!Node>} changedChildren
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} serverCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
            var _this = this;
            // HACK: In the case of a limit query, there may be some changes that bump things out of the
            // window leaving room for new items.  It's important we process these changes first, so we
            // iterate the changes twice, first processing any that affect items currently in view.
            // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
            // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
            // not the other.
            var curViewCache = viewCache;
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = path.child(relativePath);
                if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = path.child(relativePath);
                if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            return curViewCache;
        };
        /**
         * @param {!Node} node
         * @param {ImmutableTree.<!Node>} merge
         * @return {!Node}
         * @private
         */
        ViewProcessor.prototype.applyMerge_ = function (node, merge) {
            merge.foreach(function (relativePath, childNode) {
                node = node.updateChild(relativePath, childNode);
            });
            return node;
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} path
         * @param {!ImmutableTree.<!Node>} changedChildren
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} serverCache
         * @param {boolean} filterServerNode
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
            var _this = this;
            // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
            // wait for the complete data update coming soon.
            if (viewCache.getServerCache().getNode().isEmpty() &&
                !viewCache.getServerCache().isFullyInitialized()) {
                return viewCache;
            }
            // HACK: In the case of a limit query, there may be some changes that bump things out of the
            // window leaving room for new items.  It's important we process these changes first, so we
            // iterate the changes twice, first processing any that affect items currently in view.
            // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
            // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
            // not the other.
            var curViewCache = viewCache;
            var viewMergeTree;
            if (path.isEmpty()) {
                viewMergeTree = changedChildren;
            }
            else {
                viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);
            }
            var serverNode = viewCache.getServerCache().getNode();
            viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
                if (serverNode.hasChild(childKey)) {
                    var serverChild = viewCache
                        .getServerCache()
                        .getNode()
                        .getImmediateChild(childKey);
                    var newChild = _this.applyMerge_(serverChild, childTree);
                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
                var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&
                    childMergeTree.value == null;
                if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                    var serverChild = viewCache
                        .getServerCache()
                        .getNode()
                        .getImmediateChild(childKey);
                    var newChild = _this.applyMerge_(serverChild, childMergeTree);
                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            return curViewCache;
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} ackPath
         * @param {!ImmutableTree<!boolean>} affectedTree
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
            if (writesCache.shadowingWrite(ackPath) != null) {
                return viewCache;
            }
            // Only filter server node if it is currently filtered
            var filterServerNode = viewCache.getServerCache().isFiltered();
            // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
            // now that it won't be shadowed.
            var serverCache = viewCache.getServerCache();
            if (affectedTree.value != null) {
                // This is an overwrite.
                if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||
                    serverCache.isCompleteForPath(ackPath)) {
                    return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
                }
                else if (ackPath.isEmpty()) {
                    // This is a goofy edge case where we are acking data at this location but don't have full data.  We
                    // should just re-apply whatever we have in our cache as a merge.
                    var changedChildren_1 = ImmutableTree.Empty;
                    serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {
                        changedChildren_1 = changedChildren_1.set(new Path(name), node);
                    });
                    return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
                }
                else {
                    return viewCache;
                }
            }
            else {
                // This is a merge.
                var changedChildren_2 = ImmutableTree.Empty;
                affectedTree.foreach(function (mergePath, value) {
                    var serverCachePath = ackPath.child(mergePath);
                    if (serverCache.isCompleteForPath(serverCachePath)) {
                        changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                    }
                });
                return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
            }
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} path
         * @param {!WriteTreeRef} writesCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
            var oldServerNode = viewCache.getServerCache();
            var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
            return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} path
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeServerCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
            var complete;
            if (writesCache.shadowingWrite(path) != null) {
                return viewCache;
            }
            else {
                var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
                var oldEventCache = viewCache.getEventCache().getNode();
                var newEventCache = void 0;
                if (path.isEmpty() || path.getFront() === '.priority') {
                    var newNode = void 0;
                    if (viewCache.getServerCache().isFullyInitialized()) {
                        newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    }
                    else {
                        var serverChildren = viewCache.getServerCache().getNode();
                        assert$1(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
                        newNode = writesCache.calcCompleteEventChildren(serverChildren);
                    }
                    newNode = newNode;
                    newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
                }
                else {
                    var childKey = path.getFront();
                    var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                    if (newChild == null &&
                        viewCache.getServerCache().isCompleteForChild(childKey)) {
                        newChild = oldEventCache.getImmediateChild(childKey);
                    }
                    if (newChild != null) {
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
                    }
                    else if (viewCache.getEventCache().getNode().hasChild(childKey)) {
                        // No complete child available, delete the existing one, if any
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
                    }
                    else {
                        newEventCache = oldEventCache;
                    }
                    if (newEventCache.isEmpty() &&
                        viewCache.getServerCache().isFullyInitialized()) {
                        // We might have reverted all child writes. Maybe the old event was a leaf node
                        complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                        if (complete.isLeafNode()) {
                            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
                        }
                    }
                }
                complete =
                    viewCache.getServerCache().isFullyInitialized() ||
                        writesCache.shadowingWrite(Path.Empty) != null;
                return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
            }
        };
        return ViewProcessor;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An EventGenerator is used to convert "raw" changes (Change) as computed by the
     * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
     * for details.
     *
     * @constructor
     */
    var EventGenerator = /** @class */ (function () {
        /**
         *
         * @param {!Query} query_
         */
        function EventGenerator(query_) {
            this.query_ = query_;
            /**
             * @private
             * @type {!Index}
             */
            this.index_ = this.query_.getQueryParams().getIndex();
        }
        /**
         * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
         * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
         *
         * Notes:
         *  - child_moved events will be synthesized at this time for any child_changed events that affect
         *    our index.
         *  - prevName will be calculated based on the index ordering.
         *
         * @param {!Array.<!Change>} changes
         * @param {!Node} eventCache
         * @param {!Array.<!EventRegistration>} eventRegistrations
         * @return {!Array.<!Event>}
         */
        EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
            var _this = this;
            var events = [];
            var moves = [];
            changes.forEach(function (change) {
                if (change.type === Change.CHILD_CHANGED &&
                    _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
                    moves.push(Change.childMovedChange(change.childName, change.snapshotNode));
                }
            });
            this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);
            return events;
        };
        /**
         * Given changes of a single change type, generate the corresponding events.
         *
         * @param {!Array.<!Event>} events
         * @param {!string} eventType
         * @param {!Array.<!Change>} changes
         * @param {!Array.<!EventRegistration>} registrations
         * @param {!Node} eventCache
         * @private
         */
        EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
            var _this = this;
            var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
            filteredChanges.sort(this.compareChanges_.bind(this));
            filteredChanges.forEach(function (change) {
                var materializedChange = _this.materializeSingleChange_(change, eventCache);
                registrations.forEach(function (registration) {
                    if (registration.respondsTo(change.type)) {
                        events.push(registration.createEvent(materializedChange, _this.query_));
                    }
                });
            });
        };
        /**
         * @param {!Change} change
         * @param {!Node} eventCache
         * @return {!Change}
         * @private
         */
        EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
            if (change.type === 'value' || change.type === 'child_removed') {
                return change;
            }
            else {
                change.prevName = eventCache.getPredecessorChildName(
                /** @type {!string} */
                change.childName, change.snapshotNode, this.index_);
                return change;
            }
        };
        /**
         * @param {!Change} a
         * @param {!Change} b
         * @return {number}
         * @private
         */
        EventGenerator.prototype.compareChanges_ = function (a, b) {
            if (a.childName == null || b.childName == null) {
                throw assertionError('Should only compare child_ events.');
            }
            var aWrapped = new NamedNode(a.childName, a.snapshotNode);
            var bWrapped = new NamedNode(b.childName, b.snapshotNode);
            return this.index_.compare(aWrapped, bWrapped);
        };
        return EventGenerator;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A view represents a specific location and query that has 1 or more event registrations.
     *
     * It does several things:
     *  - Maintains the list of event registrations for this location/query.
     *  - Maintains a cache of the data visible for this location/query.
     *  - Applies new operations (via applyOperation), updates the cache, and based on the event
     *    registrations returns the set of events to be raised.
     * @constructor
     */
    var View$1 = /** @class */ (function () {
        /**
         *
         * @param {!Query} query_
         * @param {!ViewCache} initialViewCache
         */
        function View(query_, initialViewCache) {
            this.query_ = query_;
            this.eventRegistrations_ = [];
            var params = this.query_.getQueryParams();
            var indexFilter = new IndexedFilter(params.getIndex());
            var filter = params.getNodeFilter();
            /**
             * @type {ViewProcessor}
             * @private
             */
            this.processor_ = new ViewProcessor(filter);
            var initialServerCache = initialViewCache.getServerCache();
            var initialEventCache = initialViewCache.getEventCache();
            // Don't filter server node with other filter than index, wait for tagged listen
            var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
            var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
            var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
            var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
            /**
             * @type {!ViewCache}
             * @private
             */
            this.viewCache_ = new ViewCache(newEventCache, newServerCache);
            /**
             * @type {!EventGenerator}
             * @private
             */
            this.eventGenerator_ = new EventGenerator(this.query_);
        }
        /**
         * @return {!Query}
         */
        View.prototype.getQuery = function () {
            return this.query_;
        };
        /**
         * @return {?Node}
         */
        View.prototype.getServerCache = function () {
            return this.viewCache_.getServerCache().getNode();
        };
        /**
         * @param {!Path} path
         * @return {?Node}
         */
        View.prototype.getCompleteServerCache = function (path) {
            var cache = this.viewCache_.getCompleteServerSnap();
            if (cache) {
                // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
                // we need to see if it contains the child we're interested in.
                if (this.query_.getQueryParams().loadsAllData() ||
                    (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {
                    return cache.getChild(path);
                }
            }
            return null;
        };
        /**
         * @return {boolean}
         */
        View.prototype.isEmpty = function () {
            return this.eventRegistrations_.length === 0;
        };
        /**
         * @param {!EventRegistration} eventRegistration
         */
        View.prototype.addEventRegistration = function (eventRegistration) {
            this.eventRegistrations_.push(eventRegistration);
        };
        /**
         * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
         * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
         */
        View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
            var cancelEvents = [];
            if (cancelError) {
                assert$1(eventRegistration == null, 'A cancel should cancel all event registrations.');
                var path_1 = this.query_.path;
                this.eventRegistrations_.forEach(function (registration) {
                    cancelError /** @type {!Error} */ = cancelError;
                    var maybeEvent = registration.createCancelEvent(cancelError, path_1);
                    if (maybeEvent) {
                        cancelEvents.push(maybeEvent);
                    }
                });
            }
            if (eventRegistration) {
                var remaining = [];
                for (var i = 0; i < this.eventRegistrations_.length; ++i) {
                    var existing = this.eventRegistrations_[i];
                    if (!existing.matches(eventRegistration)) {
                        remaining.push(existing);
                    }
                    else if (eventRegistration.hasAnyCallback()) {
                        // We're removing just this one
                        remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
                        break;
                    }
                }
                this.eventRegistrations_ = remaining;
            }
            else {
                this.eventRegistrations_ = [];
            }
            return cancelEvents;
        };
        /**
         * Applies the given Operation, updates our cache, and returns the appropriate events.
         *
         * @param {!Operation} operation
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeServerCache
         * @return {!Array.<!Event>}
         */
        View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
            if (operation.type === OperationType.MERGE &&
                operation.source.queryId !== null) {
                assert$1(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
                assert$1(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
            }
            var oldViewCache = this.viewCache_;
            var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
            this.processor_.assertIndexed(result.viewCache);
            assert$1(result.viewCache.getServerCache().isFullyInitialized() ||
                !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
            this.viewCache_ = result.viewCache;
            return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
        };
        /**
         * @param {!EventRegistration} registration
         * @return {!Array.<!Event>}
         */
        View.prototype.getInitialEvents = function (registration) {
            var eventSnap = this.viewCache_.getEventCache();
            var initialChanges = [];
            if (!eventSnap.getNode().isLeafNode()) {
                var eventNode = eventSnap.getNode();
                eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                    initialChanges.push(Change.childAddedChange(key, childNode));
                });
            }
            if (eventSnap.isFullyInitialized()) {
                initialChanges.push(Change.valueChange(eventSnap.getNode()));
            }
            return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
        };
        /**
         * @private
         * @param {!Array.<!Change>} changes
         * @param {!Node} eventCache
         * @param {EventRegistration=} eventRegistration
         * @return {!Array.<!Event>}
         */
        View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
            var registrations = eventRegistration
                ? [eventRegistration]
                : this.eventRegistrations_;
            return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
        };
        return View;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __referenceConstructor$1;
    /**
     * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
     * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
     * and user writes (set, transaction, update).
     *
     * It's responsible for:
     *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
     *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
     *    applyUserOverwrite, etc.)
     */
    var SyncPoint = /** @class */ (function () {
        function SyncPoint() {
            /**
             * The Views being tracked at this location in the tree, stored as a map where the key is a
             * queryId and the value is the View for that query.
             *
             * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
             */
            this.views = new Map();
        }
        Object.defineProperty(SyncPoint, "__referenceConstructor", {
            get: function () {
                assert$1(__referenceConstructor$1, 'Reference.ts has not been loaded');
                return __referenceConstructor$1;
            },
            set: function (val) {
                assert$1(!__referenceConstructor$1, '__referenceConstructor has already been defined');
                __referenceConstructor$1 = val;
            },
            enumerable: false,
            configurable: true
        });
        SyncPoint.prototype.isEmpty = function () {
            return this.views.size === 0;
        };
        SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
            var e_1, _a;
            var queryId = operation.source.queryId;
            if (queryId !== null) {
                var view = this.views.get(queryId);
                assert$1(view != null, 'SyncTree gave us an op for an invalid query.');
                return view.applyOperation(operation, writesCache, optCompleteServerCache);
            }
            else {
                var events = [];
                try {
                    for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var view = _c.value;
                        events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return events;
            }
        };
        /**
         * Add an event callback for the specified query.
         *
         * @param {!Query} query
         * @param {!EventRegistration} eventRegistration
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} serverCache Complete server cache, if we have it.
         * @param {boolean} serverCacheComplete
         * @return {!Array.<!Event>} Events to raise.
         */
        SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
            var queryId = query.queryIdentifier();
            var view = this.views.get(queryId);
            if (!view) {
                // TODO: make writesCache take flag for complete server node
                var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
                var eventCacheComplete = false;
                if (eventCache) {
                    eventCacheComplete = true;
                }
                else if (serverCache instanceof ChildrenNode) {
                    eventCache = writesCache.calcCompleteEventChildren(serverCache);
                    eventCacheComplete = false;
                }
                else {
                    eventCache = ChildrenNode.EMPTY_NODE;
                    eventCacheComplete = false;
                }
                var viewCache = new ViewCache(new CacheNode(
                /** @type {!Node} */ eventCache, eventCacheComplete, false), new CacheNode(
                /** @type {!Node} */ serverCache, serverCacheComplete, false));
                view = new View$1(query, viewCache);
                this.views.set(queryId, view);
            }
            // This is guaranteed to exist now, we just created anything that was missing
            view.addEventRegistration(eventRegistration);
            return view.getInitialEvents(eventRegistration);
        };
        /**
         * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
         *
         * If query is the default query, we'll check all views for the specified eventRegistration.
         * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
         *
         * @param {!Query} query
         * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
         * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
         */
        SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var e_2, _a;
            var queryId = query.queryIdentifier();
            var removed = [];
            var cancelEvents = [];
            var hadCompleteView = this.hasCompleteView();
            if (queryId === 'default') {
                try {
                    // When you do ref.off(...), we search all views for the registration to remove.
                    for (var _b = __values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var _d = __read(_c.value, 2), viewQueryId = _d[0], view = _d[1];
                        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                        if (view.isEmpty()) {
                            this.views.delete(viewQueryId);
                            // We'll deal with complete views later.
                            if (!view.getQuery().getQueryParams().loadsAllData()) {
                                removed.push(view.getQuery());
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else {
                // remove the callback from the specific view.
                var view = this.views.get(queryId);
                if (view) {
                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                    if (view.isEmpty()) {
                        this.views.delete(queryId);
                        // We'll deal with complete views later.
                        if (!view.getQuery().getQueryParams().loadsAllData()) {
                            removed.push(view.getQuery());
                        }
                    }
                }
            }
            if (hadCompleteView && !this.hasCompleteView()) {
                // We removed our last complete view.
                removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
            }
            return { removed: removed, events: cancelEvents };
        };
        SyncPoint.prototype.getQueryViews = function () {
            var e_3, _a;
            var result = [];
            try {
                for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    if (!view.getQuery().getQueryParams().loadsAllData()) {
                        result.push(view);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return result;
        };
        /**
         * @param path The path to the desired complete snapshot
         * @return A complete cache, if it exists
         */
        SyncPoint.prototype.getCompleteServerCache = function (path) {
            var e_4, _a;
            var serverCache = null;
            try {
                for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    serverCache = serverCache || view.getCompleteServerCache(path);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            return serverCache;
        };
        SyncPoint.prototype.viewForQuery = function (query) {
            var params = query.getQueryParams();
            if (params.loadsAllData()) {
                return this.getCompleteView();
            }
            else {
                var queryId = query.queryIdentifier();
                return this.views.get(queryId);
            }
        };
        SyncPoint.prototype.viewExistsForQuery = function (query) {
            return this.viewForQuery(query) != null;
        };
        SyncPoint.prototype.hasCompleteView = function () {
            return this.getCompleteView() != null;
        };
        SyncPoint.prototype.getCompleteView = function () {
            var e_5, _a;
            try {
                for (var _b = __values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    if (view.getQuery().getQueryParams().loadsAllData()) {
                        return view;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            return null;
        };
        return SyncPoint;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
     * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
     * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
     * to reflect the write added.
     */
    var CompoundWrite = /** @class */ (function () {
        function CompoundWrite(writeTree_) {
            this.writeTree_ = writeTree_;
        }
        CompoundWrite.prototype.addWrite = function (path, node) {
            if (path.isEmpty()) {
                return new CompoundWrite(new ImmutableTree(node));
            }
            else {
                var rootmost = this.writeTree_.findRootMostValueAndPath(path);
                if (rootmost != null) {
                    var rootMostPath = rootmost.path;
                    var value = rootmost.value;
                    var relativePath = Path.relativePath(rootMostPath, path);
                    value = value.updateChild(relativePath, node);
                    return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
                }
                else {
                    var subtree = new ImmutableTree(node);
                    var newWriteTree = this.writeTree_.setTree(path, subtree);
                    return new CompoundWrite(newWriteTree);
                }
            }
        };
        CompoundWrite.prototype.addWrites = function (path, updates) {
            var newWrite = this;
            each(updates, function (childKey, node) {
                newWrite = newWrite.addWrite(path.child(childKey), node);
            });
            return newWrite;
        };
        /**
         * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
         * location, which must be removed by calling this method with that path.
         *
         * @param path The path at which a write and all deeper writes should be removed
         * @return {!CompoundWrite} The new CompoundWrite with the removed path
         */
        CompoundWrite.prototype.removeWrite = function (path) {
            if (path.isEmpty()) {
                return CompoundWrite.Empty;
            }
            else {
                var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);
                return new CompoundWrite(newWriteTree);
            }
        };
        /**
         * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
         * considered "complete".
         *
         * @param path The path to check for
         * @return Whether there is a complete write at that path
         */
        CompoundWrite.prototype.hasCompleteWrite = function (path) {
            return this.getCompleteNode(path) != null;
        };
        /**
         * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
         * writes from deeper paths, but will return child nodes from a more shallow path.
         *
         * @param path The path to get a complete write
         * @return The node if complete at that path, or null otherwise.
         */
        CompoundWrite.prototype.getCompleteNode = function (path) {
            var rootmost = this.writeTree_.findRootMostValueAndPath(path);
            if (rootmost != null) {
                return this.writeTree_
                    .get(rootmost.path)
                    .getChild(Path.relativePath(rootmost.path, path));
            }
            else {
                return null;
            }
        };
        /**
         * Returns all children that are guaranteed to be a complete overwrite.
         *
         * @return A list of all complete children.
         */
        CompoundWrite.prototype.getCompleteChildren = function () {
            var children = [];
            var node = this.writeTree_.value;
            if (node != null) {
                // If it's a leaf node, it has no children; so nothing to do.
                if (!node.isLeafNode()) {
                    node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                        children.push(new NamedNode(childName, childNode));
                    });
                }
            }
            else {
                this.writeTree_.children.inorderTraversal(function (childName, childTree) {
                    if (childTree.value != null) {
                        children.push(new NamedNode(childName, childTree.value));
                    }
                });
            }
            return children;
        };
        CompoundWrite.prototype.childCompoundWrite = function (path) {
            if (path.isEmpty()) {
                return this;
            }
            else {
                var shadowingNode = this.getCompleteNode(path);
                if (shadowingNode != null) {
                    return new CompoundWrite(new ImmutableTree(shadowingNode));
                }
                else {
                    return new CompoundWrite(this.writeTree_.subtree(path));
                }
            }
        };
        /**
         * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
         * @return Whether this CompoundWrite is empty
         */
        CompoundWrite.prototype.isEmpty = function () {
            return this.writeTree_.isEmpty();
        };
        /**
         * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
         * node
         * @param node The node to apply this CompoundWrite to
         * @return The node with all writes applied
         */
        CompoundWrite.prototype.apply = function (node) {
            return applySubtreeWrite(Path.Empty, this.writeTree_, node);
        };
        CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));
        return CompoundWrite;
    }());
    function applySubtreeWrite(relativePath, writeTree, node) {
        if (writeTree.value != null) {
            // Since there a write is always a leaf, we're done here
            return node.updateChild(relativePath, writeTree.value);
        }
        else {
            var priorityWrite_1 = null;
            writeTree.children.inorderTraversal(function (childKey, childTree) {
                if (childKey === '.priority') {
                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                    // to apply priorities to empty nodes that are later filled
                    assert$1(childTree.value !== null, 'Priority writes must always be leaf nodes');
                    priorityWrite_1 = childTree.value;
                }
                else {
                    node = applySubtreeWrite(relativePath.child(childKey), childTree, node);
                }
            });
            // If there was a priority write, we only apply it if the node is not empty
            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
            }
            return node;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
     * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
     * and addMerge(), and removed with removeWrite().
     *
     * @constructor
     */
    var WriteTree = /** @class */ (function () {
        function WriteTree() {
            /**
             * A tree tracking the result of applying all visible writes.  This does not include transactions with
             * applyLocally=false or writes that are completely shadowed by other writes.
             *
             * @type {!CompoundWrite}
             * @private
             */
            this.visibleWrites_ = CompoundWrite.Empty;
            /**
             * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
             * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
             * used by transactions).
             *
             * @type {!Array.<!WriteRecord>}
             * @private
             */
            this.allWrites_ = [];
            this.lastWriteId_ = -1;
        }
        /**
         * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
         *
         * @param {!Path} path
         * @return {!WriteTreeRef}
         */
        WriteTree.prototype.childWrites = function (path) {
            return new WriteTreeRef(path, this);
        };
        /**
         * Record a new overwrite from user code.
         *
         * @param {!Path} path
         * @param {!Node} snap
         * @param {!number} writeId
         * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
         */
        WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
            assert$1(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');
            if (visible === undefined) {
                visible = true;
            }
            this.allWrites_.push({
                path: path,
                snap: snap,
                writeId: writeId,
                visible: visible
            });
            if (visible) {
                this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
            }
            this.lastWriteId_ = writeId;
        };
        /**
         * Record a new merge from user code.
         *
         * @param {!Path} path
         * @param {!Object.<string, !Node>} changedChildren
         * @param {!number} writeId
         */
        WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
            assert$1(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
            this.allWrites_.push({
                path: path,
                children: changedChildren,
                writeId: writeId,
                visible: true
            });
            this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
            this.lastWriteId_ = writeId;
        };
        /**
         * @param {!number} writeId
         * @return {?WriteRecord}
         */
        WriteTree.prototype.getWrite = function (writeId) {
            for (var i = 0; i < this.allWrites_.length; i++) {
                var record = this.allWrites_[i];
                if (record.writeId === writeId) {
                    return record;
                }
            }
            return null;
        };
        /**
         * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
         * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
         *
         * @param {!number} writeId
         * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
         * events as a result).
         */
        WriteTree.prototype.removeWrite = function (writeId) {
            // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
            // out of order.
            //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
            //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
            var _this = this;
            var idx = this.allWrites_.findIndex(function (s) {
                return s.writeId === writeId;
            });
            assert$1(idx >= 0, 'removeWrite called with nonexistent writeId.');
            var writeToRemove = this.allWrites_[idx];
            this.allWrites_.splice(idx, 1);
            var removedWriteWasVisible = writeToRemove.visible;
            var removedWriteOverlapsWithOtherWrites = false;
            var i = this.allWrites_.length - 1;
            while (removedWriteWasVisible && i >= 0) {
                var currentWrite = this.allWrites_[i];
                if (currentWrite.visible) {
                    if (i >= idx &&
                        this.recordContainsPath_(currentWrite, writeToRemove.path)) {
                        // The removed write was completely shadowed by a subsequent write.
                        removedWriteWasVisible = false;
                    }
                    else if (writeToRemove.path.contains(currentWrite.path)) {
                        // Either we're covering some writes or they're covering part of us (depending on which came first).
                        removedWriteOverlapsWithOtherWrites = true;
                    }
                }
                i--;
            }
            if (!removedWriteWasVisible) {
                return false;
            }
            else if (removedWriteOverlapsWithOtherWrites) {
                // There's some shadowing going on. Just rebuild the visible writes from scratch.
                this.resetTree_();
                return true;
            }
            else {
                // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
                if (writeToRemove.snap) {
                    this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
                }
                else {
                    var children = writeToRemove.children;
                    each(children, function (childName) {
                        _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
                    });
                }
                return true;
            }
        };
        /**
         * Return a complete snapshot for the given path if there's visible write data at that path, else null.
         * No server data is considered.
         *
         * @param {!Path} path
         * @return {?Node}
         */
        WriteTree.prototype.getCompleteWriteData = function (path) {
            return this.visibleWrites_.getCompleteNode(path);
        };
        /**
         * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
         * writes), attempt to calculate a complete snapshot for the given path
         *
         * @param {!Path} treePath
         * @param {?Node} completeServerCache
         * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
         * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
         * @return {?Node}
         */
        WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
            if (!writeIdsToExclude && !includeHiddenWrites) {
                var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);
                if (shadowingNode != null) {
                    return shadowingNode;
                }
                else {
                    var subMerge = this.visibleWrites_.childCompoundWrite(treePath);
                    if (subMerge.isEmpty()) {
                        return completeServerCache;
                    }
                    else if (completeServerCache == null &&
                        !subMerge.hasCompleteWrite(Path.Empty)) {
                        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                        return null;
                    }
                    else {
                        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                        return subMerge.apply(layeredCache);
                    }
                }
            }
            else {
                var merge = this.visibleWrites_.childCompoundWrite(treePath);
                if (!includeHiddenWrites && merge.isEmpty()) {
                    return completeServerCache;
                }
                else {
                    // If the server cache is null, and we don't have a complete cache, we need to return null
                    if (!includeHiddenWrites &&
                        completeServerCache == null &&
                        !merge.hasCompleteWrite(Path.Empty)) {
                        return null;
                    }
                    else {
                        var filter = function (write) {
                            return ((write.visible || includeHiddenWrites) &&
                                (!writeIdsToExclude ||
                                    !~writeIdsToExclude.indexOf(write.writeId)) &&
                                (write.path.contains(treePath) || treePath.contains(write.path)));
                        };
                        var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
                        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                        return mergeAtPath.apply(layeredCache);
                    }
                }
            }
        };
        /**
         * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
         * Used when creating new views, to pre-fill their complete event children snapshot.
         *
         * @param {!Path} treePath
         * @param {?ChildrenNode} completeServerChildren
         * @return {!ChildrenNode}
         */
        WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
            var completeChildren = ChildrenNode.EMPTY_NODE;
            var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);
            if (topLevelSet) {
                if (!topLevelSet.isLeafNode()) {
                    // we're shadowing everything. Return the children.
                    topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {
                        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
                    });
                }
                return completeChildren;
            }
            else if (completeServerChildren) {
                // Layer any children we have on top of this
                // We know we don't have a top-level set, so just enumerate existing children
                var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
                completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                    var node = merge_1
                        .childCompoundWrite(new Path(childName))
                        .apply(childNode);
                    completeChildren = completeChildren.updateImmediateChild(childName, node);
                });
                // Add any complete children we have from the set
                merge_1.getCompleteChildren().forEach(function (namedNode) {
                    completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
                });
                return completeChildren;
            }
            else {
                // We don't have anything to layer on top of. Layer on any children we have
                // Note that we can return an empty snap if we have a defined delete
                var merge = this.visibleWrites_.childCompoundWrite(treePath);
                merge.getCompleteChildren().forEach(function (namedNode) {
                    completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
                });
                return completeChildren;
            }
        };
        /**
         * Given that the underlying server data has updated, determine what, if anything, needs to be
         * applied to the event cache.
         *
         * Possibilities:
         *
         * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
         *
         * 2. Some write is completely shadowing. No events to be raised
         *
         * 3. Is partially shadowed. Events
         *
         * Either existingEventSnap or existingServerSnap must exist
         *
         * @param {!Path} treePath
         * @param {!Path} childPath
         * @param {?Node} existingEventSnap
         * @param {?Node} existingServerSnap
         * @return {?Node}
         */
        WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
            assert$1(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
            var path = treePath.child(childPath);
            if (this.visibleWrites_.hasCompleteWrite(path)) {
                // At this point we can probably guarantee that we're in case 2, meaning no events
                // May need to check visibility while doing the findRootMostValueAndPath call
                return null;
            }
            else {
                // No complete shadowing. We're either partially shadowing or not shadowing at all.
                var childMerge = this.visibleWrites_.childCompoundWrite(path);
                if (childMerge.isEmpty()) {
                    // We're not shadowing at all. Case 1
                    return existingServerSnap.getChild(childPath);
                }
                else {
                    // This could be more efficient if the serverNode + updates doesn't change the eventSnap
                    // However this is tricky to find out, since user updates don't necessary change the server
                    // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
                    // adds nodes, but doesn't change any existing writes. It is therefore not enough to
                    // only check if the updates change the serverNode.
                    // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
                    return childMerge.apply(existingServerSnap.getChild(childPath));
                }
            }
        };
        /**
         * Returns a complete child for a given server snap after applying all user writes or null if there is no
         * complete child for this ChildKey.
         *
         * @param {!Path} treePath
         * @param {!string} childKey
         * @param {!CacheNode} existingServerSnap
         * @return {?Node}
         */
        WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
            var path = treePath.child(childKey);
            var shadowingNode = this.visibleWrites_.getCompleteNode(path);
            if (shadowingNode != null) {
                return shadowingNode;
            }
            else {
                if (existingServerSnap.isCompleteForChild(childKey)) {
                    var childMerge = this.visibleWrites_.childCompoundWrite(path);
                    return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
                }
                else {
                    return null;
                }
            }
        };
        /**
         * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
         * a higher path, this will return the child of that write relative to the write and this path.
         * Returns null if there is no write at this path.
         */
        WriteTree.prototype.shadowingWrite = function (path) {
            return this.visibleWrites_.getCompleteNode(path);
        };
        /**
         * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
         * the window, but may now be in the window.
         */
        WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
            var toIterate;
            var merge = this.visibleWrites_.childCompoundWrite(treePath);
            var shadowingNode = merge.getCompleteNode(Path.Empty);
            if (shadowingNode != null) {
                toIterate = shadowingNode;
            }
            else if (completeServerData != null) {
                toIterate = merge.apply(completeServerData);
            }
            else {
                // no children to iterate on
                return [];
            }
            toIterate = toIterate.withIndex(index);
            if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
                var nodes = [];
                var cmp = index.getCompare();
                var iter = reverse
                    ? toIterate.getReverseIteratorFrom(startPost, index)
                    : toIterate.getIteratorFrom(startPost, index);
                var next = iter.getNext();
                while (next && nodes.length < count) {
                    if (cmp(next, startPost) !== 0) {
                        nodes.push(next);
                    }
                    next = iter.getNext();
                }
                return nodes;
            }
            else {
                return [];
            }
        };
        WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
            if (writeRecord.snap) {
                return writeRecord.path.contains(path);
            }
            else {
                for (var childName in writeRecord.children) {
                    if (writeRecord.children.hasOwnProperty(childName) &&
                        writeRecord.path.child(childName).contains(path)) {
                        return true;
                    }
                }
                return false;
            }
        };
        /**
         * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
         */
        WriteTree.prototype.resetTree_ = function () {
            this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);
            if (this.allWrites_.length > 0) {
                this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
            }
            else {
                this.lastWriteId_ = -1;
            }
        };
        /**
         * The default filter used when constructing the tree. Keep everything that's visible.
         */
        WriteTree.DefaultFilter_ = function (write) {
            return write.visible;
        };
        /**
         * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
         * event data at that path.
         */
        WriteTree.layerTree_ = function (writes, filter, treeRoot) {
            var compoundWrite = CompoundWrite.Empty;
            for (var i = 0; i < writes.length; ++i) {
                var write = writes[i];
                // Theory, a later set will either:
                // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
                // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
                if (filter(write)) {
                    var writePath = write.path;
                    var relativePath = void 0;
                    if (write.snap) {
                        if (treeRoot.contains(writePath)) {
                            relativePath = Path.relativePath(treeRoot, writePath);
                            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
                        }
                        else if (writePath.contains(treeRoot)) {
                            relativePath = Path.relativePath(writePath, treeRoot);
                            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));
                        }
                        else ;
                    }
                    else if (write.children) {
                        if (treeRoot.contains(writePath)) {
                            relativePath = Path.relativePath(treeRoot, writePath);
                            compoundWrite = compoundWrite.addWrites(relativePath, write.children);
                        }
                        else if (writePath.contains(treeRoot)) {
                            relativePath = Path.relativePath(writePath, treeRoot);
                            if (relativePath.isEmpty()) {
                                compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);
                            }
                            else {
                                var child = safeGet(write.children, relativePath.getFront());
                                if (child) {
                                    // There exists a child in this node that matches the root path
                                    var deepNode = child.getChild(relativePath.popFront());
                                    compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);
                                }
                            }
                        }
                        else ;
                    }
                    else {
                        throw assertionError('WriteRecord should have .snap or .children');
                    }
                }
            }
            return compoundWrite;
        };
        return WriteTree;
    }());
    /**
     * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
     * just proxy to the underlying WriteTree.
     *
     * @constructor
     */
    var WriteTreeRef = /** @class */ (function () {
        /**
         * @param {!Path} path
         * @param {!WriteTree} writeTree
         */
        function WriteTreeRef(path, writeTree) {
            this.treePath_ = path;
            this.writeTree_ = writeTree;
        }
        /**
         * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
         * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
         * can lead to a more expensive calculation.
         *
         * @param {?Node} completeServerCache
         * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
         * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
         * @return {?Node}
         */
        WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
            return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
        };
        /**
         * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
         * mix of the given server data and write data.
         *
         * @param {?ChildrenNode} completeServerChildren
         * @return {!ChildrenNode}
         */
        WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
            return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
        };
        /**
         * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
         * if anything, needs to be applied to the event cache.
         *
         * Possibilities:
         *
         * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
         *
         * 2. Some write is completely shadowing. No events to be raised
         *
         * 3. Is partially shadowed. Events should be raised
         *
         * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
         *
         * @param {!Path} path
         * @param {?Node} existingEventSnap
         * @param {?Node} existingServerSnap
         * @return {?Node}
         */
        WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
            return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
        };
        /**
         * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
         * a higher path, this will return the child of that write relative to the write and this path.
         * Returns null if there is no write at this path.
         *
         * @param {!Path} path
         * @return {?Node}
         */
        WriteTreeRef.prototype.shadowingWrite = function (path) {
            return this.writeTree_.shadowingWrite(this.treePath_.child(path));
        };
        /**
         * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
         * the window, but may now be in the window
         *
         * @param {?Node} completeServerData
         * @param {!NamedNode} startPost
         * @param {!number} count
         * @param {boolean} reverse
         * @param {!Index} index
         * @return {!Array.<!NamedNode>}
         */
        WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
            return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
        };
        /**
         * Returns a complete child for a given server snap after applying all user writes or null if there is no
         * complete child for this ChildKey.
         *
         * @param {!string} childKey
         * @param {!CacheNode} existingServerCache
         * @return {?Node}
         */
        WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
            return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
        };
        /**
         * Return a WriteTreeRef for a child.
         *
         * @param {string} childName
         * @return {!WriteTreeRef}
         */
        WriteTreeRef.prototype.child = function (childName) {
            return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
        };
        return WriteTreeRef;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SyncTree is the central class for managing event callback registration, data caching, views
     * (query processing), and event generation.  There are typically two SyncTree instances for
     * each Repo, one for the normal Firebase data, and one for the .info data.
     *
     * It has a number of responsibilities, including:
     *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
     *  - Applying and caching data changes for user set(), transaction(), and update() calls
     *    (applyUserOverwrite(), applyUserMerge()).
     *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
     *    applyServerMerge()).
     *  - Generating user-facing events for server and user changes (all of the apply* methods
     *    return the set of events that need to be raised as a result).
     *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
     *    to the correct set of paths and queries to satisfy the current set of user event
     *    callbacks (listens are started/stopped using the provided listenProvider).
     *
     * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
     * events are returned to the caller rather than raised synchronously.
     *
     * @constructor
     */
    var SyncTree = /** @class */ (function () {
        /**
         * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
         *   to server data.
         */
        function SyncTree(listenProvider_) {
            this.listenProvider_ = listenProvider_;
            /**
             * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
             */
            this.syncPointTree_ = ImmutableTree.Empty;
            /**
             * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
             */
            this.pendingWriteTree_ = new WriteTree();
            this.tagToQueryMap = new Map();
            this.queryToTagMap = new Map();
        }
        /**
         * Apply the data changes for a user-generated set() or transaction() call.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
            // Record pending write.
            this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
            if (!visible) {
                return [];
            }
            else {
                return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));
            }
        };
        /**
         * Apply the data from a user-generated update() call
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
            // Record pending merge.
            this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
            var changeTree = ImmutableTree.fromObject(changedChildren);
            return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));
        };
        /**
         * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
         *
         * @param revert True if the given write failed and needs to be reverted
         * @return Events to raise.
         */
        SyncTree.prototype.ackUserWrite = function (writeId, revert) {
            if (revert === void 0) { revert = false; }
            var write = this.pendingWriteTree_.getWrite(writeId);
            var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
            if (!needToReevaluate) {
                return [];
            }
            else {
                var affectedTree_1 = ImmutableTree.Empty;
                if (write.snap != null) {
                    // overwrite
                    affectedTree_1 = affectedTree_1.set(Path.Empty, true);
                }
                else {
                    each(write.children, function (pathString, node) {
                        affectedTree_1 = affectedTree_1.set(new Path(pathString), node);
                    });
                }
                return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));
            }
        };
        /**
         * Apply new server data for the specified path..
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyServerOverwrite = function (path, newData) {
            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));
        };
        /**
         * Apply new server data to be merged in at the specified path.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
            var changeTree = ImmutableTree.fromObject(changedChildren);
            return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));
        };
        /**
         * Apply a listen complete for a query
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyListenComplete = function (path) {
            return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));
        };
        /**
         * Apply new server data for the specified tagged query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey != null) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = Path.relativePath(queryPath, path);
                var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // Query must have been removed already
                return [];
            }
        };
        /**
         * Apply server data to be merged in for the specified tagged query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = Path.relativePath(queryPath, path);
                var changeTree = ImmutableTree.fromObject(changedChildren);
                var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // We've already removed the query. No big deal, ignore the update
                return [];
            }
        };
        /**
         * Apply a listen complete for a tagged query
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = Path.relativePath(queryPath, path);
                var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // We've already removed the query. No big deal, ignore the update
                return [];
            }
        };
        /**
         * Add an event callback for the specified query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
            var path = query.path;
            var serverCache = null;
            var foundAncestorDefaultView = false;
            // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
            // Consider optimizing this once there's a better understanding of what actual behavior will be.
            this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
                var relativePath = Path.relativePath(pathToSyncPoint, path);
                serverCache = serverCache || sp.getCompleteServerCache(relativePath);
                foundAncestorDefaultView =
                    foundAncestorDefaultView || sp.hasCompleteView();
            });
            var syncPoint = this.syncPointTree_.get(path);
            if (!syncPoint) {
                syncPoint = new SyncPoint();
                this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
            }
            else {
                foundAncestorDefaultView =
                    foundAncestorDefaultView || syncPoint.hasCompleteView();
                serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);
            }
            var serverCacheComplete;
            if (serverCache != null) {
                serverCacheComplete = true;
            }
            else {
                serverCacheComplete = false;
                serverCache = ChildrenNode.EMPTY_NODE;
                var subtree = this.syncPointTree_.subtree(path);
                subtree.foreachChild(function (childName, childSyncPoint) {
                    var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);
                    if (completeCache) {
                        serverCache = serverCache.updateImmediateChild(childName, completeCache);
                    }
                });
            }
            var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
            if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
                // We need to track a tag for this query
                var queryKey = SyncTree.makeQueryKey_(query);
                assert$1(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
                var tag = SyncTree.getNextQueryTag_();
                this.queryToTagMap.set(queryKey, tag);
                this.tagToQueryMap.set(tag, queryKey);
            }
            var writesCache = this.pendingWriteTree_.childWrites(path);
            var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
            if (!viewAlreadyExists && !foundAncestorDefaultView) {
                var view /** @type !View */ = syncPoint.viewForQuery(query);
                events = events.concat(this.setupListener_(query, view));
            }
            return events;
        };
        /**
         * Remove event callback(s).
         *
         * If query is the default query, we'll check all queries for the specified eventRegistration.
         * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
         *
         * @param eventRegistration If null, all callbacks are removed.
         * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return Cancel events, if cancelError was provided.
         */
        SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var _this = this;
            // Find the syncPoint first. Then deal with whether or not it has matching listeners
            var path = query.path;
            var maybeSyncPoint = this.syncPointTree_.get(path);
            var cancelEvents = [];
            // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
            // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
            // not loadsAllData().
            if (maybeSyncPoint &&
                (query.queryIdentifier() === 'default' ||
                    maybeSyncPoint.viewExistsForQuery(query))) {
                /**
                 * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
                 */
                var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
                if (maybeSyncPoint.isEmpty()) {
                    this.syncPointTree_ = this.syncPointTree_.remove(path);
                }
                var removed = removedAndEvents.removed;
                cancelEvents = removedAndEvents.events;
                // We may have just removed one of many listeners and can short-circuit this whole process
                // We may also not have removed a default listener, in which case all of the descendant listeners should already be
                // properly set up.
                //
                // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
                // queryId === 'default'
                var removingDefault = -1 !==
                    removed.findIndex(function (query) {
                        return query.getQueryParams().loadsAllData();
                    });
                var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
                    return parentSyncPoint.hasCompleteView();
                });
                if (removingDefault && !covered) {
                    var subtree = this.syncPointTree_.subtree(path);
                    // There are potentially child listeners. Determine what if any listens we need to send before executing the
                    // removal
                    if (!subtree.isEmpty()) {
                        // We need to fold over our subtree and collect the listeners to send
                        var newViews = this.collectDistinctViewsForSubTree_(subtree);
                        // Ok, we've collected all the listens we need. Set them up.
                        for (var i = 0; i < newViews.length; ++i) {
                            var view = newViews[i], newQuery = view.getQuery();
                            var listener = this.createListenerForView_(view);
                            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
                        }
                    }
                }
                // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
                // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
                // Also, note that if we have a cancelError, it's already been removed at the provider level.
                if (!covered && removed.length > 0 && !cancelError) {
                    // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                    // default. Otherwise, we need to iterate through and cancel each individual query
                    if (removingDefault) {
                        // We don't tag default listeners
                        var defaultTag = null;
                        this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
                    }
                    else {
                        removed.forEach(function (queryToRemove) {
                            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));
                            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
                        });
                    }
                }
                // Now, clear all of the tags we're tracking for the removed listens
                this.removeTags_(removed);
            }
            return cancelEvents;
        };
        /**
         * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
         * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
         * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
         *     <incremented total> as the write is applied locally and then acknowledged at the server.
         *
         * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
         *
         * @param path The path to the data we want
         * @param writeIdsToExclude A specific set to be excluded
         */
        SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
            var includeHiddenSets = true;
            var writeTree = this.pendingWriteTree_;
            var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
                var relativePath = Path.relativePath(pathSoFar, path);
                var serverCache = syncPoint.getCompleteServerCache(relativePath);
                if (serverCache) {
                    return serverCache;
                }
            });
            return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
        };
        /**
         * This collapses multiple unfiltered views into a single view, since we only need a single
         * listener for them.
         */
        SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
            return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
                    var completeView = maybeChildSyncPoint.getCompleteView();
                    return [completeView];
                }
                else {
                    // No complete view here, flatten any deeper listens into an array
                    var views_1 = [];
                    if (maybeChildSyncPoint) {
                        views_1 = maybeChildSyncPoint.getQueryViews();
                    }
                    each(childMap, function (_key, childViews) {
                        views_1 = views_1.concat(childViews);
                    });
                    return views_1;
                }
            });
        };
        SyncTree.prototype.removeTags_ = function (queries) {
            for (var j = 0; j < queries.length; ++j) {
                var removedQuery = queries[j];
                if (!removedQuery.getQueryParams().loadsAllData()) {
                    // We should have a tag for this
                    var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
                    var removedQueryTag = this.queryToTagMap.get(removedQueryKey);
                    this.queryToTagMap.delete(removedQueryKey);
                    this.tagToQueryMap.delete(removedQueryTag);
                }
            }
        };
        /**
         * Normalizes a query to a query we send the server for listening
         *
         * @return The normalized query
         */
        SyncTree.queryForListening_ = function (query) {
            if (query.getQueryParams().loadsAllData() &&
                !query.getQueryParams().isDefault()) {
                // We treat queries that load all data as default queries
                // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
                // from Query
                return query.getRef();
            }
            else {
                return query;
            }
        };
        /**
         * For a given new listen, manage the de-duplication of outstanding subscriptions.
         *
         * @return This method can return events to support synchronous data sources
         */
        SyncTree.prototype.setupListener_ = function (query, view) {
            var path = query.path;
            var tag = this.tagForQuery_(query);
            var listener = this.createListenerForView_(view);
            var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
            var subtree = this.syncPointTree_.subtree(path);
            // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
            // may need to shadow other listens as well.
            if (tag) {
                assert$1(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
            }
            else {
                // Shadow everything at or below this location, this is a default listener.
                var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                    if (!relativePath.isEmpty() &&
                        maybeChildSyncPoint &&
                        maybeChildSyncPoint.hasCompleteView()) {
                        return [maybeChildSyncPoint.getCompleteView().getQuery()];
                    }
                    else {
                        // No default listener here, flatten any deeper queries into an array
                        var queries_1 = [];
                        if (maybeChildSyncPoint) {
                            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));
                        }
                        each(childMap, function (_key, childQueries) {
                            queries_1 = queries_1.concat(childQueries);
                        });
                        return queries_1;
                    }
                });
                for (var i = 0; i < queriesToStop.length; ++i) {
                    var queryToStop = queriesToStop[i];
                    this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
                }
            }
            return events;
        };
        SyncTree.prototype.createListenerForView_ = function (view) {
            var _this = this;
            var query = view.getQuery();
            var tag = this.tagForQuery_(query);
            return {
                hashFn: function () {
                    var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;
                    return cache.hash();
                },
                onComplete: function (status) {
                    if (status === 'ok') {
                        if (tag) {
                            return _this.applyTaggedListenComplete(query.path, tag);
                        }
                        else {
                            return _this.applyListenComplete(query.path);
                        }
                    }
                    else {
                        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                        // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                        var error = errorForServerCode(status, query);
                        return _this.removeEventRegistration(query, 
                        /*eventRegistration*/ null, error);
                    }
                }
            };
        };
        /**
         * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
         */
        SyncTree.makeQueryKey_ = function (query) {
            return query.path.toString() + '$' + query.queryIdentifier();
        };
        /**
         * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
         */
        SyncTree.parseQueryKey_ = function (queryKey) {
            var splitIndex = queryKey.indexOf('$');
            assert$1(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
            return {
                queryId: queryKey.substr(splitIndex + 1),
                path: new Path(queryKey.substr(0, splitIndex))
            };
        };
        /**
         * Return the query associated with the given tag, if we have one
         */
        SyncTree.prototype.queryKeyForTag_ = function (tag) {
            return this.tagToQueryMap.get(tag);
        };
        /**
         * Return the tag associated with the given query.
         */
        SyncTree.prototype.tagForQuery_ = function (query) {
            var queryKey = SyncTree.makeQueryKey_(query);
            return this.queryToTagMap.get(queryKey);
        };
        /**
         * Static accessor for query tags.
         */
        SyncTree.getNextQueryTag_ = function () {
            return SyncTree.nextQueryTag_++;
        };
        /**
         * A helper method to apply tagged operations
         */
        SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
            var syncPoint = this.syncPointTree_.get(queryPath);
            assert$1(syncPoint, "Missing sync point for query tag that we're tracking");
            var writesCache = this.pendingWriteTree_.childWrites(queryPath);
            return syncPoint.applyOperation(operation, writesCache, 
            /*serverCache=*/ null);
        };
        /**
         * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
         *
         * NOTES:
         * - Descendant SyncPoints will be visited first (since we raise events depth-first).
         *
         * - We call applyOperation() on each SyncPoint passing three things:
         *   1. A version of the Operation that has been made relative to the SyncPoint location.
         *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
         *   3. A snapshot Node with cached server data, if we have it.
         *
         * - We concatenate all of the events returned by each SyncPoint and return the result.
         */
        SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
            return this.applyOperationHelper_(operation, this.syncPointTree_, 
            /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));
        };
        /**
         * Recursive helper for applyOperationToSyncPoints_
         */
        SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
            if (operation.path.isEmpty()) {
                return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
            }
            else {
                var syncPoint = syncPointTree.get(Path.Empty);
                // If we don't have cached server data, see if we can get it from this SyncPoint.
                if (serverCache == null && syncPoint != null) {
                    serverCache = syncPoint.getCompleteServerCache(Path.Empty);
                }
                var events = [];
                var childName = operation.path.getFront();
                var childOperation = operation.operationForChild(childName);
                var childTree = syncPointTree.children.get(childName);
                if (childTree && childOperation) {
                    var childServerCache = serverCache
                        ? serverCache.getImmediateChild(childName)
                        : null;
                    var childWritesCache = writesCache.child(childName);
                    events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
                }
                if (syncPoint) {
                    events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
                }
                return events;
            }
        };
        /**
         * Recursive helper for applyOperationToSyncPoints_
         */
        SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
            var _this = this;
            var syncPoint = syncPointTree.get(Path.Empty);
            // If we don't have cached server data, see if we can get it from this SyncPoint.
            if (serverCache == null && syncPoint != null) {
                serverCache = syncPoint.getCompleteServerCache(Path.Empty);
            }
            var events = [];
            syncPointTree.children.inorderTraversal(function (childName, childTree) {
                var childServerCache = serverCache
                    ? serverCache.getImmediateChild(childName)
                    : null;
                var childWritesCache = writesCache.child(childName);
                var childOperation = operation.operationForChild(childName);
                if (childOperation) {
                    events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
                }
            });
            if (syncPoint) {
                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
            }
            return events;
        };
        /**
         * Static tracker for next query tag.
         */
        SyncTree.nextQueryTag_ = 1;
        return SyncTree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
     *
     * @constructor
     */
    var SnapshotHolder = /** @class */ (function () {
        function SnapshotHolder() {
            this.rootNode_ = ChildrenNode.EMPTY_NODE;
        }
        SnapshotHolder.prototype.getNode = function (path) {
            return this.rootNode_.getChild(path);
        };
        SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
            this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
        };
        return SnapshotHolder;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Tracks a collection of stats.
     *
     * @constructor
     */
    var StatsCollection = /** @class */ (function () {
        function StatsCollection() {
            this.counters_ = {};
        }
        StatsCollection.prototype.incrementCounter = function (name, amount) {
            if (amount === void 0) { amount = 1; }
            if (!contains(this.counters_, name)) {
                this.counters_[name] = 0;
            }
            this.counters_[name] += amount;
        };
        StatsCollection.prototype.get = function () {
            return deepCopy(this.counters_);
        };
        return StatsCollection;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StatsManager = /** @class */ (function () {
        function StatsManager() {
        }
        StatsManager.getCollection = function (repoInfo) {
            var hashString = repoInfo.toString();
            if (!this.collections_[hashString]) {
                this.collections_[hashString] = new StatsCollection();
            }
            return this.collections_[hashString];
        };
        StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
            var hashString = repoInfo.toString();
            if (!this.reporters_[hashString]) {
                this.reporters_[hashString] = creatorFunction();
            }
            return this.reporters_[hashString];
        };
        StatsManager.collections_ = {};
        StatsManager.reporters_ = {};
        return StatsManager;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns the delta from the previous call to get stats.
     *
     * @param collection_ The collection to "listen" to.
     * @constructor
     */
    var StatsListener = /** @class */ (function () {
        function StatsListener(collection_) {
            this.collection_ = collection_;
            this.last_ = null;
        }
        StatsListener.prototype.get = function () {
            var newStats = this.collection_.get();
            var delta = __assign({}, newStats);
            if (this.last_) {
                each(this.last_, function (stat, value) {
                    delta[stat] = delta[stat] - value;
                });
            }
            this.last_ = newStats;
            return delta;
        };
        return StatsListener;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
    // happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
    // seconds to try to ensure the Firebase connection is established / settled.
    var FIRST_STATS_MIN_TIME = 10 * 1000;
    var FIRST_STATS_MAX_TIME = 30 * 1000;
    // We'll continue to report stats on average every 5 minutes.
    var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
    /**
     * @constructor
     */
    var StatsReporter = /** @class */ (function () {
        /**
         * @param collection
         * @param server_
         */
        function StatsReporter(collection, server_) {
            this.server_ = server_;
            this.statsToReport_ = {};
            this.statsListener_ = new StatsListener(collection);
            var timeout = FIRST_STATS_MIN_TIME +
                (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
            setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
        }
        StatsReporter.prototype.includeStat = function (stat) {
            this.statsToReport_[stat] = true;
        };
        StatsReporter.prototype.reportStats_ = function () {
            var _this = this;
            var stats = this.statsListener_.get();
            var reportedStats = {};
            var haveStatsToReport = false;
            each(stats, function (stat, value) {
                if (value > 0 && contains(_this.statsToReport_, stat)) {
                    reportedStats[stat] = value;
                    haveStatsToReport = true;
                }
            });
            if (haveStatsToReport) {
                this.server_.reportStats(reportedStats);
            }
            // queue our next run.
            setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
        };
        return StatsReporter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The event queue serves a few purposes:
     * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
     *    events being queued.
     * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
     *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
     *    left off, ensuring that the events are still raised synchronously and in order.
     * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
     *    events are raised synchronously.
     *
     * NOTE: This can all go away if/when we move to async events.
     *
     * @constructor
     */
    var EventQueue = /** @class */ (function () {
        function EventQueue() {
            /**
             * @private
             * @type {!Array.<EventList>}
             */
            this.eventLists_ = [];
            /**
             * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
             * @private
             * @type {!number}
             */
            this.recursionDepth_ = 0;
        }
        /**
         * @param {!Array.<Event>} eventDataList The new events to queue.
         */
        EventQueue.prototype.queueEvents = function (eventDataList) {
            // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
            var currList = null;
            for (var i = 0; i < eventDataList.length; i++) {
                var eventData = eventDataList[i];
                var eventPath = eventData.getPath();
                if (currList !== null && !eventPath.equals(currList.getPath())) {
                    this.eventLists_.push(currList);
                    currList = null;
                }
                if (currList === null) {
                    currList = new EventList(eventPath);
                }
                currList.add(eventData);
            }
            if (currList) {
                this.eventLists_.push(currList);
            }
        };
        /**
         * Queues the specified events and synchronously raises all events (including previously queued ones)
         * for the specified path.
         *
         * It is assumed that the new events are all for the specified path.
         *
         * @param {!Path} path The path to raise events for.
         * @param {!Array.<Event>} eventDataList The new events to raise.
         */
        EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
            this.queueEvents(eventDataList);
            this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
                return eventPath.equals(path);
            });
        };
        /**
         * Queues the specified events and synchronously raises all events (including previously queued ones) for
         * locations related to the specified change path (i.e. all ancestors and descendants).
         *
         * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
         *
         * @param {!Path} changedPath The path to raise events for.
         * @param {!Array.<!Event>} eventDataList The events to raise
         */
        EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
            this.queueEvents(eventDataList);
            this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
                return eventPath.contains(changedPath) || changedPath.contains(eventPath);
            });
        };
        /**
         * @param {!function(!Path):boolean} predicate
         * @private
         */
        EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
            this.recursionDepth_++;
            var sentAll = true;
            for (var i = 0; i < this.eventLists_.length; i++) {
                var eventList = this.eventLists_[i];
                if (eventList) {
                    var eventPath = eventList.getPath();
                    if (predicate(eventPath)) {
                        this.eventLists_[i].raise();
                        this.eventLists_[i] = null;
                    }
                    else {
                        sentAll = false;
                    }
                }
            }
            if (sentAll) {
                this.eventLists_ = [];
            }
            this.recursionDepth_--;
        };
        return EventQueue;
    }());
    /**
     * @param {!Path} path
     * @constructor
     */
    var EventList = /** @class */ (function () {
        function EventList(path_) {
            this.path_ = path_;
            /**
             * @type {!Array.<Event>}
             * @private
             */
            this.events_ = [];
        }
        /**
         * @param {!Event} eventData
         */
        EventList.prototype.add = function (eventData) {
            this.events_.push(eventData);
        };
        /**
         * Iterates through the list and raises each event
         */
        EventList.prototype.raise = function () {
            for (var i = 0; i < this.events_.length; i++) {
                var eventData = this.events_[i];
                if (eventData !== null) {
                    this.events_[i] = null;
                    var eventFn = eventData.getEventRunner();
                    if (logger$1) {
                        log('event: ' + eventData.toString());
                    }
                    exceptionGuard(eventFn);
                }
            }
        };
        /**
         * @return {!Path}
         */
        EventList.prototype.getPath = function () {
            return this.path_;
        };
        return EventList;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Base class to be used if you want to emit events. Call the constructor with
     * the set of allowed event names.
     */
    var EventEmitter = /** @class */ (function () {
        /**
         * @param {!Array.<string>} allowedEvents_
         */
        function EventEmitter(allowedEvents_) {
            this.allowedEvents_ = allowedEvents_;
            this.listeners_ = {};
            assert$1(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
        }
        /**
         * To be called by derived classes to trigger events.
         * @param {!string} eventType
         * @param {...*} varArgs
         */
        EventEmitter.prototype.trigger = function (eventType) {
            var varArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                varArgs[_i - 1] = arguments[_i];
            }
            if (Array.isArray(this.listeners_[eventType])) {
                // Clone the list, since callbacks could add/remove listeners.
                var listeners = __spread(this.listeners_[eventType]);
                for (var i = 0; i < listeners.length; i++) {
                    listeners[i].callback.apply(listeners[i].context, varArgs);
                }
            }
        };
        EventEmitter.prototype.on = function (eventType, callback, context) {
            this.validateEventType_(eventType);
            this.listeners_[eventType] = this.listeners_[eventType] || [];
            this.listeners_[eventType].push({ callback: callback, context: context });
            var eventData = this.getInitialEvent(eventType);
            if (eventData) {
                callback.apply(context, eventData);
            }
        };
        EventEmitter.prototype.off = function (eventType, callback, context) {
            this.validateEventType_(eventType);
            var listeners = this.listeners_[eventType] || [];
            for (var i = 0; i < listeners.length; i++) {
                if (listeners[i].callback === callback &&
                    (!context || context === listeners[i].context)) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        EventEmitter.prototype.validateEventType_ = function (eventType) {
            assert$1(this.allowedEvents_.find(function (et) {
                return et === eventType;
            }), 'Unknown event: ' + eventType);
        };
        return EventEmitter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @extends {EventEmitter}
     */
    var VisibilityMonitor = /** @class */ (function (_super) {
        __extends$1d(VisibilityMonitor, _super);
        function VisibilityMonitor() {
            var _this = _super.call(this, ['visible']) || this;
            var hidden;
            var visibilityChange;
            if (typeof document !== 'undefined' &&
                typeof document.addEventListener !== 'undefined') {
                if (typeof document['hidden'] !== 'undefined') {
                    // Opera 12.10 and Firefox 18 and later support
                    visibilityChange = 'visibilitychange';
                    hidden = 'hidden';
                }
                else if (typeof document['mozHidden'] !== 'undefined') {
                    visibilityChange = 'mozvisibilitychange';
                    hidden = 'mozHidden';
                }
                else if (typeof document['msHidden'] !== 'undefined') {
                    visibilityChange = 'msvisibilitychange';
                    hidden = 'msHidden';
                }
                else if (typeof document['webkitHidden'] !== 'undefined') {
                    visibilityChange = 'webkitvisibilitychange';
                    hidden = 'webkitHidden';
                }
            }
            // Initially, we always assume we are visible. This ensures that in browsers
            // without page visibility support or in cases where we are never visible
            // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
            // reconnects
            _this.visible_ = true;
            if (visibilityChange) {
                document.addEventListener(visibilityChange, function () {
                    var visible = !document[hidden];
                    if (visible !== _this.visible_) {
                        _this.visible_ = visible;
                        _this.trigger('visible', visible);
                    }
                }, false);
            }
            return _this;
        }
        VisibilityMonitor.getInstance = function () {
            return new VisibilityMonitor();
        };
        /**
         * @param {!string} eventType
         * @return {Array.<boolean>}
         */
        VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
            assert$1(eventType === 'visible', 'Unknown event type: ' + eventType);
            return [this.visible_];
        };
        return VisibilityMonitor;
    }(EventEmitter));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Monitors online state (as reported by window.online/offline events).
     *
     * The expectation is that this could have many false positives (thinks we are online
     * when we're not), but no false negatives.  So we can safely use it to determine when
     * we definitely cannot reach the internet.
     *
     * @extends {EventEmitter}
     */
    var OnlineMonitor = /** @class */ (function (_super) {
        __extends$1d(OnlineMonitor, _super);
        function OnlineMonitor() {
            var _this = _super.call(this, ['online']) || this;
            _this.online_ = true;
            // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
            // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
            // It would seem that the 'online' event does not always fire consistently. So we disable it
            // for Cordova.
            if (typeof window !== 'undefined' &&
                typeof window.addEventListener !== 'undefined' &&
                !isMobileCordova()) {
                window.addEventListener('online', function () {
                    if (!_this.online_) {
                        _this.online_ = true;
                        _this.trigger('online', true);
                    }
                }, false);
                window.addEventListener('offline', function () {
                    if (_this.online_) {
                        _this.online_ = false;
                        _this.trigger('online', false);
                    }
                }, false);
            }
            return _this;
        }
        OnlineMonitor.getInstance = function () {
            return new OnlineMonitor();
        };
        /**
         * @param {!string} eventType
         * @return {Array.<boolean>}
         */
        OnlineMonitor.prototype.getInitialEvent = function (eventType) {
            assert$1(eventType === 'online', 'Unknown event type: ' + eventType);
            return [this.online_];
        };
        /**
         * @return {boolean}
         */
        OnlineMonitor.prototype.currentlyOnline = function () {
            return this.online_;
        };
        return OnlineMonitor;
    }(EventEmitter));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class ensures the packets from the server arrive in order
     * This class takes data from the server and ensures it gets passed into the callbacks in order.
     * @constructor
     */
    var PacketReceiver = /** @class */ (function () {
        /**
         * @param onMessage_
         */
        function PacketReceiver(onMessage_) {
            this.onMessage_ = onMessage_;
            this.pendingResponses = [];
            this.currentResponseNum = 0;
            this.closeAfterResponse = -1;
            this.onClose = null;
        }
        PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
            this.closeAfterResponse = responseNum;
            this.onClose = callback;
            if (this.closeAfterResponse < this.currentResponseNum) {
                this.onClose();
                this.onClose = null;
            }
        };
        /**
         * Each message from the server comes with a response number, and an array of data. The responseNumber
         * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
         * browsers will respond in the same order as the requests we sent
         * @param {number} requestNum
         * @param {Array} data
         */
        PacketReceiver.prototype.handleResponse = function (requestNum, data) {
            var _this = this;
            this.pendingResponses[requestNum] = data;
            var _loop_1 = function () {
                var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
                delete this_1.pendingResponses[this_1.currentResponseNum];
                var _loop_2 = function (i) {
                    if (toProcess[i]) {
                        exceptionGuard(function () {
                            _this.onMessage_(toProcess[i]);
                        });
                    }
                };
                for (var i = 0; i < toProcess.length; ++i) {
                    _loop_2(i);
                }
                if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                    if (this_1.onClose) {
                        this_1.onClose();
                        this_1.onClose = null;
                    }
                    return "break";
                }
                this_1.currentResponseNum++;
            };
            var this_1 = this;
            while (this.pendingResponses[this.currentResponseNum]) {
                var state_1 = _loop_1();
                if (state_1 === "break")
                    break;
            }
        };
        return PacketReceiver;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // URL query parameters associated with longpolling
    var FIREBASE_LONGPOLL_START_PARAM = 'start';
    var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
    var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
    var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
    var FIREBASE_LONGPOLL_ID_PARAM = 'id';
    var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
    var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
    var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
    var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
    var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
    var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
    var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
    //Data size constants.
    //TODO: Perf: the maximum length actually differs from browser to browser.
    // We should check what browser we're on and set accordingly.
    var MAX_URL_DATA_SIZE = 1870;
    var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
    var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
    /**
     * Keepalive period
     * send a fresh request at minimum every 25 seconds. Opera has a maximum request
     * length of 30 seconds that we can't exceed.
     * @const
     * @type {number}
     */
    var KEEPALIVE_REQUEST_INTERVAL = 25000;
    /**
     * How long to wait before aborting a long-polling connection attempt.
     * @const
     * @type {number}
     */
    var LP_CONNECT_TIMEOUT = 30000;
    /**
     * This class manages a single long-polling connection.
     *
     * @constructor
     * @implements {Transport}
     */
    var BrowserPollConnection = /** @class */ (function () {
        /**
         * @param connId An identifier for this connection, used for logging
         * @param repoInfo The info for the endpoint to send data to.
         * @param applicationId The Firebase App ID for this project.
         * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing
         *                                         transport session
         * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a
         *                                     connection previously
         */
        function BrowserPollConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.repoInfo = repoInfo;
            this.applicationId = applicationId;
            this.transportSessionId = transportSessionId;
            this.lastSessionId = lastSessionId;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.everConnected_ = false;
            this.log_ = logWrapper(connId);
            this.stats_ = StatsManager.getCollection(repoInfo);
            this.urlFn = function (params) {
                return repoInfo.connectionURL(LONG_POLLING, params);
            };
        }
        /**
         *
         * @param {function(Object)} onMessage Callback when messages arrive
         * @param {function()} onDisconnect Callback with connection lost.
         */
        BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
            var _this = this;
            this.curSegmentNum = 0;
            this.onDisconnect_ = onDisconnect;
            this.myPacketOrderer = new PacketReceiver(onMessage);
            this.isClosed_ = false;
            this.connectTimeoutTimer_ = setTimeout(function () {
                _this.log_('Timed out trying to connect.');
                // Make sure we clear the host cache
                _this.onClosed_();
                _this.connectTimeoutTimer_ = null;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(LP_CONNECT_TIMEOUT));
            // Ensure we delay the creation of the iframe until the DOM is loaded.
            executeWhenDOMReady(function () {
                if (_this.isClosed_) {
                    return;
                }
                //Set up a callback that gets triggered once a connection is set up.
                _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var _a = __read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2]; _a[3]; _a[4];
                    _this.incrementIncomingBytes_(args);
                    if (!_this.scriptTagHolder) {
                        return; // we closed the connection.
                    }
                    if (_this.connectTimeoutTimer_) {
                        clearTimeout(_this.connectTimeoutTimer_);
                        _this.connectTimeoutTimer_ = null;
                    }
                    _this.everConnected_ = true;
                    if (command === FIREBASE_LONGPOLL_START_PARAM) {
                        _this.id = arg1;
                        _this.password = arg2;
                    }
                    else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                        // Don't clear the host cache. We got a response from the server, so we know it's reachable
                        if (arg1) {
                            // We aren't expecting any more data (other than what the server's already in the process of sending us
                            // through our already open polls), so don't send any more.
                            _this.scriptTagHolder.sendNewPolls = false;
                            // arg1 in this case is the last response number sent by the server. We should try to receive
                            // all of the responses up to this one before closing
                            _this.myPacketOrderer.closeAfter(arg1, function () {
                                _this.onClosed_();
                            });
                        }
                        else {
                            _this.onClosed_();
                        }
                    }
                    else {
                        throw new Error('Unrecognized command received: ' + command);
                    }
                }, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var _a = __read(args, 2), pN = _a[0], data = _a[1];
                    _this.incrementIncomingBytes_(args);
                    _this.myPacketOrderer.handleResponse(pN, data);
                }, function () {
                    _this.onClosed_();
                }, _this.urlFn);
                //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
                //from cache.
                var urlParams = {};
                urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
                urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
                if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
                    urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
                }
                urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
                if (_this.transportSessionId) {
                    urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
                }
                if (_this.lastSessionId) {
                    urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
                }
                if (_this.applicationId) {
                    urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
                }
                if (typeof location !== 'undefined' &&
                    location.hostname &&
                    FORGE_DOMAIN_RE.test(location.hostname)) {
                    urlParams[REFERER_PARAM] = FORGE_REF;
                }
                var connectURL = _this.urlFn(urlParams);
                _this.log_('Connecting via long-poll to ' + connectURL);
                _this.scriptTagHolder.addTag(connectURL, function () {
                    /* do nothing */
                });
            });
        };
        /**
         * Call this when a handshake has completed successfully and we want to consider the connection established
         */
        BrowserPollConnection.prototype.start = function () {
            this.scriptTagHolder.startLongPoll(this.id, this.password);
            this.addDisconnectPingFrame(this.id, this.password);
        };
        /**
         * Forces long polling to be considered as a potential transport
         */
        BrowserPollConnection.forceAllow = function () {
            BrowserPollConnection.forceAllow_ = true;
        };
        /**
         * Forces longpolling to not be considered as a potential transport
         */
        BrowserPollConnection.forceDisallow = function () {
            BrowserPollConnection.forceDisallow_ = true;
        };
        // Static method, use string literal so it can be accessed in a generic way
        BrowserPollConnection.isAvailable = function () {
            if (BrowserPollConnection.forceAllow_) {
                return true;
            }
            else {
                // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
                // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
                return (!BrowserPollConnection.forceDisallow_ &&
                    typeof document !== 'undefined' &&
                    document.createElement != null &&
                    !isChromeExtensionContentScript() &&
                    !isWindowsStoreApp());
            }
        };
        /**
         * No-op for polling
         */
        BrowserPollConnection.prototype.markConnectionHealthy = function () { };
        /**
         * Stops polling and cleans up the iframe
         * @private
         */
        BrowserPollConnection.prototype.shutdown_ = function () {
            this.isClosed_ = true;
            if (this.scriptTagHolder) {
                this.scriptTagHolder.close();
                this.scriptTagHolder = null;
            }
            //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
            if (this.myDisconnFrame) {
                document.body.removeChild(this.myDisconnFrame);
                this.myDisconnFrame = null;
            }
            if (this.connectTimeoutTimer_) {
                clearTimeout(this.connectTimeoutTimer_);
                this.connectTimeoutTimer_ = null;
            }
        };
        /**
         * Triggered when this transport is closed
         * @private
         */
        BrowserPollConnection.prototype.onClosed_ = function () {
            if (!this.isClosed_) {
                this.log_('Longpoll is closing itself');
                this.shutdown_();
                if (this.onDisconnect_) {
                    this.onDisconnect_(this.everConnected_);
                    this.onDisconnect_ = null;
                }
            }
        };
        /**
         * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
         * that we've left.
         */
        BrowserPollConnection.prototype.close = function () {
            if (!this.isClosed_) {
                this.log_('Longpoll is being closed.');
                this.shutdown_();
            }
        };
        /**
         * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
         * broken into chunks (since URLs have a small maximum length).
         * @param {!Object} data The JSON data to transmit.
         */
        BrowserPollConnection.prototype.send = function (data) {
            var dataStr = stringify$1(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            //first, lets get the base64-encoded data
            var base64data = base64Encode(dataStr);
            //We can only fit a certain amount in each URL, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
            //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
            //of segments so that we can reassemble the packet on the server.
            for (var i = 0; i < dataSegs.length; i++) {
                this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
                this.curSegmentNum++;
            }
        };
        /**
         * This is how we notify the server that we're leaving.
         * We aren't able to send requests with DHTML on a window close event, but we can
         * trigger XHR requests in some browsers (everything but Opera basically).
         * @param {!string} id
         * @param {!string} pw
         */
        BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
            this.myDisconnFrame = document.createElement('iframe');
            var urlParams = {};
            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
            this.myDisconnFrame.src = this.urlFn(urlParams);
            this.myDisconnFrame.style.display = 'none';
            document.body.appendChild(this.myDisconnFrame);
        };
        /**
         * Used to track the bytes received by this client
         * @param {*} args
         * @private
         */
        BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
            // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
            var bytesReceived = stringify$1(args).length;
            this.bytesReceived += bytesReceived;
            this.stats_.incrementCounter('bytes_received', bytesReceived);
        };
        return BrowserPollConnection;
    }());
    /*********************************************************************************************
     * A wrapper around an iframe that is used as a long-polling script holder.
     * @constructor
     *********************************************************************************************/
    var FirebaseIFrameScriptHolder = /** @class */ (function () {
        /**
         * @param commandCB - The callback to be called when control commands are recevied from the server.
         * @param onMessageCB - The callback to be triggered when responses arrive from the server.
         * @param onDisconnect - The callback to be triggered when this tag holder is closed
         * @param urlFn - A function that provides the URL of the endpoint to send data to.
         */
        function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
            this.onDisconnect = onDisconnect;
            this.urlFn = urlFn;
            //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
            //problems in some browsers.
            this.outstandingRequests = new Set();
            //A queue of the pending segments waiting for transmission to the server.
            this.pendingSegs = [];
            //A serial number. We use this for two things:
            // 1) A way to ensure the browser doesn't cache responses to polls
            // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
            //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
            //    JSONP code in the order it was added to the iframe.
            this.currentSerial = Math.floor(Math.random() * 100000000);
            // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
            // incoming data from the server that we're waiting for).
            this.sendNewPolls = true;
            {
                //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
                //iframes where we put the long-polling script tags. We have two callbacks:
                //   1) Command Callback - Triggered for control issues, like starting a connection.
                //   2) Message Callback - Triggered when new data arrives.
                this.uniqueCallbackIdentifier = LUIDGenerator();
                window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
                window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
                //Create an iframe for us to add script tags to.
                this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
                // Set the iframe's contents.
                var script = '';
                // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
                // for ie9, but ie8 needs to do it again in the document itself.
                if (this.myIFrame.src &&
                    this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                    var currentDomain = document.domain;
                    script = '<script>document.domain="' + currentDomain + '";</script>';
                }
                var iframeContents = '<html><body>' + script + '</body></html>';
                try {
                    this.myIFrame.doc.open();
                    this.myIFrame.doc.write(iframeContents);
                    this.myIFrame.doc.close();
                }
                catch (e) {
                    log('frame writing exception');
                    if (e.stack) {
                        log(e.stack);
                    }
                    log(e);
                }
            }
        }
        /**
         * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
         * actually use.
         * @private
         * @return {Element}
         */
        FirebaseIFrameScriptHolder.createIFrame_ = function () {
            var iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            // This is necessary in order to initialize the document inside the iframe
            if (document.body) {
                document.body.appendChild(iframe);
                try {
                    // If document.domain has been modified in IE, this will throw an error, and we need to set the
                    // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                    // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                    var a = iframe.contentWindow.document;
                    if (!a) {
                        // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                        log('No IE domain setting required');
                    }
                }
                catch (e) {
                    var domain = document.domain;
                    iframe.src =
                        "javascript:void((function(){document.open();document.domain='" +
                            domain +
                            "';document.close();})())";
                }
            }
            else {
                // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
                // never gets hit.
                throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
            }
            // Get the document of the iframe in a browser-specific way.
            if (iframe.contentDocument) {
                iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
            }
            else if (iframe.contentWindow) {
                iframe.doc = iframe.contentWindow.document; // Internet Explorer
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (iframe.document) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                iframe.doc = iframe.document; //others?
            }
            return iframe;
        };
        /**
         * Cancel all outstanding queries and remove the frame.
         */
        FirebaseIFrameScriptHolder.prototype.close = function () {
            var _this = this;
            //Mark this iframe as dead, so no new requests are sent.
            this.alive = false;
            if (this.myIFrame) {
                //We have to actually remove all of the html inside this iframe before removing it from the
                //window, or IE will continue loading and executing the script tags we've already added, which
                //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
                this.myIFrame.doc.body.innerHTML = '';
                setTimeout(function () {
                    if (_this.myIFrame !== null) {
                        document.body.removeChild(_this.myIFrame);
                        _this.myIFrame = null;
                    }
                }, Math.floor(0));
            }
            // Protect from being called recursively.
            var onDisconnect = this.onDisconnect;
            if (onDisconnect) {
                this.onDisconnect = null;
                onDisconnect();
            }
        };
        /**
         * Actually start the long-polling session by adding the first script tag(s) to the iframe.
         * @param {!string} id - The ID of this connection
         * @param {!string} pw - The password for this connection
         */
        FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
            this.myID = id;
            this.myPW = pw;
            this.alive = true;
            //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
            while (this.newRequest_()) { }
        };
        /**
         * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
         * too many outstanding requests and we are still alive.
         *
         * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
         * needed.
         */
        FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
            // We keep one outstanding request open all the time to receive data, but if we need to send data
            // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
            // close the old request.
            if (this.alive &&
                this.sendNewPolls &&
                this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
                //construct our url
                this.currentSerial++;
                var urlParams = {};
                urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
                urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
                urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
                var theURL = this.urlFn(urlParams);
                //Now add as much data as we can.
                var curDataString = '';
                var i = 0;
                while (this.pendingSegs.length > 0) {
                    //first, lets see if the next segment will fit.
                    var nextSeg = this.pendingSegs[0];
                    if (nextSeg.d.length +
                        SEG_HEADER_SIZE +
                        curDataString.length <=
                        MAX_URL_DATA_SIZE) {
                        //great, the segment will fit. Lets append it.
                        var theSeg = this.pendingSegs.shift();
                        curDataString =
                            curDataString +
                                '&' +
                                FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                                i +
                                '=' +
                                theSeg.seg +
                                '&' +
                                FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                                i +
                                '=' +
                                theSeg.ts +
                                '&' +
                                FIREBASE_LONGPOLL_DATA_PARAM +
                                i +
                                '=' +
                                theSeg.d;
                        i++;
                    }
                    else {
                        break;
                    }
                }
                theURL = theURL + curDataString;
                this.addLongPollTag_(theURL, this.currentSerial);
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * Queue a packet for transmission to the server.
         * @param segnum - A sequential id for this packet segment used for reassembly
         * @param totalsegs - The total number of segments in this packet
         * @param data - The data for this segment.
         */
        FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
            //add this to the queue of segments to send.
            this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
            //send the data immediately if there isn't already data being transmitted, unless
            //startLongPoll hasn't been called yet.
            if (this.alive) {
                this.newRequest_();
            }
        };
        /**
         * Add a script tag for a regular long-poll request.
         * @param {!string} url - The URL of the script tag.
         * @param {!number} serial - The serial number of the request.
         * @private
         */
        FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
            var _this = this;
            //remember that we sent this request.
            this.outstandingRequests.add(serial);
            var doNewRequest = function () {
                _this.outstandingRequests.delete(serial);
                _this.newRequest_();
            };
            // If this request doesn't return on its own accord (by the server sending us some data), we'll
            // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
            var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
            var readyStateCB = function () {
                // Request completed.  Cancel the keepalive.
                clearTimeout(keepaliveTimeout);
                // Trigger a new request so we can continue receiving data.
                doNewRequest();
            };
            this.addTag(url, readyStateCB);
        };
        /**
         * Add an arbitrary script tag to the iframe.
         * @param {!string} url - The URL for the script tag source.
         * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
         */
        FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
            var _this = this;
            {
                setTimeout(function () {
                    try {
                        // if we're already closed, don't add this poll
                        if (!_this.sendNewPolls) {
                            return;
                        }
                        var newScript_1 = _this.myIFrame.doc.createElement('script');
                        newScript_1.type = 'text/javascript';
                        newScript_1.async = true;
                        newScript_1.src = url;
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        newScript_1.onload = newScript_1.onreadystatechange = function () {
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            var rstate = newScript_1.readyState;
                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                newScript_1.onload = newScript_1.onreadystatechange = null;
                                if (newScript_1.parentNode) {
                                    newScript_1.parentNode.removeChild(newScript_1);
                                }
                                loadCB();
                            }
                        };
                        newScript_1.onerror = function () {
                            log('Long-poll script failed to load: ' + url);
                            _this.sendNewPolls = false;
                            _this.close();
                        };
                        _this.myIFrame.doc.body.appendChild(newScript_1);
                    }
                    catch (e) {
                        // TODO: we should make this error visible somehow
                    }
                }, Math.floor(1));
            }
        };
        return FirebaseIFrameScriptHolder;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The semver (www.semver.org) version of the SDK. */
    var SDK_VERSION = '';
    // SDK_VERSION should be set before any database instance is created
    function setSDKVersion(version) {
        SDK_VERSION = version;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var WEBSOCKET_MAX_FRAME_SIZE = 16384;
    var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
    var WebSocketImpl = null;
    if (typeof MozWebSocket !== 'undefined') {
        WebSocketImpl = MozWebSocket;
    }
    else if (typeof WebSocket !== 'undefined') {
        WebSocketImpl = WebSocket;
    }
    /**
     * Create a new websocket connection with the given callbacks.
     * @constructor
     * @implements {Transport}
     */
    var WebSocketConnection = /** @class */ (function () {
        /**
         * @param connId identifier for this transport
         * @param repoInfo The info for the websocket endpoint.
         * @param applicationId The Firebase App ID for this project.
         * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport
         *                                         session
         * @param lastSessionId Optional lastSessionId if there was a previous connection
         */
        function WebSocketConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.applicationId = applicationId;
            this.keepaliveTimer = null;
            this.frames = null;
            this.totalFrames = 0;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.log_ = logWrapper(this.connId);
            this.stats_ = StatsManager.getCollection(repoInfo);
            this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
            this.nodeAdmin = repoInfo.nodeAdmin;
        }
        /**
         * @param {RepoInfo} repoInfo The info for the websocket endpoint.
         * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
         *                                         session
         * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
         * @return {string} connection url
         * @private
         */
        WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
            var urlParams = {};
            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
            if (typeof location !== 'undefined' &&
                location.hostname &&
                FORGE_DOMAIN_RE.test(location.hostname)) {
                urlParams[REFERER_PARAM] = FORGE_REF;
            }
            if (transportSessionId) {
                urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
            }
            if (lastSessionId) {
                urlParams[LAST_SESSION_PARAM] = lastSessionId;
            }
            return repoInfo.connectionURL(WEBSOCKET, urlParams);
        };
        /**
         *
         * @param onMessage Callback when messages arrive
         * @param onDisconnect Callback with connection lost.
         */
        WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
            var _this = this;
            this.onDisconnect = onDisconnect;
            this.onMessage = onMessage;
            this.log_('Websocket connecting to ' + this.connURL);
            this.everConnected_ = false;
            // Assume failure until proven otherwise.
            PersistentStorage.set('previous_websocket_failure', true);
            try {
                var device, options, env, proxy; if (isNodeSdk()) ;
                else {
                    var options = {
                        headers: {
                            'X-Firebase-GMPID': this.applicationId || ''
                        }
                    };
                    this.mySock = new WebSocketImpl(this.connURL, [], options);
                }
            }
            catch (e) {
                this.log_('Error instantiating WebSocket.');
                var error = e.message || e.data;
                if (error) {
                    this.log_(error);
                }
                this.onClosed_();
                return;
            }
            this.mySock.onopen = function () {
                _this.log_('Websocket connected.');
                _this.everConnected_ = true;
            };
            this.mySock.onclose = function () {
                _this.log_('Websocket connection was disconnected.');
                _this.mySock = null;
                _this.onClosed_();
            };
            this.mySock.onmessage = function (m) {
                _this.handleIncomingFrame(m);
            };
            this.mySock.onerror = function (e) {
                _this.log_('WebSocket error.  Closing connection.');
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var error = e.message || e.data;
                if (error) {
                    _this.log_(error);
                }
                _this.onClosed_();
            };
        };
        /**
         * No-op for websockets, we don't need to do anything once the connection is confirmed as open
         */
        WebSocketConnection.prototype.start = function () { };
        WebSocketConnection.forceDisallow = function () {
            WebSocketConnection.forceDisallow_ = true;
        };
        WebSocketConnection.isAvailable = function () {
            var isOldAndroid = false;
            if (typeof navigator !== 'undefined' && navigator.userAgent) {
                var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
                var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
                if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                    if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                        isOldAndroid = true;
                    }
                }
            }
            return (!isOldAndroid &&
                WebSocketImpl !== null &&
                !WebSocketConnection.forceDisallow_);
        };
        /**
         * Returns true if we previously failed to connect with this transport.
         * @return {boolean}
         */
        WebSocketConnection.previouslyFailed = function () {
            // If our persistent storage is actually only in-memory storage,
            // we default to assuming that it previously failed to be safe.
            return (PersistentStorage.isInMemoryStorage ||
                PersistentStorage.get('previous_websocket_failure') === true);
        };
        WebSocketConnection.prototype.markConnectionHealthy = function () {
            PersistentStorage.remove('previous_websocket_failure');
        };
        WebSocketConnection.prototype.appendFrame_ = function (data) {
            this.frames.push(data);
            if (this.frames.length === this.totalFrames) {
                var fullMess = this.frames.join('');
                this.frames = null;
                var jsonMess = jsonEval(fullMess);
                //handle the message
                this.onMessage(jsonMess);
            }
        };
        /**
         * @param {number} frameCount The number of frames we are expecting from the server
         * @private
         */
        WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
            this.totalFrames = frameCount;
            this.frames = [];
        };
        /**
         * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
         * @param {!String} data
         * @return {?String} Any remaining data to be process, or null if there is none
         * @private
         */
        WebSocketConnection.prototype.extractFrameCount_ = function (data) {
            assert$1(this.frames === null, 'We already have a frame buffer');
            // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
            // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
            if (data.length <= 6) {
                var frameCount = Number(data);
                if (!isNaN(frameCount)) {
                    this.handleNewFrameCount_(frameCount);
                    return null;
                }
            }
            this.handleNewFrameCount_(1);
            return data;
        };
        /**
         * Process a websocket frame that has arrived from the server.
         * @param mess The frame data
         */
        WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
            if (this.mySock === null) {
                return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
            }
            var data = mess['data'];
            this.bytesReceived += data.length;
            this.stats_.incrementCounter('bytes_received', data.length);
            this.resetKeepAlive();
            if (this.frames !== null) {
                // we're buffering
                this.appendFrame_(data);
            }
            else {
                // try to parse out a frame count, otherwise, assume 1 and process it
                var remainingData = this.extractFrameCount_(data);
                if (remainingData !== null) {
                    this.appendFrame_(remainingData);
                }
            }
        };
        /**
         * Send a message to the server
         * @param {Object} data The JSON object to transmit
         */
        WebSocketConnection.prototype.send = function (data) {
            this.resetKeepAlive();
            var dataStr = stringify$1(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            //We can only fit a certain amount in each websocket frame, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
            //Send the length header
            if (dataSegs.length > 1) {
                this.sendString_(String(dataSegs.length));
            }
            //Send the actual data in segments.
            for (var i = 0; i < dataSegs.length; i++) {
                this.sendString_(dataSegs[i]);
            }
        };
        WebSocketConnection.prototype.shutdown_ = function () {
            this.isClosed_ = true;
            if (this.keepaliveTimer) {
                clearInterval(this.keepaliveTimer);
                this.keepaliveTimer = null;
            }
            if (this.mySock) {
                this.mySock.close();
                this.mySock = null;
            }
        };
        WebSocketConnection.prototype.onClosed_ = function () {
            if (!this.isClosed_) {
                this.log_('WebSocket is closing itself');
                this.shutdown_();
                // since this is an internal close, trigger the close listener
                if (this.onDisconnect) {
                    this.onDisconnect(this.everConnected_);
                    this.onDisconnect = null;
                }
            }
        };
        /**
         * External-facing close handler.
         * Close the websocket and kill the connection.
         */
        WebSocketConnection.prototype.close = function () {
            if (!this.isClosed_) {
                this.log_('WebSocket is being closed');
                this.shutdown_();
            }
        };
        /**
         * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
         * the last activity.
         */
        WebSocketConnection.prototype.resetKeepAlive = function () {
            var _this = this;
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = setInterval(function () {
                //If there has been no websocket activity for a while, send a no-op
                if (_this.mySock) {
                    _this.sendString_('0');
                }
                _this.resetKeepAlive();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
        };
        /**
         * Send a string over the websocket.
         *
         * @param {string} str String to send.
         * @private
         */
        WebSocketConnection.prototype.sendString_ = function (str) {
            // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
            // calls for some unknown reason.  We treat these as an error and disconnect.
            // See https://app.asana.com/0/58926111402292/68021340250410
            try {
                this.mySock.send(str);
            }
            catch (e) {
                this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
                setTimeout(this.onClosed_.bind(this), 0);
            }
        };
        /**
         * Number of response before we consider the connection "healthy."
         * @type {number}
         */
        WebSocketConnection.responsesRequiredToBeHealthy = 2;
        /**
         * Time to wait for the connection te become healthy before giving up.
         * @type {number}
         */
        WebSocketConnection.healthyTimeout = 30000;
        return WebSocketConnection;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Currently simplistic, this class manages what transport a Connection should use at various stages of its
     * lifecycle.
     *
     * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
     * they are available.
     * @constructor
     */
    var TransportManager = /** @class */ (function () {
        /**
         * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
         */
        function TransportManager(repoInfo) {
            this.initTransports_(repoInfo);
        }
        Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
            /**
             * @const
             * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
             */
            get: function () {
                return [BrowserPollConnection, WebSocketConnection];
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @param {!RepoInfo} repoInfo
         * @private
         */
        TransportManager.prototype.initTransports_ = function (repoInfo) {
            var e_1, _a;
            var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
            var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
            if (repoInfo.webSocketOnly) {
                if (!isWebSocketsAvailable) {
                    warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
                }
                isSkipPollConnection = true;
            }
            if (isSkipPollConnection) {
                this.transports_ = [WebSocketConnection];
            }
            else {
                var transports = (this.transports_ = []);
                try {
                    for (var _b = __values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var transport = _c.value;
                        if (transport && transport['isAvailable']()) {
                            transports.push(transport);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        /**
         * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
         * initial transport to use
         */
        TransportManager.prototype.initialTransport = function () {
            if (this.transports_.length > 0) {
                return this.transports_[0];
            }
            else {
                throw new Error('No transports available');
            }
        };
        /**
         * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
         * transport, or null
         */
        TransportManager.prototype.upgradeTransport = function () {
            if (this.transports_.length > 1) {
                return this.transports_[1];
            }
            else {
                return null;
            }
        };
        return TransportManager;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Abort upgrade attempt if it takes longer than 60s.
    var UPGRADE_TIMEOUT = 60000;
    // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
    // If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
    var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
    // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
    // then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
    // but we've sent/received enough bytes, we don't cancel the connection.
    var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
    var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
    var MESSAGE_TYPE = 't';
    var MESSAGE_DATA = 'd';
    var CONTROL_SHUTDOWN = 's';
    var CONTROL_RESET = 'r';
    var CONTROL_ERROR = 'e';
    var CONTROL_PONG = 'o';
    var SWITCH_ACK = 'a';
    var END_TRANSMISSION = 'n';
    var PING = 'p';
    var SERVER_HELLO = 'h';
    /**
     * Creates a new real-time connection to the server using whichever method works
     * best in the current browser.
     *
     * @constructor
     */
    var Connection = /** @class */ (function () {
        /**
         * @param id - an id for this connection
         * @param repoInfo_ - the info for the endpoint to connect to
         * @param applicationId_ - the Firebase App ID for this project
         * @param onMessage_ - the callback to be triggered when a server-push message arrives
         * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
         * @param onDisconnect_ - the callback to be triggered when a connection was lost
         * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
         * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
         */
        function Connection(id, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
            this.id = id;
            this.repoInfo_ = repoInfo_;
            this.applicationId_ = applicationId_;
            this.onMessage_ = onMessage_;
            this.onReady_ = onReady_;
            this.onDisconnect_ = onDisconnect_;
            this.onKill_ = onKill_;
            this.lastSessionId = lastSessionId;
            this.connectionCount = 0;
            this.pendingDataMessages = [];
            this.state_ = 0 /* CONNECTING */;
            this.log_ = logWrapper('c:' + this.id + ':');
            this.transportManager_ = new TransportManager(repoInfo_);
            this.log_('Connection created');
            this.start_();
        }
        /**
         * Starts a connection attempt
         * @private
         */
        Connection.prototype.start_ = function () {
            var _this = this;
            var conn = this.transportManager_.initialTransport();
            this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, undefined, this.lastSessionId);
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
            var onMessageReceived = this.connReceiver_(this.conn_);
            var onConnectionLost = this.disconnReceiver_(this.conn_);
            this.tx_ = this.conn_;
            this.rx_ = this.conn_;
            this.secondaryConn_ = null;
            this.isHealthy_ = false;
            /*
             * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
             * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
             * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
             * still have the context of your originating frame.
             */
            setTimeout(function () {
                // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
                _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
            }, Math.floor(0));
            var healthyTimeoutMS = conn['healthyTimeout'] || 0;
            if (healthyTimeoutMS > 0) {
                this.healthyTimeout_ = setTimeoutNonBlocking(function () {
                    _this.healthyTimeout_ = null;
                    if (!_this.isHealthy_) {
                        if (_this.conn_ &&
                            _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has received ' +
                                _this.conn_.bytesReceived +
                                ' bytes.  Marking connection healthy.');
                            _this.isHealthy_ = true;
                            _this.conn_.markConnectionHealthy();
                        }
                        else if (_this.conn_ &&
                            _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has sent ' +
                                _this.conn_.bytesSent +
                                ' bytes.  Leaving connection alive.');
                            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                            // the server.
                        }
                        else {
                            _this.log_('Closing unhealthy connection after timeout.');
                            _this.close();
                        }
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                }, Math.floor(healthyTimeoutMS));
            }
        };
        /**
         * @return {!string}
         * @private
         */
        Connection.prototype.nextTransportId_ = function () {
            return 'c:' + this.id + ':' + this.connectionCount++;
        };
        Connection.prototype.disconnReceiver_ = function (conn) {
            var _this = this;
            return function (everConnected) {
                if (conn === _this.conn_) {
                    _this.onConnectionLost_(everConnected);
                }
                else if (conn === _this.secondaryConn_) {
                    _this.log_('Secondary connection lost.');
                    _this.onSecondaryConnectionLost_();
                }
                else {
                    _this.log_('closing an old connection');
                }
            };
        };
        Connection.prototype.connReceiver_ = function (conn) {
            var _this = this;
            return function (message) {
                if (_this.state_ !== 2 /* DISCONNECTED */) {
                    if (conn === _this.rx_) {
                        _this.onPrimaryMessageReceived_(message);
                    }
                    else if (conn === _this.secondaryConn_) {
                        _this.onSecondaryMessageReceived_(message);
                    }
                    else {
                        _this.log_('message on old connection');
                    }
                }
            };
        };
        /**
         *
         * @param {Object} dataMsg An arbitrary data message to be sent to the server
         */
        Connection.prototype.sendRequest = function (dataMsg) {
            // wrap in a data message envelope and send it on
            var msg = { t: 'd', d: dataMsg };
            this.sendData_(msg);
        };
        Connection.prototype.tryCleanupConnection = function () {
            if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
                this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
                this.conn_ = this.secondaryConn_;
                this.secondaryConn_ = null;
                // the server will shutdown the old connection
            }
        };
        Connection.prototype.onSecondaryControl_ = function (controlData) {
            if (MESSAGE_TYPE in controlData) {
                var cmd = controlData[MESSAGE_TYPE];
                if (cmd === SWITCH_ACK) {
                    this.upgradeIfSecondaryHealthy_();
                }
                else if (cmd === CONTROL_RESET) {
                    // Most likely the session wasn't valid. Abandon the switch attempt
                    this.log_('Got a reset on secondary, closing it');
                    this.secondaryConn_.close();
                    // If we were already using this connection for something, than we need to fully close
                    if (this.tx_ === this.secondaryConn_ ||
                        this.rx_ === this.secondaryConn_) {
                        this.close();
                    }
                }
                else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on secondary.');
                    this.secondaryResponsesRequired_--;
                    this.upgradeIfSecondaryHealthy_();
                }
            }
        };
        Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
            var layer = requireKey('t', parsedData);
            var data = requireKey('d', parsedData);
            if (layer === 'c') {
                this.onSecondaryControl_(data);
            }
            else if (layer === 'd') {
                // got a data message, but we're still second connection. Need to buffer it up
                this.pendingDataMessages.push(data);
            }
            else {
                throw new Error('Unknown protocol layer: ' + layer);
            }
        };
        Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
            if (this.secondaryResponsesRequired_ <= 0) {
                this.log_('Secondary connection is healthy.');
                this.isHealthy_ = true;
                this.secondaryConn_.markConnectionHealthy();
                this.proceedWithUpgrade_();
            }
            else {
                // Send a ping to make sure the connection is healthy.
                this.log_('sending ping on secondary.');
                this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
            }
        };
        Connection.prototype.proceedWithUpgrade_ = function () {
            // tell this connection to consider itself open
            this.secondaryConn_.start();
            // send ack
            this.log_('sending client ack on secondary');
            this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
            // send end packet on primary transport, switch to sending on this one
            // can receive on this one, buffer responses until end received on primary transport
            this.log_('Ending transmission on primary');
            this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
            this.tx_ = this.secondaryConn_;
            this.tryCleanupConnection();
        };
        Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
            // Must refer to parsedData properties in quotes, so closure doesn't touch them.
            var layer = requireKey('t', parsedData);
            var data = requireKey('d', parsedData);
            if (layer === 'c') {
                this.onControl_(data);
            }
            else if (layer === 'd') {
                this.onDataMessage_(data);
            }
        };
        Connection.prototype.onDataMessage_ = function (message) {
            this.onPrimaryResponse_();
            // We don't do anything with data messages, just kick them up a level
            this.onMessage_(message);
        };
        Connection.prototype.onPrimaryResponse_ = function () {
            if (!this.isHealthy_) {
                this.primaryResponsesRequired_--;
                if (this.primaryResponsesRequired_ <= 0) {
                    this.log_('Primary connection is healthy.');
                    this.isHealthy_ = true;
                    this.conn_.markConnectionHealthy();
                }
            }
        };
        Connection.prototype.onControl_ = function (controlData) {
            var cmd = requireKey(MESSAGE_TYPE, controlData);
            if (MESSAGE_DATA in controlData) {
                var payload = controlData[MESSAGE_DATA];
                if (cmd === SERVER_HELLO) {
                    this.onHandshake_(payload);
                }
                else if (cmd === END_TRANSMISSION) {
                    this.log_('recvd end transmission on primary');
                    this.rx_ = this.secondaryConn_;
                    for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                        this.onDataMessage_(this.pendingDataMessages[i]);
                    }
                    this.pendingDataMessages = [];
                    this.tryCleanupConnection();
                }
                else if (cmd === CONTROL_SHUTDOWN) {
                    // This was previously the 'onKill' callback passed to the lower-level connection
                    // payload in this case is the reason for the shutdown. Generally a human-readable error
                    this.onConnectionShutdown_(payload);
                }
                else if (cmd === CONTROL_RESET) {
                    // payload in this case is the host we should contact
                    this.onReset_(payload);
                }
                else if (cmd === CONTROL_ERROR) {
                    error('Server Error: ' + payload);
                }
                else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on primary.');
                    this.onPrimaryResponse_();
                    this.sendPingOnPrimaryIfNecessary_();
                }
                else {
                    error('Unknown control packet command: ' + cmd);
                }
            }
        };
        /**
         *
         * @param {Object} handshake The handshake data returned from the server
         * @private
         */
        Connection.prototype.onHandshake_ = function (handshake) {
            var timestamp = handshake.ts;
            var version = handshake.v;
            var host = handshake.h;
            this.sessionId = handshake.s;
            this.repoInfo_.updateHost(host);
            // if we've already closed the connection, then don't bother trying to progress further
            if (this.state_ === 0 /* CONNECTING */) {
                this.conn_.start();
                this.onConnectionEstablished_(this.conn_, timestamp);
                if (PROTOCOL_VERSION !== version) {
                    warn('Protocol version mismatch detected');
                }
                // TODO: do we want to upgrade? when? maybe a delay?
                this.tryStartUpgrade_();
            }
        };
        Connection.prototype.tryStartUpgrade_ = function () {
            var conn = this.transportManager_.upgradeTransport();
            if (conn) {
                this.startUpgrade_(conn);
            }
        };
        Connection.prototype.startUpgrade_ = function (conn) {
            var _this = this;
            this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId);
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.secondaryResponsesRequired_ =
                conn['responsesRequiredToBeHealthy'] || 0;
            var onMessage = this.connReceiver_(this.secondaryConn_);
            var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
            this.secondaryConn_.open(onMessage, onDisconnect);
            // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
            setTimeoutNonBlocking(function () {
                if (_this.secondaryConn_) {
                    _this.log_('Timed out trying to upgrade.');
                    _this.secondaryConn_.close();
                }
            }, Math.floor(UPGRADE_TIMEOUT));
        };
        Connection.prototype.onReset_ = function (host) {
            this.log_('Reset packet received.  New host: ' + host);
            this.repoInfo_.updateHost(host);
            // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
            // We don't currently support resets after the connection has already been established
            if (this.state_ === 1 /* CONNECTED */) {
                this.close();
            }
            else {
                // Close whatever connections we have open and start again.
                this.closeConnections_();
                this.start_();
            }
        };
        Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
            var _this = this;
            this.log_('Realtime connection established.');
            this.conn_ = conn;
            this.state_ = 1 /* CONNECTED */;
            if (this.onReady_) {
                this.onReady_(timestamp, this.sessionId);
                this.onReady_ = null;
            }
            // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
            // send some pings.
            if (this.primaryResponsesRequired_ === 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
            }
            else {
                setTimeoutNonBlocking(function () {
                    _this.sendPingOnPrimaryIfNecessary_();
                }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
            }
        };
        Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
            // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
            if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
                this.log_('sending ping on primary.');
                this.sendData_({ t: 'c', d: { t: PING, d: {} } });
            }
        };
        Connection.prototype.onSecondaryConnectionLost_ = function () {
            var conn = this.secondaryConn_;
            this.secondaryConn_ = null;
            if (this.tx_ === conn || this.rx_ === conn) {
                // we are relying on this connection already in some capacity. Therefore, a failure is real
                this.close();
            }
        };
        /**
         *
         * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
         * we should flush the host cache
         * @private
         */
        Connection.prototype.onConnectionLost_ = function (everConnected) {
            this.conn_ = null;
            // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
            // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
            if (!everConnected && this.state_ === 0 /* CONNECTING */) {
                this.log_('Realtime connection failed.');
                // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
                if (this.repoInfo_.isCacheableHost()) {
                    PersistentStorage.remove('host:' + this.repoInfo_.host);
                    // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                    this.repoInfo_.internalHost = this.repoInfo_.host;
                }
            }
            else if (this.state_ === 1 /* CONNECTED */) {
                this.log_('Realtime connection lost.');
            }
            this.close();
        };
        /**
         *
         * @param {string} reason
         * @private
         */
        Connection.prototype.onConnectionShutdown_ = function (reason) {
            this.log_('Connection shutdown command received. Shutting down...');
            if (this.onKill_) {
                this.onKill_(reason);
                this.onKill_ = null;
            }
            // We intentionally don't want to fire onDisconnect (kill is a different case),
            // so clear the callback.
            this.onDisconnect_ = null;
            this.close();
        };
        Connection.prototype.sendData_ = function (data) {
            if (this.state_ !== 1 /* CONNECTED */) {
                throw 'Connection is not connected';
            }
            else {
                this.tx_.send(data);
            }
        };
        /**
         * Cleans up this connection, calling the appropriate callbacks
         */
        Connection.prototype.close = function () {
            if (this.state_ !== 2 /* DISCONNECTED */) {
                this.log_('Closing realtime connection.');
                this.state_ = 2 /* DISCONNECTED */;
                this.closeConnections_();
                if (this.onDisconnect_) {
                    this.onDisconnect_();
                    this.onDisconnect_ = null;
                }
            }
        };
        /**
         *
         * @private
         */
        Connection.prototype.closeConnections_ = function () {
            this.log_('Shutting down all connections');
            if (this.conn_) {
                this.conn_.close();
                this.conn_ = null;
            }
            if (this.secondaryConn_) {
                this.secondaryConn_.close();
                this.secondaryConn_ = null;
            }
            if (this.healthyTimeout_) {
                clearTimeout(this.healthyTimeout_);
                this.healthyTimeout_ = null;
            }
        };
        return Connection;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface defining the set of actions that can be performed against the Firebase server
     * (basically corresponds to our wire protocol).
     *
     * @interface
     */
    var ServerActions = /** @class */ (function () {
        function ServerActions() {
        }
        /**
         * @param {string} pathString
         * @param {*} data
         * @param {function(string, string)=} onComplete
         * @param {string=} hash
         */
        ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
        /**
         * @param {string} pathString
         * @param {*} data
         * @param {function(string, ?string)} onComplete
         * @param {string=} hash
         */
        ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
        /**
         * Refreshes the auth token for the current connection.
         * @param {string} token The authentication token
         */
        ServerActions.prototype.refreshAuthToken = function (token) { };
        /**
         * @param {string} pathString
         * @param {*} data
         * @param {function(string, string)=} onComplete
         */
        ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
        /**
         * @param {string} pathString
         * @param {*} data
         * @param {function(string, string)=} onComplete
         */
        ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
        /**
         * @param {string} pathString
         * @param {function(string, string)=} onComplete
         */
        ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
        /**
         * @param {Object.<string, *>} stats
         */
        ServerActions.prototype.reportStats = function (stats) { };
        return ServerActions;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RECONNECT_MIN_DELAY = 1000;
    var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
    var GET_CONNECT_TIMEOUT = 3 * 1000;
    var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
    var RECONNECT_DELAY_MULTIPLIER = 1.3;
    var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
    var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
    // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
    var INVALID_AUTH_TOKEN_THRESHOLD = 3;
    /**
     * Firebase connection.  Abstracts wire protocol and handles reconnecting.
     *
     * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
     * in quotes to make sure the closure compiler does not minify them.
     */
    var PersistentConnection = /** @class */ (function (_super) {
        __extends$1d(PersistentConnection, _super);
        /**
         * @implements {ServerActions}
         * @param repoInfo_ Data about the namespace we are connecting to
         * @param applicationId_ The Firebase App ID for this project
         * @param onDataUpdate_ A callback for new data from the server
         */
        function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
            var _this = _super.call(this) || this;
            _this.repoInfo_ = repoInfo_;
            _this.applicationId_ = applicationId_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.onConnectStatus_ = onConnectStatus_;
            _this.onServerInfoUpdate_ = onServerInfoUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            _this.authOverride_ = authOverride_;
            // Used for diagnostic logging.
            _this.id = PersistentConnection.nextPersistentConnectionId_++;
            _this.log_ = logWrapper('p:' + _this.id + ':');
            _this.interruptReasons_ = {};
            /** Map<path, Map<queryId, ListenSpec>> */
            _this.listens = new Map();
            _this.outstandingPuts_ = [];
            _this.outstandingGets_ = [];
            _this.outstandingPutCount_ = 0;
            _this.outstandingGetCount_ = 0;
            _this.onDisconnectRequestQueue_ = [];
            _this.connected_ = false;
            _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
            _this.securityDebugCallback_ = null;
            _this.lastSessionId = null;
            _this.establishConnectionTimer_ = null;
            _this.visible_ = false;
            // Before we get connected, we keep a queue of pending messages to send.
            _this.requestCBHash_ = {};
            _this.requestNumber_ = 0;
            _this.realtime_ = null;
            _this.authToken_ = null;
            _this.forceTokenRefresh_ = false;
            _this.invalidAuthTokenCount_ = 0;
            _this.firstConnection_ = true;
            _this.lastConnectionAttemptTime_ = null;
            _this.lastConnectionEstablishedTime_ = null;
            if (authOverride_ && !isNodeSdk()) {
                throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
            }
            _this.scheduleConnect_(0);
            VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
            if (repoInfo_.host.indexOf('fblocal') === -1) {
                OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
            }
            return _this;
        }
        PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
            var curReqNum = ++this.requestNumber_;
            var msg = { r: curReqNum, a: action, b: body };
            this.log_(stringify$1(msg));
            assert$1(this.connected_, "sendRequest call when we're not connected not allowed.");
            this.realtime_.sendRequest(msg);
            if (onResponse) {
                this.requestCBHash_[curReqNum] = onResponse;
            }
        };
        PersistentConnection.prototype.get = function (query) {
            var _this = this;
            var deferred = new Deferred();
            var request = {
                p: query.path.toString(),
                q: query.queryObject()
            };
            var outstandingGet = {
                action: 'g',
                request: request,
                onComplete: function (message) {
                    var payload = message['d'];
                    if (message['s'] === 'ok') {
                        _this.onDataUpdate_(request['p'], payload, 
                        /*isMerge*/ false, 
                        /*tag*/ null);
                        deferred.resolve(payload);
                    }
                    else {
                        deferred.reject(payload);
                    }
                }
            };
            this.outstandingGets_.push(outstandingGet);
            this.outstandingGetCount_++;
            var index = this.outstandingGets_.length - 1;
            if (!this.connected_) {
                setTimeout(function () {
                    var get = _this.outstandingGets_[index];
                    if (get === undefined || outstandingGet !== get) {
                        return;
                    }
                    delete _this.outstandingGets_[index];
                    _this.outstandingGetCount_--;
                    if (_this.outstandingGetCount_ === 0) {
                        _this.outstandingGets_ = [];
                    }
                    _this.log_('get ' + index + ' timed out on connection');
                    deferred.reject(new Error('Client is offline.'));
                }, GET_CONNECT_TIMEOUT);
            }
            if (this.connected_) {
                this.sendGet_(index);
            }
            return deferred.promise;
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var queryId = query.queryIdentifier();
            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + queryId);
            if (!this.listens.has(pathString)) {
                this.listens.set(pathString, new Map());
            }
            assert$1(query.getQueryParams().isDefault() ||
                !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
            assert$1(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
            var listenSpec = {
                onComplete: onComplete,
                hashFn: currentHashFn,
                query: query,
                tag: tag
            };
            this.listens.get(pathString).set(queryId, listenSpec);
            if (this.connected_) {
                this.sendListen_(listenSpec);
            }
        };
        PersistentConnection.prototype.sendGet_ = function (index) {
            var _this = this;
            var get = this.outstandingGets_[index];
            this.sendRequest('g', get.request, function (message) {
                delete _this.outstandingGets_[index];
                _this.outstandingGetCount_--;
                if (_this.outstandingGetCount_ === 0) {
                    _this.outstandingGets_ = [];
                }
                if (get.onComplete) {
                    get.onComplete(message);
                }
            });
        };
        PersistentConnection.prototype.sendListen_ = function (listenSpec) {
            var _this = this;
            var query = listenSpec.query;
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Listen on ' + pathString + ' for ' + queryId);
            var req = { /*path*/ p: pathString };
            var action = 'q';
            // Only bother to send query if it's non-default.
            if (listenSpec.tag) {
                req['q'] = query.queryObject();
                req['t'] = listenSpec.tag;
            }
            req[ /*hash*/'h'] = listenSpec.hashFn();
            this.sendRequest(action, req, function (message) {
                var payload = message[ /*data*/'d'];
                var status = message[ /*status*/'s'];
                // print warnings in any case...
                PersistentConnection.warnOnListenWarnings_(payload, query);
                var currentListenSpec = _this.listens.get(pathString) &&
                    _this.listens.get(pathString).get(queryId);
                // only trigger actions if the listen hasn't been removed and readded
                if (currentListenSpec === listenSpec) {
                    _this.log_('listen response', message);
                    if (status !== 'ok') {
                        _this.removeListen_(pathString, queryId);
                    }
                    if (listenSpec.onComplete) {
                        listenSpec.onComplete(status, payload);
                    }
                }
            });
        };
        PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
            if (payload && typeof payload === 'object' && contains(payload, 'w')) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var warnings = safeGet(payload, 'w');
                if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                    var indexSpec = '".indexOn": "' + query.getQueryParams().getIndex().toString() + '"';
                    var indexPath = query.path.toString();
                    warn("Using an unspecified index. Your data will be downloaded and " +
                        ("filtered on the client. Consider adding " + indexSpec + " at ") +
                        (indexPath + " to your security rules for better performance."));
                }
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.refreshAuthToken = function (token) {
            this.authToken_ = token;
            this.log_('Auth token refreshed');
            if (this.authToken_) {
                this.tryAuth();
            }
            else {
                //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
                //the credential so we dont become authenticated next time we connect.
                if (this.connected_) {
                    this.sendRequest('unauth', {}, function () { });
                }
            }
            this.reduceReconnectDelayIfAdminCredential_(token);
        };
        PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
            // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
            // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
            var isFirebaseSecret = credential && credential.length === 40;
            if (isFirebaseSecret || isAdmin(credential)) {
                this.log_('Admin auth credential detected.  Reducing max reconnect time.');
                this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            }
        };
        /**
         * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
         * a auth revoked (the connection is closed).
         */
        PersistentConnection.prototype.tryAuth = function () {
            var _this = this;
            if (this.connected_ && this.authToken_) {
                var token_1 = this.authToken_;
                var authMethod = isValidFormat(token_1) ? 'auth' : 'gauth';
                var requestData = { cred: token_1 };
                if (this.authOverride_ === null) {
                    requestData['noauth'] = true;
                }
                else if (typeof this.authOverride_ === 'object') {
                    requestData['authvar'] = this.authOverride_;
                }
                this.sendRequest(authMethod, requestData, function (res) {
                    var status = res[ /*status*/'s'];
                    var data = res[ /*data*/'d'] || 'error';
                    if (_this.authToken_ === token_1) {
                        if (status === 'ok') {
                            _this.invalidAuthTokenCount_ = 0;
                        }
                        else {
                            // Triggers reconnect and force refresh for auth token
                            _this.onAuthRevoked_(status, data);
                        }
                    }
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.unlisten = function (query, tag) {
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Unlisten called for ' + pathString + ' ' + queryId);
            assert$1(query.getQueryParams().isDefault() ||
                !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
            var listen = this.removeListen_(pathString, queryId);
            if (listen && this.connected_) {
                this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
            }
        };
        PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
            this.log_('Unlisten on ' + pathString + ' for ' + queryId);
            var req = { /*path*/ p: pathString };
            var action = 'n';
            // Only bother sending queryId if it's non-default.
            if (tag) {
                req['q'] = queryObj;
                req['t'] = tag;
            }
            this.sendRequest(action, req);
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('o', pathString, data, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'o',
                    data: data,
                    onComplete: onComplete
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('om', pathString, data, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'om',
                    data: data,
                    onComplete: onComplete
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('oc', pathString, null, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'oc',
                    data: null,
                    onComplete: onComplete
                });
            }
        };
        PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
            var request = { /*path*/ p: pathString, /*data*/ d: data };
            this.log_('onDisconnect ' + action, request);
            this.sendRequest(action, request, function (response) {
                if (onComplete) {
                    setTimeout(function () {
                        onComplete(response[ /*status*/'s'], response[ /* data */'d']);
                    }, Math.floor(0));
                }
            });
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
            this.putInternal('p', pathString, data, onComplete, hash);
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
            this.putInternal('m', pathString, data, onComplete, hash);
        };
        PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
            var request = {
                /*path*/ p: pathString,
                /*data*/ d: data
            };
            if (hash !== undefined) {
                request[ /*hash*/'h'] = hash;
            }
            // TODO: Only keep track of the most recent put for a given path?
            this.outstandingPuts_.push({
                action: action,
                request: request,
                onComplete: onComplete
            });
            this.outstandingPutCount_++;
            var index = this.outstandingPuts_.length - 1;
            if (this.connected_) {
                this.sendPut_(index);
            }
            else {
                this.log_('Buffering put: ' + pathString);
            }
        };
        PersistentConnection.prototype.sendPut_ = function (index) {
            var _this = this;
            var action = this.outstandingPuts_[index].action;
            var request = this.outstandingPuts_[index].request;
            var onComplete = this.outstandingPuts_[index].onComplete;
            this.outstandingPuts_[index].queued = this.connected_;
            this.sendRequest(action, request, function (message) {
                _this.log_(action + ' response', message);
                delete _this.outstandingPuts_[index];
                _this.outstandingPutCount_--;
                // Clean up array occasionally.
                if (_this.outstandingPutCount_ === 0) {
                    _this.outstandingPuts_ = [];
                }
                if (onComplete) {
                    onComplete(message[ /*status*/'s'], message[ /* data */'d']);
                }
            });
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.reportStats = function (stats) {
            var _this = this;
            // If we're not connected, we just drop the stats.
            if (this.connected_) {
                var request = { /*counters*/ c: stats };
                this.log_('reportStats', request);
                this.sendRequest(/*stats*/ 's', request, function (result) {
                    var status = result[ /*status*/'s'];
                    if (status !== 'ok') {
                        var errorReason = result[ /* data */'d'];
                        _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                    }
                });
            }
        };
        PersistentConnection.prototype.onDataMessage_ = function (message) {
            if ('r' in message) {
                // this is a response
                this.log_('from server: ' + stringify$1(message));
                var reqNum = message['r'];
                var onResponse = this.requestCBHash_[reqNum];
                if (onResponse) {
                    delete this.requestCBHash_[reqNum];
                    onResponse(message[ /*body*/'b']);
                }
            }
            else if ('error' in message) {
                throw 'A server-side error has occurred: ' + message['error'];
            }
            else if ('a' in message) {
                // a and b are action and body, respectively
                this.onDataPush_(message['a'], message['b']);
            }
        };
        PersistentConnection.prototype.onDataPush_ = function (action, body) {
            this.log_('handleServerMessage', action, body);
            if (action === 'd') {
                this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
                /*isMerge*/ false, body['t']);
            }
            else if (action === 'm') {
                this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
                /*isMerge=*/ true, body['t']);
            }
            else if (action === 'c') {
                this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
            }
            else if (action === 'ac') {
                this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
            }
            else if (action === 'sd') {
                this.onSecurityDebugPacket_(body);
            }
            else {
                error('Unrecognized action received from server: ' +
                    stringify$1(action) +
                    '\nAre you using the latest client?');
            }
        };
        PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
            this.log_('connection ready');
            this.connected_ = true;
            this.lastConnectionEstablishedTime_ = new Date().getTime();
            this.handleTimestamp_(timestamp);
            this.lastSessionId = sessionId;
            if (this.firstConnection_) {
                this.sendConnectStats_();
            }
            this.restoreState_();
            this.firstConnection_ = false;
            this.onConnectStatus_(true);
        };
        PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
            var _this = this;
            assert$1(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
            }
            // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
            // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
            this.establishConnectionTimer_ = setTimeout(function () {
                _this.establishConnectionTimer_ = null;
                _this.establishConnection_();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(timeout));
        };
        PersistentConnection.prototype.onVisible_ = function (visible) {
            // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
            if (visible &&
                !this.visible_ &&
                this.reconnectDelay_ === this.maxReconnectDelay_) {
                this.log_('Window became visible.  Reducing delay.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
            this.visible_ = visible;
        };
        PersistentConnection.prototype.onOnline_ = function (online) {
            if (online) {
                this.log_('Browser went online.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
            else {
                this.log_('Browser went offline.  Killing connection.');
                if (this.realtime_) {
                    this.realtime_.close();
                }
            }
        };
        PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
            this.log_('data client disconnected');
            this.connected_ = false;
            this.realtime_ = null;
            // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
            this.cancelSentTransactions_();
            // Clear out the pending requests.
            this.requestCBHash_ = {};
            if (this.shouldReconnect_()) {
                if (!this.visible_) {
                    this.log_("Window isn't visible.  Delaying reconnect.");
                    this.reconnectDelay_ = this.maxReconnectDelay_;
                    this.lastConnectionAttemptTime_ = new Date().getTime();
                }
                else if (this.lastConnectionEstablishedTime_) {
                    // If we've been connected long enough, reset reconnect delay to minimum.
                    var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                    if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
                        this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                    }
                    this.lastConnectionEstablishedTime_ = null;
                }
                var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
                var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
                reconnectDelay = Math.random() * reconnectDelay;
                this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
                this.scheduleConnect_(reconnectDelay);
                // Adjust reconnect delay for next time.
                this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
            }
            this.onConnectStatus_(false);
        };
        PersistentConnection.prototype.establishConnection_ = function () {
            var _this = this;
            if (this.shouldReconnect_()) {
                this.log_('Making a connection attempt');
                this.lastConnectionAttemptTime_ = new Date().getTime();
                this.lastConnectionEstablishedTime_ = null;
                var onDataMessage_1 = this.onDataMessage_.bind(this);
                var onReady_1 = this.onReady_.bind(this);
                var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
                var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
                var self_1 = this;
                var lastSessionId_1 = this.lastSessionId;
                var canceled_1 = false;
                var connection_1 = null;
                var closeFn_1 = function () {
                    if (connection_1) {
                        connection_1.close();
                    }
                    else {
                        canceled_1 = true;
                        onDisconnect_1();
                    }
                };
                var sendRequestFn = function (msg) {
                    assert$1(connection_1, "sendRequest call when we're not connected not allowed.");
                    connection_1.sendRequest(msg);
                };
                this.realtime_ = {
                    close: closeFn_1,
                    sendRequest: sendRequestFn
                };
                var forceRefresh = this.forceTokenRefresh_;
                this.forceTokenRefresh_ = false;
                // First fetch auth token, and establish connection after fetching the token was successful
                this.authTokenProvider_
                    .getToken(forceRefresh)
                    .then(function (result) {
                    if (!canceled_1) {
                        log('getToken() completed. Creating connection.');
                        self_1.authToken_ = result && result.accessToken;
                        connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1, 
                        /* onKill= */ function (reason) {
                            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
                            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
                        }, lastSessionId_1);
                    }
                    else {
                        log('getToken() completed but was canceled');
                    }
                })
                    .then(null, function (error) {
                    self_1.log_('Failed to get token: ' + error);
                    if (!canceled_1) {
                        if (_this.repoInfo_.nodeAdmin) {
                            // This may be a critical error for the Admin Node.js SDK, so log a warning.
                            // But getToken() may also just have temporarily failed, so we still want to
                            // continue retrying.
                            warn(error);
                        }
                        closeFn_1();
                    }
                });
            }
        };
        PersistentConnection.prototype.interrupt = function (reason) {
            log('Interrupting connection for reason: ' + reason);
            this.interruptReasons_[reason] = true;
            if (this.realtime_) {
                this.realtime_.close();
            }
            else {
                if (this.establishConnectionTimer_) {
                    clearTimeout(this.establishConnectionTimer_);
                    this.establishConnectionTimer_ = null;
                }
                if (this.connected_) {
                    this.onRealtimeDisconnect_();
                }
            }
        };
        PersistentConnection.prototype.resume = function (reason) {
            log('Resuming connection for reason: ' + reason);
            delete this.interruptReasons_[reason];
            if (isEmpty$2(this.interruptReasons_)) {
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
        };
        PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
            var delta = timestamp - new Date().getTime();
            this.onServerInfoUpdate_({ serverTimeOffset: delta });
        };
        PersistentConnection.prototype.cancelSentTransactions_ = function () {
            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                var put = this.outstandingPuts_[i];
                if (put && /*hash*/ 'h' in put.request && put.queued) {
                    if (put.onComplete) {
                        put.onComplete('disconnect');
                    }
                    delete this.outstandingPuts_[i];
                    this.outstandingPutCount_--;
                }
            }
            // Clean up array occasionally.
            if (this.outstandingPutCount_ === 0) {
                this.outstandingPuts_ = [];
            }
        };
        PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
            // Remove the listen and manufacture a "permission_denied" error for the failed listen.
            var queryId;
            if (!query) {
                queryId = 'default';
            }
            else {
                queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');
            }
            var listen = this.removeListen_(pathString, queryId);
            if (listen && listen.onComplete) {
                listen.onComplete('permission_denied');
            }
        };
        PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
            var normalizedPathString = new Path(pathString).toString(); // normalize path.
            var listen;
            if (this.listens.has(normalizedPathString)) {
                var map = this.listens.get(normalizedPathString);
                listen = map.get(queryId);
                map.delete(queryId);
                if (map.size === 0) {
                    this.listens.delete(normalizedPathString);
                }
            }
            else {
                // all listens for this path has already been removed
                listen = undefined;
            }
            return listen;
        };
        PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
            log('Auth token revoked: ' + statusCode + '/' + explanation);
            this.authToken_ = null;
            this.forceTokenRefresh_ = true;
            this.realtime_.close();
            if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
                // We'll wait a couple times before logging the warning / increasing the
                // retry period since oauth tokens will report as "invalid" if they're
                // just expired. Plus there may be transient issues that resolve themselves.
                this.invalidAuthTokenCount_++;
                if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
                    // Set a long reconnect delay because recovery is unlikely
                    this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                    // Notify the auth token provider that the token is invalid, which will log
                    // a warning
                    this.authTokenProvider_.notifyForInvalidToken();
                }
            }
        };
        PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
            if (this.securityDebugCallback_) {
                this.securityDebugCallback_(body);
            }
            else {
                if ('msg' in body) {
                    console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
                }
            }
        };
        PersistentConnection.prototype.restoreState_ = function () {
            var e_1, _a, e_2, _b;
            //Re-authenticate ourselves if we have a credential stored.
            this.tryAuth();
            try {
                // Puts depend on having received the corresponding data update from the server before they complete, so we must
                // make sure to send listens before puts.
                for (var _c = __values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var queries = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, __values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var listenSpec = _f.value;
                            this.sendListen_(listenSpec);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                if (this.outstandingPuts_[i]) {
                    this.sendPut_(i);
                }
            }
            while (this.onDisconnectRequestQueue_.length) {
                var request = this.onDisconnectRequestQueue_.shift();
                this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
            }
            for (var i = 0; i < this.outstandingGets_.length; i++) {
                if (this.outstandingGets_[i]) {
                    this.sendGet_(i);
                }
            }
        };
        /**
         * Sends client stats for first connection
         */
        PersistentConnection.prototype.sendConnectStats_ = function () {
            var stats = {};
            var clientName = 'js';
            stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
            if (isMobileCordova()) {
                stats['framework.cordova'] = 1;
            }
            else if (isReactNative()) {
                stats['framework.reactnative'] = 1;
            }
            this.reportStats(stats);
        };
        PersistentConnection.prototype.shouldReconnect_ = function () {
            var online = OnlineMonitor.getInstance().currentlyOnline();
            return isEmpty$2(this.interruptReasons_) && online;
        };
        PersistentConnection.nextPersistentConnectionId_ = 0;
        /**
         * Counter for number of connections created. Mainly used for tagging in the logs
         */
        PersistentConnection.nextConnectionId_ = 0;
        return PersistentConnection;
    }(ServerActions));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An implementation of ServerActions that communicates with the server via REST requests.
     * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
     * persistent connection (using WebSockets or long-polling)
     */
    var ReadonlyRestClient = /** @class */ (function (_super) {
        __extends$1d(ReadonlyRestClient, _super);
        /**
         * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
         * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
         * @param {AuthTokenProvider} authTokenProvider_
         * @implements {ServerActions}
         */
        function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
            var _this = _super.call(this) || this;
            _this.repoInfo_ = repoInfo_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            /** @private {function(...[*])} */
            _this.log_ = logWrapper('p:rest:');
            /**
             * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
             * that's been removed. :-/
             *
             * @private {!Object.<string, !Object>}
             */
            _this.listens_ = {};
            return _this;
        }
        ReadonlyRestClient.prototype.reportStats = function (stats) {
            throw new Error('Method not implemented.');
        };
        /**
         * @param {!Query} query
         * @param {?number=} tag
         * @return {string}
         * @private
         */
        ReadonlyRestClient.getListenId_ = function (query, tag) {
            if (tag !== undefined) {
                return 'tag$' + tag;
            }
            else {
                assert$1(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
                return query.path.toString();
            }
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var _this = this;
            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
            // Mark this listener so we can tell if it's removed.
            var listenId = ReadonlyRestClient.getListenId_(query, tag);
            var thisListen = {};
            this.listens_[listenId] = thisListen;
            var queryStringParameters = query
                .getQueryParams()
                .toRestQueryStringParameters();
            this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
                var data = result;
                if (error === 404) {
                    data = null;
                    error = null;
                }
                if (error === null) {
                    _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
                }
                if (safeGet(_this.listens_, listenId) === thisListen) {
                    var status_1;
                    if (!error) {
                        status_1 = 'ok';
                    }
                    else if (error === 401) {
                        status_1 = 'permission_denied';
                    }
                    else {
                        status_1 = 'rest_error:' + error;
                    }
                    onComplete(status_1, null);
                }
            });
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.unlisten = function (query, tag) {
            var listenId = ReadonlyRestClient.getListenId_(query, tag);
            delete this.listens_[listenId];
        };
        ReadonlyRestClient.prototype.get = function (query) {
            var _this = this;
            var queryStringParameters = query
                .getQueryParams()
                .toRestQueryStringParameters();
            var pathString = query.path.toString();
            var deferred = new Deferred();
            this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
                var data = result;
                if (error === 404) {
                    data = null;
                    error = null;
                }
                if (error === null) {
                    _this.onDataUpdate_(pathString, data, 
                    /*isMerge=*/ false, 
                    /*tag=*/ null);
                    deferred.resolve(data);
                }
                else {
                    deferred.reject(new Error(data));
                }
            });
            return deferred.promise;
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
            // no-op since we just always call getToken.
        };
        /**
         * Performs a REST request to the given path, with the provided query string parameters,
         * and any auth credentials we have.
         *
         * @param {!string} pathString
         * @param {!Object.<string, *>} queryStringParameters
         * @param {?function(?number, *=)} callback
         * @private
         */
        ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
            var _this = this;
            if (queryStringParameters === void 0) { queryStringParameters = {}; }
            queryStringParameters['format'] = 'export';
            this.authTokenProvider_
                .getToken(/*forceRefresh=*/ false)
                .then(function (authTokenData) {
                var authToken = authTokenData && authTokenData.accessToken;
                if (authToken) {
                    queryStringParameters['auth'] = authToken;
                }
                var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
                    _this.repoInfo_.host +
                    pathString +
                    '?' +
                    'ns=' +
                    _this.repoInfo_.namespace +
                    querystring(queryStringParameters);
                _this.log_('Sending REST request for ' + url);
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (callback && xhr.readyState === 4) {
                        _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                        var res = null;
                        if (xhr.status >= 200 && xhr.status < 300) {
                            try {
                                res = jsonEval(xhr.responseText);
                            }
                            catch (e) {
                                warn('Failed to parse JSON response for ' +
                                    url +
                                    ': ' +
                                    xhr.responseText);
                            }
                            callback(null, res);
                        }
                        else {
                            // 401 and 404 are expected.
                            if (xhr.status !== 401 && xhr.status !== 404) {
                                warn('Got unsuccessful REST response for ' +
                                    url +
                                    ' Status: ' +
                                    xhr.status);
                            }
                            callback(xhr.status);
                        }
                        callback = null;
                    }
                };
                xhr.open('GET', url, /*asynchronous=*/ true);
                xhr.send();
            });
        };
        return ReadonlyRestClient;
    }(ServerActions));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Node in a Tree.
     */
    var TreeNode = /** @class */ (function () {
        function TreeNode() {
            // TODO: Consider making accessors that create children and value lazily or
            // separate Internal / Leaf 'types'.
            this.children = {};
            this.childCount = 0;
            this.value = null;
        }
        return TreeNode;
    }());
    /**
     * A light-weight tree, traversable by path.  Nodes can have both values and children.
     * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
     * children.
     */
    var Tree = /** @class */ (function () {
        /**
         * @template T
         * @param {string=} name_ Optional name of the node.
         * @param {Tree=} parent_ Optional parent node.
         * @param {TreeNode=} node_ Optional node to wrap.
         */
        function Tree(name_, parent_, node_) {
            if (name_ === void 0) { name_ = ''; }
            if (parent_ === void 0) { parent_ = null; }
            if (node_ === void 0) { node_ = new TreeNode(); }
            this.name_ = name_;
            this.parent_ = parent_;
            this.node_ = node_;
        }
        /**
         * Returns a sub-Tree for the given path.
         *
         * @param {!(string|Path)} pathObj Path to look up.
         * @return {!Tree.<T>} Tree for path.
         */
        Tree.prototype.subTree = function (pathObj) {
            // TODO: Require pathObj to be Path?
            var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
            var child = this, next = path.getFront();
            while (next !== null) {
                var childNode = safeGet(child.node_.children, next) || new TreeNode();
                child = new Tree(next, child, childNode);
                path = path.popFront();
                next = path.getFront();
            }
            return child;
        };
        /**
         * Returns the data associated with this tree node.
         *
         * @return {?T} The data or null if no data exists.
         */
        Tree.prototype.getValue = function () {
            return this.node_.value;
        };
        /**
         * Sets data to this tree node.
         *
         * @param {!T} value Value to set.
         */
        Tree.prototype.setValue = function (value) {
            assert$1(typeof value !== 'undefined', 'Cannot set value to undefined');
            this.node_.value = value;
            this.updateParents_();
        };
        /**
         * Clears the contents of the tree node (its value and all children).
         */
        Tree.prototype.clear = function () {
            this.node_.value = null;
            this.node_.children = {};
            this.node_.childCount = 0;
            this.updateParents_();
        };
        /**
         * @return {boolean} Whether the tree has any children.
         */
        Tree.prototype.hasChildren = function () {
            return this.node_.childCount > 0;
        };
        /**
         * @return {boolean} Whether the tree is empty (no value or children).
         */
        Tree.prototype.isEmpty = function () {
            return this.getValue() === null && !this.hasChildren();
        };
        /**
         * Calls action for each child of this tree node.
         *
         * @param {function(!Tree.<T>)} action Action to be called for each child.
         */
        Tree.prototype.forEachChild = function (action) {
            var _this = this;
            each(this.node_.children, function (child, childTree) {
                action(new Tree(child, _this, childTree));
            });
        };
        /**
         * Does a depth-first traversal of this node's descendants, calling action for each one.
         *
         * @param {function(!Tree.<T>)} action Action to be called for each child.
         * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
         *   false.
         * @param {boolean=} childrenFirst Whether to call action on children before calling it on
         *   parent.
         */
        Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
            if (includeSelf && !childrenFirst) {
                action(this);
            }
            this.forEachChild(function (child) {
                child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);
            });
            if (includeSelf && childrenFirst) {
                action(this);
            }
        };
        /**
         * Calls action on each ancestor node.
         *
         * @param {function(!Tree.<T>)} action Action to be called on each parent; return
         *   true to abort.
         * @param {boolean=} includeSelf Whether to call action on this node as well.
         * @return {boolean} true if the action callback returned true.
         */
        Tree.prototype.forEachAncestor = function (action, includeSelf) {
            var node = includeSelf ? this : this.parent();
            while (node !== null) {
                if (action(node)) {
                    return true;
                }
                node = node.parent();
            }
            return false;
        };
        /**
         * Does a depth-first traversal of this node's descendants.  When a descendant with a value
         * is found, action is called on it and traversal does not continue inside the node.
         * Action is *not* called on this node.
         *
         * @param {function(!Tree.<T>)} action Action to be called for each child.
         */
        Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
            this.forEachChild(function (child) {
                if (child.getValue() !== null) {
                    action(child);
                }
                else {
                    child.forEachImmediateDescendantWithValue(action);
                }
            });
        };
        /**
         * @return {!Path} The path of this tree node, as a Path.
         */
        Tree.prototype.path = function () {
            return new Path(this.parent_ === null
                ? this.name_
                : this.parent_.path() + '/' + this.name_);
        };
        /**
         * @return {string} The name of the tree node.
         */
        Tree.prototype.name = function () {
            return this.name_;
        };
        /**
         * @return {?Tree} The parent tree node, or null if this is the root of the tree.
         */
        Tree.prototype.parent = function () {
            return this.parent_;
        };
        /**
         * Adds or removes this child from its parent based on whether it's empty or not.
         *
         * @private
         */
        Tree.prototype.updateParents_ = function () {
            if (this.parent_ !== null) {
                this.parent_.updateChild_(this.name_, this);
            }
        };
        /**
         * Adds or removes the passed child to this tree node, depending on whether it's empty.
         *
         * @param {string} childName The name of the child to update.
         * @param {!Tree.<T>} child The child to update.
         * @private
         */
        Tree.prototype.updateChild_ = function (childName, child) {
            var childEmpty = child.isEmpty();
            var childExists = contains(this.node_.children, childName);
            if (childEmpty && childExists) {
                delete this.node_.children[childName];
                this.node_.childCount--;
                this.updateParents_();
            }
            else if (!childEmpty && !childExists) {
                this.node_.children[childName] = child.node_;
                this.node_.childCount++;
                this.updateParents_();
            }
        };
        return Tree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var INTERRUPT_REASON = 'repo_interrupt';
    /**
     * If a transaction does not succeed after 25 retries, we abort it. Among other
     * things this ensure that if there's ever a bug causing a mismatch between
     * client / server hashes for some data, we won't retry indefinitely.
     */
    var MAX_TRANSACTION_RETRIES = 25;
    var TransactionStatus;
    (function (TransactionStatus) {
        // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
        // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
        // mismatched hash.
        TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN";
        // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
        // or rejected yet).
        TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT";
        // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
        // removed when we get a chance to prune completed ones.
        TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED";
        // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
        // If it comes back as unsuccessful, we'll abort it.
        TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
        // Temporary state used to mark transactions that need to be aborted.
        TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
    })(TransactionStatus || (TransactionStatus = {}));
    /**
     * A connection to a single data repository.
     */
    var Repo = /** @class */ (function () {
        function Repo(repoInfo_, forceRestClient_, app, authTokenProvider_) {
            this.repoInfo_ = repoInfo_;
            this.forceRestClient_ = forceRestClient_;
            this.app = app;
            this.authTokenProvider_ = authTokenProvider_;
            this.dataUpdateCount = 0;
            this.statsListener_ = null;
            this.eventQueue_ = new EventQueue();
            this.nextWriteId_ = 1;
            this.interceptServerDataCallback_ = null;
            /** A list of data pieces and paths to be set when this client disconnects. */
            this.onDisconnect_ = new SparseSnapshotTree();
            /** Stores queues of outstanding transactions for Firebase locations. */
            this.transactionQueueTree_ = new Tree();
            // TODO: This should be @private but it's used by test_access.js and internal.js
            this.persistentConnection_ = null;
            // This key is intentionally not updated if RepoInfo is later changed or replaced
            this.key = this.repoInfo_.toURLString();
        }
        Repo.prototype.start = function () {
            var _this = this;
            this.stats_ = StatsManager.getCollection(this.repoInfo_);
            if (this.forceRestClient_ || beingCrawled()) {
                this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), this.authTokenProvider_);
                // Minor hack: Fire onConnect immediately, since there's no actual connection.
                setTimeout(this.onConnectStatus_.bind(this, true), 0);
            }
            else {
                var authOverride = this.app.options['databaseAuthVariableOverride'];
                // Validate authOverride
                if (typeof authOverride !== 'undefined' && authOverride !== null) {
                    if (typeof authOverride !== 'object') {
                        throw new Error('Only objects are supported for option databaseAuthVariableOverride');
                    }
                    try {
                        stringify$1(authOverride);
                    }
                    catch (e) {
                        throw new Error('Invalid authOverride provided: ' + e);
                    }
                }
                this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.app.options.appId, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), this.authTokenProvider_, authOverride);
                this.server_ = this.persistentConnection_;
            }
            this.authTokenProvider_.addTokenChangeListener(function (token) {
                _this.server_.refreshAuthToken(token);
            });
            // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
            // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
            this.statsReporter_ = StatsManager.getOrCreateReporter(this.repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });
            // Used for .info.
            this.infoData_ = new SnapshotHolder();
            this.infoSyncTree_ = new SyncTree({
                startListening: function (query, tag, currentHashFn, onComplete) {
                    var infoEvents = [];
                    var node = _this.infoData_.getNode(query.path);
                    // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
                    // on initial data...
                    if (!node.isEmpty()) {
                        infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
                        setTimeout(function () {
                            onComplete('ok');
                        }, 0);
                    }
                    return infoEvents;
                },
                stopListening: function () { }
            });
            this.updateInfo_('connected', false);
            this.serverSyncTree_ = new SyncTree({
                startListening: function (query, tag, currentHashFn, onComplete) {
                    _this.server_.listen(query, currentHashFn, tag, function (status, data) {
                        var events = onComplete(status, data);
                        _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
                    });
                    // No synchronous events for network-backed sync trees
                    return [];
                },
                stopListening: function (query, tag) {
                    _this.server_.unlisten(query, tag);
                }
            });
        };
        /**
         * @return The URL corresponding to the root of this Firebase.
         */
        Repo.prototype.toString = function () {
            return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
        };
        /**
         * @return The namespace represented by the repo.
         */
        Repo.prototype.name = function () {
            return this.repoInfo_.namespace;
        };
        /**
         * @return The time in milliseconds, taking the server offset into account if we have one.
         */
        Repo.prototype.serverTime = function () {
            var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));
            var offset = offsetNode.val() || 0;
            return new Date().getTime() + offset;
        };
        /**
         * Generate ServerValues using some variables from the repo object.
         */
        Repo.prototype.generateServerValues = function () {
            return generateWithValues({
                timestamp: this.serverTime()
            });
        };
        /**
         * Called by realtime when we get new messages from the server.
         */
        Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
            // For testing.
            this.dataUpdateCount++;
            var path = new Path(pathString);
            data = this.interceptServerDataCallback_
                ? this.interceptServerDataCallback_(pathString, data)
                : data;
            var events = [];
            if (tag) {
                if (isMerge) {
                    var taggedChildren = map(data, function (raw) { return nodeFromJSON$1(raw); });
                    events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
                }
                else {
                    var taggedSnap = nodeFromJSON$1(data);
                    events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
                }
            }
            else if (isMerge) {
                var changedChildren = map(data, function (raw) { return nodeFromJSON$1(raw); });
                events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
            }
            else {
                var snap = nodeFromJSON$1(data);
                events = this.serverSyncTree_.applyServerOverwrite(path, snap);
            }
            var affectedPath = path;
            if (events.length > 0) {
                // Since we have a listener outstanding for each transaction, receiving any events
                // is a proxy for some change having occurred.
                affectedPath = this.rerunTransactions_(path);
            }
            this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
        };
        // TODO: This should be @private but it's used by test_access.js and internal.js
        Repo.prototype.interceptServerData_ = function (callback) {
            this.interceptServerDataCallback_ = callback;
        };
        Repo.prototype.onConnectStatus_ = function (connectStatus) {
            this.updateInfo_('connected', connectStatus);
            if (connectStatus === false) {
                this.runOnDisconnectEvents_();
            }
        };
        Repo.prototype.onServerInfoUpdate_ = function (updates) {
            var _this = this;
            each(updates, function (key, value) {
                _this.updateInfo_(key, value);
            });
        };
        Repo.prototype.updateInfo_ = function (pathString, value) {
            var path = new Path('/.info/' + pathString);
            var newNode = nodeFromJSON$1(value);
            this.infoData_.updateSnapshot(path, newNode);
            var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
            this.eventQueue_.raiseEventsForChangedPath(path, events);
        };
        Repo.prototype.getNextWriteId_ = function () {
            return this.nextWriteId_++;
        };
        /**
         * The purpose of `getValue` is to return the latest known value
         * satisfying `query`.
         *
         * This method will first check for in-memory cached values
         * belonging to active listeners. If they are found, such values
         * are considered to be the most up-to-date.
         *
         * If the client is not connected, this method will try to
         * establish a connection and request the value for `query`. If
         * the client is not able to retrieve the query result, it reports
         * an error.
         *
         * @param query - The query to surface a value for.
         */
        Repo.prototype.getValue = function (query) {
            var _this = this;
            // Only active queries are cached. There is no persisted cache.
            var cached = this.serverSyncTree_.calcCompleteEventCache(query.path);
            if (!cached.isEmpty()) {
                return Promise.resolve(new DataSnapshot(cached, query.getRef(), query.getQueryParams().getIndex()));
            }
            return this.server_.get(query).then(function (payload) {
                var node = nodeFromJSON$1(payload);
                var events = _this.serverSyncTree_.applyServerOverwrite(query.path, node);
                _this.eventQueue_.raiseEventsAtPath(query.path, events);
                return Promise.resolve(new DataSnapshot(node, query.getRef(), query.getQueryParams().getIndex()));
            }, function (err) {
                _this.log_('get for query ' + stringify$1(query) + ' failed: ' + err);
                return Promise.reject(new Error(err));
            });
        };
        Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
            var _this = this;
            this.log_('set', {
                path: path.toString(),
                value: newVal,
                priority: newPriority
            });
            // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
            // (b) store unresolved paths on JSON parse
            var serverValues = this.generateServerValues();
            var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);
            var existing = this.serverSyncTree_.calcCompleteEventCache(path);
            var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
            var writeId = this.getNextWriteId_();
            var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
            this.eventQueue_.queueEvents(events);
            this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
                var success = status === 'ok';
                if (!success) {
                    warn('set at ' + path + ' failed: ' + status);
                }
                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);
                _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
            var affectedPath = this.abortTransactions_(path);
            this.rerunTransactions_(affectedPath);
            // We queued the events above, so just flush the queue here
            this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
        };
        Repo.prototype.update = function (path, childrenToMerge, onComplete) {
            var _this = this;
            this.log_('update', { path: path.toString(), value: childrenToMerge });
            // Start with our existing data and merge each child into it.
            var empty = true;
            var serverValues = this.generateServerValues();
            var changedChildren = {};
            each(childrenToMerge, function (changedKey, changedValue) {
                empty = false;
                changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);
            });
            if (!empty) {
                var writeId_1 = this.getNextWriteId_();
                var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
                this.eventQueue_.queueEvents(events);
                this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
                    var success = status === 'ok';
                    if (!success) {
                        warn('update at ' + path + ' failed: ' + status);
                    }
                    var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);
                    var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;
                    _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);
                    _this.callOnCompleteCallback(onComplete, status, errorReason);
                });
                each(childrenToMerge, function (changedPath) {
                    var affectedPath = _this.abortTransactions_(path.child(changedPath));
                    _this.rerunTransactions_(affectedPath);
                });
                // We queued the events above, so just flush the queue here
                this.eventQueue_.raiseEventsForChangedPath(path, []);
            }
            else {
                log("update() called with empty data.  Don't do anything.");
                this.callOnCompleteCallback(onComplete, 'ok');
            }
        };
        /**
         * Applies all of the changes stored up in the onDisconnect_ tree.
         */
        Repo.prototype.runOnDisconnectEvents_ = function () {
            var _this = this;
            this.log_('onDisconnectEvents');
            var serverValues = this.generateServerValues();
            var resolvedOnDisconnectTree = new SparseSnapshotTree();
            this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {
                var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);
                resolvedOnDisconnectTree.remember(path, resolved);
            });
            var events = [];
            resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {
                events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));
                var affectedPath = _this.abortTransactions_(path);
                _this.rerunTransactions_(affectedPath);
            });
            this.onDisconnect_ = new SparseSnapshotTree();
            this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);
        };
        Repo.prototype.onDisconnectCancel = function (path, onComplete) {
            var _this = this;
            this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.forget(path);
                }
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };
        Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
            var _this = this;
            var newNode = nodeFromJSON$1(value);
            this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.remember(path, newNode);
                }
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };
        Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
            var _this = this;
            var newNode = nodeFromJSON$1(value, priority);
            this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.remember(path, newNode);
                }
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };
        Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
            var _this = this;
            if (isEmpty$2(childrenToMerge)) {
                log("onDisconnect().update() called with empty data.  Don't do anything.");
                this.callOnCompleteCallback(onComplete, 'ok');
                return;
            }
            this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
                if (status === 'ok') {
                    each(childrenToMerge, function (childName, childNode) {
                        var newChildNode = nodeFromJSON$1(childNode);
                        _this.onDisconnect_.remember(path.child(childName), newChildNode);
                    });
                }
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };
        Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
            var events;
            if (query.path.getFront() === '.info') {
                events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
            }
            else {
                events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
            }
            this.eventQueue_.raiseEventsAtPath(query.path, events);
        };
        Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
            // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
            // a little bit by handling the return values anyways.
            var events;
            if (query.path.getFront() === '.info') {
                events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
            }
            else {
                events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
            }
            this.eventQueue_.raiseEventsAtPath(query.path, events);
        };
        Repo.prototype.interrupt = function () {
            if (this.persistentConnection_) {
                this.persistentConnection_.interrupt(INTERRUPT_REASON);
            }
        };
        Repo.prototype.resume = function () {
            if (this.persistentConnection_) {
                this.persistentConnection_.resume(INTERRUPT_REASON);
            }
        };
        Repo.prototype.stats = function (showDelta) {
            if (showDelta === void 0) { showDelta = false; }
            if (typeof console === 'undefined') {
                return;
            }
            var stats;
            if (showDelta) {
                if (!this.statsListener_) {
                    this.statsListener_ = new StatsListener(this.stats_);
                }
                stats = this.statsListener_.get();
            }
            else {
                stats = this.stats_.get();
            }
            var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
                return Math.max(currentValue.length, previousValue);
            }, 0);
            each(stats, function (stat, value) {
                var paddedStat = stat;
                // pad stat names to be the same length (plus 2 extra spaces).
                for (var i = stat.length; i < longestName + 2; i++) {
                    paddedStat += ' ';
                }
                console.log(paddedStat + value);
            });
        };
        Repo.prototype.statsIncrementCounter = function (metric) {
            this.stats_.incrementCounter(metric);
            this.statsReporter_.includeStat(metric);
        };
        Repo.prototype.log_ = function () {
            var varArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                varArgs[_i] = arguments[_i];
            }
            var prefix = '';
            if (this.persistentConnection_) {
                prefix = this.persistentConnection_.id + ':';
            }
            log.apply(void 0, __spread([prefix], varArgs));
        };
        Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
            if (callback) {
                exceptionGuard(function () {
                    if (status === 'ok') {
                        callback(null);
                    }
                    else {
                        var code = (status || 'error').toUpperCase();
                        var message = code;
                        if (errorReason) {
                            message += ': ' + errorReason;
                        }
                        var error = new Error(message);
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        error.code = code;
                        callback(error);
                    }
                });
            }
        };
        Object.defineProperty(Repo.prototype, "database", {
            get: function () {
                return this.__database || (this.__database = new Database(this));
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Creates a new transaction, adds it to the transactions we're tracking, and
         * sends it to the server if possible.
         *
         * @param path Path at which to do transaction.
         * @param transactionUpdate Update callback.
         * @param onComplete Completion callback.
         * @param  applyLocally Whether or not to make intermediate results visible
         */
        Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
            this.log_('transaction on ' + path);
            // Add a watch to make sure we get server updates.
            var valueCallback = function () { };
            var watchRef = new Reference(this, path);
            watchRef.on('value', valueCallback);
            var unwatcher = function () {
                watchRef.off('value', valueCallback);
            };
            // Initialize transaction.
            var transaction = {
                path: path,
                update: transactionUpdate,
                onComplete: onComplete,
                // One of TransactionStatus enums.
                status: null,
                // Used when combining transactions at different locations to figure out
                // which one goes first.
                order: LUIDGenerator(),
                // Whether to raise local events for this transaction.
                applyLocally: applyLocally,
                // Count of how many times we've retried the transaction.
                retryCount: 0,
                // Function to call to clean up our .on() listener.
                unwatcher: unwatcher,
                // Stores why a transaction was aborted.
                abortReason: null,
                currentWriteId: null,
                currentInputSnapshot: null,
                currentOutputSnapshotRaw: null,
                currentOutputSnapshotResolved: null
            };
            // Run transaction initially.
            var currentState = this.getLatestState_(path);
            transaction.currentInputSnapshot = currentState;
            var newVal = transaction.update(currentState.val());
            if (newVal === undefined) {
                // Abort transaction.
                transaction.unwatcher();
                transaction.currentOutputSnapshotRaw = null;
                transaction.currentOutputSnapshotResolved = null;
                if (transaction.onComplete) {
                    // We just set the input snapshot, so this cast should be safe
                    var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);
                    transaction.onComplete(null, false, snapshot);
                }
            }
            else {
                validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
                // Mark as run and add to our queue.
                transaction.status = TransactionStatus.RUN;
                var queueNode = this.transactionQueueTree_.subTree(path);
                var nodeQueue = queueNode.getValue() || [];
                nodeQueue.push(transaction);
                queueNode.setValue(nodeQueue);
                // Update visibleData and raise events
                // Note: We intentionally raise events after updating all of our
                // transaction state, since the user could start new transactions from the
                // event callbacks.
                var priorityForNode = void 0;
                if (typeof newVal === 'object' &&
                    newVal !== null &&
                    contains(newVal, '.priority')) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    priorityForNode = safeGet(newVal, '.priority');
                    assert$1(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
                        'Priority must be a valid string, finite number, server value, or null.');
                }
                else {
                    var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||
                        ChildrenNode.EMPTY_NODE;
                    priorityForNode = currentNode.getPriority().val();
                }
                var serverValues = this.generateServerValues();
                var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);
                var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
                transaction.currentOutputSnapshotRaw = newNodeUnresolved;
                transaction.currentOutputSnapshotResolved = newNode;
                transaction.currentWriteId = this.getNextWriteId_();
                var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
                this.eventQueue_.raiseEventsForChangedPath(path, events);
                this.sendReadyTransactions_();
            }
        };
        /**
         * @param excludeSets A specific set to exclude
         */
        Repo.prototype.getLatestState_ = function (path, excludeSets) {
            return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||
                ChildrenNode.EMPTY_NODE);
        };
        /**
         * Sends any already-run transactions that aren't waiting for outstanding
         * transactions to complete.
         *
         * Externally it's called with no arguments, but it calls itself recursively
         * with a particular transactionQueueTree node to recurse through the tree.
         *
         * @param node transactionQueueTree node to start at.
         */
        Repo.prototype.sendReadyTransactions_ = function (node) {
            var _this = this;
            if (node === void 0) { node = this.transactionQueueTree_; }
            // Before recursing, make sure any completed transactions are removed.
            if (!node) {
                this.pruneCompletedTransactionsBelowNode_(node);
            }
            if (node.getValue() !== null) {
                var queue = this.buildTransactionQueue_(node);
                assert$1(queue.length > 0, 'Sending zero length transaction queue');
                var allRun = queue.every(function (transaction) {
                    return transaction.status === TransactionStatus.RUN;
                });
                // If they're all run (and not sent), we can send them.  Else, we must wait.
                if (allRun) {
                    this.sendTransactionQueue_(node.path(), queue);
                }
            }
            else if (node.hasChildren()) {
                node.forEachChild(function (childNode) {
                    _this.sendReadyTransactions_(childNode);
                });
            }
        };
        /**
         * Given a list of run transactions, send them to the server and then handle
         * the result (success or failure).
         *
         * @param path The location of the queue.
         * @param queue Queue of transactions under the specified location.
         */
        Repo.prototype.sendTransactionQueue_ = function (path, queue) {
            var _this = this;
            // Mark transactions as sent and increment retry count!
            var setsToIgnore = queue.map(function (txn) {
                return txn.currentWriteId;
            });
            var latestState = this.getLatestState_(path, setsToIgnore);
            var snapToSend = latestState;
            var latestHash = latestState.hash();
            for (var i = 0; i < queue.length; i++) {
                var txn = queue[i];
                assert$1(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
                txn.status = TransactionStatus.SENT;
                txn.retryCount++;
                var relativePath = Path.relativePath(path, txn.path);
                // If we've gotten to this point, the output snapshot must be defined.
                snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);
            }
            var dataToSend = snapToSend.val(true);
            var pathToSend = path;
            // Send the put.
            this.server_.put(pathToSend.toString(), dataToSend, function (status) {
                _this.log_('transaction put response', {
                    path: pathToSend.toString(),
                    status: status
                });
                var events = [];
                if (status === 'ok') {
                    // Queue up the callbacks and fire them after cleaning up all of our
                    // transaction state, since the callback could trigger more
                    // transactions or sets.
                    var callbacks = [];
                    for (var i = 0; i < queue.length; i++) {
                        queue[i].status = TransactionStatus.COMPLETED;
                        events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));
                        if (queue[i].onComplete) {
                            // We never unset the output snapshot, and given that this
                            // transaction is complete, it should be set
                            var node = queue[i].currentOutputSnapshotResolved;
                            var ref = new Reference(_this, queue[i].path);
                            var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);
                            callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
                        }
                        queue[i].unwatcher();
                    }
                    // Now remove the completed transactions.
                    _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));
                    // There may be pending transactions that we can now send.
                    _this.sendReadyTransactions_();
                    _this.eventQueue_.raiseEventsForChangedPath(path, events);
                    // Finally, trigger onComplete callbacks.
                    for (var i = 0; i < callbacks.length; i++) {
                        exceptionGuard(callbacks[i]);
                    }
                }
                else {
                    // transactions are no longer sent.  Update their status appropriately.
                    if (status === 'datastale') {
                        for (var i = 0; i < queue.length; i++) {
                            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {
                                queue[i].status = TransactionStatus.NEEDS_ABORT;
                            }
                            else {
                                queue[i].status = TransactionStatus.RUN;
                            }
                        }
                    }
                    else {
                        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                        for (var i = 0; i < queue.length; i++) {
                            queue[i].status = TransactionStatus.NEEDS_ABORT;
                            queue[i].abortReason = status;
                        }
                    }
                    _this.rerunTransactions_(path);
                }
            }, latestHash);
        };
        /**
         * Finds all transactions dependent on the data at changedPath and reruns them.
         *
         * Should be called any time cached data changes.
         *
         * Return the highest path that was affected by rerunning transactions. This
         * is the path at which events need to be raised for.
         *
         * @param changedPath The path in mergedData that changed.
         * @return The rootmost path that was affected by rerunning transactions.
         */
        Repo.prototype.rerunTransactions_ = function (changedPath) {
            var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
            var path = rootMostTransactionNode.path();
            var queue = this.buildTransactionQueue_(rootMostTransactionNode);
            this.rerunTransactionQueue_(queue, path);
            return path;
        };
        /**
         * Does all the work of rerunning transactions (as well as cleans up aborted
         * transactions and whatnot).
         *
         * @param queue The queue of transactions to run.
         * @param path The path the queue is for.
         */
        Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
            if (queue.length === 0) {
                return; // Nothing to do!
            }
            // Queue up the callbacks and fire them after cleaning up all of our
            // transaction state, since the callback could trigger more transactions or
            // sets.
            var callbacks = [];
            var events = [];
            // Ignore all of the sets we're going to re-run.
            var txnsToRerun = queue.filter(function (q) {
                return q.status === TransactionStatus.RUN;
            });
            var setsToIgnore = txnsToRerun.map(function (q) {
                return q.currentWriteId;
            });
            for (var i = 0; i < queue.length; i++) {
                var transaction = queue[i];
                var relativePath = Path.relativePath(path, transaction.path);
                var abortTransaction = false, abortReason = void 0;
                assert$1(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
                if (transaction.status === TransactionStatus.NEEDS_ABORT) {
                    abortTransaction = true;
                    abortReason = transaction.abortReason;
                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                }
                else if (transaction.status === TransactionStatus.RUN) {
                    if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
                        abortTransaction = true;
                        abortReason = 'maxretry';
                        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                    }
                    else {
                        // This code reruns a transaction
                        var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
                        transaction.currentInputSnapshot = currentNode;
                        var newData = queue[i].update(currentNode.val());
                        if (newData !== undefined) {
                            validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                            var newDataNode = nodeFromJSON$1(newData);
                            var hasExplicitPriority = typeof newData === 'object' &&
                                newData != null &&
                                contains(newData, '.priority');
                            if (!hasExplicitPriority) {
                                // Keep the old priority if there wasn't a priority explicitly specified.
                                newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                            }
                            var oldWriteId = transaction.currentWriteId;
                            var serverValues = this.generateServerValues();
                            var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                            transaction.currentOutputSnapshotRaw = newDataNode;
                            transaction.currentOutputSnapshotResolved = newNodeResolved;
                            transaction.currentWriteId = this.getNextWriteId_();
                            // Mutates setsToIgnore in place
                            setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                            events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                            events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
                        }
                        else {
                            abortTransaction = true;
                            abortReason = 'nodata';
                            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                        }
                    }
                }
                this.eventQueue_.raiseEventsForChangedPath(path, events);
                events = [];
                if (abortTransaction) {
                    // Abort.
                    queue[i].status = TransactionStatus.COMPLETED;
                    // Removing a listener can trigger pruning which can muck with
                    // mergedData/visibleData (as it prunes data). So defer the unwatcher
                    // until we're done.
                    (function (unwatcher) {
                        setTimeout(unwatcher, Math.floor(0));
                    })(queue[i].unwatcher);
                    if (queue[i].onComplete) {
                        if (abortReason === 'nodata') {
                            var ref = new Reference(this, queue[i].path);
                            // We set this field immediately, so it's safe to cast to an actual snapshot
                            var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;
                            var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);
                            callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
                        }
                        else {
                            callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
                        }
                    }
                }
            }
            // Clean up completed transactions.
            this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);
            // Now fire callbacks, now that we're in a good, known state.
            for (var i = 0; i < callbacks.length; i++) {
                exceptionGuard(callbacks[i]);
            }
            // Try to send the transaction result to the server.
            this.sendReadyTransactions_();
        };
        /**
         * Returns the rootmost ancestor node of the specified path that has a pending
         * transaction on it, or just returns the node for the given path if there are
         * no pending transactions on any ancestor.
         *
         * @param path The location to start at.
         * @return The rootmost node with a transaction.
         */
        Repo.prototype.getAncestorTransactionNode_ = function (path) {
            var front;
            // Start at the root and walk deeper into the tree towards path until we
            // find a node with pending transactions.
            var transactionNode = this.transactionQueueTree_;
            front = path.getFront();
            while (front !== null && transactionNode.getValue() === null) {
                transactionNode = transactionNode.subTree(front);
                path = path.popFront();
                front = path.getFront();
            }
            return transactionNode;
        };
        /**
         * Builds the queue of all transactions at or below the specified
         * transactionNode.
         *
         * @param transactionNode
         * @return The generated queue.
         */
        Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
            // Walk any child transaction queues and aggregate them into a single queue.
            var transactionQueue = [];
            this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
            // Sort them by the order the transactions were created.
            transactionQueue.sort(function (a, b) {
                return a.order - b.order;
            });
            return transactionQueue;
        };
        Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
            var _this = this;
            var nodeQueue = node.getValue();
            if (nodeQueue !== null) {
                for (var i = 0; i < nodeQueue.length; i++) {
                    queue.push(nodeQueue[i]);
                }
            }
            node.forEachChild(function (child) {
                _this.aggregateTransactionQueuesForNode_(child, queue);
            });
        };
        /**
         * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
         */
        Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
            var _this = this;
            var queue = node.getValue();
            if (queue) {
                var to = 0;
                for (var from = 0; from < queue.length; from++) {
                    if (queue[from].status !== TransactionStatus.COMPLETED) {
                        queue[to] = queue[from];
                        to++;
                    }
                }
                queue.length = to;
                node.setValue(queue.length > 0 ? queue : null);
            }
            node.forEachChild(function (childNode) {
                _this.pruneCompletedTransactionsBelowNode_(childNode);
            });
        };
        /**
         * Aborts all transactions on ancestors or descendants of the specified path.
         * Called when doing a set() or update() since we consider them incompatible
         * with transactions.
         *
         * @param path Path for which we want to abort related transactions.
         */
        Repo.prototype.abortTransactions_ = function (path) {
            var _this = this;
            var affectedPath = this.getAncestorTransactionNode_(path).path();
            var transactionNode = this.transactionQueueTree_.subTree(path);
            transactionNode.forEachAncestor(function (node) {
                _this.abortTransactionsOnNode_(node);
            });
            this.abortTransactionsOnNode_(transactionNode);
            transactionNode.forEachDescendant(function (node) {
                _this.abortTransactionsOnNode_(node);
            });
            return affectedPath;
        };
        /**
         * Abort transactions stored in this transaction queue node.
         *
         * @param node Node to abort transactions for.
         */
        Repo.prototype.abortTransactionsOnNode_ = function (node) {
            var queue = node.getValue();
            if (queue !== null) {
                // Queue up the callbacks and fire them after cleaning up all of our
                // transaction state, since the callback could trigger more transactions
                // or sets.
                var callbacks = [];
                // Go through queue.  Any already-sent transactions must be marked for
                // abort, while the unsent ones can be immediately aborted and removed.
                var events = [];
                var lastSent = -1;
                for (var i = 0; i < queue.length; i++) {
                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;
                    else if (queue[i].status === TransactionStatus.SENT) {
                        assert$1(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                        lastSent = i;
                        // Mark transaction for abort when it comes back.
                        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
                        queue[i].abortReason = 'set';
                    }
                    else {
                        assert$1(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');
                        // We can abort it immediately.
                        queue[i].unwatcher();
                        events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));
                        if (queue[i].onComplete) {
                            var snapshot = null;
                            callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
                        }
                    }
                }
                if (lastSent === -1) {
                    // We're not waiting for any sent transactions.  We can clear the queue.
                    node.setValue(null);
                }
                else {
                    // Remove the transactions we aborted.
                    queue.length = lastSent + 1;
                }
                // Now fire the callbacks.
                this.eventQueue_.raiseEventsForChangedPath(node.path(), events);
                for (var i = 0; i < callbacks.length; i++) {
                    exceptionGuard(callbacks[i]);
                }
            }
        };
        return Repo;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
     *
     * @constructor
     * @implements {NodeFilter}
     */
    var RangedFilter = /** @class */ (function () {
        /**
         * @param {!QueryParams} params
         */
        function RangedFilter(params) {
            this.indexedFilter_ = new IndexedFilter(params.getIndex());
            this.index_ = params.getIndex();
            this.startPost_ = RangedFilter.getStartPost_(params);
            this.endPost_ = RangedFilter.getEndPost_(params);
        }
        /**
         * @return {!NamedNode}
         */
        RangedFilter.prototype.getStartPost = function () {
            return this.startPost_;
        };
        /**
         * @return {!NamedNode}
         */
        RangedFilter.prototype.getEndPost = function () {
            return this.endPost_;
        };
        /**
         * @param {!NamedNode} node
         * @return {boolean}
         */
        RangedFilter.prototype.matches = function (node) {
            return (this.index_.compare(this.getStartPost(), node) <= 0 &&
                this.index_.compare(node, this.getEndPost()) <= 0);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.matches(new NamedNode(key, newChild))) {
                newChild = ChildrenNode.EMPTY_NODE;
            }
            return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            if (newSnap.isLeafNode()) {
                // Make sure we have a children node with the correct index, not a leaf node;
                newSnap = ChildrenNode.EMPTY_NODE;
            }
            var filtered = newSnap.withIndex(this.index_);
            // Don't support priorities on queries
            filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
            var self = this;
            newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                if (!self.matches(new NamedNode(key, childNode))) {
                    filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
                }
            });
            return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.filtersNodes = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.getIndexedFilter = function () {
            return this.indexedFilter_;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        /**
         * @param {!QueryParams} params
         * @return {!NamedNode}
         * @private
         */
        RangedFilter.getStartPost_ = function (params) {
            if (params.hasStart()) {
                var startName = params.getIndexStartName();
                return params.getIndex().makePost(params.getIndexStartValue(), startName);
            }
            else {
                return params.getIndex().minPost();
            }
        };
        /**
         * @param {!QueryParams} params
         * @return {!NamedNode}
         * @private
         */
        RangedFilter.getEndPost_ = function (params) {
            if (params.hasEnd()) {
                var endName = params.getIndexEndName();
                return params.getIndex().makePost(params.getIndexEndValue(), endName);
            }
            else {
                return params.getIndex().maxPost();
            }
        };
        return RangedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
     *
     * @constructor
     * @implements {NodeFilter}
     */
    var LimitedFilter = /** @class */ (function () {
        /**
         * @param {!QueryParams} params
         */
        function LimitedFilter(params) {
            this.rangedFilter_ = new RangedFilter(params);
            this.index_ = params.getIndex();
            this.limit_ = params.getLimit();
            this.reverse_ = !params.isViewFromLeft();
        }
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
                newChild = ChildrenNode.EMPTY_NODE;
            }
            if (snap.getImmediateChild(key).equals(newChild)) {
                // No change
                return snap;
            }
            else if (snap.numChildren() < this.limit_) {
                return this.rangedFilter_
                    .getIndexedFilter()
                    .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
            }
            else {
                return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
            }
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            var filtered;
            if (newSnap.isLeafNode() || newSnap.isEmpty()) {
                // Make sure we have a children node with the correct index, not a leaf node;
                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            }
            else {
                if (this.limit_ * 2 < newSnap.numChildren() &&
                    newSnap.isIndexed(this.index_)) {
                    // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                    filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                    // anchor to the startPost, endPost, or last element as appropriate
                    var iterator = void 0;
                    if (this.reverse_) {
                        iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                    }
                    else {
                        iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                    }
                    var count = 0;
                    while (iterator.hasNext() && count < this.limit_) {
                        var next = iterator.getNext();
                        var inRange = void 0;
                        if (this.reverse_) {
                            inRange =
                                this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                        }
                        else {
                            inRange =
                                this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                        }
                        if (inRange) {
                            filtered = filtered.updateImmediateChild(next.name, next.node);
                            count++;
                        }
                        else {
                            // if we have reached the end post, we cannot keep adding elemments
                            break;
                        }
                    }
                }
                else {
                    // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                    filtered = newSnap.withIndex(this.index_);
                    // Don't support priorities on queries
                    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
                    var startPost = void 0;
                    var endPost = void 0;
                    var cmp = void 0;
                    var iterator = void 0;
                    if (this.reverse_) {
                        iterator = filtered.getReverseIterator(this.index_);
                        startPost = this.rangedFilter_.getEndPost();
                        endPost = this.rangedFilter_.getStartPost();
                        var indexCompare_1 = this.index_.getCompare();
                        cmp = function (a, b) { return indexCompare_1(b, a); };
                    }
                    else {
                        iterator = filtered.getIterator(this.index_);
                        startPost = this.rangedFilter_.getStartPost();
                        endPost = this.rangedFilter_.getEndPost();
                        cmp = this.index_.getCompare();
                    }
                    var count = 0;
                    var foundStartPost = false;
                    while (iterator.hasNext()) {
                        var next = iterator.getNext();
                        if (!foundStartPost && cmp(startPost, next) <= 0) {
                            // start adding
                            foundStartPost = true;
                        }
                        var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
                        if (inRange) {
                            count++;
                        }
                        else {
                            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
                        }
                    }
                }
            }
            return this.rangedFilter_
                .getIndexedFilter()
                .updateFullNode(oldSnap, filtered, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.filtersNodes = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.getIndexedFilter = function () {
            return this.rangedFilter_.getIndexedFilter();
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        /**
         * @param {!Node} snap
         * @param {string} childKey
         * @param {!Node} childSnap
         * @param {!CompleteChildSource} source
         * @param {?ChildChangeAccumulator} changeAccumulator
         * @return {!Node}
         * @private
         */
        LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
            // TODO: rename all cache stuff etc to general snap terminology
            var cmp;
            if (this.reverse_) {
                var indexCmp_1 = this.index_.getCompare();
                cmp = function (a, b) { return indexCmp_1(b, a); };
            }
            else {
                cmp = this.index_.getCompare();
            }
            var oldEventCache = snap;
            assert$1(oldEventCache.numChildren() === this.limit_, '');
            var newChildNamedNode = new NamedNode(childKey, childSnap);
            var windowBoundary = this.reverse_
                ? oldEventCache.getFirstChild(this.index_)
                : oldEventCache.getLastChild(this.index_);
            var inRange = this.rangedFilter_.matches(newChildNamedNode);
            if (oldEventCache.hasChild(childKey)) {
                var oldChildSnap = oldEventCache.getImmediateChild(childKey);
                var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
                while (nextChild != null &&
                    (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
                    // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                    // been applied to the limited filter yet. Ignore this next child which will be updated later in
                    // the limited filter...
                    nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
                }
                var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
                var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
                if (remainsInWindow) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));
                    }
                    return oldEventCache.updateImmediateChild(childKey, childSnap);
                }
                else {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));
                    }
                    var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
                    var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                    if (nextChildInRange) {
                        if (changeAccumulator != null) {
                            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));
                        }
                        return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                    }
                    else {
                        return newEventCache;
                    }
                }
            }
            else if (childSnap.isEmpty()) {
                // we're deleting a node, but it was not in the window, so ignore it
                return snap;
            }
            else if (inRange) {
                if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
                        changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));
                    }
                    return oldEventCache
                        .updateImmediateChild(childKey, childSnap)
                        .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
                }
                else {
                    return snap;
                }
            }
            else {
                return snap;
            }
        };
        return LimitedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
     * range to be returned for a particular location. It is assumed that validation of parameters is done at the
     * user-facing API level, so it is not done here.
     * @constructor
     */
    var QueryParams = /** @class */ (function () {
        function QueryParams() {
            this.limitSet_ = false;
            this.startSet_ = false;
            this.startNameSet_ = false;
            this.startAfterSet_ = false;
            this.endSet_ = false;
            this.endNameSet_ = false;
            this.endBeforeSet_ = false;
            this.limit_ = 0;
            this.viewFrom_ = '';
            this.indexStartValue_ = null;
            this.indexStartName_ = '';
            this.indexEndValue_ = null;
            this.indexEndName_ = '';
            this.index_ = PRIORITY_INDEX;
        }
        /**
         * @return {boolean}
         */
        QueryParams.prototype.hasStart = function () {
            return this.startSet_;
        };
        QueryParams.prototype.hasStartAfter = function () {
            return this.startAfterSet_;
        };
        QueryParams.prototype.hasEndBefore = function () {
            return this.endBeforeSet_;
        };
        /**
         * @return {boolean} True if it would return from left.
         */
        QueryParams.prototype.isViewFromLeft = function () {
            if (this.viewFrom_ === '') {
                // limit(), rather than limitToFirst or limitToLast was called.
                // This means that only one of startSet_ and endSet_ is true. Use them
                // to calculate which side of the view to anchor to. If neither is set,
                // anchor to the end.
                return this.startSet_;
            }
            else {
                return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);
            }
        };
        /**
         * Only valid to call if hasStart() returns true
         * @return {*}
         */
        QueryParams.prototype.getIndexStartValue = function () {
            assert$1(this.startSet_, 'Only valid if start has been set');
            return this.indexStartValue_;
        };
        /**
         * Only valid to call if hasStart() returns true.
         * Returns the starting key name for the range defined by these query parameters
         * @return {!string}
         */
        QueryParams.prototype.getIndexStartName = function () {
            assert$1(this.startSet_, 'Only valid if start has been set');
            if (this.startNameSet_) {
                return this.indexStartName_;
            }
            else {
                return MIN_NAME;
            }
        };
        /**
         * @return {boolean}
         */
        QueryParams.prototype.hasEnd = function () {
            return this.endSet_;
        };
        /**
         * Only valid to call if hasEnd() returns true.
         * @return {*}
         */
        QueryParams.prototype.getIndexEndValue = function () {
            assert$1(this.endSet_, 'Only valid if end has been set');
            return this.indexEndValue_;
        };
        /**
         * Only valid to call if hasEnd() returns true.
         * Returns the end key name for the range defined by these query parameters
         * @return {!string}
         */
        QueryParams.prototype.getIndexEndName = function () {
            assert$1(this.endSet_, 'Only valid if end has been set');
            if (this.endNameSet_) {
                return this.indexEndName_;
            }
            else {
                return MAX_NAME;
            }
        };
        /**
         * @return {boolean}
         */
        QueryParams.prototype.hasLimit = function () {
            return this.limitSet_;
        };
        /**
         * @return {boolean} True if a limit has been set and it has been explicitly anchored
         */
        QueryParams.prototype.hasAnchoredLimit = function () {
            return this.limitSet_ && this.viewFrom_ !== '';
        };
        /**
         * Only valid to call if hasLimit() returns true
         * @return {!number}
         */
        QueryParams.prototype.getLimit = function () {
            assert$1(this.limitSet_, 'Only valid if limit has been set');
            return this.limit_;
        };
        /**
         * @return {!Index}
         */
        QueryParams.prototype.getIndex = function () {
            return this.index_;
        };
        /**
         * @return {!QueryParams}
         * @private
         */
        QueryParams.prototype.copy_ = function () {
            var copy = new QueryParams();
            copy.limitSet_ = this.limitSet_;
            copy.limit_ = this.limit_;
            copy.startSet_ = this.startSet_;
            copy.indexStartValue_ = this.indexStartValue_;
            copy.startNameSet_ = this.startNameSet_;
            copy.indexStartName_ = this.indexStartName_;
            copy.endSet_ = this.endSet_;
            copy.indexEndValue_ = this.indexEndValue_;
            copy.endNameSet_ = this.endNameSet_;
            copy.indexEndName_ = this.indexEndName_;
            copy.index_ = this.index_;
            copy.viewFrom_ = this.viewFrom_;
            return copy;
        };
        /**
         * @param {!number} newLimit
         * @return {!QueryParams}
         */
        QueryParams.prototype.limit = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = '';
            return newParams;
        };
        /**
         * @param {!number} newLimit
         * @return {!QueryParams}
         */
        QueryParams.prototype.limitToFirst = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
            return newParams;
        };
        /**
         * @param {!number} newLimit
         * @return {!QueryParams}
         */
        QueryParams.prototype.limitToLast = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
            return newParams;
        };
        /**
         * @param {*} indexValue
         * @param {?string=} key
         * @return {!QueryParams}
         */
        QueryParams.prototype.startAt = function (indexValue, key) {
            var newParams = this.copy_();
            newParams.startSet_ = true;
            if (indexValue === undefined) {
                indexValue = null;
            }
            newParams.indexStartValue_ = indexValue;
            if (key != null) {
                newParams.startNameSet_ = true;
                newParams.indexStartName_ = key;
            }
            else {
                newParams.startNameSet_ = false;
                newParams.indexStartName_ = '';
            }
            return newParams;
        };
        QueryParams.prototype.startAfter = function (indexValue, key) {
            var params;
            if (this.index_ === KEY_INDEX) {
                if (typeof indexValue === 'string') {
                    indexValue = successor(indexValue);
                }
                params = this.startAt(indexValue, key);
            }
            else {
                var childKey = void 0;
                if (key == null) {
                    childKey = MAX_NAME;
                }
                else {
                    childKey = successor(key);
                }
                params = this.startAt(indexValue, childKey);
            }
            params.startAfterSet_ = true;
            return params;
        };
        /**
         * @param {*} indexValue
         * @param {?string=} key
         * @return {!QueryParams}
         */
        QueryParams.prototype.endAt = function (indexValue, key) {
            var newParams = this.copy_();
            newParams.endSet_ = true;
            if (indexValue === undefined) {
                indexValue = null;
            }
            newParams.indexEndValue_ = indexValue;
            if (key !== undefined) {
                newParams.endNameSet_ = true;
                newParams.indexEndName_ = key;
            }
            else {
                newParams.endNameSet_ = false;
                newParams.indexEndName_ = '';
            }
            return newParams;
        };
        QueryParams.prototype.endBefore = function (indexValue, key) {
            var childKey;
            var params;
            if (this.index_ === KEY_INDEX) {
                if (typeof indexValue === 'string') {
                    indexValue = predecessor(indexValue);
                }
                params = this.endAt(indexValue, key);
            }
            else {
                if (key == null) {
                    childKey = MIN_NAME;
                }
                else {
                    childKey = predecessor(key);
                }
                params = this.endAt(indexValue, childKey);
            }
            params.endBeforeSet_ = true;
            return params;
        };
        /**
         * @param {!Index} index
         * @return {!QueryParams}
         */
        QueryParams.prototype.orderBy = function (index) {
            var newParams = this.copy_();
            newParams.index_ = index;
            return newParams;
        };
        /**
         * @return {!Object}
         */
        QueryParams.prototype.getQueryObject = function () {
            var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
            var obj = {};
            if (this.startSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
                if (this.startNameSet_) {
                    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
                }
            }
            if (this.endSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
                if (this.endNameSet_) {
                    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
                }
            }
            if (this.limitSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
                var viewFrom = this.viewFrom_;
                if (viewFrom === '') {
                    if (this.isViewFromLeft()) {
                        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
                    }
                    else {
                        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
                    }
                }
                obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
            }
            // For now, priority index is the default, so we only specify if it's some other index
            if (this.index_ !== PRIORITY_INDEX) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
            }
            return obj;
        };
        /**
         * @return {boolean}
         */
        QueryParams.prototype.loadsAllData = function () {
            return !(this.startSet_ || this.endSet_ || this.limitSet_);
        };
        /**
         * @return {boolean}
         */
        QueryParams.prototype.isDefault = function () {
            return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
        };
        /**
         * @return {!NodeFilter}
         */
        QueryParams.prototype.getNodeFilter = function () {
            if (this.loadsAllData()) {
                return new IndexedFilter(this.getIndex());
            }
            else if (this.hasLimit()) {
                return new LimitedFilter(this);
            }
            else {
                return new RangedFilter(this);
            }
        };
        /**
         * Returns a set of REST query string parameters representing this query.
         *
         * @return {!Object.<string,*>} query string parameters
         */
        QueryParams.prototype.toRestQueryStringParameters = function () {
            var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
            var qs = {};
            if (this.isDefault()) {
                return qs;
            }
            var orderBy;
            if (this.index_ === PRIORITY_INDEX) {
                orderBy = REST_CONSTANTS.PRIORITY_INDEX;
            }
            else if (this.index_ === VALUE_INDEX) {
                orderBy = REST_CONSTANTS.VALUE_INDEX;
            }
            else if (this.index_ === KEY_INDEX) {
                orderBy = REST_CONSTANTS.KEY_INDEX;
            }
            else {
                assert$1(this.index_ instanceof PathIndex, 'Unrecognized index type!');
                orderBy = this.index_.toString();
            }
            qs[REST_CONSTANTS.ORDER_BY] = stringify$1(orderBy);
            if (this.startSet_) {
                qs[REST_CONSTANTS.START_AT] = stringify$1(this.indexStartValue_);
                if (this.startNameSet_) {
                    qs[REST_CONSTANTS.START_AT] += ',' + stringify$1(this.indexStartName_);
                }
            }
            if (this.endSet_) {
                qs[REST_CONSTANTS.END_AT] = stringify$1(this.indexEndValue_);
                if (this.endNameSet_) {
                    qs[REST_CONSTANTS.END_AT] += ',' + stringify$1(this.indexEndName_);
                }
            }
            if (this.limitSet_) {
                if (this.isViewFromLeft()) {
                    qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
                }
                else {
                    qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
                }
            }
            return qs;
        };
        /**
         * Wire Protocol Constants
         * @const
         * @enum {string}
         * @private
         */
        QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
            INDEX_START_VALUE: 'sp',
            INDEX_START_NAME: 'sn',
            INDEX_END_VALUE: 'ep',
            INDEX_END_NAME: 'en',
            LIMIT: 'l',
            VIEW_FROM: 'vf',
            VIEW_FROM_LEFT: 'l',
            VIEW_FROM_RIGHT: 'r',
            INDEX: 'i'
        };
        /**
         * REST Query Constants
         * @const
         * @enum {string}
         * @private
         */
        QueryParams.REST_QUERY_CONSTANTS_ = {
            ORDER_BY: 'orderBy',
            PRIORITY_INDEX: '$priority',
            VALUE_INDEX: '$value',
            KEY_INDEX: '$key',
            START_AT: 'startAt',
            END_AT: 'endAt',
            LIMIT_TO_FIRST: 'limitToFirst',
            LIMIT_TO_LAST: 'limitToLast'
        };
        /**
         * Default, empty query parameters
         * @type {!QueryParams}
         * @const
         */
        QueryParams.DEFAULT = new QueryParams();
        return QueryParams;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Reference = /** @class */ (function (_super) {
        __extends$1d(Reference, _super);
        /**
         * Call options:
         *   new Reference(Repo, Path) or
         *   new Reference(url: string, string|RepoManager)
         *
         * Externally - this is the firebase.database.Reference type.
         *
         * @param {!Repo} repo
         * @param {(!Path)} path
         * @extends {Query}
         */
        function Reference(repo, path) {
            var _this = this;
            if (!(repo instanceof Repo)) {
                throw new Error('new Reference() no longer supported - use app.database().');
            }
            // call Query's constructor, passing in the repo and path.
            _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;
            return _this;
        }
        /** @return {?string} */
        Reference.prototype.getKey = function () {
            validateArgCount('Reference.key', 0, 0, arguments.length);
            if (this.path.isEmpty()) {
                return null;
            }
            else {
                return this.path.getBack();
            }
        };
        /**
         * @param {!(string|Path)} pathString
         * @return {!Reference}
         */
        Reference.prototype.child = function (pathString) {
            validateArgCount('Reference.child', 1, 1, arguments.length);
            if (typeof pathString === 'number') {
                pathString = String(pathString);
            }
            else if (!(pathString instanceof Path)) {
                if (this.path.getFront() === null) {
                    validateRootPathString('Reference.child', 1, pathString, false);
                }
                else {
                    validatePathString('Reference.child', 1, pathString, false);
                }
            }
            return new Reference(this.repo, this.path.child(pathString));
        };
        /** @return {?Reference} */
        Reference.prototype.getParent = function () {
            validateArgCount('Reference.parent', 0, 0, arguments.length);
            var parentPath = this.path.parent();
            return parentPath === null ? null : new Reference(this.repo, parentPath);
        };
        /** @return {!Reference} */
        Reference.prototype.getRoot = function () {
            validateArgCount('Reference.root', 0, 0, arguments.length);
            var ref = this;
            while (ref.getParent() !== null) {
                ref = ref.getParent();
            }
            return ref;
        };
        /** @return {!Database} */
        Reference.prototype.databaseProp = function () {
            return this.repo.database;
        };
        /**
         * @param {*} newVal
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.set = function (newVal, onComplete) {
            validateArgCount('Reference.set', 1, 2, arguments.length);
            validateWritablePath('Reference.set', this.path);
            validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
            validateCallback('Reference.set', 2, onComplete, true);
            var deferred = new Deferred();
            this.repo.setWithPriority(this.path, newVal, 
            /*priority=*/ null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {!Object} objectToMerge
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.update = function (objectToMerge, onComplete) {
            validateArgCount('Reference.update', 1, 2, arguments.length);
            validateWritablePath('Reference.update', this.path);
            if (Array.isArray(objectToMerge)) {
                var newObjectToMerge = {};
                for (var i = 0; i < objectToMerge.length; ++i) {
                    newObjectToMerge['' + i] = objectToMerge[i];
                }
                objectToMerge = newObjectToMerge;
                warn('Passing an Array to Firebase.update() is deprecated. ' +
                    'Use set() if you want to overwrite the existing data, or ' +
                    'an Object with integer keys if you really do want to ' +
                    'only update some of the children.');
            }
            validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
            validateCallback('Reference.update', 2, onComplete, true);
            var deferred = new Deferred();
            this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {*} newVal
         * @param {string|number|null} newPriority
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
            validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
            validateWritablePath('Reference.setWithPriority', this.path);
            validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
            validatePriority('Reference.setWithPriority', 2, newPriority, false);
            validateCallback('Reference.setWithPriority', 3, onComplete, true);
            if (this.getKey() === '.length' || this.getKey() === '.keys') {
                throw ('Reference.setWithPriority failed: ' +
                    this.getKey() +
                    ' is a read-only object.');
            }
            var deferred = new Deferred();
            this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.remove = function (onComplete) {
            validateArgCount('Reference.remove', 0, 1, arguments.length);
            validateWritablePath('Reference.remove', this.path);
            validateCallback('Reference.remove', 1, onComplete, true);
            return this.set(null, onComplete);
        };
        /**
         * @param {function(*):*} transactionUpdate
         * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
         * @param {boolean=} applyLocally
         * @return {!Promise}
         */
        Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
            validateArgCount('Reference.transaction', 1, 3, arguments.length);
            validateWritablePath('Reference.transaction', this.path);
            validateCallback('Reference.transaction', 1, transactionUpdate, false);
            validateCallback('Reference.transaction', 2, onComplete, true);
            // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
            // to expose it.
            validateBoolean('Reference.transaction', 3, applyLocally, true);
            if (this.getKey() === '.length' || this.getKey() === '.keys') {
                throw ('Reference.transaction failed: ' +
                    this.getKey() +
                    ' is a read-only object.');
            }
            if (applyLocally === undefined) {
                applyLocally = true;
            }
            var deferred = new Deferred();
            if (typeof onComplete === 'function') {
                deferred.promise.catch(function () { });
            }
            var promiseComplete = function (error, committed, snapshot) {
                if (error) {
                    deferred.reject(error);
                }
                else {
                    deferred.resolve(new TransactionResult(committed, snapshot));
                }
                if (typeof onComplete === 'function') {
                    onComplete(error, committed, snapshot);
                }
            };
            this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
            return deferred.promise;
        };
        /**
         * @param {string|number|null} priority
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.setPriority = function (priority, onComplete) {
            validateArgCount('Reference.setPriority', 1, 2, arguments.length);
            validateWritablePath('Reference.setPriority', this.path);
            validatePriority('Reference.setPriority', 1, priority, false);
            validateCallback('Reference.setPriority', 2, onComplete, true);
            var deferred = new Deferred();
            this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {*=} value
         * @param {function(?Error)=} onComplete
         * @return {!Reference}
         */
        Reference.prototype.push = function (value, onComplete) {
            validateArgCount('Reference.push', 0, 2, arguments.length);
            validateWritablePath('Reference.push', this.path);
            validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
            validateCallback('Reference.push', 2, onComplete, true);
            var now = this.repo.serverTime();
            var name = nextPushId(now);
            // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
            // We use child() to create handles to two different references. The first is turned into a
            // ThennableReference below by adding then() and catch() methods and is used as the
            // return value of push(). The second remains a regular Reference and is used as the fulfilled
            // value of the first ThennableReference.
            var thennablePushRef = this.child(name);
            var pushRef = this.child(name);
            var promise;
            if (value != null) {
                promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });
            }
            else {
                promise = Promise.resolve(pushRef);
            }
            thennablePushRef.then = promise.then.bind(promise);
            thennablePushRef.catch = promise.then.bind(promise, undefined);
            if (typeof onComplete === 'function') {
                promise.catch(function () { });
            }
            return thennablePushRef;
        };
        /**
         * @return {!OnDisconnect}
         */
        Reference.prototype.onDisconnect = function () {
            validateWritablePath('Reference.onDisconnect', this.path);
            return new OnDisconnect(this.repo, this.path);
        };
        Object.defineProperty(Reference.prototype, "database", {
            get: function () {
                return this.databaseProp();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "key", {
            get: function () {
                return this.getKey();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "parent", {
            get: function () {
                return this.getParent();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "root", {
            get: function () {
                return this.getRoot();
            },
            enumerable: false,
            configurable: true
        });
        return Reference;
    }(Query));
    /**
     * Define reference constructor in various modules
     *
     * We are doing this here to avoid several circular
     * dependency issues
     */
    Query.__referenceConstructor = Reference;
    SyncPoint.__referenceConstructor = Reference;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Abstraction around FirebaseApp's token fetching capabilities.
     */
    var FirebaseAuthTokenProvider = /** @class */ (function () {
        function FirebaseAuthTokenProvider(app_, authProvider_) {
            var _this = this;
            this.app_ = app_;
            this.authProvider_ = authProvider_;
            this.auth_ = null;
            this.auth_ = authProvider_.getImmediate({ optional: true });
            if (!this.auth_) {
                authProvider_.get().then(function (auth) { return (_this.auth_ = auth); });
            }
        }
        /**
         * @param {boolean} forceRefresh
         * @return {!Promise<FirebaseAuthTokenData>}
         */
        FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {
            if (!this.auth_) {
                return Promise.resolve(null);
            }
            return this.auth_.getToken(forceRefresh).catch(function (error) {
                // TODO: Need to figure out all the cases this is raised and whether
                // this makes sense.
                if (error && error.code === 'auth/token-not-initialized') {
                    log('Got auth/token-not-initialized error.  Treating as null token.');
                    return null;
                }
                else {
                    return Promise.reject(error);
                }
            });
        };
        FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
            // TODO: We might want to wrap the listener and call it with no args to
            // avoid a leaky abstraction, but that makes removing the listener harder.
            if (this.auth_) {
                this.auth_.addAuthTokenListener(listener);
            }
            else {
                setTimeout(function () { return listener(null); }, 0);
                this.authProvider_
                    .get()
                    .then(function (auth) { return auth.addAuthTokenListener(listener); });
            }
        };
        FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
            this.authProvider_
                .get()
                .then(function (auth) { return auth.removeAuthTokenListener(listener); });
        };
        FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {
            var errorMessage = 'Provided authentication credentials for the app named "' +
                this.app_.name +
                '" are invalid. This usually indicates your app was not ' +
                'initialized correctly. ';
            if ('credential' in this.app_.options) {
                errorMessage +=
                    'Make sure the "credential" property provided to initializeApp() ' +
                        'is authorized to access the specified "databaseURL" and is from the correct ' +
                        'project.';
            }
            else if ('serviceAccount' in this.app_.options) {
                errorMessage +=
                    'Make sure the "serviceAccount" property provided to initializeApp() ' +
                        'is authorized to access the specified "databaseURL" and is from the correct ' +
                        'project.';
            }
            else {
                errorMessage +=
                    'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                        'initializeApp() match the values provided for your app at ' +
                        'https://console.firebase.google.com/.';
            }
            warn(errorMessage);
        };
        return FirebaseAuthTokenProvider;
    }());
    /* Auth token provider that the Admin SDK uses to connect to the Emulator. */
    var EmulatorAdminTokenProvider = /** @class */ (function () {
        function EmulatorAdminTokenProvider() {
        }
        EmulatorAdminTokenProvider.prototype.getToken = function (forceRefresh) {
            return Promise.resolve({
                accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN
            });
        };
        EmulatorAdminTokenProvider.prototype.addTokenChangeListener = function (listener) {
            // Invoke the listener immediately to match the behavior in Firebase Auth
            // (see packages/auth/src/auth.js#L1807)
            listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);
        };
        EmulatorAdminTokenProvider.prototype.removeTokenChangeListener = function (listener) { };
        EmulatorAdminTokenProvider.prototype.notifyForInvalidToken = function () { };
        EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN = 'owner';
        return EmulatorAdminTokenProvider;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This variable is also defined in the firebase node.js admin SDK. Before
     * modifying this definition, consult the definition in:
     *
     * https://github.com/firebase/firebase-admin-node
     *
     * and make sure the two are consistent.
     */
    var FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
    var _staticInstance;
    /**
     * Creates and caches Repo instances.
     */
    var RepoManager = /** @class */ (function () {
        function RepoManager() {
            /**
             * @private {!Object.<string, Object<string, !fb.core.Repo>>}
             */
            this.repos_ = {};
            /**
             * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
             * @private {boolean}
             */
            this.useRestClient_ = false;
        }
        RepoManager.getInstance = function () {
            if (!_staticInstance) {
                _staticInstance = new RepoManager();
            }
            return _staticInstance;
        };
        // TODO(koss): Remove these functions unless used in tests?
        RepoManager.prototype.interrupt = function () {
            var e_1, _a, e_2, _b;
            try {
                for (var _c = __values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var appName = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, __values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var dbUrl = _f.value;
                            this.repos_[appName][dbUrl].interrupt();
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        RepoManager.prototype.resume = function () {
            var e_3, _a, e_4, _b;
            try {
                for (var _c = __values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var appName = _d.value;
                    try {
                        for (var _e = (e_4 = void 0, __values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var dbUrl = _f.value;
                            this.repos_[appName][dbUrl].resume();
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        /**
         * Update an existing repo in place to point to a new host/port.
         */
        RepoManager.prototype.applyEmulatorSettings = function (repo, host, port) {
            repo.repoInfo_ = new RepoInfo(host + ":" + port, 
            /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);
            if (repo.repoInfo_.nodeAdmin) {
                repo.authTokenProvider_ = new EmulatorAdminTokenProvider();
            }
        };
        /**
         * This function should only ever be called to CREATE a new database instance.
         *
         * @param {!FirebaseApp} app
         * @return {!Database}
         */
        RepoManager.prototype.databaseFromApp = function (app, authProvider, url, nodeAdmin) {
            var dbUrl = url || app.options.databaseURL;
            if (dbUrl === undefined) {
                if (!app.options.projectId) {
                    fatal("Can't determine Firebase Database URL. Be sure to include " +
                        ' a Project ID when calling firebase.initializeApp().');
                }
                log('Using default host for project ', app.options.projectId);
                dbUrl = app.options.projectId + "-default-rtdb.firebaseio.com";
            }
            var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
            var repoInfo = parsedUrl.repoInfo;
            var isEmulator;
            var dbEmulatorHost = undefined;
            if (typeof process !== 'undefined') {
                dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
            }
            if (dbEmulatorHost) {
                isEmulator = true;
                dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
                parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
                repoInfo = parsedUrl.repoInfo;
            }
            else {
                isEmulator = !parsedUrl.repoInfo.secure;
            }
            var authTokenProvider = nodeAdmin && isEmulator
                ? new EmulatorAdminTokenProvider()
                : new FirebaseAuthTokenProvider(app, authProvider);
            validateUrl('Invalid Firebase Database URL', 1, parsedUrl);
            if (!parsedUrl.path.isEmpty()) {
                fatal('Database URL must point to the root of a Firebase Database ' +
                    '(not including a child path).');
            }
            var repo = this.createRepo(repoInfo, app, authTokenProvider);
            return repo.database;
        };
        /**
         * Remove the repo and make sure it is disconnected.
         *
         * @param {!Repo} repo
         */
        RepoManager.prototype.deleteRepo = function (repo) {
            var appRepos = safeGet(this.repos_, repo.app.name);
            // This should never happen...
            if (!appRepos || safeGet(appRepos, repo.key) !== repo) {
                fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
            }
            repo.interrupt();
            delete appRepos[repo.key];
        };
        /**
         * Ensures a repo doesn't already exist and then creates one using the
         * provided app.
         *
         * @param {!RepoInfo} repoInfo The metadata about the Repo
         * @param {!FirebaseApp} app
         * @return {!Repo} The Repo object for the specified server / repoName.
         */
        RepoManager.prototype.createRepo = function (repoInfo, app, authTokenProvider) {
            var appRepos = safeGet(this.repos_, app.name);
            if (!appRepos) {
                appRepos = {};
                this.repos_[app.name] = appRepos;
            }
            var repo = safeGet(appRepos, repoInfo.toURLString());
            if (repo) {
                fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
            }
            repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);
            appRepos[repoInfo.toURLString()] = repo;
            return repo;
        };
        /**
         * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
         * @param {boolean} forceRestClient
         */
        RepoManager.prototype.forceRestClient = function (forceRestClient) {
            this.useRestClient_ = forceRestClient;
        };
        return RepoManager;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Class representing a firebase database.
     * @implements {FirebaseService}
     */
    var Database = /** @class */ (function () {
        /**
         * The constructor should not be called by users of our public API.
         * @param {!Repo} repoInternal_
         */
        function Database(repoInternal_) {
            var _this = this;
            this.repoInternal_ = repoInternal_;
            /** Track if the instance has been used (root or repo accessed) */
            this.instanceStarted_ = false;
            this.INTERNAL = {
                delete: function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.checkDeleted_('delete');
                        RepoManager.getInstance().deleteRepo(this.repo_);
                        this.repoInternal_ = null;
                        this.rootInternal_ = null;
                        return [2 /*return*/];
                    });
                }); }
            };
            if (!(repoInternal_ instanceof Repo)) {
                fatal("Don't call new Database() directly - please use firebase.database().");
            }
        }
        Object.defineProperty(Database.prototype, "repo_", {
            get: function () {
                if (!this.instanceStarted_) {
                    this.repoInternal_.start();
                    this.instanceStarted_ = true;
                }
                return this.repoInternal_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Database.prototype, "root_", {
            get: function () {
                if (!this.rootInternal_) {
                    this.rootInternal_ = new Reference(this.repo_, Path.Empty);
                }
                return this.rootInternal_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Database.prototype, "app", {
            get: function () {
                return this.repo_.app;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Modify this instance to communicate with the Realtime Database emulator.
         *
         * <p>Note: This method must be called before performing any other operation.
         *
         * @param host the emulator host (ex: localhost)
         * @param port the emulator port (ex: 8080)
         */
        Database.prototype.useEmulator = function (host, port) {
            this.checkDeleted_('useEmulator');
            if (this.instanceStarted_) {
                fatal('Cannot call useEmulator() after instance has already been initialized.');
                return;
            }
            // Modify the repo to apply emulator settings
            RepoManager.getInstance().applyEmulatorSettings(this.repoInternal_, host, port);
        };
        Database.prototype.ref = function (path) {
            this.checkDeleted_('ref');
            validateArgCount('database.ref', 0, 1, arguments.length);
            if (path instanceof Reference) {
                return this.refFromURL(path.toString());
            }
            return path !== undefined ? this.root_.child(path) : this.root_;
        };
        /**
         * Returns a reference to the root or the path specified in url.
         * We throw a exception if the url is not in the same domain as the
         * current repo.
         * @param {string} url
         * @return {!Reference} Firebase reference.
         */
        Database.prototype.refFromURL = function (url) {
            /** @const {string} */
            var apiName = 'database.refFromURL';
            this.checkDeleted_(apiName);
            validateArgCount(apiName, 1, 1, arguments.length);
            var parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);
            validateUrl(apiName, 1, parsedURL);
            var repoInfo = parsedURL.repoInfo;
            if (!this.repo_.repoInfo_.isCustomHost() &&
                repoInfo.host !== this.repo_.repoInfo_.host) {
                fatal(apiName +
                    ': Host name does not match the current database: ' +
                    '(found ' +
                    repoInfo.host +
                    ' but expected ' +
                    this.repo_.repoInfo_.host +
                    ')');
            }
            return this.ref(parsedURL.path.toString());
        };
        /**
         * @param {string} apiName
         */
        Database.prototype.checkDeleted_ = function (apiName) {
            if (this.repoInternal_ === null) {
                fatal('Cannot call ' + apiName + ' on a deleted database.');
            }
        };
        // Make individual repo go offline.
        Database.prototype.goOffline = function () {
            validateArgCount('database.goOffline', 0, 0, arguments.length);
            this.checkDeleted_('goOffline');
            this.repo_.interrupt();
        };
        Database.prototype.goOnline = function () {
            validateArgCount('database.goOnline', 0, 0, arguments.length);
            this.checkDeleted_('goOnline');
            this.repo_.resume();
        };
        Database.ServerValue = {
            TIMESTAMP: {
                '.sv': 'timestamp'
            },
            increment: function (delta) {
                return {
                    '.sv': {
                        'increment': delta
                    }
                };
            }
        };
        return Database;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * INTERNAL methods for internal-use only (tests, etc.).
     *
     * Customers shouldn't use these or else should be aware that they could break at any time.
     *
     * @const
     */
    var forceLongPolling = function () {
        WebSocketConnection.forceDisallow();
        BrowserPollConnection.forceAllow();
    };
    var forceWebSockets = function () {
        BrowserPollConnection.forceDisallow();
    };
    /* Used by App Manager */
    var isWebSocketsAvailable = function () {
        return WebSocketConnection['isAvailable']();
    };
    var setSecurityDebugCallback = function (ref, callback) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ref.repo.persistentConnection_.securityDebugCallback_ = callback;
    };
    var stats = function (ref, showDelta) {
        ref.repo.stats(showDelta);
    };
    var statsIncrementCounter = function (ref, metric) {
        ref.repo.statsIncrementCounter(metric);
    };
    var dataUpdateCount = function (ref) {
        return ref.repo.dataUpdateCount;
    };
    var interceptServerData = function (ref, callback) {
        return ref.repo.interceptServerData_(callback);
    };
    /**
     * Used by console to create a database based on the app,
     * passed database URL and a custom auth implementation.
     *
     * @param app A valid FirebaseApp-like object
     * @param url A valid Firebase databaseURL
     * @param version custom version e.g. firebase-admin version
     * @param customAuthImpl custom auth implementation
     */
    function initStandalone(_a) {
        var app = _a.app, url = _a.url, version = _a.version, customAuthImpl = _a.customAuthImpl, namespace = _a.namespace, _b = _a.nodeAdmin, nodeAdmin = _b === void 0 ? false : _b;
        setSDKVersion(version);
        /**
         * ComponentContainer('database-standalone') is just a placeholder that doesn't perform
         * any actual function.
         */
        var authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));
        authProvider.setComponent(new Component('auth-internal', function () { return customAuthImpl; }, "PRIVATE" /* PRIVATE */));
        return {
            instance: RepoManager.getInstance().databaseFromApp(app, authProvider, url, nodeAdmin),
            namespace: namespace
        };
    }

    var INTERNAL = /*#__PURE__*/Object.freeze({
      __proto__: null,
      forceLongPolling: forceLongPolling,
      forceWebSockets: forceWebSockets,
      isWebSocketsAvailable: isWebSocketsAvailable,
      setSecurityDebugCallback: setSecurityDebugCallback,
      stats: stats,
      statsIncrementCounter: statsIncrementCounter,
      dataUpdateCount: dataUpdateCount,
      interceptServerData: interceptServerData,
      initStandalone: initStandalone
    });

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DataConnection = PersistentConnection;
    /**
     * @param {!string} pathString
     * @param {function(*)} onComplete
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
        this.sendRequest('q', { p: pathString }, onComplete);
    };
    /**
     * @param {*} data
     * @param {function(*)} onEcho
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PersistentConnection.prototype.echo = function (data, onEcho) {
        this.sendRequest('echo', { d: data }, onEcho);
    };
    // RealTimeConnection properties that we use in tests.
    var RealTimeConnection = Connection;
    /**
     * @param {function(): string} newHash
     * @return {function()}
     */
    var hijackHash = function (newHash) {
        var oldPut = PersistentConnection.prototype.put;
        PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
            if (hash !== undefined) {
                hash = newHash();
            }
            oldPut.call(this, pathString, data, onComplete, hash);
        };
        return function () {
            PersistentConnection.prototype.put = oldPut;
        };
    };
    /**
     * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
     */
    var ConnectionTarget = RepoInfo;
    /**
     * @param {!Query} query
     * @return {!string}
     */
    var queryIdentifier = function (query) {
        return query.queryIdentifier();
    };
    /**
     * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
     *
     * @param {boolean} forceRestClient
     */
    var forceRestClient = function (forceRestClient) {
        RepoManager.getInstance().forceRestClient(forceRestClient);
    };

    var TEST_ACCESS = /*#__PURE__*/Object.freeze({
      __proto__: null,
      DataConnection: DataConnection,
      RealTimeConnection: RealTimeConnection,
      hijackHash: hijackHash,
      ConnectionTarget: ConnectionTarget,
      queryIdentifier: queryIdentifier,
      forceRestClient: forceRestClient
    });

    var name$d = "@firebase/database";
    var version$2 = "0.9.2";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ServerValue = Database.ServerValue;
    function registerDatabase(instance) {
        // set SDK_VERSION
        setSDKVersion(instance.SDK_VERSION);
        // Register the Database Service with the 'firebase' namespace.
        instance.INTERNAL.registerComponent(new Component('database', function (container, url) {
            /* Dependencies */
            // getImmediate for FirebaseApp will always succeed
            var app = container.getProvider('app').getImmediate();
            var authProvider = container.getProvider('auth-internal');
            return RepoManager.getInstance().databaseFromApp(app, authProvider, url);
        }, "PUBLIC" /* PUBLIC */)
            .setServiceProps(
        // firebase.database namespace properties
        {
            Reference: Reference,
            Query: Query,
            Database: Database,
            DataSnapshot: DataSnapshot,
            enableLogging: enableLogging,
            INTERNAL: INTERNAL,
            ServerValue: ServerValue,
            TEST_ACCESS: TEST_ACCESS
        })
            .setMultipleInstances(true));
        instance.registerVersion(name$d, version$2);
    }
    registerDatabase(firebase$1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1e(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values$1(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var h, goog = goog || {}, k = commonjsGlobal$1 || self;
    function aa() { }
    function ba(a) { var b = typeof a; b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null"; return "array" == b || "object" == b && "number" == typeof a.length; }
    function n(a) { var b = typeof a; return "object" == b && null != a || "function" == b; }
    function ca(a) { return Object.prototype.hasOwnProperty.call(a, da) && a[da] || (a[da] = ++ea); }
    var da = "closure_uid_" + (1E9 * Math.random() >>> 0), ea = 0;
    function fa(a, b, c) { return a.call.apply(a.bind, arguments); }
    function ha(a, b, c) { if (!a)
        throw Error(); if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function () { var e = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(e, d); return a.apply(b, e); };
    } return function () { return a.apply(b, arguments); }; }
    function p(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? p = fa : p = ha; return p.apply(null, arguments); }
    function ja(a, b) { var c = Array.prototype.slice.call(arguments, 1); return function () { var d = c.slice(); d.push.apply(d, arguments); return a.apply(this, d); }; }
    function q() { return Date.now(); }
    function r(a, b) { function c() { } c.prototype = b.prototype; a.X = b.prototype; a.prototype = new c; a.prototype.constructor = a; a.Kb = function (d, e, f) { for (var g = Array(arguments.length - 2), m = 2; m < arguments.length; m++)
        g[m - 2] = arguments[m]; return b.prototype[e].apply(d, g); }; }
    function t() { this.j = this.j; this.i = this.i; }
    var ka = 0;
    t.prototype.j = !1;
    t.prototype.ja = function () { if (!this.j && (this.j = !0, this.G(), 0 != ka)) {
        ca(this);
    } };
    t.prototype.G = function () { if (this.i)
        for (; this.i.length;)
            this.i.shift()(); };
    var ma = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0); } : function (a, b) { if ("string" === typeof a)
        return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0); for (var c = 0; c < a.length; c++)
        if (c in a && a[c] === b)
            return c; return -1; }, na = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c); } : function (a, b, c) { for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)
        f in e && b.call(c, e[f], f, a); };
    function oa(a) { a: {
        var b = pa;
        for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
            if (e in d && b.call(void 0, d[e], e, a)) {
                b = e;
                break a;
            }
        b = -1;
    } return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b]; }
    function qa(a) { return Array.prototype.concat.apply([], arguments); }
    function ra(a) { var b = a.length; if (0 < b) {
        for (var c = Array(b), d = 0; d < b; d++)
            c[d] = a[d];
        return c;
    } return []; }
    function sa(a) { return /^[\s\xa0]*$/.test(a); }
    var ta = String.prototype.trim ? function (a) { return a.trim(); } : function (a) { return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]; };
    function v(a, b) { return -1 != a.indexOf(b); }
    function ua$1(a, b) { return a < b ? -1 : a > b ? 1 : 0; }
    var w;
    a: {
        var va = k.navigator;
        if (va) {
            var wa = va.userAgent;
            if (wa) {
                w = wa;
                break a;
            }
        }
        w = "";
    }
    function za(a, b, c) { for (var d in a)
        b.call(c, a[d], d, a); }
    function Aa(a) { var b = {}; for (var c in a)
        b[c] = a[c]; return b; }
    var Ba = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function Ca(a, b) { var c, d; for (var e = 1; e < arguments.length; e++) {
        d = arguments[e];
        for (c in d)
            a[c] = d[c];
        for (var f = 0; f < Ba.length; f++)
            c = Ba[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    } }
    function Da(a) { Da[" "](a); return a; }
    Da[" "] = aa;
    function Ea(a, b) { var c = Fa; return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a); }
    var Ga = v(w, "Opera"), x = v(w, "Trident") || v(w, "MSIE"), Ha = v(w, "Edge"), Ia = Ha || x, Ja = v(w, "Gecko") && !(v(w.toLowerCase(), "webkit") && !v(w, "Edge")) && !(v(w, "Trident") || v(w, "MSIE")) && !v(w, "Edge"), Ka = v(w.toLowerCase(), "webkit") && !v(w, "Edge");
    function La() { var a = k.document; return a ? a.documentMode : void 0; }
    var Ma;
    a: {
        var Na = "", Oa = function () { var a = w; if (Ja)
            return /rv:([^\);]+)(\)|;)/.exec(a); if (Ha)
            return /Edge\/([\d\.]+)/.exec(a); if (x)
            return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a); if (Ka)
            return /WebKit\/(\S+)/.exec(a); if (Ga)
            return /(?:Version)[ \/]?(\S+)/.exec(a); }();
        Oa && (Na = Oa ? Oa[1] : "");
        if (x) {
            var Pa = La();
            if (null != Pa && Pa > parseFloat(Na)) {
                Ma = String(Pa);
                break a;
            }
        }
        Ma = Na;
    }
    var Fa = {};
    function Qa(a) { return Ea(a, function () { {
        var b = 0;
        var e = ta(String(Ma)).split("."), f = ta(String(a)).split("."), g = Math.max(e.length, f.length);
        for (var m = 0; 0 == b && m < g; m++) {
            var c = e[m] || "", d = f[m] || "";
            do {
                c = /(\d*)(\D*)(.*)/.exec(c) || ["", "", "", ""];
                d = /(\d*)(\D*)(.*)/.exec(d) || ["", "", "", ""];
                if (0 == c[0].length && 0 == d[0].length)
                    break;
                b = ua$1(0 == c[1].length ? 0 : parseInt(c[1], 10), 0 == d[1].length ? 0 : parseInt(d[1], 10)) || ua$1(0 == c[2].length, 0 == d[2].length) || ua$1(c[2], d[2]);
                c = c[3];
                d = d[3];
            } while (0 == b);
        }
    } return 0 <= b; }); }
    var Ra;
    if (k.document && x) {
        var Sa = La();
        Ra = Sa ? Sa : parseInt(Ma, 10) || void 0;
    }
    else
        Ra = void 0;
    var Ta = Ra;
    var Ua = !x || 9 <= Number(Ta), Va = x && !Qa("9"), Wa = function () { if (!k.addEventListener || !Object.defineProperty)
        return !1; var a = !1, b = Object.defineProperty({}, "passive", { get: function () { a = !0; } }); try {
        k.addEventListener("test", aa, b), k.removeEventListener("test", aa, b);
    }
    catch (c) { } return a; }();
    function y(a, b) { this.type = a; this.a = this.target = b; this.defaultPrevented = !1; }
    y.prototype.b = function () { this.defaultPrevented = !0; };
    function z(a, b) {
        y.call(this, a ? a.type : "");
        this.relatedTarget = this.a = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
        this.pointerId = 0;
        this.pointerType = "";
        this.c = null;
        if (a) {
            var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
            this.target = a.target || a.srcElement;
            this.a = b;
            if (b = a.relatedTarget) {
                if (Ja) {
                    a: {
                        try {
                            Da(b.nodeName);
                            var e = !0;
                            break a;
                        }
                        catch (f) { }
                        e = !1;
                    }
                    e || (b = null);
                }
            }
            else
                "mouseover" ==
                    c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
            this.relatedTarget = b;
            d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
            this.button = a.button;
            this.key = a.key || "";
            this.ctrlKey = a.ctrlKey;
            this.altKey = a.altKey;
            this.shiftKey = a.shiftKey;
            this.metaKey =
                a.metaKey;
            this.pointerId = a.pointerId || 0;
            this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Xa[a.pointerType] || "";
            this.c = a;
            a.defaultPrevented && this.b();
        }
    }
    r(z, y);
    var Xa = { 2: "touch", 3: "pen", 4: "mouse" };
    z.prototype.b = function () { z.X.b.call(this); var a = this.c; if (a.preventDefault)
        a.preventDefault();
    else if (a.returnValue = !1, Va)
        try {
            if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
                a.keyCode = -1;
        }
        catch (b) { } };
    var A = "closure_listenable_" + (1E6 * Math.random() | 0), Ya = 0;
    function Za(a, b, c, d, e) { this.listener = a; this.proxy = null; this.src = b; this.type = c; this.capture = !!d; this.ca = e; this.key = ++Ya; this.Y = this.Z = !1; }
    function $a(a) { a.Y = !0; a.listener = null; a.proxy = null; a.src = null; a.ca = null; }
    function ab(a) { this.src = a; this.a = {}; this.b = 0; }
    ab.prototype.add = function (a, b, c, d, e) { var f = a.toString(); a = this.a[f]; a || (a = this.a[f] = [], this.b++); var g = bb(a, b, d, e); -1 < g ? (b = a[g], c || (b.Z = !1)) : (b = new Za(b, this.src, f, !!d, e), b.Z = c, a.push(b)); return b; };
    function cb(a, b) { var c = b.type; if (c in a.a) {
        var d = a.a[c], e = ma(d, b), f;
        (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
        f && ($a(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    } }
    function bb(a, b, c, d) { for (var e = 0; e < a.length; ++e) {
        var f = a[e];
        if (!f.Y && f.listener == b && f.capture == !!c && f.ca == d)
            return e;
    } return -1; }
    var db = "closure_lm_" + (1E6 * Math.random() | 0), eb = {};
    function gb(a, b, c, d, e) { if (d && d.once)
        return hb(a, b, c, d, e); if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            gb(a, b[f], c, d, e);
        return null;
    } c = ib(c); return a && a[A] ? a.va(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, !1, d, e); }
    function jb(a, b, c, d, e, f) {
        if (!b)
            throw Error("Invalid event type");
        var g = n(e) ? !!e.capture : !!e;
        if (g && !Ua)
            return null;
        var m = kb(a);
        m || (a[db] = m = new ab(a));
        c = m.add(b, c, d, g, f);
        if (c.proxy)
            return c;
        d = lb();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener)
            Wa || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
        else if (a.attachEvent)
            a.attachEvent(mb(b.toString()), d);
        else if (a.addListener && a.removeListener)
            a.addListener(d);
        else
            throw Error("addEventListener and attachEvent are unavailable.");
        return c;
    }
    function lb() { var a = nb, b = Ua ? function (c) { return a.call(b.src, b.listener, c); } : function (c) { c = a.call(b.src, b.listener, c); if (!c)
        return c; }; return b; }
    function hb(a, b, c, d, e) { if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            hb(a, b[f], c, d, e);
        return null;
    } c = ib(c); return a && a[A] ? a.wa(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, !0, d, e); }
    function ob(a, b, c, d, e) { if (Array.isArray(b))
        for (var f = 0; f < b.length; f++)
            ob(a, b[f], c, d, e);
    else
        (d = n(d) ? !!d.capture : !!d, c = ib(c), a && a[A]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = bb(f, c, d, e), -1 < c && ($a(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = kb(a)) && (b = a.a[b.toString()], a = -1, b && (a = bb(b, c, d, e)), (c = -1 < a ? b[a] : null) && pb(c)); }
    function pb(a) { if ("number" !== typeof a && a && !a.Y) {
        var b = a.src;
        if (b && b[A])
            cb(b.c, a);
        else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(mb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            (c = kb(b)) ? (cb(c, a), 0 == c.b && (c.src = null, b[db] = null)) : $a(a);
        }
    } }
    function mb(a) { return a in eb ? eb[a] : eb[a] = "on" + a; }
    function qb(a, b) { var c = a.listener, d = a.ca || a.src; a.Z && pb(a); return c.call(d, b); }
    function nb(a, b) { if (a.Y)
        return !0; if (!Ua) {
        if (!b)
            a: {
                b = ["window", "event"];
                for (var c = k, d = 0; d < b.length; d++)
                    if (c = c[b[d]], null == c) {
                        b = null;
                        break a;
                    }
                b = c;
            }
        b = new z(b, this);
        return qb(a, b);
    } return qb(a, new z(b, this)); }
    function kb(a) { a = a[db]; return a instanceof ab ? a : null; }
    var sb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
    function ib(a) { if ("function" === typeof a)
        return a; a[sb] || (a[sb] = function (b) { return a.handleEvent(b); }); return a[sb]; }
    function D() { t.call(this); this.c = new ab(this); this.J = this; this.C = null; }
    r(D, t);
    D.prototype[A] = !0;
    h = D.prototype;
    h.addEventListener = function (a, b, c, d) { gb(this, a, b, c, d); };
    h.removeEventListener = function (a, b, c, d) { ob(this, a, b, c, d); };
    function E(a, b) { var c, d = a.C; if (d)
        for (c = []; d; d = d.C)
            c.push(d); a = a.J; d = b.type || b; if ("string" === typeof b)
        b = new y(b, a);
    else if (b instanceof y)
        b.target = b.target || a;
    else {
        var e = b;
        b = new y(d, a);
        Ca(b, e);
    } e = !0; if (c)
        for (var f = c.length - 1; 0 <= f; f--) {
            var g = b.a = c[f];
            e = tb(g, d, !0, b) && e;
        } g = b.a = a; e = tb(g, d, !0, b) && e; e = tb(g, d, !1, b) && e; if (c)
        for (f = 0; f < c.length; f++)
            g = b.a = c[f], e = tb(g, d, !1, b) && e; }
    h.G = function () { D.X.G.call(this); if (this.c) {
        var a = this.c, c;
        for (c in a.a) {
            for (var d = a.a[c], e = 0; e < d.length; e++)
                $a(d[e]);
            delete a.a[c];
            a.b--;
        }
    } this.C = null; };
    h.va = function (a, b, c, d) { return this.c.add(String(a), b, !1, c, d); };
    h.wa = function (a, b, c, d) { return this.c.add(String(a), b, !0, c, d); };
    function tb(a, b, c, d) { b = a.c.a[String(b)]; if (!b)
        return !0; b = b.concat(); for (var e = !0, f = 0; f < b.length; ++f) {
        var g = b[f];
        if (g && !g.Y && g.capture == c) {
            var m = g.listener, l = g.ca || g.src;
            g.Z && cb(a.c, g);
            e = !1 !== m.call(l, d) && e;
        }
    } return e && !d.defaultPrevented; }
    var ub = k.JSON.stringify;
    function vb() { this.b = this.a = null; }
    var xb = new /** @class */ (function () {
        function class_1(a, b) {
            this.c = a;
            this.f = b;
            this.b = 0;
            this.a = null;
        }
        class_1.prototype.get = function () { var a; 0 < this.b ? (this.b--, a = this.a, this.a = a.next, a.next = null) : a = this.c(); return a; };
        return class_1;
    }())(function () { return new wb; }, function (a) { a.reset(); });
    vb.prototype.add = function (a, b) { var c = xb.get(); c.set(a, b); this.b ? this.b.next = c : this.a = c; this.b = c; };
    function yb() { var a = zb, b = null; a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null); return b; }
    function wb() { this.next = this.b = this.a = null; }
    wb.prototype.set = function (a, b) { this.a = a; this.b = b; this.next = null; };
    wb.prototype.reset = function () { this.next = this.b = this.a = null; };
    function Ab(a) { k.setTimeout(function () { throw a; }, 0); }
    function Bb(a, b) { Cb || Db(); Eb || (Cb(), Eb = !0); zb.add(a, b); }
    var Cb;
    function Db() { var a = k.Promise.resolve(void 0); Cb = function () { a.then(Fb); }; }
    var Eb = !1, zb = new vb;
    function Fb() { for (var a; a = yb();) {
        try {
            a.a.call(a.b);
        }
        catch (c) {
            Ab(c);
        }
        var b = xb;
        b.f(a);
        100 > b.b && (b.b++, a.next = b.a, b.a = a);
    } Eb = !1; }
    function Gb(a, b) { D.call(this); this.b = a || 1; this.a = b || k; this.f = p(this.Za, this); this.g = q(); }
    r(Gb, D);
    h = Gb.prototype;
    h.aa = !1;
    h.M = null;
    h.Za = function () { if (this.aa) {
        var a = q() - this.g;
        0 < a && a < .8 * this.b ? this.M = this.a.setTimeout(this.f, this.b - a) : (this.M && (this.a.clearTimeout(this.M), this.M = null), E(this, "tick"), this.aa && (Hb(this), this.start()));
    } };
    h.start = function () { this.aa = !0; this.M || (this.M = this.a.setTimeout(this.f, this.b), this.g = q()); };
    function Hb(a) { a.aa = !1; a.M && (a.a.clearTimeout(a.M), a.M = null); }
    h.G = function () { Gb.X.G.call(this); Hb(this); delete this.a; };
    function Ib(a, b, c) { if ("function" === typeof a)
        c && (a = p(a, c));
    else if (a && "function" == typeof a.handleEvent)
        a = p(a.handleEvent, a);
    else
        throw Error("Invalid listener argument"); return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0); }
    function Jb(a) { a.a = Ib(function () { a.a = null; a.c && (a.c = !1, Jb(a)); }, a.h); var b = a.b; a.b = null; a.g.apply(null, b); }
    var Kb = /** @class */ (function (_super) {
        __extends$1e(Kb, _super);
        function Kb(a, b) {
            var _this = _super.call(this) || this;
            _this.g = a;
            _this.h = b;
            _this.b = null;
            _this.c = !1;
            _this.a = null;
            return _this;
        }
        Kb.prototype.f = function (a) { this.b = arguments; this.a ? this.c = !0 : Jb(this); };
        Kb.prototype.G = function () { _super.prototype.G.call(this); this.a && (k.clearTimeout(this.a), this.a = null, this.c = !1, this.b = null); };
        return Kb;
    }(t));
    function F(a) { t.call(this); this.b = a; this.a = {}; }
    r(F, t);
    var Lb = [];
    function Mb(a, b, c, d) { Array.isArray(c) || (c && (Lb[0] = c.toString()), c = Lb); for (var e = 0; e < c.length; e++) {
        var f = gb(b, c[e], d || a.handleEvent, !1, a.b || a);
        if (!f)
            break;
        a.a[f.key] = f;
    } }
    function Nb(a) { za(a.a, function (b, c) { this.a.hasOwnProperty(c) && pb(b); }, a); a.a = {}; }
    F.prototype.G = function () { F.X.G.call(this); Nb(this); };
    F.prototype.handleEvent = function () { throw Error("EventHandler.handleEvent not implemented"); };
    function Ob() { this.a = !0; }
    function Pb(a, b, c, d, e, f) { a.info(function () { if (a.a)
        if (f) {
            var g = "";
            for (var m = f.split("&"), l = 0; l < m.length; l++) {
                var u = m[l].split("=");
                if (1 < u.length) {
                    var C = u[0];
                    u = u[1];
                    var B = C.split("_");
                    g = 2 <= B.length && "type" == B[1] ? g + (C + "=" + u + "&") : g + (C + "=redacted&");
                }
            }
        }
        else
            g = null;
    else
        g = f; return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + g; }); }
    function Qb(a, b, c, d, e, f, g) { a.info(function () { return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + g; }); }
    function G(a, b, c, d) { a.info(function () { return "XMLHTTP TEXT (" + b + "): " + Rb(a, c) + (d ? " " + d : ""); }); }
    function Sb(a, b) { a.info(function () { return "TIMEOUT: " + b; }); }
    Ob.prototype.info = function () { };
    function Rb(a, b) { if (!a.a)
        return b; if (!b)
        return null; try {
        var c = JSON.parse(b);
        if (c)
            for (a = 0; a < c.length; a++)
                if (Array.isArray(c[a])) {
                    var d = c[a];
                    if (!(2 > d.length)) {
                        var e = d[1];
                        if (Array.isArray(e) && !(1 > e.length)) {
                            var f = e[0];
                            if ("noop" != f && "stop" != f && "close" != f)
                                for (var g = 1; g < e.length; g++)
                                    e[g] = "";
                        }
                    }
                }
        return ub(c);
    }
    catch (m) {
        return b;
    } }
    var H = {}, Tb = null;
    function Ub() { return Tb = Tb || new D; }
    H.Fa = "serverreachability";
    function Vb(a) { y.call(this, H.Fa, a); }
    r(Vb, y);
    function I(a) { var b = Ub(); E(b, new Vb(b, a)); }
    H.STAT_EVENT = "statevent";
    function Wb(a, b) { y.call(this, H.STAT_EVENT, a); this.stat = b; }
    r(Wb, y);
    function J(a) { var b = Ub(); E(b, new Wb(b, a)); }
    H.Ga = "timingevent";
    function Xb(a) { y.call(this, H.Ga, a); }
    r(Xb, y);
    function K(a, b) { if ("function" !== typeof a)
        throw Error("Fn must not be null and must be a function"); return k.setTimeout(function () { a(); }, b); }
    var Yb = { NO_ERROR: 0, $a: 1, nb: 2, mb: 3, hb: 4, lb: 5, ob: 6, Da: 7, TIMEOUT: 8, rb: 9 };
    var Zb = { fb: "complete", Bb: "success", Ea: "error", Da: "abort", tb: "ready", ub: "readystatechange", TIMEOUT: "timeout", pb: "incrementaldata", sb: "progress", ib: "downloadprogress", Jb: "uploadprogress" };
    function $b() { }
    $b.prototype.a = null;
    function ac(a) { var b; (b = a.a) || (b = a.a = {}); return b; }
    function bc() { }
    var L = { OPEN: "a", eb: "b", Ea: "c", qb: "d" };
    function cc() { y.call(this, "d"); }
    r(cc, y);
    function dc() { y.call(this, "c"); }
    r(dc, y);
    var ec;
    function fc() { }
    r(fc, $b);
    ec = new fc;
    function M(a, b, c, d) { this.g = a; this.c = b; this.f = c; this.S = d || 1; this.J = new F(this); this.P = gc; a = Ia ? 125 : void 0; this.R = new Gb(a); this.B = null; this.b = !1; this.j = this.l = this.i = this.H = this.u = this.T = this.o = null; this.s = []; this.a = null; this.D = 0; this.h = this.m = null; this.N = -1; this.A = !1; this.O = 0; this.F = null; this.V = this.C = this.U = this.I = !1; }
    var gc = 45E3, hc = {}, ic = {};
    h = M.prototype;
    h.setTimeout = function (a) { this.P = a; };
    function jc(a, b, c) { a.H = 1; a.i = kc(N(b)); a.j = c; a.I = !0; lc(a, null); }
    function lc(a, b) { a.u = q(); mc(a); a.l = N(a.i); var c = a.l, d = a.S; Array.isArray(d) || (d = [String(d)]); nc(c.b, "t", d); a.D = 0; a.a = oc(a.g, a.g.C ? b : null); 0 < a.O && (a.F = new Kb(p(a.Ca, a, a.a), a.O)); Mb(a.J, a.a, "readystatechange", a.Xa); b = a.B ? Aa(a.B) : {}; a.j ? (a.m || (a.m = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ba(a.l, a.m, a.j, b)) : (a.m = "GET", a.a.ba(a.l, a.m, null, b)); I(1); Pb(a.c, a.m, a.l, a.f, a.S, a.j); }
    h.Xa = function (a) { a = a.target; var b = this.F; b && 3 == O(a) ? b.f() : this.Ca(a); };
    h.Ca = function (a) {
        try {
            if (a == this.a)
                a: {
                    var b = O(this.a), c = this.a.ua(), d = this.a.W();
                    if (!(3 > b || 3 == b && !Ia && !this.a.$())) {
                        this.A || 4 != b || 7 == c || (8 == c || 0 >= d ? I(3) : I(2));
                        pc(this);
                        var e = this.a.W();
                        this.N = e;
                        var f = this.a.$();
                        this.b = 200 == e;
                        Qb(this.c, this.m, this.l, this.f, this.S, b, e);
                        if (this.b) {
                            if (this.U && !this.C) {
                                b: {
                                    if (this.a) {
                                        var g, m = this.a;
                                        if ((g = m.a ? m.a.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(g)) {
                                            var l = g;
                                            break b;
                                        }
                                    }
                                    l = null;
                                }
                                if (l)
                                    G(this.c, this.f, l, "Initial handshake response via X-HTTP-Initial-Response"),
                                        this.C = !0, qc(this, l);
                                else {
                                    this.b = !1;
                                    this.h = 3;
                                    J(12);
                                    P(this);
                                    rc(this);
                                    break a;
                                }
                            }
                            this.I ? (sc(this, b, f), Ia && this.b && 3 == b && (Mb(this.J, this.R, "tick", this.Wa), this.R.start())) : (G(this.c, this.f, f, null), qc(this, f));
                            4 == b && P(this);
                            this.b && !this.A && (4 == b ? uc(this.g, this) : (this.b = !1, mc(this)));
                        }
                        else
                            400 == e && 0 < f.indexOf("Unknown SID") ? (this.h = 3, J(12)) : (this.h = 0, J(13)), P(this), rc(this);
                    }
                }
        }
        catch (u) { }
        finally { }
    };
    function sc(a, b, c) { for (var d = !0; !a.A && a.D < c.length;) {
        var e = vc(a, c);
        if (e == ic) {
            4 == b && (a.h = 4, J(14), d = !1);
            G(a.c, a.f, null, "[Incomplete Response]");
            break;
        }
        else if (e == hc) {
            a.h = 4;
            J(15);
            G(a.c, a.f, c, "[Invalid Chunk]");
            d = !1;
            break;
        }
        else
            G(a.c, a.f, e, null), qc(a, e);
    } 4 == b && 0 == c.length && (a.h = 1, J(16), d = !1); a.b = a.b && d; d ? 0 < c.length && !a.V && (a.V = !0, b = a.g, b.a == a && b.U && !b.F && (b.c.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.F = !0, J(11))) : (G(a.c, a.f, c, "[Invalid Chunked Response]"), P(a), rc(a)); }
    h.Wa = function () { if (this.a) {
        var a = O(this.a), b = this.a.$();
        this.D < b.length && (pc(this), sc(this, a, b), this.b && 4 != a && mc(this));
    } };
    function vc(a, b) { var c = a.D, d = b.indexOf("\n", c); if (-1 == d)
        return ic; c = Number(b.substring(c, d)); if (isNaN(c))
        return hc; d += 1; if (d + c > b.length)
        return ic; b = b.substr(d, c); a.D = d + c; return b; }
    h.cancel = function () { this.A = !0; P(this); };
    function mc(a) { a.T = q() + a.P; yc(a, a.P); }
    function yc(a, b) { if (null != a.o)
        throw Error("WatchDog timer not null"); a.o = K(p(a.Va, a), b); }
    function pc(a) { a.o && (k.clearTimeout(a.o), a.o = null); }
    h.Va = function () { this.o = null; var a = q(); 0 <= a - this.T ? (Sb(this.c, this.l), 2 != this.H && (I(3), J(17)), P(this), this.h = 2, rc(this)) : yc(this, this.T - a); };
    function rc(a) { 0 == a.g.v || a.A || uc(a.g, a); }
    function P(a) { pc(a); var b = a.F; b && "function" == typeof b.ja && b.ja(); a.F = null; Hb(a.R); Nb(a.J); a.a && (b = a.a, a.a = null, b.abort(), b.ja()); }
    function qc(a, b) {
        try {
            var c = a.g;
            if (0 != c.v && (c.a == a || zc(c.b, a)))
                if (c.I = a.N, !a.C && zc(c.b, a) && 3 == c.v) {
                    try {
                        var d = c.ka.a.parse(b);
                    }
                    catch (tc) {
                        d = null;
                    }
                    if (Array.isArray(d) && 3 == d.length) {
                        var e = d;
                        if (0 == e[0])
                            a: {
                                if (!c.j) {
                                    if (c.a)
                                        if (c.a.u + 3E3 < a.u)
                                            Ac(c), Bc(c);
                                        else
                                            break a;
                                    Cc(c);
                                    J(18);
                                }
                            }
                        else
                            c.oa = e[1], 0 < c.oa - c.P && 37500 > e[2] && c.H && 0 == c.o && !c.m && (c.m = K(p(c.Sa, c), 6E3));
                        if (1 >= Dc(c.b) && c.ea) {
                            try {
                                c.ea();
                            }
                            catch (tc) { }
                            c.ea = void 0;
                        }
                    }
                    else
                        Q(c, 11);
                }
                else if ((a.C || c.a == a) && Ac(c), !sa(b))
                    for (b = d = c.ka.a.parse(b), d = 0; d < b.length; d++)
                        if (e =
                            b[d], c.P = e[0], e = e[1], 2 == c.v)
                            if ("c" == e[0]) {
                                c.J = e[1];
                                c.ga = e[2];
                                var f = e[3];
                                null != f && (c.ha = f, c.c.info("VER=" + c.ha));
                                var g = e[4];
                                null != g && (c.pa = g, c.c.info("SVER=" + c.pa));
                                var m = e[5];
                                if (null != m && "number" === typeof m && 0 < m) {
                                    var l = 1.5 * m;
                                    c.D = l;
                                    c.c.info("backChannelRequestTimeoutMs_=" + l);
                                }
                                l = c;
                                var u = a.a;
                                if (u) {
                                    var C = u.a ? u.a.getResponseHeader("X-Client-Wire-Protocol") : null;
                                    if (C) {
                                        var B = l.b;
                                        !B.a && (v(C, "spdy") || v(C, "quic") || v(C, "h2")) && (B.f = B.g, B.a = new Set, B.b && (Ec(B, B.b), B.b = null));
                                    }
                                    if (l.A) {
                                        var rb = u.a ? u.a.getResponseHeader("X-HTTP-Session-Id") :
                                            null;
                                        rb && (l.na = rb, R(l.B, l.A, rb));
                                    }
                                }
                                c.v = 3;
                                c.f && c.f.ta();
                                c.U && (c.N = q() - a.u, c.c.info("Handshake RTT: " + c.N + "ms"));
                                l = c;
                                var xa = a;
                                l.la = Fc(l, l.C ? l.ga : null, l.fa);
                                if (xa.C) {
                                    Gc(l.b, xa);
                                    var ya = xa, xc = l.D;
                                    xc && ya.setTimeout(xc);
                                    ya.o && (pc(ya), mc(ya));
                                    l.a = xa;
                                }
                                else
                                    Hc(l);
                                0 < c.g.length && Ic(c);
                            }
                            else
                                "stop" != e[0] && "close" != e[0] || Q(c, 7);
                        else
                            3 == c.v && ("stop" == e[0] || "close" == e[0] ? "stop" == e[0] ? Q(c, 7) : Jc(c) : "noop" != e[0] && c.f && c.f.sa(e), c.o = 0);
            I(4);
        }
        catch (tc) { }
    }
    function Kc(a) { if (a.K && "function" == typeof a.K)
        return a.K(); if ("string" === typeof a)
        return a.split(""); if (ba(a)) {
        for (var b = [], c = a.length, d = 0; d < c; d++)
            b.push(a[d]);
        return b;
    } b = []; c = 0; for (d in a)
        b[c++] = a[d]; return a = b; }
    function Lc(a, b) { if (a.forEach && "function" == typeof a.forEach)
        a.forEach(b, void 0);
    else if (ba(a) || "string" === typeof a)
        na(a, b, void 0);
    else {
        if (a.L && "function" == typeof a.L)
            var c = a.L();
        else if (a.K && "function" == typeof a.K)
            c = void 0;
        else if (ba(a) || "string" === typeof a) {
            c = [];
            for (var d = a.length, e = 0; e < d; e++)
                c.push(e);
        }
        else
            for (e in c = [], d = 0, a)
                c[d++] = e;
        d = Kc(a);
        e = d.length;
        for (var f = 0; f < e; f++)
            b.call(void 0, d[f], c && c[f], a);
    } }
    function S(a, b) { this.b = {}; this.a = []; this.c = 0; var c = arguments.length; if (1 < c) {
        if (c % 2)
            throw Error("Uneven number of arguments");
        for (var d = 0; d < c; d += 2)
            this.set(arguments[d], arguments[d + 1]);
    }
    else if (a)
        if (a instanceof S)
            for (c = a.L(), d = 0; d < c.length; d++)
                this.set(c[d], a.get(c[d]));
        else
            for (d in a)
                this.set(d, a[d]); }
    h = S.prototype;
    h.K = function () { Mc(this); for (var a = [], b = 0; b < this.a.length; b++)
        a.push(this.b[this.a[b]]); return a; };
    h.L = function () { Mc(this); return this.a.concat(); };
    function Mc(a) { if (a.c != a.a.length) {
        for (var b = 0, c = 0; b < a.a.length;) {
            var d = a.a[b];
            T(a.b, d) && (a.a[c++] = d);
            b++;
        }
        a.a.length = c;
    } if (a.c != a.a.length) {
        var e = {};
        for (c = b = 0; b < a.a.length;)
            d = a.a[b], T(e, d) || (a.a[c++] = d, e[d] = 1), b++;
        a.a.length = c;
    } }
    h.get = function (a, b) { return T(this.b, a) ? this.b[a] : b; };
    h.set = function (a, b) { T(this.b, a) || (this.c++, this.a.push(a)); this.b[a] = b; };
    h.forEach = function (a, b) { for (var c = this.L(), d = 0; d < c.length; d++) {
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
    } };
    function T(a, b) { return Object.prototype.hasOwnProperty.call(a, b); }
    var Nc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function Oc(a, b) { if (a) {
        a = a.split("&");
        for (var c = 0; c < a.length; c++) {
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
                var f = a[c].substring(0, d);
                e = a[c].substring(d + 1);
            }
            else
                f = a[c];
            b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
    } }
    function U(a, b) { this.c = this.j = this.f = ""; this.h = null; this.i = this.g = ""; this.a = !1; if (a instanceof U) {
        this.a = void 0 !== b ? b : a.a;
        Pc(this, a.f);
        this.j = a.j;
        Qc(this, a.c);
        Rc(this, a.h);
        this.g = a.g;
        b = a.b;
        var c = new Sc;
        c.c = b.c;
        b.a && (c.a = new S(b.a), c.b = b.b);
        Tc(this, c);
        this.i = a.i;
    }
    else
        a && (c = String(a).match(Nc)) ? (this.a = !!b, Pc(this, c[1] || "", !0), this.j = Uc(c[2] || ""), Qc(this, c[3] || "", !0), Rc(this, c[4]), this.g = Uc(c[5] || "", !0), Tc(this, c[6] || "", !0), this.i = Uc(c[7] || "")) : (this.a = !!b, this.b = new Sc(null, this.a)); }
    U.prototype.toString = function () { var a = [], b = this.f; b && a.push(Vc(b, Wc, !0), ":"); var c = this.c; if (c || "file" == b)
        a.push("//"), (b = this.j) && a.push(Vc(b, Wc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c)); if (c = this.g)
        this.c && "/" != c.charAt(0) && a.push("/"), a.push(Vc(c, "/" == c.charAt(0) ? Xc : Yc, !0)); (c = this.b.toString()) && a.push("?", c); (c = this.i) && a.push("#", Vc(c, Zc)); return a.join(""); };
    function N(a) { return new U(a); }
    function Pc(a, b, c) { a.f = c ? Uc(b, !0) : b; a.f && (a.f = a.f.replace(/:$/, "")); }
    function Qc(a, b, c) { a.c = c ? Uc(b, !0) : b; }
    function Rc(a, b) { if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b)
            throw Error("Bad port number " + b);
        a.h = b;
    }
    else
        a.h = null; }
    function Tc(a, b, c) { b instanceof Sc ? (a.b = b, $c(a.b, a.a)) : (c || (b = Vc(b, ad)), a.b = new Sc(b, a.a)); }
    function R(a, b, c) { a.b.set(b, c); }
    function kc(a) { R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ q()).toString(36)); return a; }
    function bd(a) { return a instanceof U ? N(a) : new U(a, void 0); }
    function cd(a, b, c, d) { var e = new U(null, void 0); a && Pc(e, a); b && Qc(e, b); c && Rc(e, c); d && (e.g = d); return e; }
    function Uc(a, b) { return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : ""; }
    function Vc(a, b, c) { return "string" === typeof a ? (a = encodeURI(a).replace(b, dd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null; }
    function dd(a) { a = a.charCodeAt(0); return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16); }
    var Wc = /[#\/\?@]/g, Yc = /[#\?:]/g, Xc = /[#\?]/g, ad = /[#\?@]/g, Zc = /#/g;
    function Sc(a, b) { this.b = this.a = null; this.c = a || null; this.f = !!b; }
    function V(a) { a.a || (a.a = new S, a.b = 0, a.c && Oc(a.c, function (b, c) { a.add(decodeURIComponent(b.replace(/\+/g, " ")), c); })); }
    h = Sc.prototype;
    h.add = function (a, b) { V(this); this.c = null; a = W(this, a); var c = this.a.get(a); c || this.a.set(a, c = []); c.push(b); this.b += 1; return this; };
    function ed(a, b) { V(a); b = W(a, b); T(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, T(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Mc(a))); }
    function fd(a, b) { V(a); b = W(a, b); return T(a.a.b, b); }
    h.forEach = function (a, b) { V(this); this.a.forEach(function (c, d) { na(c, function (e) { a.call(b, e, d, this); }, this); }, this); };
    h.L = function () { V(this); for (var a = this.a.K(), b = this.a.L(), c = [], d = 0; d < b.length; d++)
        for (var e = a[d], f = 0; f < e.length; f++)
            c.push(b[d]); return c; };
    h.K = function (a) { V(this); var b = []; if ("string" === typeof a)
        fd(this, a) && (b = qa(b, this.a.get(W(this, a))));
    else {
        a = this.a.K();
        for (var c = 0; c < a.length; c++)
            b = qa(b, a[c]);
    } return b; };
    h.set = function (a, b) { V(this); this.c = null; a = W(this, a); fd(this, a) && (this.b -= this.a.get(a).length); this.a.set(a, [b]); this.b += 1; return this; };
    h.get = function (a, b) { if (!a)
        return b; a = this.K(a); return 0 < a.length ? String(a[0]) : b; };
    function nc(a, b, c) { ed(a, b); 0 < c.length && (a.c = null, a.a.set(W(a, b), ra(c)), a.b += c.length); }
    h.toString = function () { if (this.c)
        return this.c; if (!this.a)
        return ""; for (var a = [], b = this.a.L(), c = 0; c < b.length; c++) {
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.K(d);
        for (var f = 0; f < d.length; f++) {
            var g = e;
            "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
            a.push(g);
        }
    } return this.c = a.join("&"); };
    function W(a, b) { b = String(b); a.f && (b = b.toLowerCase()); return b; }
    function $c(a, b) { b && !a.f && (V(a), a.c = null, a.a.forEach(function (c, d) { var e = d.toLowerCase(); d != e && (ed(this, d), nc(this, e, c)); }, a)); a.f = b; }
    var gd = /** @class */ (function () {
        function gd(a, b) {
            this.b = a;
            this.a = b;
        }
        return gd;
    }());
    function hd(a) { this.g = a || id; k.PerformanceNavigationTiming ? (a = k.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k.ia && k.ia.ya && k.ia.ya() && k.ia.ya().Lb); this.f = a ? this.g : 1; this.a = null; 1 < this.f && (this.a = new Set); this.b = null; this.c = []; }
    var id = 10;
    function jd(a) { return a.b ? !0 : a.a ? a.a.size >= a.f : !1; }
    function Dc(a) { return a.b ? 1 : a.a ? a.a.size : 0; }
    function zc(a, b) { return a.b ? a.b == b : a.a ? a.a.has(b) : !1; }
    function Ec(a, b) { a.a ? a.a.add(b) : a.b = b; }
    function Gc(a, b) { a.b && a.b == b ? a.b = null : a.a && a.a.has(b) && a.a.delete(b); }
    hd.prototype.cancel = function () {
        var e_1, _a;
        this.c = kd(this);
        if (this.b)
            this.b.cancel(), this.b = null;
        else if (this.a && 0 !== this.a.size) {
            try {
                for (var _b = __values$1(this.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    a.cancel();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.a.clear();
        }
    };
    function kd(a) {
        var e_2, _a;
        if (null != a.b)
            return a.c.concat(a.b.s);
        if (null != a.a && 0 !== a.a.size) {
            var b = a.c;
            try {
                for (var _b = __values$1(a.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    b = b.concat(c.s);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return b;
        }
        return ra(a.c);
    }
    function ld() { }
    ld.prototype.stringify = function (a) { return k.JSON.stringify(a, void 0); };
    ld.prototype.parse = function (a) { return k.JSON.parse(a, void 0); };
    function md() { this.a = new ld; }
    function nd(a, b, c) { var d = c || ""; try {
        Lc(a, function (e, f) { var g = e; n(e) && (g = ub(e)); b.push(d + f + "=" + encodeURIComponent(g)); });
    }
    catch (e) {
        throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    } }
    function od(a, b) { var c = new Ob; if (k.Image) {
        var d = new Image;
        d.onload = ja(pd, c, d, "TestLoadImage: loaded", !0, b);
        d.onerror = ja(pd, c, d, "TestLoadImage: error", !1, b);
        d.onabort = ja(pd, c, d, "TestLoadImage: abort", !1, b);
        d.ontimeout = ja(pd, c, d, "TestLoadImage: timeout", !1, b);
        k.setTimeout(function () { if (d.ontimeout)
            d.ontimeout(); }, 1E4);
        d.src = a;
    }
    else
        b(!1); }
    function pd(a, b, c, d, e) { try {
        b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    }
    catch (f) { } }
    var qd = k.JSON.parse;
    function X(a) { D.call(this); this.headers = new S; this.H = a || null; this.b = !1; this.s = this.a = null; this.B = ""; this.h = 0; this.f = ""; this.g = this.A = this.l = this.u = !1; this.o = 0; this.m = null; this.I = rd; this.D = this.F = !1; }
    r(X, D);
    var rd = "", sd = /^https?$/i, td = ["POST", "PUT"];
    h = X.prototype;
    h.ba = function (a, b, c, d) {
        if (this.a)
            throw Error("[goog.net.XhrIo] Object is active with another request=" + this.B + "; newUri=" + a);
        b = b ? b.toUpperCase() : "GET";
        this.B = a;
        this.f = "";
        this.h = 0;
        this.u = !1;
        this.b = !0;
        this.a = new XMLHttpRequest;
        this.s = this.H ? ac(this.H) : ac(ec);
        this.a.onreadystatechange = p(this.za, this);
        try {
            this.A = !0, this.a.open(b, String(a), !0), this.A = !1;
        }
        catch (f) {
            ud(this, f);
            return;
        }
        a = c || "";
        var e = new S(this.headers);
        d && Lc(d, function (f, g) { e.set(g, f); });
        d = oa(e.L());
        c = k.FormData && a instanceof k.FormData;
        !(0 <=
            ma(td, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        e.forEach(function (f, g) { this.a.setRequestHeader(g, f); }, this);
        this.I && (this.a.responseType = this.I);
        "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);
        try {
            vd(this), 0 < this.o && ((this.D = wd(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = p(this.xa, this)) : this.m = Ib(this.xa, this.o, this)), this.l = !0, this.a.send(a), this.l = !1;
        }
        catch (f) {
            ud(this, f);
        }
    };
    function wd(a) { return x && Qa(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout; }
    function pa(a) { return "content-type" == a.toLowerCase(); }
    h.xa = function () { "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, E(this, "timeout"), this.abort(8)); };
    function ud(a, b) { a.b = !1; a.a && (a.g = !0, a.a.abort(), a.g = !1); a.f = b; a.h = 5; xd(a); yd(a); }
    function xd(a) { a.u || (a.u = !0, E(a, "complete"), E(a, "error")); }
    h.abort = function (a) { this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, E(this, "complete"), E(this, "abort"), yd(this)); };
    h.G = function () { this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), yd(this, !0)); X.X.G.call(this); };
    h.za = function () { this.j || (this.A || this.l || this.g ? zd(this) : this.Ua()); };
    h.Ua = function () { zd(this); };
    function zd(a) {
        if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O(a) || 2 != a.W()))
            if (a.l && 4 == O(a))
                Ib(a.za, 0, a);
            else if (E(a, "readystatechange"), 4 == O(a)) {
                a.b = !1;
                try {
                    {
                        var l = a.W();
                        a: switch (l) {
                            case 200:
                            case 201:
                            case 202:
                            case 204:
                            case 206:
                            case 304:
                            case 1223:
                                var b = !0;
                                break a;
                            default: b = !1;
                        }
                        var c;
                        if (!(c = b)) {
                            var d;
                            if (d = 0 === l) {
                                var e = String(a.B).match(Nc)[1] || null;
                                if (!e && k.self && k.self.location) {
                                    var f = k.self.location.protocol;
                                    e = f.substr(0, f.length - 1);
                                }
                                d = !sd.test(e ? e.toLowerCase() : "");
                            }
                            c = d;
                        }
                        var g = c;
                    }
                    if (g)
                        E(a, "complete"),
                            E(a, "success");
                    else {
                        a.h = 6;
                        try {
                            var m = 2 < O(a) ? a.a.statusText : "";
                        }
                        catch (l) {
                            m = "";
                        }
                        a.f = m + " [" + a.W() + "]";
                        xd(a);
                    }
                }
                finally {
                    yd(a);
                }
            }
    }
    function yd(a, b) { if (a.a) {
        vd(a);
        var c = a.a, d = a.s[0] ? aa : null;
        a.a = null;
        a.s = null;
        b || E(a, "ready");
        try {
            c.onreadystatechange = d;
        }
        catch (e) { }
    } }
    function vd(a) { a.a && a.D && (a.a.ontimeout = null); a.m && (k.clearTimeout(a.m), a.m = null); }
    function O(a) { return a.a ? a.a.readyState : 0; }
    h.W = function () { try {
        return 2 < O(this) ? this.a.status : -1;
    }
    catch (a) {
        return -1;
    } };
    h.$ = function () { try {
        return this.a ? this.a.responseText : "";
    }
    catch (a) {
        return "";
    } };
    h.Pa = function (a) { if (this.a) {
        var b = this.a.responseText;
        a && 0 == b.indexOf(a) && (b = b.substring(a.length));
        return qd(b);
    } };
    h.ua = function () { return this.h; };
    h.Qa = function () { return "string" === typeof this.f ? this.f : String(this.f); };
    function Ad(a) { var b = ""; za(a, function (c, d) { b += d; b += ":"; b += c; b += "\r\n"; }); return b; }
    function Bd(a, b, c) { a: {
        for (d in c) {
            var d = !1;
            break a;
        }
        d = !0;
    } d || (c = Ad(c), "string" === typeof a ? (null != c && encodeURIComponent(String(c))) : R(a, b, c)); }
    function Cd(a, b, c) { return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b; }
    function Dd(a) {
        this.pa = 0;
        this.g = [];
        this.c = new Ob;
        this.ga = this.la = this.B = this.fa = this.a = this.na = this.A = this.V = this.i = this.O = this.l = null;
        this.Oa = this.R = 0;
        this.La = Cd("failFast", !1, a);
        this.H = this.m = this.j = this.h = this.f = null;
        this.S = !0;
        this.I = this.oa = this.P = -1;
        this.T = this.o = this.u = 0;
        this.Ha = Cd("baseRetryDelayMs", 5E3, a);
        this.Ra = Cd("retryDelaySeedMs", 1E4, a);
        this.Ma = Cd("forwardChannelMaxRetries", 2, a);
        this.ma = Cd("forwardChannelRequestTimeoutMs", 2E4, a);
        this.Na = a && a.g || void 0;
        this.D = void 0;
        this.C = a && a.supportsCrossDomainXhr ||
            !1;
        this.J = "";
        this.b = new hd(a && a.concurrentRequestLimit);
        this.ka = new md;
        this.da = a && a.fastHandshake || !1;
        this.Ia = a && a.b || !1;
        a && a.f && (this.c.a = !1);
        a && a.forceLongPolling && (this.S = !1);
        this.U = !this.da && this.S && a && a.detectBufferingProxy || !1;
        this.ea = void 0;
        this.N = 0;
        this.F = !1;
        this.s = null;
        (this.Ka = a && a.c || !1) && this.c.info("Opt-in to enable Chrome Origin Trials.");
    }
    h = Dd.prototype;
    h.ha = 8;
    h.v = 1;
    function Jc(a) { Ed(a); if (3 == a.v) {
        var b = a.R++, c = N(a.B);
        R(c, "SID", a.J);
        R(c, "RID", b);
        R(c, "TYPE", "terminate");
        Fd(a, c);
        b = new M(a, a.c, b, void 0);
        b.H = 2;
        b.i = kc(N(c));
        c = !1;
        k.navigator && k.navigator.sendBeacon && (c = k.navigator.sendBeacon(b.i.toString(), ""));
        !c && k.Image && ((new Image).src = b.i, c = !0);
        c || (b.a = oc(b.g, null), b.a.ba(b.i));
        b.u = q();
        mc(b);
    } Gd(a); }
    function Bc(a) { a.a && (wc(a), a.a.cancel(), a.a = null); }
    function Ed(a) { Bc(a); a.j && (k.clearTimeout(a.j), a.j = null); Ac(a); a.b.cancel(); a.h && ("number" === typeof a.h && k.clearTimeout(a.h), a.h = null); }
    function Hd(a, b) { a.g.push(new gd(a.Oa++, b)); 3 == a.v && Ic(a); }
    function Ic(a) { jd(a.b) || a.h || (a.h = !0, Bb(a.Ba, a), a.u = 0); }
    function Id(a, b) { if (Dc(a.b) >= a.b.f - (a.h ? 1 : 0))
        return !1; if (a.h)
        return a.g = b.s.concat(a.g), !0; if (1 == a.v || 2 == a.v || a.u >= (a.La ? 0 : a.Ma))
        return !1; a.h = K(p(a.Ba, a, b), Jd(a, a.u)); a.u++; return !0; }
    h.Ba = function (a) {
        if (this.h)
            if (this.h = null, 1 == this.v) {
                if (!a) {
                    this.R = Math.floor(1E5 * Math.random());
                    a = this.R++;
                    var b = new M(this, this.c, a, void 0), c = this.l;
                    this.O && (c ? (c = Aa(c), Ca(c, this.O)) : c = this.O);
                    null === this.i && (b.B = c);
                    var d;
                    if (this.da)
                        a: {
                            for (var e = d = 0; e < this.g.length; e++) {
                                b: {
                                    var f = this.g[e];
                                    if ("__data__" in f.a && (f = f.a.__data__, "string" === typeof f)) {
                                        f = f.length;
                                        break b;
                                    }
                                    f = void 0;
                                }
                                if (void 0 === f)
                                    break;
                                d += f;
                                if (4096 < d) {
                                    d = e;
                                    break a;
                                }
                                if (4096 === d || e === this.g.length - 1) {
                                    d = e + 1;
                                    break a;
                                }
                            }
                            d = 1E3;
                        }
                    else
                        d = 1E3;
                    d = Kd(this, b, d);
                    e = N(this.B);
                    R(e, "RID", a);
                    R(e, "CVER", 22);
                    this.A && R(e, "X-HTTP-Session-Id", this.A);
                    Fd(this, e);
                    this.i && c && Bd(e, this.i, c);
                    Ec(this.b, b);
                    this.Ia && R(e, "TYPE", "init");
                    this.da ? (R(e, "$req", d), R(e, "SID", "null"), b.U = !0, jc(b, e, null)) : jc(b, e, d);
                    this.v = 2;
                }
            }
            else
                3 == this.v && (a ? Ld(this, a) : 0 == this.g.length || jd(this.b) || Ld(this));
    };
    function Ld(a, b) { var c; b ? c = b.f : c = a.R++; var d = N(a.B); R(d, "SID", a.J); R(d, "RID", c); R(d, "AID", a.P); Fd(a, d); a.i && a.l && Bd(d, a.i, a.l); c = new M(a, a.c, c, a.u + 1); null === a.i && (c.B = a.l); b && (a.g = b.s.concat(a.g)); b = Kd(a, c, 1E3); c.setTimeout(Math.round(.5 * a.ma) + Math.round(.5 * a.ma * Math.random())); Ec(a.b, c); jc(c, d, b); }
    function Fd(a, b) { a.f && Lc({}, function (c, d) { R(b, d, c); }); }
    function Kd(a, b, c) { c = Math.min(a.g.length, c); var d = a.f ? p(a.f.Ja, a.f, a) : null; a: for (var e = a.g, f = -1;;) {
        var g = ["count=" + c];
        -1 == f ? 0 < c ? (f = e[0].b, g.push("ofs=" + f)) : f = 0 : g.push("ofs=" + f);
        for (var m = !0, l = 0; l < c; l++) {
            var u = e[l].b, C = e[l].a;
            u -= f;
            if (0 > u)
                f = Math.max(0, e[l].b - 100), m = !1;
            else
                try {
                    nd(C, g, "req" + u + "_");
                }
                catch (B) {
                    d && d(C);
                }
        }
        if (m) {
            d = g.join("&");
            break a;
        }
    } a = a.g.splice(0, c); b.s = a; return d; }
    function Hc(a) { a.a || a.j || (a.T = 1, Bb(a.Aa, a), a.o = 0); }
    function Cc(a) { if (a.a || a.j || 3 <= a.o)
        return !1; a.T++; a.j = K(p(a.Aa, a), Jd(a, a.o)); a.o++; return !0; }
    h.Aa = function () { this.j = null; Md(this); if (this.U && !(this.F || null == this.a || 0 >= this.N)) {
        var a = 2 * this.N;
        this.c.info("BP detection timer enabled: " + a);
        this.s = K(p(this.Ta, this), a);
    } };
    h.Ta = function () { this.s && (this.s = null, this.c.info("BP detection timeout reached."), this.c.info("Buffering proxy detected and switch to long-polling!"), this.H = !1, this.F = !0, J(10), Bc(this), Md(this)); };
    function wc(a) { null != a.s && (k.clearTimeout(a.s), a.s = null); }
    function Md(a) { a.a = new M(a, a.c, "rpc", a.T); null === a.i && (a.a.B = a.l); a.a.O = 0; var b = N(a.la); R(b, "RID", "rpc"); R(b, "SID", a.J); R(b, "CI", a.H ? "0" : "1"); R(b, "AID", a.P); Fd(a, b); R(b, "TYPE", "xmlhttp"); a.i && a.l && Bd(b, a.i, a.l); a.D && a.a.setTimeout(a.D); var c = a.a; a = a.ga; c.H = 1; c.i = kc(N(b)); c.j = null; c.I = !0; lc(c, a); }
    h.Sa = function () { null != this.m && (this.m = null, Bc(this), Cc(this), J(19)); };
    function Ac(a) { null != a.m && (k.clearTimeout(a.m), a.m = null); }
    function uc(a, b) { var c = null; if (a.a == b) {
        Ac(a);
        wc(a);
        a.a = null;
        var d = 2;
    }
    else if (zc(a.b, b))
        c = b.s, Gc(a.b, b), d = 1;
    else
        return; a.I = b.N; if (0 != a.v)
        if (b.b)
            if (1 == d) {
                c = b.j ? b.j.length : 0;
                b = q() - b.u;
                var e = a.u;
                d = Ub();
                E(d, new Xb(d, c, b, e));
                Ic(a);
            }
            else
                Hc(a);
        else if (e = b.h, 3 == e || 0 == e && 0 < a.I || !(1 == d && Id(a, b) || 2 == d && Cc(a)))
            switch (c && 0 < c.length && (b = a.b, b.c = b.c.concat(c)), e) {
                case 1:
                    Q(a, 5);
                    break;
                case 4:
                    Q(a, 10);
                    break;
                case 3:
                    Q(a, 6);
                    break;
                default: Q(a, 2);
            } }
    function Jd(a, b) { var c = a.Ha + Math.floor(Math.random() * a.Ra); a.f || (c *= 2); return c * b; }
    function Q(a, b) { a.c.info("Error code " + b); if (2 == b) {
        var c = null;
        a.f && (c = null);
        var d = p(a.Ya, a);
        c || (c = new U("//www.google.com/images/cleardot.gif"), k.location && "http" == k.location.protocol || Pc(c, "https"), kc(c));
        od(c.toString(), d);
    }
    else
        J(2); a.v = 0; a.f && a.f.ra(b); Gd(a); Ed(a); }
    h.Ya = function (a) { a ? (this.c.info("Successfully pinged google.com"), J(2)) : (this.c.info("Failed to ping google.com"), J(1)); };
    function Gd(a) { a.v = 0; a.I = -1; if (a.f) {
        if (0 != kd(a.b).length || 0 != a.g.length)
            a.b.c.length = 0, ra(a.g), a.g.length = 0;
        a.f.qa();
    } }
    function Fc(a, b, c) { var d = bd(c); if ("" != d.c)
        b && Qc(d, b + "." + d.c), Rc(d, d.h);
    else {
        var e = k.location;
        d = cd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    } a.V && za(a.V, function (f, g) { R(d, g, f); }); b = a.A; c = a.na; b && c && R(d, b, c); R(d, "VER", a.ha); Fd(a, d); return d; }
    function oc(a, b) { if (b && !a.C)
        throw Error("Can't create secondary domain capable XhrIo object."); b = new X(a.Na); b.F = a.C; return b; }
    function Nd() { }
    h = Nd.prototype;
    h.ta = function () { };
    h.sa = function () { };
    h.ra = function () { };
    h.qa = function () { };
    h.Ja = function () { };
    function Od() { if (x && !(10 <= Number(Ta)))
        throw Error("Environmental error: no available transport."); }
    Od.prototype.a = function (a, b) { return new Y(a, b); };
    function Y(a, b) {
        D.call(this);
        this.a = new Dd(b);
        this.o = a;
        this.b = b && b.messageUrlParams || null;
        a = b && b.messageHeaders || null;
        b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
        this.a.l = a;
        a = b && b.initMessageHeaders || null;
        b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
        b && b.a && (a ? a["X-WebChannel-Client-Profile"] = b.a : a = { "X-WebChannel-Client-Profile": b.a });
        this.a.O =
            a;
        (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.a.i = a);
        this.m = b && b.supportsCrossDomainXhr || !1;
        this.l = b && b.sendRawJson || !1;
        (b = b && b.httpSessionIdParam) && !sa(b) && (this.a.A = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
        this.f = new Z(this);
    }
    r(Y, D);
    Y.prototype.g = function () { this.a.f = this.f; this.m && (this.a.C = !0); var a = this.a, b = this.o, c = this.b || void 0; J(0); a.fa = b; a.V = c || {}; a.H = a.S; a.B = Fc(a, null, a.fa); Ic(a); };
    Y.prototype.close = function () { Jc(this.a); };
    Y.prototype.h = function (a) { if ("string" === typeof a) {
        var b = {};
        b.__data__ = a;
        Hd(this.a, b);
    }
    else
        this.l ? (b = {}, b.__data__ = ub(a), Hd(this.a, b)) : Hd(this.a, a); };
    Y.prototype.G = function () { this.a.f = null; delete this.f; Jc(this.a); delete this.a; Y.X.G.call(this); };
    function Pd(a) { cc.call(this); var b = a.__sm__; if (b) {
        a: {
            for (var c in b) {
                a = c;
                break a;
            }
            a = void 0;
        }
        (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
    }
    else
        this.data = a; }
    r(Pd, cc);
    function Qd() { dc.call(this); this.status = 1; }
    r(Qd, dc);
    function Z(a) { this.a = a; }
    r(Z, Nd);
    Z.prototype.ta = function () { E(this.a, "a"); };
    Z.prototype.sa = function (a) { E(this.a, new Pd(a)); };
    Z.prototype.ra = function (a) { E(this.a, new Qd(a)); };
    Z.prototype.qa = function () { E(this.a, "b"); }; /*

     Copyright 2017 Google LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    Od.prototype.createWebChannel = Od.prototype.a;
    Y.prototype.send = Y.prototype.h;
    Y.prototype.open = Y.prototype.g;
    Y.prototype.close = Y.prototype.close;
    Yb.NO_ERROR = 0;
    Yb.TIMEOUT = 8;
    Yb.HTTP_ERROR = 6;
    Zb.COMPLETE = "complete";
    bc.EventType = L;
    L.OPEN = "a";
    L.CLOSE = "b";
    L.ERROR = "c";
    L.MESSAGE = "d";
    D.prototype.listen = D.prototype.va;
    X.prototype.listenOnce = X.prototype.wa;
    X.prototype.getLastError = X.prototype.Qa;
    X.prototype.getLastErrorCode = X.prototype.ua;
    X.prototype.getStatus = X.prototype.W;
    X.prototype.getResponseJson = X.prototype.Pa;
    X.prototype.getResponseText = X.prototype.$;
    X.prototype.send = X.prototype.ba;
    var createWebChannelTransport = function () { return new Od; };
    var getStatEventTarget = function () { return Ub(); };
    var ErrorCode = Yb;
    var EventType$1 = Zb;
    var Event = H;
    var Stat = { gb: 0, jb: 1, kb: 2, Db: 3, Ib: 4, Fb: 5, Gb: 6, Eb: 7, Cb: 8, Hb: 9, PROXY: 10, NOPROXY: 11, Ab: 12, wb: 13, xb: 14, vb: 15, yb: 16, zb: 17, bb: 18, ab: 19, cb: 20 };
    var WebChannel = bc;
    var XhrIo = X;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var _ = 
    /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId - The database to use.
         * @param persistenceKey - A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host - The Firestore backend host to connect to.
         * @param ssl - Whether to use SSL when connecting.
         * @param forceLongPolling - Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
         * option when using WebChannel as the network transport.
         */
    function(t, e, n, r, i, o) {
        this.t = t, this.persistenceKey = e, this.host = n, this.ssl = r, this.forceLongPolling = i, 
        this.i = o;
    }, I$1 = /** @class */ function() {
        function t(t, e) {
            this.projectId = t, this.database = e || "(default)";
        }
        return Object.defineProperty(t.prototype, "o", {
            get: function() {
                return "(default)" === this.database;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(e) {
            return e instanceof t && e.projectId === this.projectId && e.database === this.database;
        }, t;
    }(), E$1 = new Logger("@firebase/firestore");

    /** The default database name for a project. */
    /** Represents the database ID a Firestore client is associated with. */
    // Helper methods are needed because variables can't be exported as read/write
    function T$1() {
        return E$1.logLevel;
    }

    /**
     * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
     *
     * @param logLevel - The verbosity you set for activity and error logging. Can
     *   be any of the following values:
     *
     *   <ul>
     *     <li>`debug` for the most verbose logging level, primarily for
     *     debugging.</li>
     *     <li>`error` to log errors only.</li>
     *     <li><code>`silent` to turn off logging.</li>
     *   </ul>
     */ function N$1(t) {
        for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
        if (E$1.logLevel <= LogLevel.DEBUG) {
            var i = n.map(D$1);
            E$1.debug.apply(E$1, __spreadArrays([ "Firestore (8.2.6): " + t ], i));
        }
    }

    function A$1(t) {
        for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
        if (E$1.logLevel <= LogLevel.ERROR) {
            var i = n.map(D$1);
            E$1.error.apply(E$1, __spreadArrays([ "Firestore (8.2.6): " + t ], i));
        }
    }

    function S$1(t) {
        for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
        if (E$1.logLevel <= LogLevel.WARN) {
            var i = n.map(D$1);
            E$1.warn.apply(E$1, __spreadArrays([ "Firestore (8.2.6): " + t ], i));
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function D$1(t) {
        if ("string" == typeof t) return t;
        try {
            return e = t, JSON.stringify(e);
        } catch (e) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Formats an object as a JSON string, suitable for logging. */    var e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function x$1(t) {
        void 0 === t && (t = "Unexpected state");
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
            var e = "FIRESTORE (8.2.6) INTERNAL ASSERTION FAILED: " + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
            throw A$1(e), new Error(e)
        /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */;
    }

    function k$1(t, e) {
        t || x$1();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function O$1(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */ function P$1(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        var e = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
        if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
        // Falls back to Math.random
        for (var r = 0; r < t; r++) n[r] = Math.floor(256 * Math.random());
        return n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var L$1 = /** @class */ function() {
        function t() {}
        return t.u = function() {
            for (
            // Alphanumeric characters
            var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length, n = ""
            // The largest byte value that is a multiple of `char.length`.
            ; n.length < 20; ) for (var r = P$1(40), i = 0; i < r.length; ++i) 
            // Only accept values that are [0, maxMultiple), this ensures they can
            // be evenly mapped to indices of `chars` via a modulo operation.
            n.length < 20 && r[i] < e && (n += t.charAt(r[i] % t.length));
            return n;
        }, t;
    }();

    function V$1(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function C(t, e, n) {
        return t.length === e.length && t.every((function(t, r) {
            return n(t, e[r]);
        }));
    }

    /**
     * Returns the immediate lexicographically-following string. This is useful to
     * construct an inclusive range for indexeddb iterators.
     */ function R$1(t) {
        // Return the input string, with an additional NUL byte appended.
        return t + "\0";
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     */ var U$1 = /** @class */ function() {
        function t(t) {
            this.h = t;
        }
        return t.fromBase64String = function(e) {
            return new t(atob(e));
        }, t.fromUint8Array = function(e) {
            return new t(
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                for (var e = "", n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
                return e;
            }(e));
        }, t.prototype.toBase64 = function() {
            return t = this.h, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */        var t;
            /** True if and only if the Base64 conversion functions are available. */    }, 
        t.prototype.toUint8Array = function() {
            return function(t) {
                for (var e = new Uint8Array(t.length), n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
                return e;
            }(this.h);
        }, t.prototype.l = function() {
            return 2 * this.h.length;
        }, t.prototype._ = function(t) {
            return V$1(this.h, t.h);
        }, t.prototype.isEqual = function(t) {
            return this.h === t.h;
        }, t;
    }();

    U$1.T = new U$1("");

    var M$1 = {
        // Causes are copied from:
        // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
        /** Not an error; returned on success. */
        OK: "ok",
        /** The operation was cancelled (typically by the caller). */
        CANCELLED: "cancelled",
        /** Unknown error or an error from a different error domain. */
        UNKNOWN: "unknown",
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        INVALID_ARGUMENT: "invalid-argument",
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        DEADLINE_EXCEEDED: "deadline-exceeded",
        /** Some requested entity (e.g., file or directory) was not found. */
        NOT_FOUND: "not-found",
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        ALREADY_EXISTS: "already-exists",
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        PERMISSION_DENIED: "permission-denied",
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        UNAUTHENTICATED: "unauthenticated",
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        RESOURCE_EXHAUSTED: "resource-exhausted",
        /**
         * Operation was rejected because the system is not in a state required for
         * the operation's execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        FAILED_PRECONDITION: "failed-precondition",
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        ABORTED: "aborted",
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        OUT_OF_RANGE: "out-of-range",
        /** Operation is not implemented or not supported/enabled in this service. */
        UNIMPLEMENTED: "unimplemented",
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        INTERNAL: "internal",
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        UNAVAILABLE: "unavailable",
        /** Unrecoverable data loss or corruption. */
        DATA_LOSS: "data-loss"
    }, q$1 = /** @class */ function(t) {
        /** @hideconstructor */
        function e(e, n) {
            var r = this;
            return (r = t.call(this, n) || this).code = e, r.message = n, r.name = "FirebaseError", 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            r.toString = function() {
                return r.name + ": [code=" + r.code + "]: " + r.message;
            }, r;
        }
        return __extends$1d(e, t), e;
    }(Error), j = /** @class */ function() {
        /** @hideconstructor */
        function t(t) {
            this.I = t;
        }
        /**
         * Creates a new `Bytes` object from the given Base64 string, converting it to
         * bytes.
         *
         * @param base64 - The Base64 string used to create the `Bytes` object.
         */    return t.fromBase64String = function(e) {
            try {
                return new t(U$1.fromBase64String(e));
            } catch (e) {
                throw new q$1(M$1.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e);
            }
        }, 
        /**
         * Creates a new `Bytes` object from the given Uint8Array.
         *
         * @param array - The Uint8Array used to create the `Bytes` object.
         */
        t.fromUint8Array = function(e) {
            return new t(U$1.fromUint8Array(e));
        }, 
        /**
         * Returns the underlying bytes as a Base64-encoded string.
         *
         * @returns The Base64-encoded string created from the `Bytes` object.
         */
        t.prototype.toBase64 = function() {
            return this.I.toBase64();
        }, 
        /**
         * Returns the underlying bytes in a new `Uint8Array`.
         *
         * @returns The Uint8Array created from the `Bytes` object.
         */
        t.prototype.toUint8Array = function() {
            return this.I.toUint8Array();
        }, 
        /**
         * Returns a string representation of the `Bytes` object.
         *
         * @returns A string representation of the `Bytes` object.
         */
        t.prototype.toString = function() {
            return "Bytes(base64: " + this.toBase64() + ")";
        }, 
        /**
         * Returns true if this `Bytes` object is equal to the provided one.
         *
         * @param other - The `Bytes` object to compare against.
         * @returns true if this `Bytes` object is equal to the provided one.
         */
        t.prototype.isEqual = function(t) {
            return this.I.isEqual(t.I);
        }, t;
    }(), F$1 = /** @class */ function() {
        function t(t) {
            this.uid = t;
        }
        return t.prototype.m = function() {
            return null != this.uid;
        }, 
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */
        t.prototype.A = function() {
            return this.m() ? "uid:" + this.uid : "anonymous-user";
        }, t.prototype.isEqual = function(t) {
            return t.uid === this.uid;
        }, t;
    }();

    /** An error returned by a Firestore operation. */
    /** A user with a null UID. */ F$1.UNAUTHENTICATED = new F$1(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    F$1.R = new F$1("google-credentials-uid"), F$1.P = new F$1("first-party-uid");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var z$1 = function(t, e) {
        this.user = e, this.type = "OAuth", this.g = {}, 
        // Set the headers using Object Literal notation to avoid minification
        this.g.Authorization = "Bearer " + t;
    }, G$1 = /** @class */ function() {
        function t() {
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.V = null;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(null);
        }, t.prototype.p = function() {}, t.prototype.v = function(t) {
            this.V = t, 
            // Fire with initial user.
            t(F$1.UNAUTHENTICATED);
        }, t.prototype.S = function() {
            this.V = null;
        }, t;
    }(), B = /** @class */ function() {
        function t(t) {
            var e = this;
            /**
             * The auth token listener registered with FirebaseApp, retained here so we
             * can unregister it.
             */        this.D = null, 
            /** Tracks the current User. */
            this.currentUser = F$1.UNAUTHENTICATED, this.C = !1, 
            /**
                 * Counter used to detect if the token changed while a getToken request was
                 * outstanding.
                 */
            this.N = 0, 
            /** The listener registered with setChangeListener(). */
            this.V = null, this.forceRefresh = !1, this.D = function() {
                e.N++, e.currentUser = e.F(), e.C = !0, e.V && e.V(e.currentUser);
            }, this.N = 0, this.auth = t.getImmediate({
                optional: !0
            }), this.auth ? this.auth.addAuthTokenListener(this.D) : (
            // if auth is not available, invoke tokenListener once with null token
            this.D(null), t.get().then((function(t) {
                e.auth = t, e.D && 
                // tokenListener can be removed by removeChangeListener()
                e.auth.addAuthTokenListener(e.D);
            }), (function() {})));
        }
        return t.prototype.getToken = function() {
            var t = this, e = this.N, n = this.forceRefresh;
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
                    return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((function(n) {
                // Cancel the request since the token changed while the request was
                // outstanding so the response is potentially for a previous user (which
                // user, we can't be sure).
                return t.N !== e ? (N$1("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
                t.getToken()) : n ? (k$1("string" == typeof n.accessToken), new z$1(n.accessToken, t.currentUser)) : null;
            })) : Promise.resolve(null);
        }, t.prototype.p = function() {
            this.forceRefresh = !0;
        }, t.prototype.v = function(t) {
            this.V = t, 
            // Fire the initial event
            this.C && t(this.currentUser);
        }, t.prototype.S = function() {
            this.auth && this.auth.removeAuthTokenListener(this.D), this.D = null, this.V = null;
        }, 
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        t.prototype.F = function() {
            var t = this.auth && this.auth.getUid();
            return k$1(null === t || "string" == typeof t), new F$1(t);
        }, t;
    }(), Q$1 = /** @class */ function() {
        function t(t, e) {
            this.O = t, this.k = e, this.type = "FirstParty", this.user = F$1.P;
        }
        return Object.defineProperty(t.prototype, "g", {
            get: function() {
                var t = {
                    "X-Goog-AuthUser": this.k
                }, e = this.O.auth.getAuthHeaderValueForFirstParty([]);
                // Use array notation to prevent minification
                            return e && (t.Authorization = e), t;
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }(), Y$1 = /** @class */ function() {
        function t(t, e) {
            this.O = t, this.k = e;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(new Q$1(this.O, this.k));
        }, t.prototype.v = function(t) {
            // Fire with initial uid.
            t(F$1.P);
        }, t.prototype.S = function() {}, t.prototype.p = function() {}, t;
    }(), H$1 = /** @class */ function() {
        function t(t, e) {
            var n = this;
            this.previousValue = t, e && (e.M = function(t) {
                return n.L(t);
            }, this.$ = function(t) {
                return e.B(t);
            });
        }
        return t.prototype.L = function(t) {
            return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
        }, t.prototype.next = function() {
            var t = ++this.previousValue;
            return this.$ && this.$(t), t;
        }, t;
    }();

    /** A CredentialsProvider that always yields an empty token. */ H$1.q = -1;

    /**
     * A `Timestamp` represents a point in time independent of any time zone or
     * calendar, represented as seconds and fractions of seconds at nanosecond
     * resolution in UTC Epoch time.
     *
     * It is encoded using the Proleptic Gregorian Calendar which extends the
     * Gregorian calendar backwards to year one. It is encoded assuming all minutes
     * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
     * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59.999999999Z.
     *
     * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto
     */
    var K$1 = /** @class */ function() {
        /**
         * Creates a new timestamp.
         *
         * @param seconds - The number of seconds of UTC time since Unix epoch
         *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *     9999-12-31T23:59:59Z inclusive.
         * @param nanoseconds - The non-negative fractions of a second at nanosecond
         *     resolution. Negative second values with fractions must still have
         *     non-negative nanoseconds values that count forward in time. Must be
         *     from 0 to 999,999,999 inclusive.
         */
        function t(t, e) {
            if (this.seconds = t, this.nanoseconds = e, e < 0) throw new q$1(M$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (e >= 1e9) throw new q$1(M$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (t < -62135596800) throw new q$1(M$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new q$1(M$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        }
        /**
         * Creates a new timestamp with the current date, with millisecond precision.
         *
         * @returns a new timestamp representing the current date.
         */    return t.now = function() {
            return t.fromMillis(Date.now());
        }, 
        /**
         * Creates a new timestamp from the given date.
         *
         * @param date - The date to initialize the `Timestamp` from.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     date.
         */
        t.fromDate = function(e) {
            return t.fromMillis(e.getTime());
        }, 
        /**
         * Creates a new timestamp from the given number of milliseconds.
         *
         * @param milliseconds - Number of milliseconds since Unix epoch
         *     1970-01-01T00:00:00Z.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     number of milliseconds.
         */
        t.fromMillis = function(e) {
            var n = Math.floor(e / 1e3);
            return new t(n, 1e6 * (e - 1e3 * n));
        }, 
        /**
         * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
         * a loss of precision since `Date` objects only support millisecond precision.
         *
         * @returns JavaScript `Date` object representing the same point in time as
         *     this `Timestamp`, with millisecond precision.
         */
        t.prototype.toDate = function() {
            return new Date(this.toMillis());
        }, 
        /**
         * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
         * epoch). This operation causes a loss of precision.
         *
         * @returns The point in time corresponding to this timestamp, represented as
         *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
         */
        t.prototype.toMillis = function() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }, t.prototype.U = function(t) {
            return this.seconds === t.seconds ? V$1(this.nanoseconds, t.nanoseconds) : V$1(this.seconds, t.seconds);
        }, 
        /**
         * Returns true if this `Timestamp` is equal to the provided one.
         *
         * @param other - The `Timestamp` to compare against.
         * @returns true if this `Timestamp` is equal to the provided one.
         */
        t.prototype.isEqual = function(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }, t.prototype.toString = function() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }, t.prototype.toJSON = function() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }, 
        /**
         * Converts this object to a primitive string, which allows Timestamp objects to be compared
         * using the `>`, `<=`, `>=` and `>` operators.
         */
        t.prototype.valueOf = function() {
            // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
            // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
            // with zeroes to be a consistent length. Strings with this format then have a lexiographical
            // ordering that matches the expected ordering. The <seconds> translation is done to avoid
            // having a leading negative sign (i.e. a leading '-' character) in its string representation,
            // which would affect its lexiographical ordering.
            var t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }, t;
    }(), X$1 = /** @class */ function() {
        function t(t) {
            this.timestamp = t;
        }
        return t.K = function(e) {
            return new t(e);
        }, t.min = function() {
            return new t(new K$1(0, 0));
        }, t.prototype._ = function(t) {
            return this.timestamp.U(t.timestamp);
        }, t.prototype.isEqual = function(t) {
            return this.timestamp.isEqual(t.timestamp);
        }, 
        /** Returns a number representation of the version for use in spec tests. */ t.prototype.W = function() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }, t.prototype.toString = function() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }, t.prototype.j = function() {
            return this.timestamp;
        }, t;
    }(), W$1 = /** @class */ function() {
        function t(t, e, n) {
            void 0 === e ? e = 0 : e > t.length && x$1(), void 0 === n ? n = t.length - e : n > t.length - e && x$1(), 
            this.segments = t, this.offset = e, this.G = n;
        }
        return Object.defineProperty(t.prototype, "length", {
            get: function() {
                return this.G;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(e) {
            return 0 === t.H(this, e);
        }, t.prototype.child = function(e) {
            var n = this.segments.slice(this.offset, this.limit());
            return e instanceof t ? e.forEach((function(t) {
                n.push(t);
            })) : n.push(e), this.J(n);
        }, 
        /** The index of one past the last segment of the path. */ t.prototype.limit = function() {
            return this.offset + this.length;
        }, t.prototype.Y = function(t) {
            return t = void 0 === t ? 1 : t, this.J(this.segments, this.offset + t, this.length - t);
        }, t.prototype.X = function() {
            return this.J(this.segments, this.offset, this.length - 1);
        }, t.prototype.Z = function() {
            return this.segments[this.offset];
        }, t.prototype.tt = function() {
            return this.get(this.length - 1);
        }, t.prototype.get = function(t) {
            return this.segments[this.offset + t];
        }, t.prototype.et = function() {
            return 0 === this.length;
        }, t.prototype.nt = function(t) {
            if (t.length < this.length) return !1;
            for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }, t.prototype.st = function(t) {
            if (this.length + 1 !== t.length) return !1;
            for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }, t.prototype.forEach = function(t) {
            for (var e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
        }, t.prototype.it = function() {
            return this.segments.slice(this.offset, this.limit());
        }, t.H = function(t, e) {
            for (var n = Math.min(t.length, e.length), r = 0; r < n; r++) {
                var i = t.get(r), o = e.get(r);
                if (i < o) return -1;
                if (i > o) return 1;
            }
            return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
        }, t;
    }(), Z$1 = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.prototype.J = function(t, n, r) {
            return new e(t, n, r);
        }, e.prototype.rt = function() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.it().join("/");
        }, e.prototype.toString = function() {
            return this.rt();
        }, 
        /**
         * Creates a resource path from the given slash-delimited string. If multiple
         * arguments are provided, all components are combined. Leading and trailing
         * slashes from all components are ignored.
         */
        e.ot = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
                    for (var r = [], i = 0, o = t; i < o.length; i++) {
                var u = o[i];
                if (u.indexOf("//") >= 0) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid segment (" + u + "). Paths must not contain // in them.");
                // Strip leading and traling slashed.
                            r.push.apply(r, u.split("/").filter((function(t) {
                    return t.length > 0;
                })));
            }
            return new e(r);
        }, e.ct = function() {
            return new e([]);
        }, e;
    }(W$1), J$1 = /^[_a-zA-Z][_a-zA-Z0-9]*$/, $ = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.prototype.J = function(t, n, r) {
            return new e(t, n, r);
        }, 
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */
        e.at = function(t) {
            return J$1.test(t);
        }, e.prototype.rt = function() {
            return this.it().map((function(t) {
                return t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), e.at(t) || (t = "`" + t + "`"), 
                t;
            })).join(".");
        }, e.prototype.toString = function() {
            return this.rt();
        }, 
        /**
         * Returns true if this field references the key of a document.
         */
        e.prototype.ut = function() {
            return 1 === this.length && "__name__" === this.get(0);
        }, 
        /**
         * The field designating the key of a document.
         */
        e.ht = function() {
            return new e([ "__name__" ]);
        }, 
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */
        e.lt = function(t) {
            for (var n = [], r = "", i = 0, o = function() {
                if (0 === r.length) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
                n.push(r), r = "";
            }, u = !1; i < t.length; ) {
                var s = t[i];
                if ("\\" === s) {
                    if (i + 1 === t.length) throw new q$1(M$1.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                    var a = t[i + 1];
                    if ("\\" !== a && "." !== a && "`" !== a) throw new q$1(M$1.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                    r += a, i += 2;
                } else "`" === s ? (u = !u, i++) : "." !== s || u ? (r += s, i++) : (o(), i++);
            }
            if (o(), u) throw new q$1(M$1.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
            return new e(n);
        }, e.ct = function() {
            return new e([]);
        }, e;
    }(W$1), tt = /** @class */ function() {
        function t(t) {
            this.path = t;
        }
        return t._t = function(e) {
            return new t(Z$1.ot(e));
        }, t.ft = function(e) {
            return new t(Z$1.ot(e).Y(5));
        }, 
        /** Returns true if the document is in the specified collectionId. */ t.prototype.dt = function(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }, t.prototype.isEqual = function(t) {
            return null !== t && 0 === Z$1.H(this.path, t.path);
        }, t.prototype.toString = function() {
            return this.path.toString();
        }, t.H = function(t, e) {
            return Z$1.H(t.path, e.path);
        }, t.wt = function(t) {
            return t.length % 2 == 0;
        }, 
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments - The segments of the path to the document
         * @returns A new instance of DocumentKey
         */
        t.Et = function(e) {
            return new t(new Z$1(e.slice()));
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A version of a document in Firestore. This corresponds to the version
     * timestamp, such as update_time or read_time.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function et(t) {
        var e = 0;
        for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
        return e;
    }

    function nt(t, e) {
        for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
    }

    function rt(t) {
        for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */ var it = /** @class */ function() {
        function t(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort($.H)
            /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */;
        }
        return t.prototype.Tt = function(t) {
            for (var e = 0, n = this.fields; e < n.length; e++) {
                if (n[e].nt(t)) return !0;
            }
            return !1;
        }, t.prototype.isEqual = function(t) {
            return C(this.fields, t.fields, (function(t, e) {
                return t.isEqual(e);
            }));
        }, t;
    }(), ot = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
    /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */
    function ut(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (k$1(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            var e = 0, n = ot.exec(t);
            if (k$1(!!n), n[1]) {
                // Pad the fraction out to 9 digits (nanos).
                var r = n[1];
                r = (r + "000000000").substr(0, 9), e = Number(r);
            }
            // Parse the date to get the seconds.
                    var i = new Date(t);
            return {
                seconds: Math.floor(i.getTime() / 1e3),
                nanos: e
            };
        }
        return {
            seconds: st(t.seconds),
            nanos: st(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function st(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function at(t) {
        return "string" == typeof t ? U$1.fromBase64String(t) : U$1.fromUint8Array(t);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   transform. They can only exist in the local view of a document. Therefore
     *   they do not need to be parsed or serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function ct(t) {
        var e, n;
        return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
    }

    /**
     * Creates a new ServerTimestamp proto value (using the internal format).
     */
    /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */ function ht(t) {
        var e = t.mapValue.fields.__previous_value__;
        return ct(e) ? ht(e) : e;
    }

    /**
     * Returns the local time at which this timestamp was first set.
     */ function ft(t) {
        var e = ut(t.mapValue.fields.__local_write_time__.timestampValue);
        return new K$1(e.seconds, e.nanos);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Sentinel value that sorts before any Mutation Batch ID. */
    /**
     * Returns whether a variable is either undefined or null.
     */ function lt(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function pt(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return 0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value - The value to test for being an integer and in the safe range
     */ function dt(t) {
        return "number" == typeof t && Number.isInteger(t) && !pt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Extracts the backend's type order for the provided value. */ function vt(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? ct(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : x$1();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function yt(t, e) {
        var n = vt(t);
        if (n !== vt(e)) return !1;
        switch (n) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === e.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return ft(t).isEqual(ft(e));

          case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                var n = ut(t.timestampValue), r = ut(e.timestampValue);
                return n.seconds === r.seconds && n.nanos === r.nanos;
            }(t, e);

          case 5 /* StringValue */ :
            return t.stringValue === e.stringValue;

          case 6 /* BlobValue */ :
            return function(t, e) {
                return at(t.bytesValue).isEqual(at(e.bytesValue));
            }(t, e);

          case 7 /* RefValue */ :
            return t.referenceValue === e.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                return st(t.geoPointValue.latitude) === st(e.geoPointValue.latitude) && st(t.geoPointValue.longitude) === st(e.geoPointValue.longitude);
            }(t, e);

          case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return st(t.integerValue) === st(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    var n = st(t.doubleValue), r = st(e.doubleValue);
                    return n === r ? pt(n) === pt(r) : isNaN(n) && isNaN(r);
                }
                return !1;
            }(t, e);

          case 9 /* ArrayValue */ :
            return C(t.arrayValue.values || [], e.arrayValue.values || [], yt);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                var n = t.mapValue.fields || {}, r = e.mapValue.fields || {};
                if (et(n) !== et(r)) return !1;
                for (var i in n) if (n.hasOwnProperty(i) && (void 0 === r[i] || !yt(n[i], r[i]))) return !1;
                return !0;
            }(t, e);

          default:
            return x$1();
        }
    }

    function mt(t, e) {
        return void 0 !== (t.values || []).find((function(t) {
            return yt(t, e);
        }));
    }

    function gt(t, e) {
        var n = vt(t), r = vt(e);
        if (n !== r) return V$1(n, r);
        switch (n) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return V$1(t.booleanValue, e.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, e) {
                var n = st(t.integerValue || t.doubleValue), r = st(e.integerValue || e.doubleValue);
                return n < r ? -1 : n > r ? 1 : n === r ? 0 : 
                // one or both are NaN.
                isNaN(n) ? isNaN(r) ? 0 : -1 : 1;
            }(t, e);

          case 3 /* TimestampValue */ :
            return wt(t.timestampValue, e.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return wt(ft(t), ft(e));

          case 5 /* StringValue */ :
            return V$1(t.stringValue, e.stringValue);

          case 6 /* BlobValue */ :
            return function(t, e) {
                var n = at(t), r = at(e);
                return n._(r);
            }(t.bytesValue, e.bytesValue);

          case 7 /* RefValue */ :
            return function(t, e) {
                for (var n = t.split("/"), r = e.split("/"), i = 0; i < n.length && i < r.length; i++) {
                    var o = V$1(n[i], r[i]);
                    if (0 !== o) return o;
                }
                return V$1(n.length, r.length);
            }(t.referenceValue, e.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                var n = V$1(st(t.latitude), st(e.latitude));
                return 0 !== n ? n : V$1(st(t.longitude), st(e.longitude));
            }(t.geoPointValue, e.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, e) {
                for (var n = t.values || [], r = e.values || [], i = 0; i < n.length && i < r.length; ++i) {
                    var o = gt(n[i], r[i]);
                    if (o) return o;
                }
                return V$1(n.length, r.length);
            }(t.arrayValue, e.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                var n = t.fields || {}, r = Object.keys(n), i = e.fields || {}, o = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                            r.sort(), o.sort();
                for (var u = 0; u < r.length && u < o.length; ++u) {
                    var s = V$1(r[u], o[u]);
                    if (0 !== s) return s;
                    var a = gt(n[r[u]], i[o[u]]);
                    if (0 !== a) return a;
                }
                return V$1(r.length, o.length);
            }(t.mapValue, e.mapValue);

          default:
            throw x$1();
        }
    }

    function wt(t, e) {
        if ("string" == typeof t && "string" == typeof e && t.length === e.length) return V$1(t, e);
        var n = ut(t), r = ut(e), i = V$1(n.seconds, r.seconds);
        return 0 !== i ? i : V$1(n.nanos, r.nanos);
    }

    function bt(t) {
        return _t(t);
    }

    function _t(t) {
        return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
            var e = ut(t);
            return "time(" + e.seconds + "," + e.nanos + ")";
        }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? at(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
        tt.ft(n).toString()) : "geoPointValue" in t ? "geo(" + (e = t.geoPointValue).latitude + "," + e.longitude + ")" : "arrayValue" in t ? function(t) {
            for (var e = "[", n = !0, r = 0, i = t.values || []; r < i.length; r++) {
                n ? n = !1 : e += ",", e += _t(i[r]);
            }
            return e + "]";
        }(t.arrayValue) : "mapValue" in t ? function(t) {
            for (
            // Iteration order in JavaScript is not guaranteed. To ensure that we generate
            // matching canonical IDs for identical maps, we need to sort the keys.
            var e = "{", n = !0, r = 0, i = Object.keys(t.fields || {}).sort(); r < i.length; r++) {
                var o = i[r];
                n ? n = !1 : e += ",", e += o + ":" + _t(t.fields[o]);
            }
            return e + "}";
        }(t.mapValue) : x$1();
        var e, n;
    }

    function It(t, e) {
        return {
            referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + e.path.rt()
        };
    }

    /** Returns true if `value` is an IntegerValue . */ function Et(t) {
        return !!t && "integerValue" in t;
    }

    /** Returns true if `value` is a DoubleValue. */
    /** Returns true if `value` is an ArrayValue. */ function Tt(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function Nt(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function At(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function St(t) {
        return !!t && "mapValue" in t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An ObjectValue represents a MapValue in the Firestore Proto and offers the
     * ability to add and remove fields (via the ObjectValueBuilder).
     */ var Dt = /** @class */ function() {
        function t(t) {
            this.proto = t;
        }
        return t.empty = function() {
            return new t({
                mapValue: {}
            });
        }, 
        /**
         * Returns the value at the given path or null.
         *
         * @param path - the path to search
         * @returns The value at the path or if there it doesn't exist.
         */
        t.prototype.field = function(t) {
            if (t.et()) return this.proto;
            for (var e = this.proto, n = 0; n < t.length - 1; ++n) {
                if (!e.mapValue.fields) return null;
                if (!St(e = e.mapValue.fields[t.get(n)])) return null;
            }
            return (e = (e.mapValue.fields || {})[t.tt()]) || null;
        }, t.prototype.isEqual = function(t) {
            return yt(this.proto, t.proto);
        }, t;
    }(), xt = /** @class */ function() {
        /**
         * @param baseObject - The object to mutate.
         */
        function t(t) {
            void 0 === t && (t = Dt.empty()), this.It = t, 
            /** A map that contains the accumulated changes in this builder. */
            this.At = new Map;
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path - The field path to set.
         * @param value - The value to set.
         * @returns The current Builder instance.
         */    return t.prototype.set = function(t, e) {
            return this.Rt(t, e), this;
        }, 
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path - The field path to remove.
         * @returns The current Builder instance.
         */
        t.prototype.delete = function(t) {
            return this.Rt(t, null), this;
        }, 
        /**
         * Adds `value` to the overlay map at `path`. Creates nested map entries if
         * needed.
         */
        t.prototype.Rt = function(t, e) {
            for (var n = this.At, r = 0; r < t.length - 1; ++r) {
                var i = t.get(r), o = n.get(i);
                o instanceof Map ? 
                // Re-use a previously created map
                n = o : o && 10 /* ObjectValue */ === vt(o) ? (
                // Convert the existing Protobuf MapValue into a map
                o = new Map(Object.entries(o.mapValue.fields || {})), n.set(i, o), n = o) : (
                // Create an empty map to represent the current nesting level
                o = new Map, n.set(i, o), n = o);
            }
            n.set(t.tt(), e);
        }, 
        /** Returns an ObjectValue with all mutations applied. */ t.prototype.Pt = function() {
            var t = this.yt($.ct(), this.At);
            return null != t ? new Dt(t) : this.It;
        }, 
        /**
         * Applies any overlays from `currentOverlays` that exist at `currentPath`
         * and returns the merged data at `currentPath` (or null if there were no
         * changes).
         *
         * @param currentPath - The path at the current nesting level. Can be set to
         * FieldValue.emptyPath() to represent the root.
         * @param currentOverlays - The overlays at the current nesting level in the
         * same format as `overlayMap`.
         * @returns The merged data at `currentPath` or null if no modifications
         * were applied.
         */
        t.prototype.yt = function(t, e) {
            var n = this, r = !1, i = this.It.field(t), o = St(i) ? // If there is already data at the current path, base our
            Object.assign({}, i.mapValue.fields) : {};
            return e.forEach((function(e, i) {
                if (e instanceof Map) {
                    var u = n.yt(t.child(i), e);
                    null != u && (o[i] = u, r = !0);
                } else null !== e ? (o[i] = e, r = !0) : o.hasOwnProperty(i) && (delete o[i], r = !0);
            })), r ? {
                mapValue: {
                    fields: o
                }
            } : null;
        }, t;
    }();

    /**
     * An ObjectValueBuilder provides APIs to set and delete fields from an
     * ObjectValue.
     */
    /**
     * Returns a FieldMask built from all fields in a MapValue.
     */
    function kt(t) {
        var e = [];
        return nt(t.fields || {}, (function(t, n) {
            var r = new $([ t ]);
            if (St(n)) {
                var i = kt(n.mapValue).fields;
                if (0 === i.length) 
                // Preserve the empty map by adding it to the FieldMask.
                e.push(r); else 
                // For nested and non-empty ObjectValues, add the FieldPath of the
                // leaf nodes.
                for (var o = 0, u = i; o < u.length; o++) {
                    var s = u[o];
                    e.push(r.child(s));
                }
            } else 
            // For nested and non-empty ObjectValues, add the FieldPath of the leaf
            // nodes.
            e.push(r);
        })), new it(e)
        /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * The result of a lookup for a given path may be an existing document or a
     * marker that this document does not exist at a given version.
     */;
    }

    var Ot = function(t, e) {
        this.key = t, this.version = e;
    }, Pt = /** @class */ function(t) {
        function e(e, n, r, i) {
            var o = this;
            return (o = t.call(this, e, n) || this).gt = r, o.Vt = !!i.Vt, o.hasCommittedMutations = !!i.hasCommittedMutations, 
            o;
        }
        return __extends$1d(e, t), e.prototype.field = function(t) {
            return this.gt.field(t);
        }, e.prototype.data = function() {
            return this.gt;
        }, e.prototype.bt = function() {
            return this.gt.proto;
        }, e.prototype.isEqual = function(t) {
            return t instanceof e && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.Vt === t.Vt && this.hasCommittedMutations === t.hasCommittedMutations && this.gt.isEqual(t.gt);
        }, e.prototype.toString = function() {
            return "Document(" + this.key + ", " + this.version + ", " + this.gt.toString() + ", {hasLocalMutations: " + this.Vt + "}), {hasCommittedMutations: " + this.hasCommittedMutations + "})";
        }, Object.defineProperty(e.prototype, "hasPendingWrites", {
            get: function() {
                return this.Vt || this.hasCommittedMutations;
            },
            enumerable: !1,
            configurable: !0
        }), e;
    }(Ot), Lt = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this, e, n) || this).hasCommittedMutations = !(!r || !r.hasCommittedMutations), 
            i;
        }
        return __extends$1d(e, t), e.prototype.toString = function() {
            return "NoDocument(" + this.key + ", " + this.version + ")";
        }, Object.defineProperty(e.prototype, "hasPendingWrites", {
            get: function() {
                return this.hasCommittedMutations;
            },
            enumerable: !1,
            configurable: !0
        }), e.prototype.isEqual = function(t) {
            return t instanceof e && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }, e;
    }(Ot), Vt = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.prototype.toString = function() {
            return "UnknownDocument(" + this.key + ", " + this.version + ")";
        }, Object.defineProperty(e.prototype, "hasPendingWrites", {
            get: function() {
                return !0;
            },
            enumerable: !1,
            configurable: !0
        }), e.prototype.isEqual = function(t) {
            return t instanceof e && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }, e;
    }(Ot), Ct = function(t, e, n, r, i, o, u) {
        void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
        void 0 === i && (i = null), void 0 === o && (o = null), void 0 === u && (u = null), 
        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = i, 
        this.startAt = o, this.endAt = u, this.vt = null;
    };

    /**
     * Represents a document in Firestore with a key, version, data and whether the
     * data has local mutations applied to it.
     */
    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */
    function Rt(t, e, n, r, i, o, u) {
        return void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
        void 0 === i && (i = null), void 0 === o && (o = null), void 0 === u && (u = null), 
        new Ct(t, e, n, r, i, o, u);
    }

    function Ut(t) {
        var e = O$1(t);
        if (null === e.vt) {
            var n = e.path.rt();
            null !== e.collectionGroup && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map((function(t) {
                return function(t) {
                    // TODO(b/29183165): Technically, this won't be unique if two values have
                    // the same description, such as the int 3 and the string "3". So we should
                    // add the types in here somehow, too.
                    return t.field.rt() + t.op.toString() + bt(t.value);
                }(t);
            })).join(","), n += "|ob:", n += e.orderBy.map((function(t) {
                return function(t) {
                    // TODO(b/29183165): Make this collision robust.
                    return t.field.rt() + t.dir;
                }(t);
            })).join(","), lt(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", 
            n += Wt(e.startAt)), e.endAt && (n += "|ub:", n += Wt(e.endAt)), e.vt = n;
        }
        return e.vt;
    }

    function Mt(t, e) {
        if (t.limit !== e.limit) return !1;
        if (t.orderBy.length !== e.orderBy.length) return !1;
        for (var n = 0; n < t.orderBy.length; n++) if (!Jt(t.orderBy[n], e.orderBy[n])) return !1;
        if (t.filters.length !== e.filters.length) return !1;
        for (var r = 0; r < t.filters.length; r++) if (i = t.filters[r], o = e.filters[r], 
        i.op !== o.op || !i.field.isEqual(o.field) || !yt(i.value, o.value)) return !1;
        var i, o;
        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!te(t.startAt, e.startAt) && te(t.endAt, e.endAt);
    }

    function qt(t) {
        return tt.wt(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    }

    var jt = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this) || this).field = e, i.op = n, i.value = r, i;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    return __extends$1d(e, t), e.create = function(t, n, r) {
            return t.ut() ? "in" /* IN */ === n || "not-in" /* NOT_IN */ === n ? this.St(t, n, r) : new Ft(t, n, r) : "array-contains" /* ARRAY_CONTAINS */ === n ? new Qt(t, r) : "in" /* IN */ === n ? new Yt(t, r) : "not-in" /* NOT_IN */ === n ? new Ht(t, r) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === n ? new Kt(t, r) : new e(t, n, r);
        }, e.St = function(t, e, n) {
            return "in" /* IN */ === e ? new zt(t, n) : new Gt(t, n);
        }, e.prototype.matches = function(t) {
            var e = t.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.Dt(gt(e, this.value)) : null !== e && vt(this.value) === vt(e) && this.Dt(gt(e, this.value));
            // Only compare types with matching backend order (such as double and int).
            }, e.prototype.Dt = function(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return x$1();
            }
        }, e.prototype.Ct = function() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
        }, e;
    }((function() {}));

    var Ft = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this, e, n, r) || this).key = tt.ft(r.referenceValue), i;
        }
        return __extends$1d(e, t), e.prototype.matches = function(t) {
            var e = tt.H(t.key, this.key);
            return this.Dt(e);
        }, e;
    }(jt), zt = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e, "in" /* IN */ , n) || this).keys = Bt("in" /* IN */ , n), 
            r;
        }
        return __extends$1d(e, t), e.prototype.matches = function(t) {
            return this.keys.some((function(e) {
                return e.isEqual(t.key);
            }));
        }, e;
    }(jt), Gt = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e, "not-in" /* NOT_IN */ , n) || this).keys = Bt("not-in" /* NOT_IN */ , n), 
            r;
        }
        return __extends$1d(e, t), e.prototype.matches = function(t) {
            return !this.keys.some((function(e) {
                return e.isEqual(t.key);
            }));
        }, e;
    }(jt);

    /** Filter that matches on key fields within an array. */ function Bt(t, e) {
        var n;
        return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((function(t) {
            return tt.ft(t.referenceValue);
        }));
    }

    /** A Filter that implements the array-contains operator. */ var Qt = /** @class */ function(t) {
        function e(e, n) {
            return t.call(this, e, "array-contains" /* ARRAY_CONTAINS */ , n) || this;
        }
        return __extends$1d(e, t), e.prototype.matches = function(t) {
            var e = t.field(this.field);
            return Tt(e) && mt(e.arrayValue, this.value);
        }, e;
    }(jt), Yt = /** @class */ function(t) {
        function e(e, n) {
            return t.call(this, e, "in" /* IN */ , n) || this;
        }
        return __extends$1d(e, t), e.prototype.matches = function(t) {
            var e = t.field(this.field);
            return null !== e && mt(this.value.arrayValue, e);
        }, e;
    }(jt), Ht = /** @class */ function(t) {
        function e(e, n) {
            return t.call(this, e, "not-in" /* NOT_IN */ , n) || this;
        }
        return __extends$1d(e, t), e.prototype.matches = function(t) {
            if (mt(this.value.arrayValue, {
                nullValue: "NULL_VALUE"
            })) return !1;
            var e = t.field(this.field);
            return null !== e && !mt(this.value.arrayValue, e);
        }, e;
    }(jt), Kt = /** @class */ function(t) {
        function e(e, n) {
            return t.call(this, e, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , n) || this;
        }
        return __extends$1d(e, t), e.prototype.matches = function(t) {
            var e = this, n = t.field(this.field);
            return !(!Tt(n) || !n.arrayValue.values) && n.arrayValue.values.some((function(t) {
                return mt(e.value.arrayValue, t);
            }));
        }, e;
    }(jt), Xt = function(t, e) {
        this.position = t, this.before = e;
    };

    /** A Filter that implements the IN operator. */ function Wt(t) {
        // TODO(b/29183165): Make this collision robust.
        return (t.before ? "b" : "a") + ":" + t.position.map((function(t) {
            return bt(t);
        })).join(",");
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ var Zt = function(t, e /* ASCENDING */) {
        void 0 === e && (e = "asc"), this.field = t, this.dir = e;
    };

    function Jt(t, e) {
        return t.dir === e.dir && t.field.isEqual(e.field);
    }

    /**
     * Returns true if a document sorts before a bound using the provided sort
     * order.
     */ function $t(t, e, n) {
        for (var r = 0, i = 0; i < t.position.length; i++) {
            var o = e[i], u = t.position[i];
            if (r = o.field.ut() ? tt.H(tt.ft(u.referenceValue), n.key) : gt(u, n.field(o.field)), 
            "desc" /* DESCENDING */ === o.dir && (r *= -1), 0 !== r) break;
        }
        return t.before ? r <= 0 : r < 0;
    }

    function te(t, e) {
        if (null === t) return null === e;
        if (null === e) return !1;
        if (t.before !== e.before || t.position.length !== e.position.length) return !1;
        for (var n = 0; n < t.position.length; n++) if (!yt(t.position[n], e.position[n])) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */ var ee = 
    /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
    function(t, e, n, r, i, o /* First */ , u, s) {
        void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
        void 0 === i && (i = null), void 0 === o && (o = "F"), void 0 === u && (u = null), 
        void 0 === s && (s = null), this.path = t, this.collectionGroup = e, this.xt = n, 
        this.filters = r, this.limit = i, this.limitType = o, this.startAt = u, this.endAt = s, 
        this.Nt = null, 
        // The corresponding `Target` of this `Query` instance.
        this.Ft = null, this.startAt, this.endAt;
    };

    /** Creates a new Query instance with the options provided. */ function ne(t, e, n, r, i, o, u, s) {
        return new ee(t, e, n, r, i, o, u, s);
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function re(t) {
        return new ee(t);
    }

    /**
     * Helper to convert a collection group query into a collection query at a
     * specific path. This is used when executing collection group queries, since
     * we have to split the query into a set of collection queries at multiple
     * paths.
     */ function ie(t) {
        return !lt(t.limit) && "F" /* First */ === t.limitType;
    }

    function oe(t) {
        return !lt(t.limit) && "L" /* Last */ === t.limitType;
    }

    function ue(t) {
        return t.xt.length > 0 ? t.xt[0].field : null;
    }

    function se(t) {
        for (var e = 0, n = t.filters; e < n.length; e++) {
            var r = n[e];
            if (r.Ct()) return r.field;
        }
        return null;
    }

    /**
     * Checks if any of the provided Operators are included in the query and
     * returns the first one that is, or null if none are.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */ function ae(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function ce(t) {
        var e = O$1(t);
        if (null === e.Nt) {
            e.Nt = [];
            var n = se(e), r = ue(e);
            if (null !== n && null === r) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            n.ut() || e.Nt.push(new Zt(n)), e.Nt.push(new Zt($.ht(), "asc" /* ASCENDING */)); else {
                for (var i = !1, o = 0, u = e.xt; o < u.length; o++) {
                    var s = u[o];
                    e.Nt.push(s), s.field.ut() && (i = !0);
                }
                if (!i) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    var a = e.xt.length > 0 ? e.xt[e.xt.length - 1].dir : "asc" /* ASCENDING */;
                    e.Nt.push(new Zt($.ht(), a));
                }
            }
        }
        return e.Nt;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function he(t) {
        var e = O$1(t);
        if (!e.Ft) if ("F" /* First */ === e.limitType) e.Ft = Rt(e.path, e.collectionGroup, ce(e), e.filters, e.limit, e.startAt, e.endAt); else {
            for (
            // Flip the orderBy directions since we want the last results
            var n = [], r = 0, i = ce(e); r < i.length; r++) {
                var o = i[r], u = "desc" /* DESCENDING */ === o.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                n.push(new Zt(o.field, u));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    var s = e.endAt ? new Xt(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Xt(e.startAt.position, !e.startAt.before) : null;
            // Now return as a LimitType.First query.
                    e.Ft = Rt(e.path, e.collectionGroup, n, e.filters, e.limit, s, a);
        }
        return e.Ft;
    }

    function fe(t, e, n) {
        return new ee(t.path, t.collectionGroup, t.xt.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
    }

    function le(t, e) {
        return Mt(he(t), he(e)) && t.limitType === e.limitType;
    }

    // TODO(b/29183165): This is used to get a unique string from a query to, for
    // example, use as a dictionary key, but the implementation is subject to
    // collisions. Make it collision-free.
    function pe(t) {
        return Ut(he(t)) + "|lt:" + t.limitType;
    }

    function de(t) {
        return "Query(target=" + function(t) {
            var e = t.path.rt();
            return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
            t.filters.length > 0 && (e += ", filters: [" + t.filters.map((function(t) {
                return (e = t).field.rt() + " " + e.op + " " + bt(e.value);
                /** Returns a debug description for `filter`. */            var e;
                /** Filter that matches on key fields (i.e. '__name__'). */        })).join(", ") + "]"), 
            lt(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += ", orderBy: [" + t.orderBy.map((function(t) {
                return function(t) {
                    return t.field.rt() + " (" + t.dir + ")";
                }(t);
            })).join(", ") + "]"), t.startAt && (e += ", startAt: " + Wt(t.startAt)), t.endAt && (e += ", endAt: " + Wt(t.endAt)), 
            "Target(" + e + ")";
        }(he(t)) + "; limitType=" + t.limitType + ")";
    }

    /** Returns whether `doc` matches the constraints of `query`. */ function ve(t, e) {
        return function(t, e) {
            var n = e.key.path;
            return null !== t.collectionGroup ? e.key.dt(t.collectionGroup) && t.path.nt(n) : tt.wt(t.path) ? t.path.isEqual(n) : t.path.st(n);
        }(t, e) && function(t, e) {
            for (var n = 0, r = t.xt; n < r.length; n++) {
                var i = r[n];
                // order by key always matches
                            if (!i.field.ut() && null === e.field(i.field)) return !1;
            }
            return !0;
        }(t, e) && function(t, e) {
            for (var n = 0, r = t.filters; n < r.length; n++) {
                if (!r[n].matches(e)) return !1;
            }
            return !0;
        }(t, e) && function(t, e) {
            return !(t.startAt && !$t(t.startAt, ce(t), e)) && (!t.endAt || !$t(t.endAt, ce(t), e));
        }(t, e);
    }

    function ye(t) {
        return function(e, n) {
            for (var r = !1, i = 0, o = ce(t); i < o.length; i++) {
                var u = o[i], s = me(u, e, n);
                if (0 !== s) return s;
                r = r || u.field.ut();
            }
            return 0;
        };
    }

    function me(t, e, n) {
        var r = t.field.ut() ? tt.H(e.key, n.key) : function(t, e, n) {
            var r = e.field(t), i = n.field(t);
            return null !== r && null !== i ? gt(r, i) : x$1();
        }(t.field, e, n);
        switch (t.dir) {
          case "asc" /* ASCENDING */ :
            return r;

          case "desc" /* DESCENDING */ :
            return -1 * r;

          default:
            return x$1();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable set of metadata that the local store tracks for each target.
     */ var ge = /** @class */ function() {
        function t(
        /** The target being listened to. */
        t, 
        /**
         * The target ID to which the target corresponds; Assigned by the
         * LocalStore for user listens and by the SyncEngine for limbo watches.
         */
        e, 
        /** The purpose of the target. */
        n, 
        /**
         * The sequence number of the last transaction during which this target data
         * was modified.
         */
        r, 
        /** The latest snapshot version seen for this target. */
        i
        /**
         * The maximum snapshot version at which the associated view
         * contained no limbo documents.
         */ , o
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */ , u) {
            void 0 === i && (i = X$1.min()), void 0 === o && (o = X$1.min()), void 0 === u && (u = U$1.T), 
            this.target = t, this.targetId = e, this.Ot = n, this.sequenceNumber = r, this.kt = i, 
            this.lastLimboFreeSnapshotVersion = o, this.resumeToken = u;
        }
        /** Creates a new target data instance with an updated sequence number. */    return t.prototype.Mt = function(e) {
            return new t(this.target, this.targetId, this.Ot, e, this.kt, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        }, 
        /**
         * Creates a new target data instance with an updated resume token and
         * snapshot version.
         */
        t.prototype.Lt = function(e, n) {
            return new t(this.target, this.targetId, this.Ot, this.sequenceNumber, n, this.lastLimboFreeSnapshotVersion, e);
        }, 
        /**
         * Creates a new target data instance with an updated last limbo free
         * snapshot version number.
         */
        t.prototype.$t = function(e) {
            return new t(this.target, this.targetId, this.Ot, this.sequenceNumber, this.kt, e, this.resumeToken);
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */ function we(t, e) {
        if (t.Bt) {
            if (isNaN(e)) return {
                doubleValue: "NaN"
            };
            if (e === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (e === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: pt(e) ? "-0" : e
        };
    }

    /**
     * Returns an IntegerValue for `value`.
     */ function be(t) {
        return {
            integerValue: "" + t
        };
    }

    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */ function _e(t, e) {
        return dt(e) ? be(e) : we(t, e);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Used to represent a field transform on a mutation. */ var Ie = function() {
        // Make sure that the structural type of `TransformOperation` is unique.
        // See https://github.com/microsoft/TypeScript/issues/5451
        this.qt = void 0;
    };

    /**
     * Computes the local transform result against the provided `previousValue`,
     * optionally using the provided localWriteTime.
     */ function Ee(t, e, n) {
        return t instanceof Ae ? function(t, e) {
            var n = {
                fields: {
                    __type__: {
                        stringValue: "server_timestamp"
                    },
                    __local_write_time__: {
                        timestampValue: {
                            seconds: t.seconds,
                            nanos: t.nanoseconds
                        }
                    }
                }
            };
            return e && (n.fields.__previous_value__ = e), {
                mapValue: n
            };
        }(n, e) : t instanceof Se ? De(t, e) : t instanceof xe ? ke(t, e) : function(t, e) {
            // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
            // precision and resolves overflows by reducing precision, we do not
            // manually cap overflows at 2^63.
            var n = Ne(t, e), r = Pe(n) + Pe(t.Ut);
            return Et(n) && Et(t.Ut) ? be(r) : we(t.Qt, r);
        }(t, e);
    }

    /**
     * Computes a final transform result after the transform has been acknowledged
     * by the server, potentially using the server-provided transformResult.
     */ function Te(t, e, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return t instanceof Se ? De(t, e) : t instanceof xe ? ke(t, e) : n;
    }

    /**
     * If this transform operation is not idempotent, returns the base value to
     * persist for this transform. If a base value is returned, the transform
     * operation is always applied to this base value, even if document has
     * already been updated.
     *
     * Base values provide consistent behavior for non-idempotent transforms and
     * allow us to return the same latency-compensated value even if the backend
     * has already applied the transform operation. The base value is null for
     * idempotent transforms, as they can be re-played even if the backend has
     * already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent transforms.
     */ function Ne(t, e) {
        return t instanceof Oe ? Et(n = e) || function(t) {
            return !!t && "doubleValue" in t;
        }(n) ? e : {
            integerValue: 0
        } : null;
        var n;
    }

    /** Transforms a value into a server-generated timestamp. */ var Ae = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e;
    }(Ie), Se = /** @class */ function(t) {
        function e(e) {
            var n = this;
            return (n = t.call(this) || this).elements = e, n;
        }
        return __extends$1d(e, t), e;
    }(Ie);

    /** Transforms an array value via a union operation. */ function De(t, e) {
        for (var n = Le(e), r = function(t) {
            n.some((function(e) {
                return yt(e, t);
            })) || n.push(t);
        }, i = 0, o = t.elements; i < o.length; i++) {
            r(o[i]);
        }
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /** Transforms an array value via a remove operation. */ var xe = /** @class */ function(t) {
        function e(e) {
            var n = this;
            return (n = t.call(this) || this).elements = e, n;
        }
        return __extends$1d(e, t), e;
    }(Ie);

    function ke(t, e) {
        for (var n = Le(e), r = function(t) {
            n = n.filter((function(e) {
                return !yt(e, t);
            }));
        }, i = 0, o = t.elements; i < o.length; i++) {
            r(o[i]);
        }
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ var Oe = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this) || this).Qt = e, r.Ut = n, r;
        }
        return __extends$1d(e, t), e;
    }(Ie);

    function Pe(t) {
        return st(t.integerValue || t.doubleValue);
    }

    function Le(t) {
        return Tt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A field path and the TransformOperation to perform upon it. */ var Ve = function(t, e) {
        this.field = t, this.transform = e;
    };

    /** The result of successfully applying a mutation to the backend. */
    var Ce = function(
    /**
         * The version at which the mutation was committed:
         *
         * - For most operations, this is the updateTime in the WriteResult.
         * - For deletes, the commitTime of the WriteResponse (because deletes are
         *   not stored and have no updateTime).
         *
         * Note that these versions can be different: No-op writes will not change
         * the updateTime even though the commitTime advances.
         */
    t, 
    /**
         * The resulting fields returned from the backend after a mutation
         * containing field transforms has been committed. Contains one FieldValue
         * for each FieldTransform that was in the mutation.
         *
         * Will be null if the mutation did not contain any field transforms.
         */
    e) {
        this.version = t, this.transformResults = e;
    }, Re = /** @class */ function() {
        function t(t, e) {
            this.updateTime = t, this.exists = e
            /** Creates a new empty Precondition. */;
        }
        return t.Kt = function() {
            return new t;
        }, 
        /** Creates a new Precondition with an exists flag. */ t.exists = function(e) {
            return new t(void 0, e);
        }, 
        /** Creates a new Precondition based on a version a document exists at. */ t.updateTime = function(e) {
            return new t(e);
        }, Object.defineProperty(t.prototype, "Wt", {
            /** Returns whether this Precondition is empty. */ get: function() {
                return void 0 === this.updateTime && void 0 === this.exists;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }, t;
    }();

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */
    /**
     * Returns true if the preconditions is valid for the given document
     * (or null if no document is available).
     */
    function Ue(t, e) {
        return void 0 !== t.updateTime ? e instanceof Pt && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e instanceof Pt;
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set and Patch mutations. For Delete mutations, we
     * reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        null                  Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      null                  null
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     null                  NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set and Patch mutations. As deletes have no
     * explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we return an `UnknownDocument` and rely on Watch to send us the
     * updated version.
     *
     * Field transforms are used only with Patch and Set Mutations. We use the
     * `updateTransforms` message to store transforms, rather than the `transforms`s
     * messages.
     *
     * ## Subclassing Notes
     *
     * Subclasses of Mutation need to implement applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document.
     */ var Me = function() {};

    /**
     * Applies this mutation to the given MaybeDocument or null for the purposes
     * of computing a new remote document. If the input document doesn't match the
     * expected state (e.g. it is null or outdated), an `UnknownDocument` can be
     * returned.
     *
     * @param mutation - The mutation to apply.
     * @param maybeDoc - The document to mutate. The input document can be null if
     *     the client has no knowledge of the pre-mutation state of the document.
     * @param mutationResult - The result of applying the mutation from the backend.
     * @returns The mutated document. The returned document may be an
     *     UnknownDocument if the mutation could not be applied to the locally
     *     cached base document.
     */ function qe(t, e, n) {
        return t instanceof Be ? function(t, e, n) {
            // Unlike applySetMutationToLocalView, if we're applying a mutation to a
            // remote document the server has accepted the mutation so the precondition
            // must have held.
            var r = t.value;
            if (n.transformResults) {
                var i = He(t.fieldTransforms, e, n.transformResults);
                r = Xe(t.fieldTransforms, r, i);
            }
            return new Pt(t.key, n.version, r, {
                hasCommittedMutations: !0
            });
        }(t, e, n) : t instanceof Qe ? function(t, e, n) {
            if (!Ue(t.jt, e)) 
            // Since the mutation was not rejected, we know that the precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and return an UnknownDocument with the
            // known updateTime.
            return new Vt(t.key, n.version);
            var r = Ye(t, e, n.transformResults ? He(t.fieldTransforms, e, n.transformResults) : []);
            return new Pt(t.key, n.version, r, {
                hasCommittedMutations: !0
            });
        }(t, e, n) : function(t, e, n) {
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            return new Lt(t.key, n.version, {
                hasCommittedMutations: !0
            });
        }(t, 0, n);
    }

    /**
     * Applies this mutation to the given MaybeDocument or null for the purposes
     * of computing the new local view of a document. Both the input and returned
     * documents can be null.
     *
     * @param mutation - The mutation to apply.
     * @param maybeDoc - The document to mutate. The input document can be null if
     *     the client has no knowledge of the pre-mutation state of the document.
     * @param localWriteTime - A timestamp indicating the local write time of the
     *     batch this mutation is a part of.
     * @returns The mutated document. The returned document may be null, but only
     *     if maybeDoc was null and the mutation would not create a new document.
     */ function je(t, e, n) {
        return t instanceof Be ? function(t, e, n) {
            if (!Ue(t.jt, e)) return e;
            var r = t.value, i = Ke(t.fieldTransforms, n, e);
            r = Xe(t.fieldTransforms, r, i);
            var o = Ge(e);
            return new Pt(t.key, o, r, {
                Vt: !0
            });
        }(t, e, n) : t instanceof Qe ? function(t, e, n) {
            if (!Ue(t.jt, e)) return e;
            var r = Ge(e), i = Ye(t, e, Ke(t.fieldTransforms, n, e));
            return new Pt(t.key, r, i, {
                Vt: !0
            });
        }(t, e, n) : function(t, e) {
            return Ue(t.jt, e) ? new Lt(t.key, X$1.min()) : e;
        }(t, e);
    }

    /**
     * If this mutation is not idempotent, returns the base value to persist with
     * this mutation. If a base value is returned, the mutation is always applied
     * to this base value, even if document has already been updated.
     *
     * The base value is a sparse object that consists of only the document
     * fields for which this mutation contains a non-idempotent transformation
     * (e.g. a numeric increment). The provided value guarantees consistent
     * behavior for non-idempotent transforms and allow us to return the same
     * latency-compensated value even if the backend has already applied the
     * mutation. The base value is null for idempotent mutations, as they can be
     * re-played even if the backend has already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent mutations.
     */ function Fe(t, e) {
        return function(t, e) {
            for (var n = null, r = 0, i = t; r < i.length; r++) {
                var o = i[r], u = e instanceof Pt ? e.field(o.field) : void 0, s = Ne(o.transform, u || null);
                null != s && (n = null == n ? (new xt).set(o.field, s) : n.set(o.field, s));
            }
            return n ? n.Pt() : null;
        }(t.fieldTransforms, e);
    }

    function ze(t, e) {
        return t.type === e.type && !!t.key.isEqual(e.key) && !!t.jt.isEqual(e.jt) && !!function(t, e) {
            return void 0 === t && void 0 === e || !(!t || !e) && C(t, e, (function(t, e) {
                return function(t, e) {
                    return t.field.isEqual(e.field) && function(t, e) {
                        return t instanceof Se && e instanceof Se || t instanceof xe && e instanceof xe ? C(t.elements, e.elements, yt) : t instanceof Oe && e instanceof Oe ? yt(t.Ut, e.Ut) : t instanceof Ae && e instanceof Ae;
                    }(t.transform, e.transform);
                }(t, e);
            }));
        }(t.fieldTransforms, e.fieldTransforms) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ !== t.type || t.data.isEqual(e.data) && t.Gt.isEqual(e.Gt));
    }

    /**
     * Returns the version from the given document for use as the result of a
     * mutation. Mutations are defined to return the version of the base document
     * only if it is an existing document. Deleted and unknown documents have a
     * post-mutation version of SnapshotVersion.min().
     */ function Ge(t) {
        return t instanceof Pt ? t.version : X$1.min();
    }

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ var Be = /** @class */ function(t) {
        function e(e, n, r, i) {
            void 0 === i && (i = []);
            var o = this;
            return (o = t.call(this) || this).key = e, o.value = n, o.jt = r, o.fieldTransforms = i, 
            o.type = 0 /* Set */ , o;
        }
        return __extends$1d(e, t), e;
    }(Me), Qe = /** @class */ function(t) {
        function e(e, n, r, i, o) {
            void 0 === o && (o = []);
            var u = this;
            return (u = t.call(this) || this).key = e, u.data = n, u.Gt = r, u.jt = i, u.fieldTransforms = o, 
            u.type = 1 /* Patch */ , u;
        }
        return __extends$1d(e, t), e;
    }(Me);

    function Ye(t, e, n) {
        var r;
        return r = function(t, e) {
            var n = new xt(e);
            return t.Gt.fields.forEach((function(e) {
                if (!e.et()) {
                    var r = t.data.field(e);
                    null !== r ? n.set(e, r) : n.delete(e);
                }
            })), n.Pt();
        }(t, r = e instanceof Pt ? e.data() : Dt.empty()), r = Xe(t.fieldTransforms, r, n);
    }

    function He(t, e, n) {
        var r = [];
        k$1(t.length === n.length);
        for (var i = 0; i < n.length; i++) {
            var o = t[i], u = o.transform, s = null;
            e instanceof Pt && (s = e.field(o.field)), r.push(Te(u, s, n[i]));
        }
        return r;
    }

    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use when applying a
     * transform locally.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param localWriteTime - The local time of the mutation (used to
     *     generate ServerTimestampValues).
     * @param maybeDoc - The current state of the document after applying all
     *     previous mutations.
     * @returns The transform results list.
     */ function Ke(t, e, n) {
        for (var r = [], i = 0, o = t; i < o.length; i++) {
            var u = o[i], s = u.transform, a = null;
            n instanceof Pt && (a = n.field(u.field)), r.push(Ee(s, a, e));
        }
        return r;
    }

    function Xe(t, e, n) {
        for (var r = new xt(e), i = 0; i < t.length; i++) {
            var o = t[i];
            r.set(o.field, n[i]);
        }
        return r.Pt();
    }

    /** A mutation that deletes the document at the given key. */ var We, Ze, Je = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this) || this).key = e, r.jt = n, r.type = 2 /* Delete */ , r.fieldTransforms = [], 
            r;
        }
        return __extends$1d(e, t), e;
    }(Me), $e = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this) || this).key = e, r.jt = n, r.type = 3 /* Verify */ , r.fieldTransforms = [], 
            r;
        }
        return __extends$1d(e, t), e;
    }(Me), tn = 
    // TODO(b/33078163): just use simplest form of existence filter for now
    function(t) {
        this.count = t;
    };

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
    function en(t) {
        switch (t) {
          case M$1.OK:
            return x$1();

          case M$1.CANCELLED:
          case M$1.UNKNOWN:
          case M$1.DEADLINE_EXCEEDED:
          case M$1.RESOURCE_EXHAUSTED:
          case M$1.INTERNAL:
          case M$1.UNAVAILABLE:
     // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.
                  case M$1.UNAUTHENTICATED:
            return !1;

          case M$1.INVALID_ARGUMENT:
          case M$1.NOT_FOUND:
          case M$1.ALREADY_EXISTS:
          case M$1.PERMISSION_DENIED:
          case M$1.FAILED_PRECONDITION:
     // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.
                  case M$1.ABORTED:
          case M$1.OUT_OF_RANGE:
          case M$1.UNIMPLEMENTED:
          case M$1.DATA_LOSS:
            return !0;

          default:
            return x$1();
        }
    }

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a write operation.
     *
     * Write operations must be handled specially because as of b/119437764, ABORTED
     * errors on the write stream should be retried too (even though ABORTED errors
     * are not generally retryable).
     *
     * Note that during the initial handshake on the write stream an ABORTED error
     * signals that we should discard our stream token (i.e. it is permanent). This
     * means a handshake error should be classified with isPermanentError, above.
     */
    /**
     * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
     * are not the same as HTTP status codes.
     *
     * @returns The Code equivalent to the given GRPC status code. Fails if there
     *     is no match.
     */ function nn(t) {
        if (void 0 === t) 
        // This shouldn't normally happen, but in certain error cases (like trying
        // to send invalid proto messages) we may get an error with no GRPC code.
        return A$1("GRPC error has no .code"), M$1.UNKNOWN;
        switch (t) {
          case We.OK:
            return M$1.OK;

          case We.CANCELLED:
            return M$1.CANCELLED;

          case We.UNKNOWN:
            return M$1.UNKNOWN;

          case We.DEADLINE_EXCEEDED:
            return M$1.DEADLINE_EXCEEDED;

          case We.RESOURCE_EXHAUSTED:
            return M$1.RESOURCE_EXHAUSTED;

          case We.INTERNAL:
            return M$1.INTERNAL;

          case We.UNAVAILABLE:
            return M$1.UNAVAILABLE;

          case We.UNAUTHENTICATED:
            return M$1.UNAUTHENTICATED;

          case We.INVALID_ARGUMENT:
            return M$1.INVALID_ARGUMENT;

          case We.NOT_FOUND:
            return M$1.NOT_FOUND;

          case We.ALREADY_EXISTS:
            return M$1.ALREADY_EXISTS;

          case We.PERMISSION_DENIED:
            return M$1.PERMISSION_DENIED;

          case We.FAILED_PRECONDITION:
            return M$1.FAILED_PRECONDITION;

          case We.ABORTED:
            return M$1.ABORTED;

          case We.OUT_OF_RANGE:
            return M$1.OUT_OF_RANGE;

          case We.UNIMPLEMENTED:
            return M$1.UNIMPLEMENTED;

          case We.DATA_LOSS:
            return M$1.DATA_LOSS;

          default:
            return x$1();
        }
    }

    /**
     * Converts an HTTP response's error status to the equivalent error code.
     *
     * @param status - An HTTP error response status ("FAILED_PRECONDITION",
     * "UNKNOWN", etc.)
     * @returns The equivalent Code. Non-matching responses are mapped to
     *     Code.UNKNOWN.
     */ (Ze = We || (We = {}))[Ze.OK = 0] = "OK", Ze[Ze.CANCELLED = 1] = "CANCELLED", 
    Ze[Ze.UNKNOWN = 2] = "UNKNOWN", Ze[Ze.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    Ze[Ze.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Ze[Ze.NOT_FOUND = 5] = "NOT_FOUND", 
    Ze[Ze.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Ze[Ze.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    Ze[Ze.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Ze[Ze.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    Ze[Ze.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Ze[Ze.ABORTED = 10] = "ABORTED", 
    Ze[Ze.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Ze[Ze.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    Ze[Ze.INTERNAL = 13] = "INTERNAL", Ze[Ze.UNAVAILABLE = 14] = "UNAVAILABLE", Ze[Ze.DATA_LOSS = 15] = "DATA_LOSS";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // An immutable sorted map implementation, based on a Left-leaning Red-Black
    // tree.
    var rn = /** @class */ function() {
        function t(t, e) {
            this.H = t, this.root = e || un.EMPTY;
        }
        // Returns a copy of the map, with the specified key/value added or replaced.
            return t.prototype.zt = function(e, n) {
            return new t(this.H, this.root.zt(e, n, this.H).copy(null, null, un.Ht, null, null));
        }, 
        // Returns a copy of the map, with the specified key removed.
        t.prototype.remove = function(e) {
            return new t(this.H, this.root.remove(e, this.H).copy(null, null, un.Ht, null, null));
        }, 
        // Returns the value of the node with the given key, or null.
        t.prototype.get = function(t) {
            for (var e = this.root; !e.et(); ) {
                var n = this.H(t, e.key);
                if (0 === n) return e.value;
                n < 0 ? e = e.left : n > 0 && (e = e.right);
            }
            return null;
        }, 
        // Returns the index of the element in this sorted map, or -1 if it doesn't
        // exist.
        t.prototype.indexOf = function(t) {
            for (
            // Number of nodes that were pruned when descending right
            var e = 0, n = this.root; !n.et(); ) {
                var r = this.H(t, n.key);
                if (0 === r) return e + n.left.size;
                r < 0 ? n = n.left : (
                // Count all nodes left of the node plus the node itself
                e += n.left.size + 1, n = n.right);
            }
            // Node not found
                    return -1;
        }, t.prototype.et = function() {
            return this.root.et();
        }, Object.defineProperty(t.prototype, "size", {
            // Returns the total number of nodes in the map.
            get: function() {
                return this.root.size;
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Returns the minimum key in the map.
        t.prototype.Jt = function() {
            return this.root.Jt();
        }, 
        // Returns the maximum key in the map.
        t.prototype.Yt = function() {
            return this.root.Yt();
        }, 
        // Traverses the map in key order and calls the specified action function
        // for each key/value pair. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.Xt = function(t) {
            return this.root.Xt(t);
        }, t.prototype.forEach = function(t) {
            this.Xt((function(e, n) {
                return t(e, n), !1;
            }));
        }, t.prototype.toString = function() {
            var t = [];
            return this.Xt((function(e, n) {
                return t.push(e + ":" + n), !1;
            })), "{" + t.join(", ") + "}";
        }, 
        // Traverses the map in reverse key order and calls the specified action
        // function for each key/value pair. If action returns true, traversal is
        // aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.Zt = function(t) {
            return this.root.Zt(t);
        }, 
        // Returns an iterator over the SortedMap.
        t.prototype.te = function() {
            return new on(this.root, null, this.H, !1);
        }, t.prototype.ee = function(t) {
            return new on(this.root, t, this.H, !1);
        }, t.prototype.ne = function() {
            return new on(this.root, null, this.H, !0);
        }, t.prototype.se = function(t) {
            return new on(this.root, t, this.H, !0);
        }, t;
    }(), on = /** @class */ function() {
        function t(t, e, n, r) {
            this.ie = r, this.re = [];
            for (var i = 1; !t.et(); ) if (i = e ? n(t.key, e) : 1, 
            // flip the comparison if we're going in reverse
            r && (i *= -1), i < 0) 
            // This node is less than our start key. ignore it
            t = this.ie ? t.left : t.right; else {
                if (0 === i) {
                    // This node is exactly equal to our start key. Push it on the stack,
                    // but stop iterating;
                    this.re.push(t);
                    break;
                }
                // This node is greater than our start key, add it to the stack and move
                // to the next one
                            this.re.push(t), t = this.ie ? t.right : t.left;
            }
        }
        return t.prototype.oe = function() {
            var t = this.re.pop(), e = {
                key: t.key,
                value: t.value
            };
            if (this.ie) for (t = t.left; !t.et(); ) this.re.push(t), t = t.right; else for (t = t.right; !t.et(); ) this.re.push(t), 
            t = t.left;
            return e;
        }, t.prototype.ce = function() {
            return this.re.length > 0;
        }, t.prototype.ae = function() {
            if (0 === this.re.length) return null;
            var t = this.re[this.re.length - 1];
            return {
                key: t.key,
                value: t.value
            };
        }, t;
    }(), un = /** @class */ function() {
        function t(e, n, r, i, o) {
            this.key = e, this.value = n, this.color = null != r ? r : t.RED, this.left = null != i ? i : t.EMPTY, 
            this.right = null != o ? o : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
        }
        // Returns a copy of the current node, optionally replacing pieces of it.
            return t.prototype.copy = function(e, n, r, i, o) {
            return new t(null != e ? e : this.key, null != n ? n : this.value, null != r ? r : this.color, null != i ? i : this.left, null != o ? o : this.right);
        }, t.prototype.et = function() {
            return !1;
        }, 
        // Traverses the tree in key order and calls the specified action function
        // for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.Xt = function(t) {
            return this.left.Xt(t) || t(this.key, this.value) || this.right.Xt(t);
        }, 
        // Traverses the tree in reverse key order and calls the specified action
        // function for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.Zt = function(t) {
            return this.right.Zt(t) || t(this.key, this.value) || this.left.Zt(t);
        }, 
        // Returns the minimum node in the tree.
        t.prototype.min = function() {
            return this.left.et() ? this : this.left.min();
        }, 
        // Returns the maximum key in the tree.
        t.prototype.Jt = function() {
            return this.min().key;
        }, 
        // Returns the maximum key in the tree.
        t.prototype.Yt = function() {
            return this.right.et() ? this.key : this.right.Yt();
        }, 
        // Returns new tree, with the key/value added.
        t.prototype.zt = function(t, e, n) {
            var r = this, i = n(t, r.key);
            return (r = i < 0 ? r.copy(null, null, null, r.left.zt(t, e, n), null) : 0 === i ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.zt(t, e, n))).ue();
        }, t.prototype.he = function() {
            if (this.left.et()) return t.EMPTY;
            var e = this;
            return e.left.le() || e.left.left.le() || (e = e._e()), (e = e.copy(null, null, null, e.left.he(), null)).ue();
        }, 
        // Returns new tree, with the specified item removed.
        t.prototype.remove = function(e, n) {
            var r, i = this;
            if (n(e, i.key) < 0) i.left.et() || i.left.le() || i.left.left.le() || (i = i._e()), 
            i = i.copy(null, null, null, i.left.remove(e, n), null); else {
                if (i.left.le() && (i = i.fe()), i.right.et() || i.right.le() || i.right.left.le() || (i = i.de()), 
                0 === n(e, i.key)) {
                    if (i.right.et()) return t.EMPTY;
                    r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.he());
                }
                i = i.copy(null, null, null, null, i.right.remove(e, n));
            }
            return i.ue();
        }, t.prototype.le = function() {
            return this.color;
        }, 
        // Returns new tree after performing any needed rotations.
        t.prototype.ue = function() {
            var t = this;
            return t.right.le() && !t.left.le() && (t = t.we()), t.left.le() && t.left.left.le() && (t = t.fe()), 
            t.left.le() && t.right.le() && (t = t.Ee()), t;
        }, t.prototype._e = function() {
            var t = this.Ee();
            return t.right.left.le() && (t = (t = (t = t.copy(null, null, null, null, t.right.fe())).we()).Ee()), 
            t;
        }, t.prototype.de = function() {
            var t = this.Ee();
            return t.left.left.le() && (t = (t = t.fe()).Ee()), t;
        }, t.prototype.we = function() {
            var e = this.copy(null, null, t.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, e, null);
        }, t.prototype.fe = function() {
            var e = this.copy(null, null, t.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, e);
        }, t.prototype.Ee = function() {
            var t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, t, e);
        }, 
        // For testing.
        t.prototype.Te = function() {
            var t = this.Ie();
            return Math.pow(2, t) <= this.size + 1;
        }, 
        // In a balanced RB tree, the black-depth (number of black nodes) from root to
        // leaves is equal on both sides.  This function verifies that or asserts.
        t.prototype.Ie = function() {
            if (this.le() && this.left.le()) throw x$1();
            if (this.right.le()) throw x$1();
            var t = this.left.Ie();
            if (t !== this.right.Ie()) throw x$1();
            return t + (this.le() ? 0 : 1);
        }, t;
    }();

    // end SortedMap
    // An iterator over an LLRBNode.
    // end LLRBNode
    // Empty node is shared between all LLRB trees.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    un.EMPTY = null, un.RED = !0, un.Ht = !1, 
    // end LLRBEmptyNode
    un.EMPTY = new (/** @class */ function() {
        function t() {
            this.size = 0;
        }
        return Object.defineProperty(t.prototype, "key", {
            get: function() {
                throw x$1();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "value", {
            get: function() {
                throw x$1();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "color", {
            get: function() {
                throw x$1();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "left", {
            get: function() {
                throw x$1();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "right", {
            get: function() {
                throw x$1();
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Returns a copy of the current node.
        t.prototype.copy = function(t, e, n, r, i) {
            return this;
        }, 
        // Returns a copy of the tree, with the specified key/value added.
        t.prototype.zt = function(t, e, n) {
            return new un(t, e);
        }, 
        // Returns a copy of the tree, with the specified key removed.
        t.prototype.remove = function(t, e) {
            return this;
        }, t.prototype.et = function() {
            return !0;
        }, t.prototype.Xt = function(t) {
            return !1;
        }, t.prototype.Zt = function(t) {
            return !1;
        }, t.prototype.Jt = function() {
            return null;
        }, t.prototype.Yt = function() {
            return null;
        }, t.prototype.le = function() {
            return !1;
        }, 
        // For testing.
        t.prototype.Te = function() {
            return !0;
        }, t.prototype.Ie = function() {
            return 0;
        }, t;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SortedSet is an immutable (copy-on-write) collection that holds elements
     * in order specified by the provided comparator.
     *
     * NOTE: if provided comparator returns 0 for two elements, we consider them to
     * be equal!
     */
    var sn = /** @class */ function() {
        function t(t) {
            this.H = t, this.data = new rn(this.H);
        }
        return t.prototype.has = function(t) {
            return null !== this.data.get(t);
        }, t.prototype.first = function() {
            return this.data.Jt();
        }, t.prototype.last = function() {
            return this.data.Yt();
        }, Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.data.size;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.indexOf = function(t) {
            return this.data.indexOf(t);
        }, 
        /** Iterates elements in order defined by "comparator" */ t.prototype.forEach = function(t) {
            this.data.Xt((function(e, n) {
                return t(e), !1;
            }));
        }, 
        /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */ t.prototype.me = function(t, e) {
            for (var n = this.data.ee(t[0]); n.ce(); ) {
                var r = n.oe();
                if (this.H(r.key, t[1]) >= 0) return;
                e(r.key);
            }
        }, 
        /**
         * Iterates over `elem`s such that: start &lt;= elem until false is returned.
         */
        t.prototype.Ae = function(t, e) {
            var n;
            for (n = void 0 !== e ? this.data.ee(e) : this.data.te(); n.ce(); ) if (!t(n.oe().key)) return;
        }, 
        /** Finds the least element greater than or equal to `elem`. */ t.prototype.Re = function(t) {
            var e = this.data.ee(t);
            return e.ce() ? e.oe().key : null;
        }, t.prototype.te = function() {
            return new an(this.data.te());
        }, t.prototype.ee = function(t) {
            return new an(this.data.ee(t));
        }, 
        /** Inserts or updates an element */ t.prototype.add = function(t) {
            return this.copy(this.data.remove(t).zt(t, !0));
        }, 
        /** Deletes an element */ t.prototype.delete = function(t) {
            return this.has(t) ? this.copy(this.data.remove(t)) : this;
        }, t.prototype.et = function() {
            return this.data.et();
        }, t.prototype.Pe = function(t) {
            var e = this;
            // Make sure `result` always refers to the larger one of the two sets.
                    return e.size < t.size && (e = t, t = this), t.forEach((function(t) {
                e = e.add(t);
            })), e;
        }, t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) return !1;
            if (this.size !== e.size) return !1;
            for (var n = this.data.te(), r = e.data.te(); n.ce(); ) {
                var i = n.oe().key, o = r.oe().key;
                if (0 !== this.H(i, o)) return !1;
            }
            return !0;
        }, t.prototype.it = function() {
            var t = [];
            return this.forEach((function(e) {
                t.push(e);
            })), t;
        }, t.prototype.toString = function() {
            var t = [];
            return this.forEach((function(e) {
                return t.push(e);
            })), "SortedSet(" + t.toString() + ")";
        }, t.prototype.copy = function(e) {
            var n = new t(this.H);
            return n.data = e, n;
        }, t;
    }(), an = /** @class */ function() {
        function t(t) {
            this.ye = t;
        }
        return t.prototype.oe = function() {
            return this.ye.oe().key;
        }, t.prototype.ce = function() {
            return this.ye.ce();
        }, t;
    }(), cn = new rn(tt.H);

    function hn() {
        return cn;
    }

    function fn() {
        return hn();
    }

    var ln = new rn(tt.H);

    function pn() {
        return ln;
    }

    var dn = new rn(tt.H);

    function vn() {
        return dn;
    }

    var yn = new sn(tt.H);

    function mn() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        for (var n = yn, r = 0, i = t; r < i.length; r++) {
            var o = i[r];
            n = n.add(o);
        }
        return n;
    }

    var gn = new sn(V$1);

    function wn() {
        return gn;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentSet is an immutable (copy-on-write) collection that holds documents
     * in order specified by the provided comparator. We always add a document key
     * comparator on top of what is provided to guarantee document equality based on
     * the key.
     */ var bn = /** @class */ function() {
        /** The default ordering is by key if the comparator is omitted */
        function t(t) {
            // We are adding document key comparator to the end as it's the only
            // guaranteed unique property of a document.
            this.H = t ? function(e, n) {
                return t(e, n) || tt.H(e.key, n.key);
            } : function(t, e) {
                return tt.H(t.key, e.key);
            }, this.ge = pn(), this.Ve = new rn(this.H)
            /**
         * Returns an empty copy of the existing DocumentSet, using the same
         * comparator.
         */;
        }
        return t.pe = function(e) {
            return new t(e.H);
        }, t.prototype.has = function(t) {
            return null != this.ge.get(t);
        }, t.prototype.get = function(t) {
            return this.ge.get(t);
        }, t.prototype.first = function() {
            return this.Ve.Jt();
        }, t.prototype.last = function() {
            return this.Ve.Yt();
        }, t.prototype.et = function() {
            return this.Ve.et();
        }, 
        /**
         * Returns the index of the provided key in the document set, or -1 if the
         * document key is not present in the set;
         */
        t.prototype.indexOf = function(t) {
            var e = this.ge.get(t);
            return e ? this.Ve.indexOf(e) : -1;
        }, Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.Ve.size;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /** Iterates documents in order defined by "comparator" */ t.prototype.forEach = function(t) {
            this.Ve.Xt((function(e, n) {
                return t(e), !1;
            }));
        }, 
        /** Inserts or updates a document with the same key */ t.prototype.add = function(t) {
            // First remove the element if we have it.
            var e = this.delete(t.key);
            return e.copy(e.ge.zt(t.key, t), e.Ve.zt(t, null));
        }, 
        /** Deletes a document with a given key */ t.prototype.delete = function(t) {
            var e = this.get(t);
            return e ? this.copy(this.ge.remove(t), this.Ve.remove(e)) : this;
        }, t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) return !1;
            if (this.size !== e.size) return !1;
            for (var n = this.Ve.te(), r = e.Ve.te(); n.ce(); ) {
                var i = n.oe().key, o = r.oe().key;
                if (!i.isEqual(o)) return !1;
            }
            return !0;
        }, t.prototype.toString = function() {
            var t = [];
            return this.forEach((function(e) {
                t.push(e.toString());
            })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
        }, t.prototype.copy = function(e, n) {
            var r = new t;
            return r.H = this.H, r.ge = e, r.Ve = n, r;
        }, t;
    }(), _n = /** @class */ function() {
        function t() {
            this.be = new rn(tt.H);
        }
        return t.prototype.track = function(t) {
            var e = t.doc.key, n = this.be.get(e);
            n ? 
            // Merge the new change with the existing change.
            0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.be = this.be.zt(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.be = this.be.zt(e, {
                type: n.type,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.be = this.be.zt(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.be = this.be.zt(e, {
                type: 0 /* Added */ ,
                doc: t.doc
            }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.be = this.be.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.be = this.be.zt(e, {
                type: 1 /* Removed */ ,
                doc: n.doc
            }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.be = this.be.zt(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            x$1() : this.be = this.be.zt(e, t);
        }, t.prototype.ve = function() {
            var t = [];
            return this.be.Xt((function(e, n) {
                t.push(n);
            })), t;
        }, t;
    }(), In = /** @class */ function() {
        function t(t, e, n, r, i, o, u, s) {
            this.query = t, this.docs = e, this.Se = n, this.docChanges = r, this.De = i, this.fromCache = o, 
            this.Ce = u, this.xe = s
            /** Returns a view snapshot as if all documents in the snapshot were added. */;
        }
        return t.Ne = function(e, n, r, i) {
            var o = [];
            return n.forEach((function(t) {
                o.push({
                    type: 0 /* Added */ ,
                    doc: t
                });
            })), new t(e, n, bn.pe(n), o, r, i, 
            /* syncStateChanged= */ !0, 
            /* excludesMetadataChanges= */ !1);
        }, Object.defineProperty(t.prototype, "hasPendingWrites", {
            get: function() {
                return !this.De.et();
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            if (!(this.fromCache === t.fromCache && this.Ce === t.Ce && this.De.isEqual(t.De) && le(this.query, t.query) && this.docs.isEqual(t.docs) && this.Se.isEqual(t.Se))) return !1;
            var e = this.docChanges, n = t.docChanges;
            if (e.length !== n.length) return !1;
            for (var r = 0; r < e.length; r++) if (e[r].type !== n[r].type || !e[r].doc.isEqual(n[r].doc)) return !1;
            return !0;
        }, t;
    }(), En = /** @class */ function() {
        function t(
        /**
         * The snapshot version this event brings us up to, or MIN if not set.
         */
        t, 
        /**
         * A map from target to changes to the target. See TargetChange.
         */
        e, 
        /**
         * A set of targets that is known to be inconsistent. Listens for these
         * targets should be re-established without resume tokens.
         */
        n, 
        /**
         * A set of which documents have changed or been deleted, along with the
         * doc's new values (if not deleted).
         */
        r, 
        /**
         * A set of which document updates are due only to limbo resolution targets.
         */
        i) {
            this.kt = t, this.Fe = e, this.Oe = n, this.ke = r, this.Me = i;
        }
        /**
         * HACK: Views require RemoteEvents in order to determine whether the view is
         * CURRENT, but secondary tabs don't receive remote events. So this method is
         * used to create a synthesized RemoteEvent that can be used to apply a
         * CURRENT status change to a View, for queries executed in a different tab.
         */
        // PORTING NOTE: Multi-tab only
            return t.Le = function(e, n) {
            var r = new Map;
            return r.set(e, Tn.$e(e, n)), new t(X$1.min(), r, wn(), hn(), mn());
        }, t;
    }(), Tn = /** @class */ function() {
        function t(
        /**
         * An opaque, server-assigned token that allows watching a query to be resumed
         * after disconnecting without retransmitting all the data that matches the
         * query. The resume token essentially identifies a point in time from which
         * the server should resume sending results.
         */
        t, 
        /**
         * The "current" (synced) status of this target. Note that "current"
         * has special meaning in the RPC protocol that implies that a target is
         * both up-to-date and consistent with the rest of the watch stream.
         */
        e, 
        /**
         * The set of documents that were newly assigned to this target as part of
         * this remote event.
         */
        n, 
        /**
         * The set of documents that were already assigned to this target but received
         * an update during this remote event.
         */
        r, 
        /**
         * The set of documents that were removed from this target as part of this
         * remote event.
         */
        i) {
            this.resumeToken = t, this.Be = e, this.qe = n, this.Ue = r, this.Qe = i
            /**
         * This method is used to create a synthesized TargetChanges that can be used to
         * apply a CURRENT status change to a View (for queries executed in a different
         * tab) or for new queries (to raise snapshots with correct CURRENT status).
         */;
        }
        return t.$e = function(e, n) {
            return new t(U$1.T, n, mn(), mn(), mn());
        }, t;
    }(), Nn = function(
    /** The new document applies to all of these targets. */
    t, 
    /** The new document is removed from all of these targets. */
    e, 
    /** The key of the document for this change. */
    n, 
    /**
         * The new document or NoDocument if it was deleted. Is null if the
         * document went out of view without the server sending a new document.
         */
    r) {
        this.Ke = t, this.removedTargetIds = e, this.key = n, this.We = r;
    }, An = function(t, e) {
        this.targetId = t, this.je = e;
    }, Sn = function(
    /** What kind of change occurred to the watch target. */
    t, 
    /** The target IDs that were added/removed/set. */
    e, 
    /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
    n
    /** An RPC error indicating why the watch failed. */ , r) {
        void 0 === n && (n = U$1.T), void 0 === r && (r = null), this.state = t, this.targetIds = e, 
        this.resumeToken = n, this.cause = r;
    }, Dn = /** @class */ function() {
        function t() {
            /**
             * The number of pending responses (adds or removes) that we are waiting on.
             * We only consider targets active that have no pending responses.
             */
            this.Ge = 0, 
            /**
                 * Keeps track of the document changes since the last raised snapshot.
                 *
                 * These changes are continuously updated as we receive document updates and
                 * always reflect the current set of changes against the last issued snapshot.
                 */
            this.ze = On(), 
            /** See public getters for explanations of these fields. */
            this.He = U$1.T, this.Je = !1, 
            /**
                 * Whether this target state should be included in the next snapshot. We
                 * initialize to true so that newly-added targets are included in the next
                 * RemoteEvent.
                 */
            this.Ye = !0;
        }
        return Object.defineProperty(t.prototype, "Be", {
            /**
             * Whether this target has been marked 'current'.
             *
             * 'Current' has special meaning in the RPC protocol: It implies that the
             * Watch backend has sent us all changes up to the point at which the target
             * was added and that the target is consistent with the rest of the watch
             * stream.
             */
            get: function() {
                return this.Je;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "resumeToken", {
            /** The last resume token sent to us for this target. */ get: function() {
                return this.He;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "Xe", {
            /** Whether this target has pending target adds or target removes. */ get: function() {
                return 0 !== this.Ge;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "Ze", {
            /** Whether we have modified any state that should trigger a snapshot. */ get: function() {
                return this.Ye;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Applies the resume token to the TargetChange, but only when it has a new
         * value. Empty resumeTokens are discarded.
         */
        t.prototype.tn = function(t) {
            t.l() > 0 && (this.Ye = !0, this.He = t);
        }, 
        /**
         * Creates a target change from the current set of changes.
         *
         * To reset the document changes after raising this snapshot, call
         * `clearPendingChanges()`.
         */
        t.prototype.en = function() {
            var t = mn(), e = mn(), n = mn();
            return this.ze.forEach((function(r, i) {
                switch (i) {
                  case 0 /* Added */ :
                    t = t.add(r);
                    break;

                  case 2 /* Modified */ :
                    e = e.add(r);
                    break;

                  case 1 /* Removed */ :
                    n = n.add(r);
                    break;

                  default:
                    x$1();
                }
            })), new Tn(this.He, this.Je, t, e, n);
        }, 
        /**
         * Resets the document changes and sets `hasPendingChanges` to false.
         */
        t.prototype.nn = function() {
            this.Ye = !1, this.ze = On();
        }, t.prototype.sn = function(t, e) {
            this.Ye = !0, this.ze = this.ze.zt(t, e);
        }, t.prototype.rn = function(t) {
            this.Ye = !0, this.ze = this.ze.remove(t);
        }, t.prototype.on = function() {
            this.Ge += 1;
        }, t.prototype.cn = function() {
            this.Ge -= 1;
        }, t.prototype.an = function() {
            this.Ye = !0, this.Je = !0;
        }, t;
    }(), xn = /** @class */ function() {
        function t(t) {
            this.un = t, 
            /** The internal state of all tracked targets. */
            this.hn = new Map, 
            /** Keeps track of the documents to update since the last raised snapshot. */
            this.ln = hn(), 
            /** A mapping of document keys to their set of target IDs. */
            this._n = kn(), 
            /**
                 * A list of targets with existence filter mismatches. These targets are
                 * known to be inconsistent and their listens needs to be re-established by
                 * RemoteStore.
                 */
            this.fn = new sn(V$1)
            /**
         * Processes and adds the DocumentWatchChange to the current set of changes.
         */;
        }
        return t.prototype.dn = function(t) {
            for (var e = 0, n = t.Ke; e < n.length; e++) {
                var r = n[e];
                t.We instanceof Pt ? this.wn(r, t.We) : t.We instanceof Lt && this.En(r, t.key, t.We);
            }
            for (var i = 0, o = t.removedTargetIds; i < o.length; i++) {
                r = o[i];
                this.En(r, t.key, t.We);
            }
        }, 
        /** Processes and adds the WatchTargetChange to the current set of changes. */ t.prototype.Tn = function(t) {
            var e = this;
            this.In(t, (function(n) {
                var r = e.mn(n);
                switch (t.state) {
                  case 0 /* NoChange */ :
                    e.An(n) && r.tn(t.resumeToken);
                    break;

                  case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    r.cn(), r.Xe || 
                    // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    r.nn(), r.tn(t.resumeToken);
                    break;

                  case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    r.cn(), r.Xe || e.removeTarget(n);
                    break;

                  case 3 /* Current */ :
                    e.An(n) && (r.an(), r.tn(t.resumeToken));
                    break;

                  case 4 /* Reset */ :
                    e.An(n) && (
                    // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    e.Rn(n), r.tn(t.resumeToken));
                    break;

                  default:
                    x$1();
                }
            }));
        }, 
        /**
         * Iterates over all targetIds that the watch change applies to: either the
         * targetIds explicitly listed in the change or the targetIds of all currently
         * active targets.
         */
        t.prototype.In = function(t, e) {
            var n = this;
            t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.hn.forEach((function(t, r) {
                n.An(r) && e(r);
            }));
        }, 
        /**
         * Handles existence filters and synthesizes deletes for filter mismatches.
         * Targets that are invalidated by filter mismatches are added to
         * `pendingTargetResets`.
         */
        t.prototype.Pn = function(t) {
            var e = t.targetId, n = t.je.count, r = this.yn(e);
            if (r) {
                var i = r.target;
                if (qt(i)) if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    var o = new tt(i.path);
                    this.En(e, o, new Lt(o, X$1.min()));
                } else k$1(1 === n); else this.gn(e) !== n && (
                // Existence filter mismatch: We reset the mapping and raise a new
                // snapshot with `isFromCache:true`.
                this.Rn(e), this.fn = this.fn.add(e));
            }
        }, 
        /**
         * Converts the currently accumulated state into a remote event at the
         * provided snapshot version. Resets the accumulated changes before returning.
         */
        t.prototype.Vn = function(t) {
            var e = this, n = new Map;
            this.hn.forEach((function(r, i) {
                var o = e.yn(i);
                if (o) {
                    if (r.Be && qt(o.target)) {
                        // Document queries for document that don't exist can produce an empty
                        // result set. To update our local cache, we synthesize a document
                        // delete if we have not previously received the document. This
                        // resolves the limbo state of the document, removing it from
                        // limboDocumentRefs.
                        // TODO(dimond): Ideally we would have an explicit lookup target
                        // instead resulting in an explicit delete message and we could
                        // remove this special logic.
                        var u = new tt(o.target.path);
                        null !== e.ln.get(u) || e.pn(i, u) || e.En(i, u, new Lt(u, t));
                    }
                    r.Ze && (n.set(i, r.en()), r.nn());
                }
            }));
            var r = mn();
            // We extract the set of limbo-only document updates as the GC logic
            // special-cases documents that do not appear in the target cache.
            // TODO(gsoltis): Expand on this comment once GC is available in the JS
            // client.
                    this._n.forEach((function(t, n) {
                var i = !0;
                n.Ae((function(t) {
                    var n = e.yn(t);
                    return !n || 2 /* LimboResolution */ === n.Ot || (i = !1, !1);
                })), i && (r = r.add(t));
            }));
            var i = new En(t, n, this.fn, this.ln, r);
            return this.ln = hn(), this._n = kn(), this.fn = new sn(V$1), i;
        }, 
        /**
         * Adds the provided document to the internal list of document updates and
         * its document key to the given target's mapping.
         */
        // Visible for testing.
        t.prototype.wn = function(t, e) {
            if (this.An(t)) {
                var n = this.pn(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
                this.mn(t).sn(e.key, n), this.ln = this.ln.zt(e.key, e), this._n = this._n.zt(e.key, this.bn(e.key).add(t));
            }
        }, 
        /**
         * Removes the provided document from the target mapping. If the
         * document no longer matches the target, but the document's state is still
         * known (e.g. we know that the document was deleted or we received the change
         * that caused the filter mismatch), the new document can be provided
         * to update the remote document cache.
         */
        // Visible for testing.
        t.prototype.En = function(t, e, n) {
            if (this.An(t)) {
                var r = this.mn(t);
                this.pn(t, e) ? r.sn(e, 1 /* Removed */) : 
                // The document may have entered and left the target before we raised a
                // snapshot, so we can just ignore the change.
                r.rn(e), this._n = this._n.zt(e, this.bn(e).delete(t)), n && (this.ln = this.ln.zt(e, n));
            }
        }, t.prototype.removeTarget = function(t) {
            this.hn.delete(t);
        }, 
        /**
         * Returns the current count of documents in the target. This includes both
         * the number of documents that the LocalStore considers to be part of the
         * target as well as any accumulated changes.
         */
        t.prototype.gn = function(t) {
            var e = this.mn(t).en();
            return this.un.vn(t).size + e.qe.size - e.Qe.size;
        }, 
        /**
         * Increment the number of acks needed from watch before we can consider the
         * server to be 'in-sync' with the client's active targets.
         */
        t.prototype.on = function(t) {
            this.mn(t).on();
        }, t.prototype.mn = function(t) {
            var e = this.hn.get(t);
            return e || (e = new Dn, this.hn.set(t, e)), e;
        }, t.prototype.bn = function(t) {
            var e = this._n.get(t);
            return e || (e = new sn(V$1), this._n = this._n.zt(t, e)), e;
        }, 
        /**
         * Verifies that the user is still interested in this target (by calling
         * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
         * from watch.
         */
        t.prototype.An = function(t) {
            var e = null !== this.yn(t);
            return e || N$1("WatchChangeAggregator", "Detected inactive target", t), e;
        }, 
        /**
         * Returns the TargetData for an active target (i.e. a target that the user
         * is still interested in that has no outstanding target change requests).
         */
        t.prototype.yn = function(t) {
            var e = this.hn.get(t);
            return e && e.Xe ? null : this.un.Sn(t);
        }, 
        /**
         * Resets the state of a Watch target to its initial state (e.g. sets
         * 'current' to false, clears the resume token and removes its target mapping
         * from all documents).
         */
        t.prototype.Rn = function(t) {
            var e = this;
            this.hn.set(t, new Dn), this.un.vn(t).forEach((function(n) {
                e.En(t, n, /*updatedDocument=*/ null);
            }));
        }, 
        /**
         * Returns whether the LocalStore considers the document to be part of the
         * specified target.
         */
        t.prototype.pn = function(t, e) {
            return this.un.vn(t).has(e);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
     * duplicate events for the same doc.
     */ function kn() {
        return new rn(tt.H);
    }

    function On() {
        return new rn(tt.H);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Pn = {
        asc: "ASCENDING",
        desc: "DESCENDING"
    }, Ln = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
    }, Vn = function(t, e) {
        this.t = t, this.Bt = e;
    };

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */
    function Cn(t, e) {
        return t.Bt ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
            seconds: "" + e.seconds,
            nanos: e.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */ function Rn(t, e) {
        return t.Bt ? e.toBase64() : e.toUint8Array();
    }

    /**
     * Returns a ByteString based on the proto string value.
     */ function Un(t, e) {
        return Cn(t, e.j());
    }

    function Mn(t) {
        return k$1(!!t), X$1.K(function(t) {
            var e = ut(t);
            return new K$1(e.seconds, e.nanos);
        }(t));
    }

    function qn(t, e) {
        return function(t) {
            return new Z$1([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(e).rt();
    }

    function jn(t) {
        var e = Z$1.ot(t);
        return k$1(hr(e)), e;
    }

    function Fn(t, e) {
        return qn(t.t, e.path);
    }

    function zn(t, e) {
        var n = jn(e);
        if (n.get(1) !== t.t.projectId) throw new q$1(M$1.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.t.projectId);
        if (n.get(3) !== t.t.database) throw new q$1(M$1.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.t.database);
        return new tt(Yn(n));
    }

    function Gn(t, e) {
        return qn(t.t, e);
    }

    function Bn(t) {
        var e = jn(t);
        // In v1beta1 queries for collections at the root did not have a trailing
        // "/documents". In v1 all resource paths contain "/documents". Preserve the
        // ability to read the v1beta1 form for compatibility with queries persisted
        // in the local target cache.
            return 4 === e.length ? Z$1.ct() : Yn(e);
    }

    function Qn(t) {
        return new Z$1([ "projects", t.t.projectId, "databases", t.t.database ]).rt();
    }

    function Yn(t) {
        return k$1(t.length > 4 && "documents" === t.get(4)), t.Y(5)
        /** Creates a Document proto from key and fields (but no create/update time) */;
    }

    function Hn(t, e, n) {
        return {
            name: Fn(t, e),
            fields: n.proto.mapValue.fields
        };
    }

    function Kn(t, e, n) {
        var r = zn(t, e.name), i = Mn(e.updateTime), o = new Dt({
            mapValue: {
                fields: e.fields
            }
        });
        return new Pt(r, i, o, {
            hasCommittedMutations: !!n
        });
    }

    function Xn(t, e) {
        var n;
        if (e instanceof Be) n = {
            update: Hn(t, e.key, e.value)
        }; else if (e instanceof Je) n = {
            delete: Fn(t, e.key)
        }; else if (e instanceof Qe) n = {
            update: Hn(t, e.key, e.data),
            updateMask: cr(e.Gt)
        }; else {
            if (!(e instanceof $e)) return x$1();
            n = {
                verify: Fn(t, e.key)
            };
        }
        return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((function(t) {
            return function(t, e) {
                var n = e.transform;
                if (n instanceof Ae) return {
                    fieldPath: e.field.rt(),
                    setToServerValue: "REQUEST_TIME"
                };
                if (n instanceof Se) return {
                    fieldPath: e.field.rt(),
                    appendMissingElements: {
                        values: n.elements
                    }
                };
                if (n instanceof xe) return {
                    fieldPath: e.field.rt(),
                    removeAllFromArray: {
                        values: n.elements
                    }
                };
                if (n instanceof Oe) return {
                    fieldPath: e.field.rt(),
                    increment: n.Ut
                };
                throw x$1();
            }(0, t);
        }))), e.jt.Wt || (n.currentDocument = function(t, e) {
            return void 0 !== e.updateTime ? {
                updateTime: Un(t, e.updateTime)
            } : void 0 !== e.exists ? {
                exists: e.exists
            } : x$1();
        }(t, e.jt)), n;
    }

    function Wn(t, e) {
        var n = e.currentDocument ? function(t) {
            return void 0 !== t.updateTime ? Re.updateTime(Mn(t.updateTime)) : void 0 !== t.exists ? Re.exists(t.exists) : Re.Kt();
        }(e.currentDocument) : Re.Kt(), r = e.updateTransforms ? e.updateTransforms.map((function(e) {
            return function(t, e) {
                var n = null;
                if ("setToServerValue" in e) k$1("REQUEST_TIME" === e.setToServerValue), n = new Ae; else if ("appendMissingElements" in e) {
                    var r = e.appendMissingElements.values || [];
                    n = new Se(r);
                } else if ("removeAllFromArray" in e) {
                    var i = e.removeAllFromArray.values || [];
                    n = new xe(i);
                } else "increment" in e ? n = new Oe(t, e.increment) : x$1();
                var o = $.lt(e.fieldPath);
                return new Ve(o, n);
            }(t, e);
        })) : [];
        if (e.update) {
            e.update.name;
            var i = zn(t, e.update.name), o = new Dt({
                mapValue: {
                    fields: e.update.fields
                }
            });
            if (e.updateMask) {
                var u = function(t) {
                    var e = t.fieldPaths || [];
                    return new it(e.map((function(t) {
                        return $.lt(t);
                    })));
                }(e.updateMask);
                return new Qe(i, o, u, n, r);
            }
            return new Be(i, o, n, r);
        }
        if (e.delete) {
            var s = zn(t, e.delete);
            return new Je(s, n);
        }
        if (e.verify) {
            var a = zn(t, e.verify);
            return new $e(a, n);
        }
        return x$1();
    }

    function Zn(t, e) {
        return {
            documents: [ Gn(t, e.path) ]
        };
    }

    function Jn(t, e) {
        // Dissect the path into parent, collectionId, and optional key filter.
        var n = {
            structuredQuery: {}
        }, r = e.path;
        null !== e.collectionGroup ? (n.parent = Gn(t, r), n.structuredQuery.from = [ {
            collectionId: e.collectionGroup,
            allDescendants: !0
        } ]) : (n.parent = Gn(t, r.X()), n.structuredQuery.from = [ {
            collectionId: r.tt()
        } ]);
        var i = function(t) {
            if (0 !== t.length) {
                var e = t.map((function(t) {
                    // visible for testing
                    return function(t) {
                        if ("==" /* EQUAL */ === t.op) {
                            if (At(t.value)) return {
                                unaryFilter: {
                                    field: or(t.field),
                                    op: "IS_NAN"
                                }
                            };
                            if (Nt(t.value)) return {
                                unaryFilter: {
                                    field: or(t.field),
                                    op: "IS_NULL"
                                }
                            };
                        } else if ("!=" /* NOT_EQUAL */ === t.op) {
                            if (At(t.value)) return {
                                unaryFilter: {
                                    field: or(t.field),
                                    op: "IS_NOT_NAN"
                                }
                            };
                            if (Nt(t.value)) return {
                                unaryFilter: {
                                    field: or(t.field),
                                    op: "IS_NOT_NULL"
                                }
                            };
                        }
                        return {
                            fieldFilter: {
                                field: or(t.field),
                                op: ir(t.op),
                                value: t.value
                            }
                        };
                    }(t);
                }));
                return 1 === e.length ? e[0] : {
                    compositeFilter: {
                        op: "AND",
                        filters: e
                    }
                };
            }
        }(e.filters);
        i && (n.structuredQuery.where = i);
        var o = function(t) {
            if (0 !== t.length) return t.map((function(t) {
                // visible for testing
                return function(t) {
                    return {
                        field: or(t.field),
                        direction: rr(t.dir)
                    };
                }(t);
            }));
        }(e.orderBy);
        o && (n.structuredQuery.orderBy = o);
        var u = function(t, e) {
            return t.Bt || lt(e) ? e : {
                value: e
            };
        }(t, e.limit);
        return null !== u && (n.structuredQuery.limit = u), e.startAt && (n.structuredQuery.startAt = er(e.startAt)), 
        e.endAt && (n.structuredQuery.endAt = er(e.endAt)), n;
    }

    function $n(t) {
        var e = Bn(t.parent), n = t.structuredQuery, r = n.from ? n.from.length : 0, i = null;
        if (r > 0) {
            k$1(1 === r);
            var o = n.from[0];
            o.allDescendants ? i = o.collectionId : e = e.child(o.collectionId);
        }
        var u = [];
        n.where && (u = tr(n.where));
        var s = [];
        n.orderBy && (s = n.orderBy.map((function(t) {
            return function(t) {
                return new Zt(ur(t.field), 
                // visible for testing
                function(t) {
                    switch (t) {
                      case "ASCENDING":
                        return "asc" /* ASCENDING */;

                      case "DESCENDING":
                        return "desc" /* DESCENDING */;

                      default:
                        return;
                    }
                }(t.direction));
            }(t);
        })));
        var a = null;
        n.limit && (a = function(t) {
            var e;
            return lt(e = "object" == typeof t ? t.value : t) ? null : e;
        }(n.limit));
        var c = null;
        n.startAt && (c = nr(n.startAt));
        var h = null;
        return n.endAt && (h = nr(n.endAt)), ne(e, i, s, u, a, "F" /* First */ , c, h);
    }

    function tr(t) {
        return t ? void 0 !== t.unaryFilter ? [ ar(t) ] : void 0 !== t.fieldFilter ? [ sr(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((function(t) {
            return tr(t);
        })).reduce((function(t, e) {
            return t.concat(e);
        })) : x$1() : [];
    }

    function er(t) {
        return {
            before: t.before,
            values: t.position
        };
    }

    function nr(t) {
        var e = !!t.before, n = t.values || [];
        return new Xt(n, e);
    }

    // visible for testing
    function rr(t) {
        return Pn[t];
    }

    function ir(t) {
        return Ln[t];
    }

    function or(t) {
        return {
            fieldPath: t.rt()
        };
    }

    function ur(t) {
        return $.lt(t.fieldPath);
    }

    function sr(t) {
        return jt.create(ur(t.fieldFilter.field), function(t) {
            switch (t) {
              case "EQUAL":
                return "==" /* EQUAL */;

              case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */;

              case "GREATER_THAN":
                return ">" /* GREATER_THAN */;

              case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */;

              case "LESS_THAN":
                return "<" /* LESS_THAN */;

              case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */;

              case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */;

              case "IN":
                return "in" /* IN */;

              case "NOT_IN":
                return "not-in" /* NOT_IN */;

              case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

              case "OPERATOR_UNSPECIFIED":
              default:
                return x$1();
            }
        }(t.fieldFilter.op), t.fieldFilter.value);
    }

    function ar(t) {
        switch (t.unaryFilter.op) {
          case "IS_NAN":
            var e = ur(t.unaryFilter.field);
            return jt.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NULL":
            var n = ur(t.unaryFilter.field);
            return jt.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "IS_NOT_NAN":
            var r = ur(t.unaryFilter.field);
            return jt.create(r, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NOT_NULL":
            var i = ur(t.unaryFilter.field);
            return jt.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "OPERATOR_UNSPECIFIED":
          default:
            return x$1();
        }
    }

    function cr(t) {
        var e = [];
        return t.fields.forEach((function(t) {
            return e.push(t.rt());
        })), {
            fieldPaths: e
        };
    }

    function hr(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var fr = function() {
        var t = this;
        this.promise = new Promise((function(e, n) {
            t.resolve = e, t.reject = n;
        }));
    }, lr = /** @class */ function() {
        function t(t) {
            var e = this;
            // NOTE: next/catchCallback will always point to our own wrapper functions,
            // not the user's raw next() or catch() callbacks.
                    this.Dn = null, this.Cn = null, 
            // When the operation resolves, we'll set result or error and mark isDone.
            this.result = void 0, this.error = void 0, this.xn = !1, 
            // Set to true when .then() or .catch() are called and prevents additional
            // chaining.
            this.Nn = !1, t((function(t) {
                e.xn = !0, e.result = t, e.Dn && 
                // value should be defined unless T is Void, but we can't express
                // that in the type system.
                e.Dn(t);
            }), (function(t) {
                e.xn = !0, e.error = t, e.Cn && e.Cn(t);
            }));
        }
        return t.prototype.catch = function(t) {
            return this.next(void 0, t);
        }, t.prototype.next = function(e, n) {
            var r = this;
            return this.Nn && x$1(), this.Nn = !0, this.xn ? this.error ? this.Fn(n, this.error) : this.On(e, this.result) : new t((function(t, i) {
                r.Dn = function(n) {
                    r.On(e, n).next(t, i);
                }, r.Cn = function(e) {
                    r.Fn(n, e).next(t, i);
                };
            }));
        }, t.prototype.kn = function() {
            var t = this;
            return new Promise((function(e, n) {
                t.next(e, n);
            }));
        }, t.prototype.Mn = function(e) {
            try {
                var n = e();
                return n instanceof t ? n : t.resolve(n);
            } catch (e) {
                return t.reject(e);
            }
        }, t.prototype.On = function(e, n) {
            return e ? this.Mn((function() {
                return e(n);
            })) : t.resolve(n);
        }, t.prototype.Fn = function(e, n) {
            return e ? this.Mn((function() {
                return e(n);
            })) : t.reject(n);
        }, t.resolve = function(e) {
            return new t((function(t, n) {
                t(e);
            }));
        }, t.reject = function(e) {
            return new t((function(t, n) {
                n(e);
            }));
        }, t.Ln = function(
        // Accept all Promise types in waitFor().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        e) {
            return new t((function(t, n) {
                var r = 0, i = 0, o = !1;
                e.forEach((function(e) {
                    ++r, e.next((function() {
                        ++i, o && i === r && t();
                    }), (function(t) {
                        return n(t);
                    }));
                })), o = !0, i === r && t();
            }));
        }, 
        /**
         * Given an array of predicate functions that asynchronously evaluate to a
         * boolean, implements a short-circuiting `or` between the results. Predicates
         * will be evaluated until one of them returns `true`, then stop. The final
         * result will be whether any of them returned `true`.
         */
        t.$n = function(e) {
            for (var n = t.resolve(!1), r = function(e) {
                n = n.next((function(n) {
                    return n ? t.resolve(n) : e();
                }));
            }, i = 0, o = e; i < o.length; i++) {
                r(o[i]);
            }
            return n;
        }, t.forEach = function(t, e) {
            var n = this, r = [];
            return t.forEach((function(t, i) {
                r.push(e.call(n, t, i));
            })), this.Ln(r);
        }, t;
    }(), pr = /** @class */ function() {
        function t(t, e) {
            var n = this;
            this.action = t, this.transaction = e, this.aborted = !1, 
            /**
                 * A promise that resolves with the result of the IndexedDb transaction.
                 */
            this.Bn = new fr, this.transaction.oncomplete = function() {
                n.Bn.resolve();
            }, this.transaction.onabort = function() {
                e.error ? n.Bn.reject(new yr(t, e.error)) : n.Bn.resolve();
            }, this.transaction.onerror = function(e) {
                var r = _r(e.target.error);
                n.Bn.reject(new yr(t, r));
            };
        }
        return t.open = function(e, n, r, i) {
            try {
                return new t(n, e.transaction(i, r));
            } catch (e) {
                throw new yr(n, e);
            }
        }, Object.defineProperty(t.prototype, "qn", {
            get: function() {
                return this.Bn.promise;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.abort = function(t) {
            t && this.Bn.reject(t), this.aborted || (N$1("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
            this.aborted = !0, this.transaction.abort());
        }, 
        /**
         * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
         * operations performed on the SimpleDbStore happen within the context of this
         * transaction and it cannot be used anymore once the transaction is
         * completed.
         *
         * Note that we can't actually enforce that the KeyType and ValueType are
         * correct, but they allow type safety through the rest of the consuming code.
         */
        t.prototype.store = function(t) {
            var e = this.transaction.objectStore(t);
            return new gr(e);
        }, t;
    }(), dr = /** @class */ function() {
        /*
         * Creates a new SimpleDb wrapper for IndexedDb database `name`.
         *
         * Note that `version` must not be a downgrade. IndexedDB does not support
         * downgrading the schema version. We currently do not support any way to do
         * versioning outside of IndexedDB's versioning mechanism, as only
         * version-upgrade transactions are allowed to do things like create
         * objectstores.
         */
        function t(e, r, i) {
            this.name = e, this.version = r, this.Un = i, 
            // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
            // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
            // whatever reason it's much harder to hit after 12.2 so we only proactively
            // log on 12.2.
            12.2 === t.Qn(getUA()) && A$1("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        }
        /** Deletes the specified database. */    return t.delete = function(t) {
            return N$1("SimpleDb", "Removing database:", t), wr(window.indexedDB.deleteDatabase(t)).kn();
        }, 
        /** Returns true if IndexedDB is available in the current environment. */ t.Kn = function() {
            if ("undefined" == typeof indexedDB) return !1;
            if (t.Wn()) return !0;
            // We extensively use indexed array values and compound keys,
            // which IE and Edge do not support. However, they still have indexedDB
            // defined on the window, so we need to check for them here and make sure
            // to return that persistence is not enabled for those browsers.
            // For tracking support of this feature, see here:
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
            // Check the UA string to find out the browser.
                    var e = getUA(), r = t.Qn(e), i = 0 < r && r < 10, o = t.jn(e), u = 0 < o && o < 4.5;
            // IE 10
            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
            // IE 11
            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
            // Edge
            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
            // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
            // iOS Safari: Disable for users running iOS version < 10.
                    return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || i || u);
        }, 
        /**
         * Returns true if the backing IndexedDB store is the Node IndexedDBShim
         * (see https://github.com/axemclion/IndexedDBShim).
         */
        t.Wn = function() {
            var t;
            return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Gn);
        }, 
        /** Helper to get a typed SimpleDbStore from a transaction. */ t.zn = function(t, e) {
            return t.store(e);
        }, 
        // visible for testing
        /** Parse User Agent to determine iOS version. Returns -1 if not found. */
        t.Qn = function(t) {
            var e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
            return Number(n);
        }, 
        // visible for testing
        /** Parse User Agent to determine Android version. Returns -1 if not found. */
        t.jn = function(t) {
            var e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
            return Number(n);
        }, 
        /**
         * Opens the specified database, creating or upgrading it if necessary.
         */
        t.prototype.Hn = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, n = this;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return this.db ? [ 3 /*break*/ , 2 ] : (N$1("SimpleDb", "Opening database:", this.name), 
                        e = this, [ 4 /*yield*/ , new Promise((function(e, r) {
                            // TODO(mikelehen): Investigate browser compatibility.
                            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                            // suggests IE9 and older WebKit browsers handle upgrade
                            // differently. They expect setVersion, as described here:
                            // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                            var i = indexedDB.open(n.name, n.version);
                            i.onsuccess = function(t) {
                                var n = t.target.result;
                                e(n);
                            }, i.onblocked = function() {
                                r(new yr(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                            }, i.onerror = function(e) {
                                var n = e.target.error;
                                "VersionError" === n.name ? r(new q$1(M$1.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : r(new yr(t, n));
                            }, i.onupgradeneeded = function(t) {
                                N$1("SimpleDb", 'Database "' + n.name + '" requires upgrade from version:', t.oldVersion);
                                var e = t.target.result;
                                n.Un.Jn(e, i.transaction, t.oldVersion, n.version).next((function() {
                                    N$1("SimpleDb", "Database upgrade to version " + n.version + " complete");
                                }));
                            };
                        })) ]);

                      case 1:
                        e.db = r.sent(), r.label = 2;

                      case 2:
                        return [ 2 /*return*/ , (this.Yn && (this.db.onversionchange = function(t) {
                            return n.Yn(t);
                        }), this.db) ];
                    }
                }));
            }));
        }, t.prototype.Xn = function(t) {
            this.Yn = t, this.db && (this.db.onversionchange = function(e) {
                return t(e);
            });
        }, t.prototype.runTransaction = function(t, e, n, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var i, o, u, s, a;
                return __generator(this, (function(c) {
                    switch (c.label) {
                      case 0:
                        i = "readonly" === e, o = 0, u = function() {
                            var e, u, a, c, h;
                            return __generator(this, (function(f) {
                                switch (f.label) {
                                  case 0:
                                    ++o, f.label = 1;

                                  case 1:
                                    return f.trys.push([ 1, 4, , 5 ]), [ 4 /*yield*/ , s.Hn(t) ];

                                  case 2:
                                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                    // fire), but still return the original transactionFnResult back to the
                                    // caller.
                                    return s.db = f.sent(), e = pr.open(s.db, t, i ? "readonly" : "readwrite", n), u = r(e).catch((function(t) {
                                        // Abort the transaction if there was an error.
                                        return e.abort(t), lr.reject(t);
                                    })).kn(), a = {}, u.catch((function() {})), [ 4 /*yield*/ , e.qn ];

                                  case 3:
                                    return [ 2 /*return*/ , (a.value = (
                                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                    // fire), but still return the original transactionFnResult back to the
                                    // caller.
                                    f.sent(), u), a) ];

                                  case 4:
                                    return c = f.sent(), h = "FirebaseError" !== c.name && o < 3, N$1("SimpleDb", "Transaction failed with error:", c.message, "Retrying:", h), 
                                    s.close(), h ? [ 3 /*break*/ , 5 ] : [ 2 /*return*/ , {
                                        value: Promise.reject(c)
                                    } ];

                                  case 5:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }, s = this, c.label = 1;

                      case 1:
                        return [ 5 /*yield**/ , u() ];

                      case 2:
                        if ("object" == typeof (a = c.sent())) return [ 2 /*return*/ , a.value ];
                        c.label = 3;

                      case 3:
                        return [ 3 /*break*/ , 1 ];

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.close = function() {
            this.db && this.db.close(), this.db = void 0;
        }, t;
    }(), vr = /** @class */ function() {
        function t(t) {
            this.Zn = t, this.ts = !1, this.es = null;
        }
        return Object.defineProperty(t.prototype, "xn", {
            get: function() {
                return this.ts;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "ns", {
            get: function() {
                return this.es;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "cursor", {
            set: function(t) {
                this.Zn = t;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * This function can be called to stop iteration at any point.
         */
        t.prototype.done = function() {
            this.ts = !0;
        }, 
        /**
         * This function can be called to skip to that next key, which could be
         * an index or a primary key.
         */
        t.prototype.ss = function(t) {
            this.es = t;
        }, 
        /**
         * Delete the current cursor value from the object store.
         *
         * NOTE: You CANNOT do this with a keysOnly query.
         */
        t.prototype.delete = function() {
            return wr(this.Zn.delete());
        }, t;
    }(), yr = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, M$1.UNAVAILABLE, "IndexedDB transaction '" + e + "' failed: " + n) || this).name = "IndexedDbTransactionError", 
            r;
        }
        return __extends$1d(e, t), e;
    }(q$1);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * PersistencePromise is essentially a re-implementation of Promise except
     * it has a .next() method instead of .then() and .next() and .catch() callbacks
     * are executed synchronously when a PersistencePromise resolves rather than
     * asynchronously (Promise implementations use setImmediate() or similar).
     *
     * This is necessary to interoperate with IndexedDB which will automatically
     * commit transactions if control is returned to the event loop without
     * synchronously initiating another operation on the transaction.
     *
     * NOTE: .then() and .catch() only allow a single consumer, unlike normal
     * Promises.
     */
    /** Verifies whether `e` is an IndexedDbTransactionError. */ function mr(t) {
        // Use name equality, as instanceof checks on errors don't work with errors
        // that wrap other errors.
        return "IndexedDbTransactionError" === t.name;
    }

    /**
     * A wrapper around an IDBObjectStore providing an API that:
     *
     * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
     * methods for acting against the object store.
     * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
     * method return a PersistencePromise instead.
     * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
     * intermediate IndexedDB types (IDBCursorWithValue, etc.)
     */ var gr = /** @class */ function() {
        function t(t) {
            this.store = t;
        }
        return t.prototype.put = function(t, e) {
            var n;
            return void 0 !== e ? (N$1("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (N$1("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
            n = this.store.put(t)), wr(n);
        }, 
        /**
         * Adds a new value into an Object Store and returns the new key. Similar to
         * IndexedDb's `add()`, this method will fail on primary key collisions.
         *
         * @param value - The object to write.
         * @returns The key of the value to add.
         */
        t.prototype.add = function(t) {
            return N$1("SimpleDb", "ADD", this.store.name, t, t), wr(this.store.add(t));
        }, 
        /**
         * Gets the object with the specified key from the specified store, or null
         * if no object exists with the specified key.
         *
         * @key The key of the object to get.
         * @returns The object with the specified key or null if no object exists.
         */
        t.prototype.get = function(t) {
            var e = this;
            // We're doing an unsafe cast to ValueType.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return wr(this.store.get(t)).next((function(n) {
                // Normalize nonexistence to null.
                return void 0 === n && (n = null), N$1("SimpleDb", "GET", e.store.name, t, n), n;
            }));
        }, t.prototype.delete = function(t) {
            return N$1("SimpleDb", "DELETE", this.store.name, t), wr(this.store.delete(t));
        }, 
        /**
         * If we ever need more of the count variants, we can add overloads. For now,
         * all we need is to count everything in a store.
         *
         * Returns the number of rows in the store.
         */
        t.prototype.count = function() {
            return N$1("SimpleDb", "COUNT", this.store.name), wr(this.store.count());
        }, t.prototype.rs = function(t, e) {
            var n = this.cursor(this.options(t, e)), r = [];
            return this.os(n, (function(t, e) {
                r.push(e);
            })).next((function() {
                return r;
            }));
        }, t.prototype.cs = function(t, e) {
            N$1("SimpleDb", "DELETE ALL", this.store.name);
            var n = this.options(t, e);
            n.us = !1;
            var r = this.cursor(n);
            return this.os(r, (function(t, e, n) {
                return n.delete();
            }));
        }, t.prototype.hs = function(t, e) {
            var n;
            e ? n = t : (n = {}, e = t);
            var r = this.cursor(n);
            return this.os(r, e);
        }, 
        /**
         * Iterates over a store, but waits for the given callback to complete for
         * each entry before iterating the next entry. This allows the callback to do
         * asynchronous work to determine if this iteration should continue.
         *
         * The provided callback should return `true` to continue iteration, and
         * `false` otherwise.
         */
        t.prototype.ls = function(t) {
            var e = this.cursor({});
            return new lr((function(n, r) {
                e.onerror = function(t) {
                    var e = _r(t.target.error);
                    r(e);
                }, e.onsuccess = function(e) {
                    var r = e.target.result;
                    r ? t(r.primaryKey, r.value).next((function(t) {
                        t ? r.continue() : n();
                    })) : n();
                };
            }));
        }, t.prototype.os = function(t, e) {
            var n = [];
            return new lr((function(r, i) {
                t.onerror = function(t) {
                    i(t.target.error);
                }, t.onsuccess = function(t) {
                    var i = t.target.result;
                    if (i) {
                        var o = new vr(i), u = e(i.primaryKey, i.value, o);
                        if (u instanceof lr) {
                            var s = u.catch((function(t) {
                                return o.done(), lr.reject(t);
                            }));
                            n.push(s);
                        }
                        o.xn ? r() : null === o.ns ? i.continue() : i.continue(o.ns);
                    } else r();
                };
            })).next((function() {
                return lr.Ln(n);
            }));
        }, t.prototype.options = function(t, e) {
            var n = void 0;
            return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
                index: n,
                range: e
            };
        }, t.prototype.cursor = function(t) {
            var e = "next";
            if (t.reverse && (e = "prev"), t.index) {
                var n = this.store.index(t.index);
                return t.us ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
            }
            return this.store.openCursor(t.range, e);
        }, t;
    }();

    /**
     * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
     * handlers to resolve / reject the PersistencePromise as appropriate.
     */ function wr(t) {
        return new lr((function(e, n) {
            t.onsuccess = function(t) {
                var n = t.target.result;
                e(n);
            }, t.onerror = function(t) {
                var e = _r(t.target.error);
                n(e);
            };
        }));
    }

    // Guard so we only report the error once.
    var br = !1;

    function _r(t) {
        var e = dr.Qn(getUA());
        if (e >= 12.2 && e < 13) {
            var r = "An internal error was encountered in the Indexed Database server";
            if (t.message.indexOf(r) >= 0) {
                // Wrap error in a more descriptive one.
                var i = new q$1("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + r + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
                return br || (br = !0, 
                // Throw a global exception outside of this promise chain, for the user to
                // potentially catch.
                setTimeout((function() {
                    throw i;
                }), 0)), i;
            }
        }
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */ var Ir = /** @class */ function() {
        function t(t, e, n, r, i) {
            this._s = t, this.fs = e, this.ds = n, this.op = r, this.ws = i, this.Es = new fr, 
            this.then = this.Es.promise.then.bind(this.Es.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.Es.promise.catch((function(t) {}))
            /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue - The queue to schedule the operation on.
         * @param id - A Timer ID identifying the type of operation this is.
         * @param delayMs - The delay (ms) before the operation should be scheduled.
         * @param op - The operation to run.
         * @param removalCallback - A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */;
        }
        return t.Ts = function(e, n, r, i, o) {
            var u = new t(e, n, Date.now() + r, i, o);
            return u.start(r), u;
        }, 
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */
        t.prototype.start = function(t) {
            var e = this;
            this.Is = setTimeout((function() {
                return e.As();
            }), t);
        }, 
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */
        t.prototype.Rs = function() {
            return this.As();
        }, 
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */
        t.prototype.cancel = function(t) {
            null !== this.Is && (this.clearTimeout(), this.Es.reject(new q$1(M$1.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
        }, t.prototype.As = function() {
            var t = this;
            this._s.Ps((function() {
                return null !== t.Is ? (t.clearTimeout(), t.op().then((function(e) {
                    return t.Es.resolve(e);
                }))) : Promise.resolve();
            }));
        }, t.prototype.clearTimeout = function() {
            null !== this.Is && (this.ws(this), clearTimeout(this.Is), this.Is = null);
        }, t;
    }();

    /**
     * Returns a FirestoreError that can be surfaced to the user if the provided
     * error is an IndexedDbTransactionError. Re-throws the error otherwise.
     */ function Er(t, e) {
        if (A$1("AsyncQueue", e + ": " + t), mr(t)) return new q$1(M$1.UNAVAILABLE, e + ": " + t);
        throw t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Tr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", Nr = /** @class */ function() {
        function t() {
            this.ys = [];
        }
        return t.prototype.gs = function(t) {
            this.ys.push(t);
        }, t.prototype.Vs = function() {
            this.ys.forEach((function(t) {
                return t();
            }));
        }, t;
    }();

    /**
     * A base class representing a persistence transaction, encapsulating both the
     * transaction's sequence numbers as well as a list of onCommitted listeners.
     *
     * When you call Persistence.runTransaction(), it will create a transaction and
     * pass it to your callback. You then pass it to any method that operates
     * on persistence.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encodes a resource path into a IndexedDb-compatible string form.
     */
    function Ar(t) {
        for (var e = "", n = 0; n < t.length; n++) e.length > 0 && (e = Dr(e)), e = Sr(t.get(n), e);
        return Dr(e);
    }

    /** Encodes a single segment of a resource path into the given result */ function Sr(t, e) {
        for (var n = e, r = t.length, i = 0; i < r; i++) {
            var o = t.charAt(i);
            switch (o) {
              case "\0":
                n += "";
                break;

              case "":
                n += "";
                break;

              default:
                n += o;
            }
        }
        return n;
    }

    /** Encodes a path separator into the given result */ function Dr(t) {
        return t + "";
    }

    /**
     * Decodes the given IndexedDb-compatible string form of a resource path into
     * a ResourcePath instance. Note that this method is not suitable for use with
     * decoding resource names from the server; those are One Platform format
     * strings.
     */ function xr(t) {
        // Event the empty path must encode as a path of at least length 2. A path
        // with exactly 2 must be the empty path.
        var e = t.length;
        if (k$1(e >= 2), 2 === e) return k$1("" === t.charAt(0) && "" === t.charAt(1)), Z$1.ct();
        // Escape characters cannot exist past the second-to-last position in the
        // source value.
            for (var n = e - 2, r = [], i = "", o = 0; o < e; ) {
            // The last two characters of a valid encoded path must be a separator, so
            // there must be an end to this segment.
            var u = t.indexOf("", o);
            switch ((u < 0 || u > n) && x$1(), t.charAt(u + 1)) {
              case "":
                var s = t.substring(o, u), a = void 0;
                0 === i.length ? 
                // Avoid copying for the common case of a segment that excludes \0
                // and \001
                a = s : (a = i += s, i = ""), r.push(a);
                break;

              case "":
                i += t.substring(o, u), i += "\0";
                break;

              case "":
                // The escape character can be used in the output to encode itself.
                i += t.substring(o, u + 1);
                break;

              default:
                x$1();
            }
            o = u + 2;
        }
        return new Z$1(r);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Schema Version for the Web client:
     * 1.  Initial version including Mutation Queue, Query Cache, and Remote
     *     Document Cache
     * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
     *     longer required because migration 3 unconditionally clears it.
     * 3.  Dropped and re-created Query Cache to deal with cache corruption related
     *     to limbo resolution. Addresses
     *     https://github.com/firebase/firebase-ios-sdk/issues/1548
     * 4.  Multi-Tab Support.
     * 5.  Removal of held write acks.
     * 6.  Create document global for tracking document cache size.
     * 7.  Ensure every cached document has a sentinel row with a sequence number.
     * 8.  Add collection-parent index for Collection Group queries.
     * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
     *     an auto-incrementing ID. This is required for Index-Free queries.
     * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
     * 11. Add bundles and named_queries for bundle support.
     */
    /**
     * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
     */ var kr = function(t, e) {
        this.seconds = t, this.nanoseconds = e;
    }, Or = function(t, 
    /** Whether to allow shared access from multiple tabs. */
    e, n) {
        this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
    };

    /**
     * A singleton object to be stored in the 'owner' store in IndexedDb.
     *
     * A given database can have a single primary tab assigned at a given time. That
     * tab must validate that it is still holding the primary lease before every
     * operation that requires locked access. The primary tab should regularly
     * write an updated timestamp to this lease to prevent other tabs from
     * "stealing" the primary lease
     */
    /**
     * Name of the IndexedDb object store.
     *
     * Note that the name 'owner' is chosen to ensure backwards compatibility with
     * older clients that only supported single locked access to the persistence
     * layer.
     */
    Or.store = "owner", 
    /**
         * The key string used for the single object that exists in the
         * DbPrimaryClient store.
         */
    Or.key = "owner";

    /**
     * An object to be stored in the 'mutationQueues' store in IndexedDb.
     *
     * Each user gets a single queue of MutationBatches to apply to the server.
     * DbMutationQueue tracks the metadata about the queue.
     */
    var Pr = function(
    /**
         * The normalized user ID to which this queue belongs.
         */
    t, 
    /**
         * An identifier for the highest numbered batch that has been acknowledged
         * by the server. All MutationBatches in this queue with batchIds less
         * than or equal to this value are considered to have been acknowledged by
         * the server.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
    e, 
    /**
         * A stream token that was previously sent by the server.
         *
         * See StreamingWriteRequest in datastore.proto for more details about
         * usage.
         *
         * After sending this token, earlier tokens may not be used anymore so
         * only a single stream token is retained.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
    n) {
        this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
    };

    /** Name of the IndexedDb object store.  */ Pr.store = "mutationQueues", 
    /** Keys are automatically assigned via the userId property. */
    Pr.keyPath = "userId";

    /**
     * An object to be stored in the 'mutations' store in IndexedDb.
     *
     * Represents a batch of user-level mutations intended to be sent to the server
     * in a single write. Each user-level batch gets a separate DbMutationBatch
     * with a new batchId.
     */
    var Lr = function(
    /**
         * The normalized user ID to which this batch belongs.
         */
    t, 
    /**
         * An identifier for this batch, allocated using an auto-generated key.
         */
    e, 
    /**
         * The local write time of the batch, stored as milliseconds since the
         * epoch.
         */
    n, 
    /**
         * A list of "mutations" that represent a partial base state from when this
         * write batch was initially created. During local application of the write
         * batch, these baseMutations are applied prior to the real writes in order
         * to override certain document fields from the remote document cache. This
         * is necessary in the case of non-idempotent writes (e.g. `increment()`
         * transforms) to make sure that the local view of the modified documents
         * doesn't flicker if the remote document cache receives the result of the
         * non-idempotent write before the write is removed from the queue.
         *
         * These mutations are never sent to the backend.
         */
    r, 
    /**
         * A list of mutations to apply. All mutations will be applied atomically.
         *
         * Mutations are serialized via toMutation().
         */
    i) {
        this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = r, 
        this.mutations = i;
    };

    /** Name of the IndexedDb object store.  */ Lr.store = "mutations", 
    /** Keys are automatically assigned via the userId, batchId properties. */
    Lr.keyPath = "batchId", 
    /** The index name for lookup of mutations by user. */
    Lr.userMutationsIndex = "userMutationsIndex", 
    /** The user mutations index is keyed by [userId, batchId] pairs. */
    Lr.userMutationsKeyPath = [ "userId", "batchId" ];

    /**
     * An object to be stored in the 'documentMutations' store in IndexedDb.
     *
     * A manually maintained index of all the mutation batches that affect a given
     * document key. The rows in this table are references based on the contents of
     * DbMutationBatch.mutations.
     */
    var Vr = /** @class */ function() {
        function t() {}
        /**
         * Creates a [userId] key for use in the DbDocumentMutations index to iterate
         * over all of a user's document mutations.
         */    return t.prefixForUser = function(t) {
            return [ t ];
        }, 
        /**
         * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
         * index to iterate over all at document mutations for a given path or lower.
         */
        t.prefixForPath = function(t, e) {
            return [ t, Ar(e) ];
        }, 
        /**
         * Creates a full index key of [userId, encodedPath, batchId] for inserting
         * and deleting into the DbDocumentMutations index.
         */
        t.key = function(t, e, n) {
            return [ t, Ar(e), n ];
        }, t;
    }();

    Vr.store = "documentMutations", 
    /**
         * Because we store all the useful information for this store in the key,
         * there is no useful information to store as the value. The raw (unencoded)
         * path cannot be stored because IndexedDb doesn't store prototype
         * information.
         */
    Vr.PLACEHOLDER = new Vr;

    /**
     * Represents the known absence of a document at a particular version.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */
    var Cr = function(t, e) {
        this.path = t, this.readTime = e;
    }, Rr = function(t, e) {
        this.path = t, this.version = e;
    }, Ur = 
    // TODO: We are currently storing full document keys almost three times
    // (once as part of the primary key, once - partly - as `parentPath` and once
    // inside the encoded documents). During our next migration, we should
    // rewrite the primary key as parentPath + document ID which would allow us
    // to drop one value.
    function(
    /**
         * Set to an instance of DbUnknownDocument if the data for a document is
         * not known, but it is known that a document exists at the specified
         * version (e.g. it had a successful update applied to it)
         */
    t, 
    /**
         * Set to an instance of a DbNoDocument if it is known that no document
         * exists.
         */
    e, 
    /**
         * Set to an instance of a Document if there's a cached version of the
         * document.
         */
    n, 
    /**
         * Documents that were written to the remote document store based on
         * a write acknowledgment are marked with `hasCommittedMutations`. These
         * documents are potentially inconsistent with the backend's copy and use
         * the write's commit version as their document version.
         */
    r, 
    /**
         * When the document was read from the backend. Undefined for data written
         * prior to schema version 9.
         */
    i, 
    /**
         * The path of the collection this document is part of. Undefined for data
         * written prior to schema version 9.
         */
    o) {
        this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = r, 
        this.readTime = i, this.parentPath = o;
    };

    /**
     * Represents a document that is known to exist but whose data is unknown.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */ Ur.store = "remoteDocuments", 
    /**
         * An index that provides access to all entries sorted by read time (which
         * corresponds to the last modification time of each row).
         *
         * This index is used to provide a changelog for Multi-Tab.
         */
    Ur.readTimeIndex = "readTimeIndex", Ur.readTimeIndexPath = "readTime", 
    /**
         * An index that provides access to documents in a collection sorted by read
         * time.
         *
         * This index is used to allow the RemoteDocumentCache to fetch newly changed
         * documents in a collection.
         */
    Ur.collectionReadTimeIndex = "collectionReadTimeIndex", Ur.collectionReadTimeIndexPath = [ "parentPath", "readTime" ];

    /**
     * Contains a single entry that has metadata about the remote document cache.
     */
    var Mr = 
    /**
         * @param byteSize - Approximately the total size in bytes of all the
         * documents in the document cache.
         */
    function(t) {
        this.byteSize = t;
    };

    Mr.store = "remoteDocumentGlobal", Mr.key = "remoteDocumentGlobalKey";

    /**
     * An object to be stored in the 'targets' store in IndexedDb.
     *
     * This is based on and should be kept in sync with the proto used in the iOS
     * client.
     *
     * Each query the client listens to against the server is tracked on disk so
     * that the query can be efficiently resumed on restart.
     */
    var qr = function(
    /**
         * An auto-generated sequential numeric identifier for the query.
         *
         * Queries are stored using their canonicalId as the key, but these
         * canonicalIds can be quite long so we additionally assign a unique
         * queryId which can be used by referenced data structures (e.g.
         * indexes) to minimize the on-disk cost.
         */
    t, 
    /**
         * The canonical string representing this query. This is not unique.
         */
    e, 
    /**
         * The last readTime received from the Watch Service for this query.
         *
         * This is the same value as TargetChange.read_time in the protos.
         */
    n, 
    /**
         * An opaque, server-assigned token that allows watching a query to be
         * resumed after disconnecting without retransmitting all the data
         * that matches the query. The resume token essentially identifies a
         * point in time from which the server should resume sending results.
         *
         * This is related to the snapshotVersion in that the resumeToken
         * effectively also encodes that value, but the resumeToken is opaque
         * and sometimes encodes additional information.
         *
         * A consequence of this is that the resumeToken should be used when
         * asking the server to reason about where this client is in the watch
         * stream, but the client should use the snapshotVersion for its own
         * purposes.
         *
         * This is the same value as TargetChange.resume_token in the protos.
         */
    r, 
    /**
         * A sequence number representing the last time this query was
         * listened to, used for garbage collection purposes.
         *
         * Conventionally this would be a timestamp value, but device-local
         * clocks are unreliable and they must be able to create new listens
         * even while disconnected. Instead this should be a monotonically
         * increasing number that's incremented on each listen call.
         *
         * This is different from the queryId since the queryId is an
         * immutable identifier assigned to the Query on first use while
         * lastListenSequenceNumber is updated every time the query is
         * listened to.
         */
    i, 
    /**
         * Denotes the maximum snapshot version at which the associated query view
         * contained no limbo documents.  Undefined for data written prior to
         * schema version 9.
         */
    o, 
    /**
         * The query for this target.
         *
         * Because canonical ids are not unique we must store the actual query. We
         * use the proto to have an object we can persist without having to
         * duplicate translation logic to and from a `Query` object.
         */
    u) {
        this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = r, 
        this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = u;
    };

    qr.store = "targets", 
    /** Keys are automatically assigned via the targetId property. */
    qr.keyPath = "targetId", 
    /** The name of the queryTargets index. */
    qr.queryTargetsIndexName = "queryTargetsIndex", 
    /**
         * The index of all canonicalIds to the targets that they match. This is not
         * a unique mapping because canonicalId does not promise a unique name for all
         * possible queries, so we append the targetId to make the mapping unique.
         */
    qr.queryTargetsKeyPath = [ "canonicalId", "targetId" ];

    /**
     * An object representing an association between a target and a document, or a
     * sentinel row marking the last sequence number at which a document was used.
     * Each document cached must have a corresponding sentinel row before lru
     * garbage collection is enabled.
     *
     * The target associations and sentinel rows are co-located so that orphaned
     * documents and their sequence numbers can be identified efficiently via a scan
     * of this store.
     */
    var jr = function(
    /**
         * The targetId identifying a target or 0 for a sentinel row.
         */
    t, 
    /**
         * The path to the document, as encoded in the key.
         */
    e, 
    /**
         * If this is a sentinel row, this should be the sequence number of the last
         * time the document specified by `path` was used. Otherwise, it should be
         * `undefined`.
         */
    n) {
        this.targetId = t, this.path = e, this.sequenceNumber = n;
    };

    /** Name of the IndexedDb object store.  */ jr.store = "targetDocuments", 
    /** Keys are automatically assigned via the targetId, path properties. */
    jr.keyPath = [ "targetId", "path" ], 
    /** The index name for the reverse index. */
    jr.documentTargetsIndex = "documentTargetsIndex", 
    /** We also need to create the reverse index for these properties. */
    jr.documentTargetsKeyPath = [ "path", "targetId" ];

    /**
     * A record of global state tracked across all Targets, tracked separately
     * to avoid the need for extra indexes.
     *
     * This should be kept in-sync with the proto used in the iOS client.
     */
    var Fr = function(
    /**
         * The highest numbered target id across all targets.
         *
         * See DbTarget.targetId.
         */
    t, 
    /**
         * The highest numbered lastListenSequenceNumber across all targets.
         *
         * See DbTarget.lastListenSequenceNumber.
         */
    e, 
    /**
         * A global snapshot version representing the last consistent snapshot we
         * received from the backend. This is monotonically increasing and any
         * snapshots received from the backend prior to this version (e.g. for
         * targets resumed with a resumeToken) should be suppressed (buffered)
         * until the backend has caught up to this snapshot version again. This
         * prevents our cache from ever going backwards in time.
         */
    n, 
    /**
         * The number of targets persisted.
         */
    r) {
        this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, 
        this.targetCount = r;
    };

    /**
     * The key string used for the single object that exists in the
     * DbTargetGlobal store.
     */ Fr.key = "targetGlobalKey", Fr.store = "targetGlobal";

    /**
     * An object representing an association between a Collection id (e.g. 'messages')
     * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
     * This is used to efficiently find all collections to query when performing
     * a Collection Group query.
     */
    var zr = function(
    /**
         * The collectionId (e.g. 'messages')
         */
    t, 
    /**
         * The path to the parent (either a document location or an empty path for
         * a root-level collection).
         */
    e) {
        this.collectionId = t, this.parent = e;
    };

    /** Name of the IndexedDb object store. */ zr.store = "collectionParents", 
    /** Keys are automatically assigned via the collectionId, parent properties. */
    zr.keyPath = [ "collectionId", "parent" ];

    /**
     * A record of the metadata state of each client.
     *
     * PORTING NOTE: This is used to synchronize multi-tab state and does not need
     * to be ported to iOS or Android.
     */
    var Gr = function(
    // Note: Previous schema versions included a field
    // "lastProcessedDocumentChangeId". Don't use anymore.
    /** The auto-generated client id assigned at client startup. */
    t, 
    /** The last time this state was updated. */
    e, 
    /** Whether the client's network connection is enabled. */
    n, 
    /** Whether this client is running in a foreground tab. */
    r) {
        this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = r;
    };

    /** Name of the IndexedDb object store. */ Gr.store = "clientMetadata", 
    /** Keys are automatically assigned via the clientId properties. */
    Gr.keyPath = "clientId";

    /**
     * A object representing a bundle loaded by the SDK.
     */
    var Br = function(
    /** The ID of the loaded bundle. */
    t, 
    /** The create time of the loaded bundle. */
    e, 
    /** The schema version of the loaded bundle. */
    n) {
        this.bundleId = t, this.createTime = e, this.version = n;
    };

    /** Name of the IndexedDb object store. */ Br.store = "bundles", Br.keyPath = "bundleId";

    /**
     * A object representing a named query loaded by the SDK via a bundle.
     */
    var Qr = function(
    /** The name of the query. */
    t, 
    /** The read time of the results saved in the bundle from the named query. */
    e, 
    /** The query saved in the bundle. */
    n) {
        this.name = t, this.readTime = e, this.bundledQuery = n;
    };

    /** Name of the IndexedDb object store. */ Qr.store = "namedQueries", Qr.keyPath = "name";

    // Visible for testing
    var Yr = __spreadArrays(__spreadArrays(__spreadArrays(__spreadArrays([ Pr.store, Lr.store, Vr.store, Ur.store, qr.store, Or.store, Fr.store, jr.store ], [ Gr.store ]), [ Mr.store ]), [ zr.store ]), [ Br.store, Qr.store ]), Hr = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this) || this).ps = e, r.bs = n, r;
        }
        return __extends$1d(e, t), e;
    }(Nr);

    // V2 is no longer usable (see comment at top of file)
    // Visible for testing
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Kr(t, e) {
        var n = O$1(t);
        return dr.zn(n.ps, e);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A batch of mutations that will be sent as one unit to the backend.
     */ var Xr = /** @class */ function() {
        /**
         * @param batchId - The unique ID of this mutation batch.
         * @param localWriteTime - The original write time of this mutation.
         * @param baseMutations - Mutations that are used to populate the base
         * values when this mutation is applied locally. This can be used to locally
         * overwrite values that are persisted in the remote document cache. Base
         * mutations are never sent to the backend.
         * @param mutations - The user-provided mutations in this mutation batch.
         * User-provided mutations are applied both locally and remotely on the
         * backend.
         */
        function t(t, e, n, r) {
            this.batchId = t, this.vs = e, this.baseMutations = n, this.mutations = r
            /**
         * Applies all the mutations in this MutationBatch to the specified document
         * to create a new remote document
         *
         * @param docKey - The key of the document to apply mutations to.
         * @param maybeDoc - The document to apply mutations to.
         * @param batchResult - The result of applying the MutationBatch to the
         * backend.
         */;
        }
        return t.prototype.Ss = function(t, e, n) {
            for (var r = n.Ds, i = 0; i < this.mutations.length; i++) {
                var o = this.mutations[i];
                o.key.isEqual(t) && (e = qe(o, e, r[i]));
            }
            return e;
        }, 
        /**
         * Computes the local view of a document given all the mutations in this
         * batch.
         *
         * @param docKey - The key of the document to apply mutations to.
         * @param maybeDoc - The document to apply mutations to.
         */
        t.prototype.Cs = function(t, e) {
            // First, apply the base state. This allows us to apply non-idempotent
            // transform against a consistent set of values.
            for (var n = 0, r = this.baseMutations; n < r.length; n++) {
                (u = r[n]).key.isEqual(t) && (e = je(u, e, this.vs));
            }
            // Second, apply all user-provided mutations.
                    for (var i = 0, o = this.mutations; i < o.length; i++) {
                var u;
                (u = o[i]).key.isEqual(t) && (e = je(u, e, this.vs));
            }
            return e;
        }, 
        /**
         * Computes the local view for all provided documents given the mutations in
         * this batch.
         */
        t.prototype.xs = function(t) {
            var e = this, n = t;
            // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
            // directly (as done in `applyToLocalView()`), we can reduce the complexity
            // to O(n).
                    return this.mutations.forEach((function(r) {
                var i = e.Cs(r.key, t.get(r.key));
                i && (n = n.zt(r.key, i));
            })), n;
        }, t.prototype.keys = function() {
            return this.mutations.reduce((function(t, e) {
                return t.add(e.key);
            }), mn());
        }, t.prototype.isEqual = function(t) {
            return this.batchId === t.batchId && C(this.mutations, t.mutations, (function(t, e) {
                return ze(t, e);
            })) && C(this.baseMutations, t.baseMutations, (function(t, e) {
                return ze(t, e);
            }));
        }, t;
    }(), Wr = /** @class */ function() {
        function t(t, e, n, 
        /**
         * A pre-computed mapping from each mutated document to the resulting
         * version.
         */
        r) {
            this.batch = t, this.Ns = e, this.Ds = n, this.Fs = r
            /**
         * Creates a new MutationBatchResult for the given batch and results. There
         * must be one result for each mutation in the batch. This static factory
         * caches a document=&gt;version mapping (docVersions).
         */;
        }
        return t.from = function(e, n, r) {
            k$1(e.mutations.length === r.length);
            for (var i = vn(), o = e.mutations, u = 0; u < o.length; u++) i = i.zt(o[u].key, r[u].version);
            return new t(e, n, r, i);
        }, t;
    }(), Zr = function(t) {
        this.Os = t;
    };

    /** The result of applying a mutation batch to the backend. */
    /** Decodes a remote document from storage locally to a Document. */ function Jr(t, e) {
        if (e.document) return Kn(t.Os, e.document, !!e.hasCommittedMutations);
        if (e.noDocument) {
            var n = tt.Et(e.noDocument.path), r = ri(e.noDocument.readTime);
            return new Lt(n, r, {
                hasCommittedMutations: !!e.hasCommittedMutations
            });
        }
        if (e.unknownDocument) {
            var i = tt.Et(e.unknownDocument.path);
            r = ri(e.unknownDocument.version);
            return new Vt(i, r);
        }
        return x$1();
    }

    /** Encodes a document for storage locally. */ function $r(t, e, n) {
        var r = ti(n), i = e.key.path.X().it();
        if (e instanceof Pt) {
            var o = function(t, e) {
                return {
                    name: Fn(t, e.key),
                    fields: e.bt().mapValue.fields,
                    updateTime: Cn(t, e.version.j())
                };
            }(t.Os, e), u = e.hasCommittedMutations;
            return new Ur(
            /* unknownDocument= */ null, 
            /* noDocument= */ null, o, u, r, i);
        }
        if (e instanceof Lt) {
            var s = e.key.path.it(), a = ni(e.version);
            u = e.hasCommittedMutations;
            return new Ur(
            /* unknownDocument= */ null, new Cr(s, a), 
            /* document= */ null, u, r, i);
        }
        if (e instanceof Vt) {
            var c = e.key.path.it(), h = ni(e.version);
            return new Ur(new Rr(c, h), 
            /* noDocument= */ null, 
            /* document= */ null, 
            /* hasCommittedMutations= */ !0, r, i);
        }
        return x$1();
    }

    function ti(t) {
        var e = t.j();
        return [ e.seconds, e.nanoseconds ];
    }

    function ei(t) {
        var e = new K$1(t[0], t[1]);
        return X$1.K(e);
    }

    function ni(t) {
        var e = t.j();
        return new kr(e.seconds, e.nanoseconds);
    }

    function ri(t) {
        var e = new K$1(t.seconds, t.nanoseconds);
        return X$1.K(e);
    }

    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
    /** Decodes a DbMutationBatch into a MutationBatch */ function ii(t, e) {
        // Squash old transform mutations into existing patch or set mutations.
        // The replacement of representing `transforms` with `update_transforms`
        // on the SDK means that old `transform` mutations stored in IndexedDB need
        // to be updated to `update_transforms`.
        // TODO(b/174608374): Remove this code once we perform a schema migration.
        for (var n = (e.baseMutations || []).map((function(e) {
            return Wn(t.Os, e);
        })), r = 0; r < e.mutations.length - 1; ++r) {
            var i = e.mutations[r];
            if (r + 1 < e.mutations.length && void 0 !== e.mutations[r + 1].transform) {
                var o = e.mutations[r + 1];
                i.updateTransforms = o.transform.fieldTransforms, e.mutations.splice(r + 1, 1), 
                ++r;
            }
        }
        var u = e.mutations.map((function(e) {
            return Wn(t.Os, e);
        })), s = K$1.fromMillis(e.localWriteTimeMs);
        return new Xr(e.batchId, s, n, u);
    }

    /** Decodes a DbTarget into TargetData */ function oi(t) {
        var e, n, r = ri(t.readTime), i = void 0 !== t.lastLimboFreeSnapshotVersion ? ri(t.lastLimboFreeSnapshotVersion) : X$1.min();
        return void 0 !== t.query.documents ? (k$1(1 === (n = t.query).documents.length), 
        e = he(re(Bn(n.documents[0])))) : e = function(t) {
            return he($n(t));
        }(t.query), new ge(e, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, r, i, U$1.fromBase64String(t.resumeToken))
        /** Encodes TargetData into a DbTarget for storage locally. */;
    }

    function ui(t, e) {
        var n, r = ni(e.kt), i = ni(e.lastLimboFreeSnapshotVersion);
        n = qt(e.target) ? Zn(t.Os, e.target) : Jn(t.Os, e.target);
        // We can't store the resumeToken as a ByteString in IndexedDb, so we
        // convert it to a base64 string for storage.
        var o = e.resumeToken.toBase64();
        // lastListenSequenceNumber is always 0 until we do real GC.
            return new qr(e.targetId, Ut(e.target), r, o, e.sequenceNumber, i, n);
    }

    /**
     * A helper function for figuring out what kind of query has been stored.
     */
    /**
     * Encodes a `BundledQuery` from bundle proto to a Query object.
     *
     * This reconstructs the original query used to build the bundle being loaded,
     * including features exists only in SDKs (for example: limit-to-last).
     */ function si(t) {
        var e = $n({
            parent: t.parent,
            structuredQuery: t.structuredQuery
        });
        return "LAST" === t.limitType ? fe(e, e.limit, "L" /* Last */) : e;
    }

    /** Encodes a NamedQuery proto object to a NamedQuery model object. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var ai = /** @class */ function() {
        function t() {}
        return t.prototype.ks = function(t, e) {
            return ci(t).get(e).next((function(t) {
                if (t) return {
                    id: (e = t).bundleId,
                    createTime: ri(e.createTime),
                    version: e.version
                };
                /** Encodes a DbBundle to a BundleMetadata object. */            var e;
                /** Encodes a BundleMetadata to a DbBundle. */        }));
        }, t.prototype.Ms = function(t, e) {
            return ci(t).put({
                bundleId: (n = e).id,
                createTime: ni(Mn(n.createTime)),
                version: n.version
            });
            var n;
            /** Encodes a DbNamedQuery to a NamedQuery. */    }, t.prototype.Ls = function(t, e) {
            return hi(t).get(e).next((function(t) {
                if (t) return {
                    name: (e = t).name,
                    query: si(e.bundledQuery),
                    readTime: ri(e.readTime)
                };
                var e;
                /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */        }));
        }, t.prototype.$s = function(t, e) {
            return hi(t).put(function(t) {
                return {
                    name: t.name,
                    readTime: ni(Mn(t.readTime)),
                    bundledQuery: t.bundledQuery
                };
            }(e));
        }, t;
    }();

    /**
     * Helper to get a typed SimpleDbStore for the bundles object store.
     */ function ci(t) {
        return Kr(t, Br.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the namedQueries object store.
     */ function hi(t) {
        return Kr(t, Qr.store);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of IndexManager.
     */ var fi = /** @class */ function() {
        function t() {
            this.Bs = new li;
        }
        return t.prototype.qs = function(t, e) {
            return this.Bs.add(e), lr.resolve();
        }, t.prototype.Us = function(t, e) {
            return lr.resolve(this.Bs.getEntries(e));
        }, t;
    }(), li = /** @class */ function() {
        function t() {
            this.index = {};
        }
        // Returns false if the entry already existed.
            return t.prototype.add = function(t) {
            var e = t.tt(), n = t.X(), r = this.index[e] || new sn(Z$1.H), i = !r.has(n);
            return this.index[e] = r.add(n), i;
        }, t.prototype.has = function(t) {
            var e = t.tt(), n = t.X(), r = this.index[e];
            return r && r.has(n);
        }, t.prototype.getEntries = function(t) {
            return (this.index[t] || new sn(Z$1.H)).it();
        }, t;
    }(), pi = /** @class */ function() {
        function t() {
            /**
             * An in-memory copy of the index entries we've already written since the SDK
             * launched. Used to avoid re-writing the same entry repeatedly.
             *
             * This is *NOT* a complete cache of what's in persistence and so can never be used to
             * satisfy reads.
             */
            this.Qs = new li;
        }
        /**
         * Adds a new entry to the collection parent index.
         *
         * Repeated calls for the same collectionPath should be avoided within a
         * transaction as IndexedDbIndexManager only caches writes once a transaction
         * has been committed.
         */    return t.prototype.qs = function(t, e) {
            var n = this;
            if (!this.Qs.has(e)) {
                var r = e.tt(), i = e.X();
                t.gs((function() {
                    // Add the collection to the in memory cache only if the transaction was
                    // successfully committed.
                    n.Qs.add(e);
                }));
                var o = {
                    collectionId: r,
                    parent: Ar(i)
                };
                return di(t).put(o);
            }
            return lr.resolve();
        }, t.prototype.Us = function(t, e) {
            var n = [], r = IDBKeyRange.bound([ e, "" ], [ R$1(e), "" ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return di(t).rs(r).next((function(t) {
                for (var r = 0, i = t; r < i.length; r++) {
                    var o = i[r];
                    // This collectionId guard shouldn't be necessary (and isn't as long
                    // as we're running in a real browser), but there's a bug in
                    // indexeddbshim that breaks our range in our tests running in node:
                    // https://github.com/axemclion/IndexedDBShim/issues/334
                                    if (o.collectionId !== e) break;
                    n.push(xr(o.parent));
                }
                return n;
            }));
        }, t;
    }();

    /**
     * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
     * Also used for in-memory caching by IndexedDbIndexManager and initial index population
     * in indexeddb_schema.ts
     */
    /**
     * Helper to get a typed SimpleDbStore for the collectionParents
     * document store.
     */
    function di(t) {
        return Kr(t, zr.store);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var vi = {
        Ks: !1,
        Ws: 0,
        js: 0,
        Gs: 0
    }, yi = /** @class */ function() {
        function t(
        // When we attempt to collect, we will only do so if the cache size is greater than this
        // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
        t, 
        // The percentage of sequence numbers that we will attempt to collect
        e, 
        // A cap on the total number of sequence numbers that will be collected. This prevents
        // us from collecting a huge number of sequence numbers if the cache has grown very large.
        n) {
            this.zs = t, this.Hs = e, this.Js = n;
        }
        return t.Ys = function(e) {
            return new t(e, t.Xs, t.Zs);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Verifies the error thrown by a LocalStore operation. If a LocalStore
     * operation fails because the primary lease has been taken by another client,
     * we ignore the error (the persistence layer will immediately call
     * `applyPrimaryLease` to propagate the primary state change). All other errors
     * are re-thrown.
     *
     * @param err - An error returned by a LocalStore operation.
     * @returns A Promise that resolves after we recovered, or the original error.
     */
    function mi(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                if (t.code !== M$1.FAILED_PRECONDITION || t.message !== Tr) throw t;
                return N$1("LocalStore", "Unexpectedly lost primary lease"), [ 2 /*return*/ ];
            }));
        }));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A map implementation that uses objects as keys. Objects must have an
     * associated equals function and must be immutable. Entries in the map are
     * stored together with the key being produced from the mapKeyFn. This map
     * automatically handles collisions of keys.
     */ yi.Xs = 10, yi.Zs = 1e3, yi.ti = new yi(41943040, yi.Xs, yi.Zs), yi.ei = new yi(-1, 0, 0);

    var gi = /** @class */ function() {
        function t(t, e) {
            this.ni = t, this.si = e, 
            /**
                 * The inner map for a key/value pair. Due to the possibility of collisions we
                 * keep a list of entries that we do a linear search through to find an actual
                 * match. Note that collisions should be rare, so we still expect near
                 * constant time lookups in practice.
                 */
            this.ii = {}
            /** Get a value for this key, or undefined if it does not exist. */;
        }
        return t.prototype.get = function(t) {
            var e = this.ni(t), n = this.ii[e];
            if (void 0 !== n) for (var r = 0, i = n; r < i.length; r++) {
                var o = i[r], u = o[0], s = o[1];
                if (this.si(u, t)) return s;
            }
        }, t.prototype.has = function(t) {
            return void 0 !== this.get(t);
        }, 
        /** Put this key and value in the map. */ t.prototype.set = function(t, e) {
            var n = this.ni(t), r = this.ii[n];
            if (void 0 !== r) {
                for (var i = 0; i < r.length; i++) if (this.si(r[i][0], t)) return void (r[i] = [ t, e ]);
                r.push([ t, e ]);
            } else this.ii[n] = [ [ t, e ] ];
        }, 
        /**
         * Remove this key from the map. Returns a boolean if anything was deleted.
         */
        t.prototype.delete = function(t) {
            var e = this.ni(t), n = this.ii[e];
            if (void 0 === n) return !1;
            for (var r = 0; r < n.length; r++) if (this.si(n[r][0], t)) return 1 === n.length ? delete this.ii[e] : n.splice(r, 1), 
            !0;
            return !1;
        }, t.prototype.forEach = function(t) {
            nt(this.ii, (function(e, n) {
                for (var r = 0, i = n; r < i.length; r++) {
                    var o = i[r], u = o[0], s = o[1];
                    t(u, s);
                }
            }));
        }, t.prototype.et = function() {
            return rt(this.ii);
        }, t;
    }(), wi = /** @class */ function() {
        function t() {
            // A mapping of document key to the new cache entry that should be written (or null if any
            // existing cache entry should be removed).
            this.ri = new gi((function(t) {
                return t.toString();
            }), (function(t, e) {
                return t.isEqual(e);
            })), this.oi = !1;
        }
        return t.prototype.ci = function(t) {
            var e = this.ri.get(t);
            return e ? e.readTime : X$1.min();
        }, 
        /**
         * Buffers a `RemoteDocumentCache.addEntry()` call.
         *
         * You can only modify documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */
        t.prototype.ai = function(t, e) {
            this.ui(), this.ri.set(t.key, {
                hi: t,
                readTime: e
            });
        }, 
        /**
         * Buffers a `RemoteDocumentCache.removeEntry()` call.
         *
         * You can only remove documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */
        t.prototype.li = function(t, e) {
            void 0 === e && (e = null), this.ui(), this.ri.set(t, {
                hi: null,
                readTime: e
            });
        }, 
        /**
         * Looks up an entry in the cache. The buffered changes will first be checked,
         * and if no buffered change applies, this will forward to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKey - The key of the entry to look up.
         * @returns The cached Document or NoDocument entry, or null if we have
         *     nothing cached.
         */
        t.prototype._i = function(t, e) {
            this.ui();
            var n = this.ri.get(e);
            return void 0 !== n ? lr.resolve(n.hi) : this.fi(t, e);
        }, 
        /**
         * Looks up several entries in the cache, forwarding to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKeys - The keys of the entries to look up.
         * @returns A map of cached `Document`s or `NoDocument`s, indexed by key. If
         *     an entry cannot be found, the corresponding key will be mapped to a
         *     null value.
         */
        t.prototype.getEntries = function(t, e) {
            return this.di(t, e);
        }, 
        /**
         * Applies buffered changes to the underlying RemoteDocumentCache, using
         * the provided transaction.
         */
        t.prototype.apply = function(t) {
            return this.ui(), this.oi = !0, this.wi(t);
        }, 
        /** Helper to assert this.changes is not null  */ t.prototype.ui = function() {}, 
        t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory buffer of entries to be written to a RemoteDocumentCache.
     * It can be used to batch up a set of changes to be written to the cache, but
     * additionally supports reading entries back with the `getEntry()` method,
     * falling back to the underlying RemoteDocumentCache if no entry is
     * buffered.
     *
     * Entries added to the cache *must* be read first. This is to facilitate
     * calculating the size delta of the pending changes.
     *
     * PORTING NOTE: This class was implemented then removed from other platforms.
     * If byte-counting ends up being needed on the other platforms, consider
     * porting this class as part of that implementation work.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Delete a mutation batch and the associated document mutations.
     * @returns A PersistencePromise of the document mutations that were removed.
     */
    function bi(t, e, n) {
        var r = t.store(Lr.store), i = t.store(Vr.store), o = [], u = IDBKeyRange.only(n.batchId), s = 0, a = r.hs({
            range: u
        }, (function(t, e, n) {
            return s++, n.delete();
        }));
        o.push(a.next((function() {
            k$1(1 === s);
        })));
        for (var c = [], h = 0, f = n.mutations; h < f.length; h++) {
            var l = f[h], p = Vr.key(e, l.key.path, n.batchId);
            o.push(i.delete(p)), c.push(l.key);
        }
        return lr.Ln(o).next((function() {
            return c;
        }));
    }

    /**
     * Returns an approximate size for the given document.
     */ function _i(t) {
        var e;
        if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
            if (!t.noDocument) throw x$1();
            e = t.noDocument;
        }
        return JSON.stringify(e).length;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A mutation queue for a specific user, backed by IndexedDB. */ var Ii = /** @class */ function() {
        function t(
        /**
         * The normalized userId (e.g. null UID => "" userId) used to store /
         * retrieve mutations.
         */
        t, e, n, r) {
            this.userId = t, this.Qt = e, this.Ei = n, this.Ti = r, 
            /**
                 * Caches the document keys for pending mutation batches. If the mutation
                 * has been removed from IndexedDb, the cached value may continue to
                 * be used to retrieve the batch's document keys. To remove a cached value
                 * locally, `removeCachedMutationKeys()` should be invoked either directly
                 * or through `removeMutationBatches()`.
                 *
                 * With multi-tab, when the primary client acknowledges or rejects a mutation,
                 * this cache is used by secondary clients to invalidate the local
                 * view of the documents that were previously affected by the mutation.
                 */
            // PORTING NOTE: Multi-tab only.
            this.Ii = {}
            /**
         * Creates a new mutation queue for the given user.
         * @param user - The user for which to create a mutation queue.
         * @param serializer - The serializer to use when persisting to IndexedDb.
         */;
        }
        return t.mi = function(e, n, r, i) {
            // TODO(mcg): Figure out what constraints there are on userIDs
            // In particular, are there any reserved characters? are empty ids allowed?
            // For the moment store these together in the same mutations table assuming
            // that empty userIDs aren't allowed.
            return k$1("" !== e.uid), new t(e.m() ? e.uid : "", n, r, i);
        }, t.prototype.Ai = function(t) {
            var e = !0, n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return Ti(t).hs({
                index: Lr.userMutationsIndex,
                range: n
            }, (function(t, n, r) {
                e = !1, r.done();
            })).next((function() {
                return e;
            }));
        }, t.prototype.Ri = function(t, e, n, r) {
            var i = this, o = Ni(t), u = Ti(t);
            // The IndexedDb implementation in Chrome (and Firefox) does not handle
            // compound indices that include auto-generated keys correctly. To ensure
            // that the index entry is added correctly in all browsers, we perform two
            // writes: The first write is used to retrieve the next auto-generated Batch
            // ID, and the second write populates the index and stores the actual
            // mutation batch.
            // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
            // We write an empty object to obtain key
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return u.add({}).next((function(s) {
                k$1("number" == typeof s);
                for (var a = new Xr(s, e, n, r), c = function(t, e, n) {
                    var r = n.baseMutations.map((function(e) {
                        return Xn(t.Os, e);
                    })), i = n.mutations.map((function(e) {
                        return Xn(t.Os, e);
                    }));
                    return new Lr(e, n.batchId, n.vs.toMillis(), r, i);
                }(i.Qt, i.userId, a), h = [], f = new sn((function(t, e) {
                    return V$1(t.rt(), e.rt());
                })), l = 0, p = r; l < p.length; l++) {
                    var d = p[l], v = Vr.key(i.userId, d.key.path, s);
                    f = f.add(d.key.path.X()), h.push(u.put(c)), h.push(o.put(v, Vr.PLACEHOLDER));
                }
                return f.forEach((function(e) {
                    h.push(i.Ei.qs(t, e));
                })), t.gs((function() {
                    i.Ii[s] = a.keys();
                })), lr.Ln(h).next((function() {
                    return a;
                }));
            }));
        }, t.prototype.Pi = function(t, e) {
            var n = this;
            return Ti(t).get(e).next((function(t) {
                return t ? (k$1(t.userId === n.userId), ii(n.Qt, t)) : null;
            }));
        }, 
        /**
         * Returns the document keys for the mutation batch with the given batchId.
         * For primary clients, this method returns `null` after
         * `removeMutationBatches()` has been called. Secondary clients return a
         * cached result until `removeCachedMutationKeys()` is invoked.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.yi = function(t, e) {
            var n = this;
            return this.Ii[e] ? lr.resolve(this.Ii[e]) : this.Pi(t, e).next((function(t) {
                if (t) {
                    var r = t.keys();
                    return n.Ii[e] = r, r;
                }
                return null;
            }));
        }, t.prototype.gi = function(t, e) {
            var n = this, r = e + 1, i = IDBKeyRange.lowerBound([ this.userId, r ]), o = null;
            return Ti(t).hs({
                index: Lr.userMutationsIndex,
                range: i
            }, (function(t, e, i) {
                e.userId === n.userId && (k$1(e.batchId >= r), o = ii(n.Qt, e)), i.done();
            })).next((function() {
                return o;
            }));
        }, t.prototype.Vi = function(t) {
            var e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]), n = -1;
            return Ti(t).hs({
                index: Lr.userMutationsIndex,
                range: e,
                reverse: !0
            }, (function(t, e, r) {
                n = e.batchId, r.done();
            })).next((function() {
                return n;
            }));
        }, t.prototype.pi = function(t) {
            var e = this, n = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return Ti(t).rs(Lr.userMutationsIndex, n).next((function(t) {
                return t.map((function(t) {
                    return ii(e.Qt, t);
                }));
            }));
        }, t.prototype.bi = function(t, e) {
            var n = this, r = Vr.prefixForPath(this.userId, e.path), i = IDBKeyRange.lowerBound(r), o = [];
            // Scan the document-mutation index starting with a prefix starting with
            // the given documentKey.
                    return Ni(t).hs({
                range: i
            }, (function(r, i, u) {
                var s = r[0], a = r[1], c = r[2], h = xr(a);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                            if (s === n.userId && e.path.isEqual(h)) 
                // Look up the mutation batch in the store.
                return Ti(t).get(c).next((function(t) {
                    if (!t) throw x$1();
                    k$1(t.userId === n.userId), o.push(ii(n.Qt, t));
                }));
                u.done();
            })).next((function() {
                return o;
            }));
        }, t.prototype.vi = function(t, e) {
            var n = this, r = new sn(V$1), i = [];
            return e.forEach((function(e) {
                var o = Vr.prefixForPath(n.userId, e.path), u = IDBKeyRange.lowerBound(o), s = Ni(t).hs({
                    range: u
                }, (function(t, i, o) {
                    var u = t[0], s = t[1], a = t[2], c = xr(s);
                    // Only consider rows matching exactly the specific key of
                    // interest. Note that because we order by path first, and we
                    // order terminators before path separators, we'll encounter all
                    // the index rows for documentKey contiguously. In particular, all
                    // the rows for documentKey will occur before any rows for
                    // documents nested in a subcollection beneath documentKey so we
                    // can stop as soon as we hit any such row.
                                    u === n.userId && e.path.isEqual(c) ? r = r.add(a) : o.done();
                }));
                i.push(s);
            })), lr.Ln(i).next((function() {
                return n.Si(t, r);
            }));
        }, t.prototype.Di = function(t, e) {
            var n = this, r = e.path, i = r.length + 1, o = Vr.prefixForPath(this.userId, r), u = IDBKeyRange.lowerBound(o), s = new sn(V$1);
            return Ni(t).hs({
                range: u
            }, (function(t, e, o) {
                var u = t[0], a = t[1], c = t[2], h = xr(a);
                u === n.userId && r.nt(h) ? 
                // Rows with document keys more than one segment longer than the
                // query path can't be matches. For example, a query on 'rooms'
                // can't match the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                h.length === i && (s = s.add(c)) : o.done();
            })).next((function() {
                return n.Si(t, s);
            }));
        }, t.prototype.Si = function(t, e) {
            var n = this, r = [], i = [];
            // TODO(rockwood): Implement this using iterate.
            return e.forEach((function(e) {
                i.push(Ti(t).get(e).next((function(t) {
                    if (null === t) throw x$1();
                    k$1(t.userId === n.userId), r.push(ii(n.Qt, t));
                })));
            })), lr.Ln(i).next((function() {
                return r;
            }));
        }, t.prototype.Ci = function(t, e) {
            var n = this;
            return bi(t.ps, this.userId, e).next((function(r) {
                return t.gs((function() {
                    n.xi(e.batchId);
                })), lr.forEach(r, (function(e) {
                    return n.Ti.Ni(t, e);
                }));
            }));
        }, 
        /**
         * Clears the cached keys for a mutation batch. This method should be
         * called by secondary clients after they process mutation updates.
         *
         * Note that this method does not have to be called from primary clients as
         * the corresponding cache entries are cleared when an acknowledged or
         * rejected batch is removed from the mutation queue.
         */
        // PORTING NOTE: Multi-tab only
        t.prototype.xi = function(t) {
            delete this.Ii[t];
        }, t.prototype.Fi = function(t) {
            var e = this;
            return this.Ai(t).next((function(n) {
                if (!n) return lr.resolve();
                // Verify that there are no entries in the documentMutations index if
                // the queue is empty.
                            var r = IDBKeyRange.lowerBound(Vr.prefixForUser(e.userId)), i = [];
                return Ni(t).hs({
                    range: r
                }, (function(t, n, r) {
                    if (t[0] === e.userId) {
                        var o = xr(t[1]);
                        i.push(o);
                    } else r.done();
                })).next((function() {
                    k$1(0 === i.length);
                }));
            }));
        }, t.prototype.Oi = function(t, e) {
            return Ei(t, this.userId, e);
        }, 
        // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
        /** Returns the mutation queue's metadata from IndexedDb. */
        t.prototype.ki = function(t) {
            var e = this;
            return Ai(t).get(this.userId).next((function(t) {
                return t || new Pr(e.userId, -1, 
                /*lastStreamToken=*/ "");
            }));
        }, t;
    }();

    /**
     * @returns true if the mutation queue for the given user contains a pending
     *         mutation for the given key.
     */ function Ei(t, e, n) {
        var r = Vr.prefixForPath(e, n.path), i = r[1], o = IDBKeyRange.lowerBound(r), u = !1;
        return Ni(t).hs({
            range: o,
            us: !0
        }, (function(t, n, r) {
            var o = t[0], s = t[1];
            t[2];
            o === e && s === i && (u = !0), r.done();
        })).next((function() {
            return u;
        }));
    }

    /** Returns true if any mutation queue contains the given document. */
    /**
     * Helper to get a typed SimpleDbStore for the mutations object store.
     */ function Ti(t) {
        return Kr(t, Lr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function Ni(t) {
        return Kr(t, Vr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function Ai(t) {
        return Kr(t, Pr.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Offset to ensure non-overlapping target ids. */
    /**
     * Generates monotonically increasing target IDs for sending targets to the
     * watch stream.
     *
     * The client constructs two generators, one for the target cache, and one for
     * for the sync engine (to generate limbo documents targets). These
     * generators produce non-overlapping IDs (by using even and odd IDs
     * respectively).
     *
     * By separating the target ID space, the query cache can generate target IDs
     * that persist across client restarts, while sync engine can independently
     * generate in-memory target IDs that are transient and can be reused after a
     * restart.
     */ var Si = /** @class */ function() {
        function t(t) {
            this.Mi = t;
        }
        return t.prototype.next = function() {
            return this.Mi += 2, this.Mi;
        }, t.Li = function() {
            // The target cache generator must return '2' in its first call to `next()`
            // as there is no differentiation in the protocol layer between an unset
            // number and the number '0'. If we were to sent a target with target ID
            // '0', the backend would consider it unset and replace it with its own ID.
            return new t(0);
        }, t.$i = function() {
            // Sync engine assigns target IDs for limbo document detection.
            return new t(-1);
        }, t;
    }(), Di = /** @class */ function() {
        function t(t, e) {
            this.Ti = t, this.Qt = e;
        }
        // PORTING NOTE: We don't cache global metadata for the target cache, since
        // some of it (in particular `highestTargetId`) can be modified by secondary
        // tabs. We could perhaps be more granular (and e.g. still cache
        // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
        // to IndexedDb whenever we need to read metadata. We can revisit if it turns
        // out to have a meaningful performance impact.
            return t.prototype.Bi = function(t) {
            var e = this;
            return this.qi(t).next((function(n) {
                var r = new Si(n.highestTargetId);
                return n.highestTargetId = r.next(), e.Ui(t, n).next((function() {
                    return n.highestTargetId;
                }));
            }));
        }, t.prototype.Qi = function(t) {
            return this.qi(t).next((function(t) {
                return X$1.K(new K$1(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
            }));
        }, t.prototype.Ki = function(t) {
            return this.qi(t).next((function(t) {
                return t.highestListenSequenceNumber;
            }));
        }, t.prototype.Wi = function(t, e, n) {
            var r = this;
            return this.qi(t).next((function(i) {
                return i.highestListenSequenceNumber = e, n && (i.lastRemoteSnapshotVersion = n.j()), 
                e > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e), r.Ui(t, i);
            }));
        }, t.prototype.ji = function(t, e) {
            var n = this;
            return this.Gi(t, e).next((function() {
                return n.qi(t).next((function(r) {
                    return r.targetCount += 1, n.zi(e, r), n.Ui(t, r);
                }));
            }));
        }, t.prototype.Hi = function(t, e) {
            return this.Gi(t, e);
        }, t.prototype.Ji = function(t, e) {
            var n = this;
            return this.Yi(t, e.targetId).next((function() {
                return xi(t).delete(e.targetId);
            })).next((function() {
                return n.qi(t);
            })).next((function(e) {
                return k$1(e.targetCount > 0), e.targetCount -= 1, n.Ui(t, e);
            }));
        }, 
        /**
         * Drops any targets with sequence number less than or equal to the upper bound, excepting those
         * present in `activeTargetIds`. Document associations for the removed targets are also removed.
         * Returns the number of targets removed.
         */
        t.prototype.Xi = function(t, e, n) {
            var r = this, i = 0, o = [];
            return xi(t).hs((function(u, s) {
                var a = oi(s);
                a.sequenceNumber <= e && null === n.get(a.targetId) && (i++, o.push(r.Ji(t, a)));
            })).next((function() {
                return lr.Ln(o);
            })).next((function() {
                return i;
            }));
        }, 
        /**
         * Call provided function with each `TargetData` that we have cached.
         */
        t.prototype.In = function(t, e) {
            return xi(t).hs((function(t, n) {
                var r = oi(n);
                e(r);
            }));
        }, t.prototype.qi = function(t) {
            return ki(t).get(Fr.key).next((function(t) {
                return k$1(null !== t), t;
            }));
        }, t.prototype.Ui = function(t, e) {
            return ki(t).put(Fr.key, e);
        }, t.prototype.Gi = function(t, e) {
            return xi(t).put(ui(this.Qt, e));
        }, 
        /**
         * In-place updates the provided metadata to account for values in the given
         * TargetData. Saving is done separately. Returns true if there were any
         * changes to the metadata.
         */
        t.prototype.zi = function(t, e) {
            var n = !1;
            return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
            t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
            n = !0), n;
        }, t.prototype.Zi = function(t) {
            return this.qi(t).next((function(t) {
                return t.targetCount;
            }));
        }, t.prototype.tr = function(t, e) {
            // Iterating by the canonicalId may yield more than one result because
            // canonicalId values are not required to be unique per target. This query
            // depends on the queryTargets index to be efficient.
            var n = Ut(e), r = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]), i = null;
            return xi(t).hs({
                range: r,
                index: qr.queryTargetsIndexName
            }, (function(t, n, r) {
                var o = oi(n);
                // After finding a potential match, check that the target is
                // actually equal to the requested target.
                            Mt(e, o.target) && (i = o, r.done());
            })).next((function() {
                return i;
            }));
        }, t.prototype.er = function(t, e, n) {
            var r = this, i = [], o = Oi(t);
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
                    return e.forEach((function(e) {
                var u = Ar(e.path);
                i.push(o.put(new jr(n, u))), i.push(r.Ti.nr(t, n, e));
            })), lr.Ln(i);
        }, t.prototype.sr = function(t, e, n) {
            var r = this, i = Oi(t);
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
                    return lr.forEach(e, (function(e) {
                var o = Ar(e.path);
                return lr.Ln([ i.delete([ n, o ]), r.Ti.ir(t, n, e) ]);
            }));
        }, t.prototype.Yi = function(t, e) {
            var n = Oi(t), r = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return n.delete(r);
        }, t.prototype.rr = function(t, e) {
            var n = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), r = Oi(t), i = mn();
            return r.hs({
                range: n,
                us: !0
            }, (function(t, e, n) {
                var r = xr(t[1]), o = new tt(r);
                i = i.add(o);
            })).next((function() {
                return i;
            }));
        }, t.prototype.Oi = function(t, e) {
            var n = Ar(e.path), r = IDBKeyRange.bound([ n ], [ R$1(n) ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), i = 0;
            return Oi(t).hs({
                index: jr.documentTargetsIndex,
                us: !0,
                range: r
            }, (function(t, e, n) {
                var r = t[0];
                // Having a sentinel row for a document does not count as containing that document;
                // For the target cache, containing the document means the document is part of some
                // target.
                            t[1];
                0 !== r && (i++, n.done());
            })).next((function() {
                return i > 0;
            }));
        }, 
        /**
         * Looks up a TargetData entry by target ID.
         *
         * @param targetId - The target ID of the TargetData entry to look up.
         * @returns The cached TargetData entry, or null if the cache has no entry for
         * the target.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Sn = function(t, e) {
            return xi(t).get(e).next((function(t) {
                return t ? oi(t) : null;
            }));
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to get a typed SimpleDbStore for the queries object store.
     */
    function xi(t) {
        return Kr(t, qr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the target globals object store.
     */ function ki(t) {
        return Kr(t, Fr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the document target object store.
     */ function Oi(t) {
        return Kr(t, jr.store);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Pi(t, e) {
        var n = t[0], r = t[1], i = e[0], o = e[1], u = V$1(n, i);
        return 0 === u ? V$1(r, o) : u;
    }

    /**
     * Used to calculate the nth sequence number. Keeps a rolling buffer of the
     * lowest n values passed to `addElement`, and finally reports the largest of
     * them in `maxValue`.
     */ var Li = /** @class */ function() {
        function t(t) {
            this.cr = t, this.buffer = new sn(Pi), this.ar = 0;
        }
        return t.prototype.ur = function() {
            return ++this.ar;
        }, t.prototype.hr = function(t) {
            var e = [ t, this.ur() ];
            if (this.buffer.size < this.cr) this.buffer = this.buffer.add(e); else {
                var n = this.buffer.last();
                Pi(e, n) < 0 && (this.buffer = this.buffer.delete(n).add(e));
            }
        }, Object.defineProperty(t.prototype, "maxValue", {
            get: function() {
                // Guaranteed to be non-empty. If we decide we are not collecting any
                // sequence numbers, nthSequenceNumber below short-circuits. If we have
                // decided that we are collecting n sequence numbers, it's because n is some
                // percentage of the existing sequence numbers. That means we should never
                // be in a situation where we are collecting sequence numbers but don't
                // actually have any.
                return this.buffer.last()[0];
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }(), Vi = /** @class */ function() {
        function t(t, e) {
            this.lr = t, this._s = e, this._r = !1, this.dr = null;
        }
        return t.prototype.start = function(t) {
            -1 !== this.lr.params.zs && this.wr(t);
        }, t.prototype.stop = function() {
            this.dr && (this.dr.cancel(), this.dr = null);
        }, Object.defineProperty(t.prototype, "Er", {
            get: function() {
                return null !== this.dr;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.wr = function(t) {
            var e = this, n = this._r ? 3e5 : 6e4;
            N$1("LruGarbageCollector", "Garbage collection scheduled in " + n + "ms"), this.dr = this._s.Tr("lru_garbage_collection" /* LruGarbageCollection */ , n, (function() {
                return __awaiter(e, void 0, void 0, (function() {
                    var e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            this.dr = null, this._r = !0, n.label = 1;

                          case 1:
                            return n.trys.push([ 1, 3, , 7 ]), [ 4 /*yield*/ , t.Ir(this.lr) ];

                          case 2:
                            return n.sent(), [ 3 /*break*/ , 7 ];

                          case 3:
                            return mr(e = n.sent()) ? (N$1("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e), 
                            [ 3 /*break*/ , 6 ]) : [ 3 /*break*/ , 4 ];

                          case 4:
                            return [ 4 /*yield*/ , mi(e) ];

                          case 5:
                            n.sent(), n.label = 6;

                          case 6:
                            return [ 3 /*break*/ , 7 ];

                          case 7:
                            return [ 4 /*yield*/ , this.wr(t) ];

                          case 8:
                            return n.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, t;
    }(), Ci = /** @class */ function() {
        function t(t, e) {
            this.mr = t, this.params = e;
        }
        return t.prototype.Ar = function(t, e) {
            return this.mr.Rr(t).next((function(t) {
                return Math.floor(e / 100 * t);
            }));
        }, t.prototype.Pr = function(t, e) {
            var n = this;
            if (0 === e) return lr.resolve(H$1.q);
            var r = new Li(e);
            return this.mr.In(t, (function(t) {
                return r.hr(t.sequenceNumber);
            })).next((function() {
                return n.mr.yr(t, (function(t) {
                    return r.hr(t);
                }));
            })).next((function() {
                return r.maxValue;
            }));
        }, t.prototype.Xi = function(t, e, n) {
            return this.mr.Xi(t, e, n);
        }, t.prototype.gr = function(t, e) {
            return this.mr.gr(t, e);
        }, t.prototype.Vr = function(t, e) {
            var n = this;
            return -1 === this.params.zs ? (N$1("LruGarbageCollector", "Garbage collection skipped; disabled"), 
            lr.resolve(vi)) : this.pr(t).next((function(r) {
                return r < n.params.zs ? (N$1("LruGarbageCollector", "Garbage collection skipped; Cache size " + r + " is lower than threshold " + n.params.zs), 
                vi) : n.br(t, e);
            }));
        }, t.prototype.pr = function(t) {
            return this.mr.pr(t);
        }, t.prototype.br = function(t, n) {
            var r, i, o, u, s, a, c, h = this, f = Date.now();
            return this.Ar(t, this.params.Hs).next((function(e) {
                // Cap at the configured max
                return e > h.params.Js ? (N$1("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + h.params.Js + " from " + e), 
                i = h.params.Js) : i = e, u = Date.now(), h.Pr(t, i);
            })).next((function(e) {
                return r = e, s = Date.now(), h.Xi(t, r, n);
            })).next((function(e) {
                return o = e, a = Date.now(), h.gr(t, r);
            })).next((function(t) {
                return c = Date.now(), T$1() <= LogLevel.DEBUG && N$1("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (u - f) + "ms\n\tDetermined least recently used " + i + " in " + (s - u) + "ms\n\tRemoved " + o + " targets in " + (a - s) + "ms\n\tRemoved " + t + " documents in " + (c - a) + "ms\nTotal Duration: " + (c - f) + "ms"), 
                lr.resolve({
                    Ks: !0,
                    Ws: i,
                    js: o,
                    Gs: t
                });
            }));
        }, t;
    }(), Ri = /** @class */ function() {
        function t(t, e) {
            this.db = t, this.lr = function(t, e) {
                return new Ci(t, e);
            }(this, e);
        }
        return t.prototype.Rr = function(t) {
            var e = this.vr(t);
            return this.db.Sr().Zi(t).next((function(t) {
                return e.next((function(e) {
                    return t + e;
                }));
            }));
        }, t.prototype.vr = function(t) {
            var e = 0;
            return this.yr(t, (function(t) {
                e++;
            })).next((function() {
                return e;
            }));
        }, t.prototype.In = function(t, e) {
            return this.db.Sr().In(t, e);
        }, t.prototype.yr = function(t, e) {
            return this.Dr(t, (function(t, n) {
                return e(n);
            }));
        }, t.prototype.nr = function(t, e, n) {
            return Ui(t, n);
        }, t.prototype.ir = function(t, e, n) {
            return Ui(t, n);
        }, t.prototype.Xi = function(t, e, n) {
            return this.db.Sr().Xi(t, e, n);
        }, t.prototype.Ni = function(t, e) {
            return Ui(t, e);
        }, 
        /**
         * Returns true if anything would prevent this document from being garbage
         * collected, given that the document in question is not present in any
         * targets and has a sequence number less than or equal to the upper bound for
         * the collection run.
         */
        t.prototype.Cr = function(t, e) {
            return function(t, e) {
                var n = !1;
                return Ai(t).ls((function(r) {
                    return Ei(t, r, e).next((function(t) {
                        return t && (n = !0), lr.resolve(!t);
                    }));
                })).next((function() {
                    return n;
                }));
            }(t, e);
        }, t.prototype.gr = function(t, e) {
            var n = this, r = this.db.Fr().Nr(), i = [], o = 0;
            return this.Dr(t, (function(u, s) {
                if (s <= e) {
                    var a = n.Cr(t, u).next((function(e) {
                        if (!e) 
                        // Our size accounting requires us to read all documents before
                        // removing them.
                        return o++, r._i(t, u).next((function() {
                            return r.li(u), Oi(t).delete([ 0, Ar(u.path) ]);
                        }));
                    }));
                    i.push(a);
                }
            })).next((function() {
                return lr.Ln(i);
            })).next((function() {
                return r.apply(t);
            })).next((function() {
                return o;
            }));
        }, t.prototype.removeTarget = function(t, e) {
            var n = e.Mt(t.bs);
            return this.db.Sr().Hi(t, n);
        }, t.prototype.Or = function(t, e) {
            return Ui(t, e);
        }, 
        /**
         * Call provided function for each document in the cache that is 'orphaned'. Orphaned
         * means not a part of any target, so the only entry in the target-document index for
         * that document will be the sentinel row (targetId 0), which will also have the sequence
         * number for the last time the document was accessed.
         */
        t.prototype.Dr = function(t, e) {
            var n, r = Oi(t), i = H$1.q;
            return r.hs({
                index: jr.documentTargetsIndex
            }, (function(t, r) {
                var o = t[0], u = (t[1], r.path), s = r.sequenceNumber;
                0 === o ? (
                // if nextToReport is valid, report it, this is a new key so the
                // last one must not be a member of any targets.
                i !== H$1.q && e(new tt(xr(n)), i), 
                // set nextToReport to be this sequence number. It's the next one we
                // might report, if we don't find any targets for this document.
                // Note that the sequence number must be defined when the targetId
                // is 0.
                i = s, n = u) : 
                // set nextToReport to be invalid, we know we don't need to report
                // this one since we found a target for it.
                i = H$1.q;
            })).next((function() {
                // Since we report sequence numbers after getting to the next key, we
                // need to check if the last key we iterated over was an orphaned
                // document and report it.
                i !== H$1.q && e(new tt(xr(n)), i);
            }));
        }, t.prototype.pr = function(t) {
            return this.db.Fr().kr(t);
        }, t;
    }();

    /**
     * This class is responsible for the scheduling of LRU garbage collection. It handles checking
     * whether or not GC is enabled, as well as which delay to use before the next run.
     */ function Ui(t, e) {
        return Oi(t).put(
        /**
     * @returns A value suitable for writing a sentinel row in the target-document
     * store.
     */
        function(t, e) {
            return new jr(0, Ar(t.path), e);
        }(e, t.bs));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The RemoteDocumentCache for IndexedDb. To construct, invoke
     * `newIndexedDbRemoteDocumentCache()`.
     */ var Mi = /** @class */ function() {
        /**
         * @param serializer - The document serializer.
         * @param indexManager - The query indexes that need to be maintained.
         */
        function t(t, e) {
            this.Qt = t, this.Ei = e
            /**
         * Adds the supplied entries to the cache.
         *
         * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */;
        }
        return t.prototype.ai = function(t, e, n) {
            return Fi(t).put(zi(e), n);
        }, 
        /**
         * Removes a document from the cache.
         *
         * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */
        t.prototype.li = function(t, e) {
            var n = Fi(t), r = zi(e);
            return n.delete(r);
        }, 
        /**
         * Updates the current cache size.
         *
         * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
         * cache's metadata.
         */
        t.prototype.updateMetadata = function(t, e) {
            var n = this;
            return this.getMetadata(t).next((function(r) {
                return r.byteSize += e, n.Mr(t, r);
            }));
        }, t.prototype._i = function(t, e) {
            var n = this;
            return Fi(t).get(zi(e)).next((function(t) {
                return n.Lr(t);
            }));
        }, 
        /**
         * Looks up an entry in the cache.
         *
         * @param documentKey - The key of the entry to look up.
         * @returns The cached MaybeDocument entry and its size, or null if we have
         * nothing cached.
         */
        t.prototype.$r = function(t, e) {
            var n = this;
            return Fi(t).get(zi(e)).next((function(t) {
                var e = n.Lr(t);
                return e ? {
                    hi: e,
                    size: _i(t)
                } : null;
            }));
        }, t.prototype.getEntries = function(t, e) {
            var n = this, r = fn();
            return this.Br(t, e, (function(t, e) {
                var i = n.Lr(e);
                r = r.zt(t, i);
            })).next((function() {
                return r;
            }));
        }, 
        /**
         * Looks up several entries in the cache.
         *
         * @param documentKeys - The set of keys entries to look up.
         * @returns A map of MaybeDocuments indexed by key (if a document cannot be
         *     found, the key will be mapped to null) and a map of sizes indexed by
         *     key (zero if the key cannot be found).
         */
        t.prototype.qr = function(t, e) {
            var n = this, r = fn(), i = new rn(tt.H);
            return this.Br(t, e, (function(t, e) {
                var o = n.Lr(e);
                o ? (r = r.zt(t, o), i = i.zt(t, _i(e))) : (r = r.zt(t, null), i = i.zt(t, 0));
            })).next((function() {
                return {
                    Ur: r,
                    Qr: i
                };
            }));
        }, t.prototype.Br = function(t, e, n) {
            if (e.et()) return lr.resolve();
            var r = IDBKeyRange.bound(e.first().path.it(), e.last().path.it()), i = e.te(), o = i.oe();
            return Fi(t).hs({
                range: r
            }, (function(t, e, r) {
                // Go through keys not found in cache.
                for (var u = tt.Et(t); o && tt.H(o, u) < 0; ) n(o, null), o = i.oe();
                o && o.isEqual(u) && (
                // Key found in cache.
                n(o, e), o = i.ce() ? i.oe() : null), 
                // Skip to the next key (if there is one).
                o ? r.ss(o.path.it()) : r.done();
            })).next((function() {
                // The rest of the keys are not in the cache. One case where `iterate`
                // above won't go through them is when the cache is empty.
                for (;o; ) n(o, null), o = i.ce() ? i.oe() : null;
            }));
        }, t.prototype.Kr = function(t, e, n) {
            var r = this, i = pn(), o = e.path.length + 1, u = {};
            if (n.isEqual(X$1.min())) {
                // Documents are ordered by key, so we can use a prefix scan to narrow
                // down the documents we need to match the query against.
                var s = e.path.it();
                u.range = IDBKeyRange.lowerBound(s);
            } else {
                // Execute an index-free query and filter by read time. This is safe
                // since all document changes to queries that have a
                // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
                var a = e.path.it(), c = ti(n);
                u.range = IDBKeyRange.lowerBound([ a, c ], 
                /* open= */ !0), u.index = Ur.collectionReadTimeIndex;
            }
            return Fi(t).hs(u, (function(t, n, u) {
                // The query is actually returning any path that starts with the query
                // path prefix which may include documents in subcollections. For
                // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
                // shouldn't match it. Fix this by discarding rows with document keys
                // more than one segment longer than the query path.
                if (t.length === o) {
                    var s = Jr(r.Qt, n);
                    e.path.nt(s.key.path) ? s instanceof Pt && ve(e, s) && (i = i.zt(s.key, s)) : u.done();
                }
            })).next((function() {
                return i;
            }));
        }, t.prototype.Nr = function(t) {
            return new qi(this, !!t && t.Wr);
        }, t.prototype.kr = function(t) {
            return this.getMetadata(t).next((function(t) {
                return t.byteSize;
            }));
        }, t.prototype.getMetadata = function(t) {
            return ji(t).get(Mr.key).next((function(t) {
                return k$1(!!t), t;
            }));
        }, t.prototype.Mr = function(t, e) {
            return ji(t).put(Mr.key, e);
        }, 
        /**
         * Decodes `remoteDoc` and returns the document (or null, if the document
         * corresponds to the format used for sentinel deletes).
         */
        t.prototype.Lr = function(t) {
            if (t) {
                var e = Jr(this.Qt, t);
                return e instanceof Lt && e.version.isEqual(X$1.min()) ? null : e;
            }
            return null;
        }, t;
    }(), qi = /** @class */ function(t) {
        /**
         * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
         * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
         * `getNewDocumentChanges()`.
         */
        function e(e, n) {
            var r = this;
            return (r = t.call(this) || this).jr = e, r.Wr = n, 
            // A map of document sizes prior to applying the changes in this buffer.
            r.Gr = new gi((function(t) {
                return t.toString();
            }), (function(t, e) {
                return t.isEqual(e);
            })), r;
        }
        return __extends$1d(e, t), e.prototype.wi = function(t) {
            var e = this, n = [], r = 0, i = new sn((function(t, e) {
                return V$1(t.rt(), e.rt());
            }));
            return this.ri.forEach((function(o, u) {
                var s = e.Gr.get(o);
                if (u.hi) {
                    var a = $r(e.jr.Qt, u.hi, e.ci(o));
                    i = i.add(o.path.X());
                    var c = _i(a);
                    r += c - s, n.push(e.jr.ai(t, o, a));
                } else if (r -= s, e.Wr) {
                    // In order to track removals, we store a "sentinel delete" in the
                    // RemoteDocumentCache. This entry is represented by a NoDocument
                    // with a version of 0 and ignored by `maybeDecodeDocument()` but
                    // preserved in `getNewDocumentChanges()`.
                    var h = $r(e.jr.Qt, new Lt(o, X$1.min()), e.ci(o));
                    n.push(e.jr.ai(t, o, h));
                } else n.push(e.jr.li(t, o));
            })), i.forEach((function(r) {
                n.push(e.jr.Ei.qs(t, r));
            })), n.push(this.jr.updateMetadata(t, r)), lr.Ln(n);
        }, e.prototype.fi = function(t, e) {
            var n = this;
            // Record the size of everything we load from the cache so we can compute a delta later.
                    return this.jr.$r(t, e).next((function(t) {
                return null === t ? (n.Gr.set(e, 0), null) : (n.Gr.set(e, t.size), t.hi);
            }));
        }, e.prototype.di = function(t, e) {
            var n = this;
            // Record the size of everything we load from the cache so we can compute
            // a delta later.
                    return this.jr.qr(t, e).next((function(t) {
                var e = t.Ur;
                // Note: `getAllFromCache` returns two maps instead of a single map from
                // keys to `DocumentSizeEntry`s. This is to allow returning the
                // `NullableMaybeDocumentMap` directly, without a conversion.
                return t.Qr.forEach((function(t, e) {
                    n.Gr.set(t, e);
                })), e;
            }));
        }, e;
    }(wi);

    /**
     * Creates a new IndexedDbRemoteDocumentCache.
     *
     * @param serializer - The document serializer.
     * @param indexManager - The query indexes that need to be maintained.
     */
    /**
     * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
     *
     * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
     * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
     * when we apply the changes.
     */ function ji(t) {
        return Kr(t, Mr.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
     */ function Fi(t) {
        return Kr(t, Ur.store);
    }

    function zi(t) {
        return t.path.it();
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Performs database creation and schema upgrades. */ var Gi = /** @class */ function() {
        function t(t) {
            this.Qt = t;
        }
        /**
         * Performs database creation and schema upgrades.
         *
         * Note that in production, this method is only ever used to upgrade the schema
         * to SCHEMA_VERSION. Different values of toVersion are only used for testing
         * and local feature development.
         */    return t.prototype.Jn = function(t, e, n, r) {
            var i = this;
            k$1(n < r && n >= 0 && r <= 11);
            var o = new pr("createOrUpgrade", e);
            n < 1 && r >= 1 && (function(t) {
                t.createObjectStore(Or.store);
            }(t), function(t) {
                t.createObjectStore(Pr.store, {
                    keyPath: Pr.keyPath
                }), t.createObjectStore(Lr.store, {
                    keyPath: Lr.keyPath,
                    autoIncrement: !0
                }).createIndex(Lr.userMutationsIndex, Lr.userMutationsKeyPath, {
                    unique: !0
                }), t.createObjectStore(Vr.store);
            }(t), Bi(t), function(t) {
                t.createObjectStore(Ur.store);
            }(t));
            // Migration 2 to populate the targetGlobal object no longer needed since
            // migration 3 unconditionally clears it.
            var u = lr.resolve();
            return n < 3 && r >= 3 && (
            // Brand new clients don't need to drop and recreate--only clients that
            // potentially have corrupt data.
            0 !== n && (function(t) {
                t.deleteObjectStore(jr.store), t.deleteObjectStore(qr.store), t.deleteObjectStore(Fr.store);
            }(t), Bi(t)), u = u.next((function() {
                /**
         * Creates the target global singleton row.
         *
         * @param txn - The version upgrade transaction for indexeddb
         */
                return function(t) {
                    var e = t.store(Fr.store), n = new Fr(
                    /*highestTargetId=*/ 0, 
                    /*lastListenSequenceNumber=*/ 0, X$1.min().j(), 
                    /*targetCount=*/ 0);
                    return e.put(Fr.key, n);
                }(o);
            }))), n < 4 && r >= 4 && (0 !== n && (
            // Schema version 3 uses auto-generated keys to generate globally unique
            // mutation batch IDs (this was previously ensured internally by the
            // client). To migrate to the new schema, we have to read all mutations
            // and write them back out. We preserve the existing batch IDs to guarantee
            // consistency with other object stores. Any further mutation batch IDs will
            // be auto-generated.
            u = u.next((function() {
                return function(t, e) {
                    return e.store(Lr.store).rs().next((function(n) {
                        t.deleteObjectStore(Lr.store), t.createObjectStore(Lr.store, {
                            keyPath: Lr.keyPath,
                            autoIncrement: !0
                        }).createIndex(Lr.userMutationsIndex, Lr.userMutationsKeyPath, {
                            unique: !0
                        });
                        var r = e.store(Lr.store), i = n.map((function(t) {
                            return r.put(t);
                        }));
                        return lr.Ln(i);
                    }));
                }(t, o);
            }))), u = u.next((function() {
                !function(t) {
                    t.createObjectStore(Gr.store, {
                        keyPath: Gr.keyPath
                    });
                }(t);
            }))), n < 5 && r >= 5 && (u = u.next((function() {
                return i.zr(o);
            }))), n < 6 && r >= 6 && (u = u.next((function() {
                return function(t) {
                    t.createObjectStore(Mr.store);
                }(t), i.Hr(o);
            }))), n < 7 && r >= 7 && (u = u.next((function() {
                return i.Jr(o);
            }))), n < 8 && r >= 8 && (u = u.next((function() {
                return i.Yr(t, o);
            }))), n < 9 && r >= 9 && (u = u.next((function() {
                // Multi-Tab used to manage its own changelog, but this has been moved
                // to the DbRemoteDocument object store itself. Since the previous change
                // log only contained transient data, we can drop its object store.
                !function(t) {
                    t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
                }(t), function(t) {
                    var e = t.objectStore(Ur.store);
                    e.createIndex(Ur.readTimeIndex, Ur.readTimeIndexPath, {
                        unique: !1
                    }), e.createIndex(Ur.collectionReadTimeIndex, Ur.collectionReadTimeIndexPath, {
                        unique: !1
                    });
                }(e);
            }))), n < 10 && r >= 10 && (u = u.next((function() {
                return i.Xr(o);
            }))), n < 11 && r >= 11 && (u = u.next((function() {
                !function(t) {
                    t.createObjectStore(Br.store, {
                        keyPath: Br.keyPath
                    });
                }(t), function(t) {
                    t.createObjectStore(Qr.store, {
                        keyPath: Qr.keyPath
                    });
                }(t);
            }))), u;
        }, t.prototype.Hr = function(t) {
            var e = 0;
            return t.store(Ur.store).hs((function(t, n) {
                e += _i(n);
            })).next((function() {
                var n = new Mr(e);
                return t.store(Mr.store).put(Mr.key, n);
            }));
        }, t.prototype.zr = function(t) {
            var e = this, n = t.store(Pr.store), r = t.store(Lr.store);
            return n.rs().next((function(n) {
                return lr.forEach(n, (function(n) {
                    var i = IDBKeyRange.bound([ n.userId, -1 ], [ n.userId, n.lastAcknowledgedBatchId ]);
                    return r.rs(Lr.userMutationsIndex, i).next((function(r) {
                        return lr.forEach(r, (function(r) {
                            k$1(r.userId === n.userId);
                            var i = ii(e.Qt, r);
                            return bi(t, n.userId, i).next((function() {}));
                        }));
                    }));
                }));
            }));
        }, 
        /**
         * Ensures that every document in the remote document cache has a corresponding sentinel row
         * with a sequence number. Missing rows are given the most recently used sequence number.
         */
        t.prototype.Jr = function(t) {
            var e = t.store(jr.store), n = t.store(Ur.store);
            return t.store(Fr.store).get(Fr.key).next((function(t) {
                var r = [];
                return n.hs((function(n, i) {
                    var o = new Z$1(n), u = function(t) {
                        return [ 0, Ar(t) ];
                    }(o);
                    r.push(e.get(u).next((function(n) {
                        return n ? lr.resolve() : function(n) {
                            return e.put(new jr(0, Ar(n), t.highestListenSequenceNumber));
                        }(o);
                    })));
                })).next((function() {
                    return lr.Ln(r);
                }));
            }));
        }, t.prototype.Yr = function(t, e) {
            // Create the index.
            t.createObjectStore(zr.store, {
                keyPath: zr.keyPath
            });
            var n = e.store(zr.store), r = new li, i = function(t) {
                if (r.add(t)) {
                    var e = t.tt(), i = t.X();
                    return n.put({
                        collectionId: e,
                        parent: Ar(i)
                    });
                }
            };
            // Helper to add an index entry iff we haven't already written it.
            // Index existing remote documents.
                    return e.store(Ur.store).hs({
                us: !0
            }, (function(t, e) {
                var n = new Z$1(t);
                return i(n.X());
            })).next((function() {
                return e.store(Vr.store).hs({
                    us: !0
                }, (function(t, e) {
                    t[0];
                    var n = t[1], r = (t[2], xr(n));
                    return i(r.X());
                }));
            }));
        }, t.prototype.Xr = function(t) {
            var e = this, n = t.store(qr.store);
            return n.hs((function(t, r) {
                var i = oi(r), o = ui(e.Qt, i);
                return n.put(o);
            }));
        }, t;
    }();

    function Bi(t) {
        t.createObjectStore(jr.store, {
            keyPath: jr.keyPath
        }).createIndex(jr.documentTargetsIndex, jr.documentTargetsKeyPath, {
            unique: !0
        }), 
        // NOTE: This is unique only because the TargetId is the suffix.
        t.createObjectStore(qr.store, {
            keyPath: qr.keyPath
        }).createIndex(qr.queryTargetsIndexName, qr.queryTargetsKeyPath, {
            unique: !0
        }), t.createObjectStore(Fr.store);
    }

    var Qi = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.", Yi = /** @class */ function() {
        function t(
        /**
         * Whether to synchronize the in-memory state of multiple tabs and share
         * access to local persistence.
         */
        e, n, r, i, o, u, s, a, c, 
        /**
         * If set to true, forcefully obtains database access. Existing tabs will
         * no longer be able to access IndexedDB.
         */
        h) {
            if (this.allowTabSynchronization = e, this.persistenceKey = n, this.clientId = r, 
            this.Zr = o, this.window = u, this.document = s, this.eo = c, this.no = h, this.so = null, 
            this.io = !1, this.isPrimary = !1, this.networkEnabled = !0, 
            /** Our window.unload handler, if registered. */
            this.ro = null, this.inForeground = !1, 
            /** Our 'visibilitychange' listener if registered. */
            this.oo = null, 
            /** The client metadata refresh task. */
            this.co = null, 
            /** The last time we garbage collected the client metadata object store. */
            this.ao = Number.NEGATIVE_INFINITY, 
            /** A listener to notify on primary state changes. */
            this.uo = function(t) {
                return Promise.resolve();
            }, !t.Kn()) throw new q$1(M$1.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
            this.Ti = new Ri(this, i), this.ho = n + "main", this.Qt = new Zr(a), this.lo = new dr(this.ho, 11, new Gi(this.Qt)), 
            this._o = new Di(this.Ti, this.Qt), this.Ei = new pi, this.fo = function(t, e) {
                return new Mi(t, e);
            }(this.Qt, this.Ei), this.wo = new ai, this.window && this.window.localStorage ? this.Eo = this.window.localStorage : (this.Eo = null, 
            !1 === h && A$1("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
        }
        /**
         * Attempt to start IndexedDb persistence.
         *
         * @returns Whether persistence was enabled.
         */    return t.prototype.start = function() {
            var t = this;
            // NOTE: This is expected to fail sometimes (in the case of another tab
            // already having the persistence lock), so it's the first thing we should
            // do.
                    return this.To().then((function() {
                if (!t.isPrimary && !t.allowTabSynchronization) 
                // Fail `start()` if `synchronizeTabs` is disabled and we cannot
                // obtain the primary lease.
                throw new q$1(M$1.FAILED_PRECONDITION, Qi);
                return t.Io(), t.mo(), t.Ao(), t.runTransaction("getHighestListenSequenceNumber", "readonly", (function(e) {
                    return t._o.Ki(e);
                }));
            })).then((function(e) {
                t.so = new H$1(e, t.eo);
            })).then((function() {
                t.io = !0;
            })).catch((function(e) {
                return t.lo && t.lo.close(), Promise.reject(e);
            }));
        }, 
        /**
         * Registers a listener that gets called when the primary state of the
         * instance changes. Upon registering, this listener is invoked immediately
         * with the current primary state.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.Ro = function(t) {
            var e = this;
            return this.uo = function(n) {
                return __awaiter(e, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        return this.Er ? [ 2 /*return*/ , t(n) ] : [ 2 /*return*/ ];
                    }));
                }));
            }, t(this.isPrimary);
        }, 
        /**
         * Registers a listener that gets called when the database receives a
         * version change event indicating that it has deleted.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.Po = function(t) {
            var e = this;
            this.lo.Xn((function(n) {
                return __awaiter(e, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return null === n.newVersion ? [ 4 /*yield*/ , t() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            e.sent(), e.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, 
        /**
         * Adjusts the current network state in the client's metadata, potentially
         * affecting the primary lease.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.yo = function(t) {
            var e = this;
            this.networkEnabled !== t && (this.networkEnabled = t, 
            // Schedule a primary lease refresh for immediate execution. The eventual
            // lease update will be propagated via `primaryStateListener`.
            this.Zr.Ps((function() {
                return __awaiter(e, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            return this.Er ? [ 4 /*yield*/ , this.To() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            t.sent(), t.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            })));
        }, 
        /**
         * Updates the client metadata in IndexedDb and attempts to either obtain or
         * extend the primary lease for the local client. Asynchronously notifies the
         * primary state listener if the client either newly obtained or released its
         * primary lease.
         */
        t.prototype.To = function() {
            var t = this;
            return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (function(e) {
                return Ki(e).put(new Gr(t.clientId, Date.now(), t.networkEnabled, t.inForeground)).next((function() {
                    if (t.isPrimary) return t.Vo(e).next((function(e) {
                        e || (t.isPrimary = !1, t.Zr.po((function() {
                            return t.uo(!1);
                        })));
                    }));
                })).next((function() {
                    return t.bo(e);
                })).next((function(n) {
                    return t.isPrimary && !n ? t.vo(e).next((function() {
                        return !1;
                    })) : !!n && t.So(e).next((function() {
                        return !0;
                    }));
                }));
            })).catch((function(e) {
                if (mr(e)) 
                // Proceed with the existing state. Any subsequent access to
                // IndexedDB will verify the lease.
                return N$1("IndexedDbPersistence", "Failed to extend owner lease: ", e), t.isPrimary;
                if (!t.allowTabSynchronization) throw e;
                return N$1("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), 
                /* isPrimary= */ !1;
            })).then((function(e) {
                t.isPrimary !== e && t.Zr.po((function() {
                    return t.uo(e);
                })), t.isPrimary = e;
            }));
        }, t.prototype.Vo = function(t) {
            var e = this;
            return Hi(t).get(Or.key).next((function(t) {
                return lr.resolve(e.Do(t));
            }));
        }, t.prototype.Co = function(t) {
            return Ki(t).delete(this.clientId);
        }, 
        /**
         * If the garbage collection threshold has passed, prunes the
         * RemoteDocumentChanges and the ClientMetadata store based on the last update
         * time of all clients.
         */
        t.prototype.xo = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, n, r, i = this;
                return __generator(this, (function(o) {
                    switch (o.label) {
                      case 0:
                        return !this.isPrimary || this.No(this.ao, 18e5) ? [ 3 /*break*/ , 2 ] : (this.ao = Date.now(), 
                        [ 4 /*yield*/ , this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (function(t) {
                            var e = Kr(t, Gr.store);
                            return e.rs().next((function(t) {
                                var n = i.Fo(t, 18e5), r = t.filter((function(t) {
                                    return -1 === n.indexOf(t);
                                }));
                                // Delete metadata for clients that are no longer considered active.
                                                            return lr.forEach(r, (function(t) {
                                    return e.delete(t.clientId);
                                })).next((function() {
                                    return r;
                                }));
                            }));
                        })).catch((function() {
                            return [];
                        })) ]);

                      case 1:
                        // Delete potential leftover entries that may continue to mark the
                        // inactive clients as zombied in LocalStorage.
                        // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                        // the client atomically, but we can't. So we opt to delete the IndexedDb
                        // entries first to avoid potentially reviving a zombied client.
                        if (t = o.sent(), this.Eo) for (e = 0, n = t; e < n.length; e++) r = n[e], this.Eo.removeItem(this.Oo(r.clientId));
                        o.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Schedules a recurring timer to update the client metadata and to either
         * extend or acquire the primary lease if the client is eligible.
         */
        t.prototype.Ao = function() {
            var t = this;
            this.co = this.Zr.Tr("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (function() {
                return t.To().then((function() {
                    return t.xo();
                })).then((function() {
                    return t.Ao();
                }));
            }));
        }, 
        /** Checks whether `client` is the local client. */ t.prototype.Do = function(t) {
            return !!t && t.ownerId === this.clientId;
        }, 
        /**
         * Evaluate the state of all active clients and determine whether the local
         * client is or can act as the holder of the primary lease. Returns whether
         * the client is eligible for the lease, but does not actually acquire it.
         * May return 'false' even if there is no active leaseholder and another
         * (foreground) client should become leaseholder instead.
         */
        t.prototype.bo = function(t) {
            var e = this;
            return this.no ? lr.resolve(!0) : Hi(t).get(Or.key).next((function(n) {
                // A client is eligible for the primary lease if:
                // - its network is enabled and the client's tab is in the foreground.
                // - its network is enabled and no other client's tab is in the
                //   foreground.
                // - every clients network is disabled and the client's tab is in the
                //   foreground.
                // - every clients network is disabled and no other client's tab is in
                //   the foreground.
                // - the `forceOwningTab` setting was passed in.
                if (null !== n && e.No(n.leaseTimestampMs, 5e3) && !e.ko(n.ownerId)) {
                    if (e.Do(n) && e.networkEnabled) return !0;
                    if (!e.Do(n)) {
                        if (!n.allowTabSynchronization) 
                        // Fail the `canActAsPrimary` check if the current leaseholder has
                        // not opted into multi-tab synchronization. If this happens at
                        // client startup, we reject the Promise returned by
                        // `enablePersistence()` and the user can continue to use Firestore
                        // with in-memory persistence.
                        // If this fails during a lease refresh, we will instead block the
                        // AsyncQueue from executing further operations. Note that this is
                        // acceptable since mixing & matching different `synchronizeTabs`
                        // settings is not supported.
                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                        // no longer be turned off.
                        throw new q$1(M$1.FAILED_PRECONDITION, Qi);
                        return !1;
                    }
                }
                return !(!e.networkEnabled || !e.inForeground) || Ki(t).rs().next((function(t) {
                    return void 0 === e.Fo(t, 5e3).find((function(t) {
                        if (e.clientId !== t.clientId) {
                            var n = !e.networkEnabled && t.networkEnabled, r = !e.inForeground && t.inForeground, i = e.networkEnabled === t.networkEnabled;
                            if (n || r && i) return !0;
                        }
                        return !1;
                    }));
                }));
            })).next((function(t) {
                return e.isPrimary !== t && N$1("IndexedDbPersistence", "Client " + (t ? "is" : "is not") + " eligible for a primary lease."), 
                t;
            }));
        }, t.prototype.Mo = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t = this;
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                        // has obtained the primary lease.
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        return this.io = !1, this.Lo(), this.co && (this.co.cancel(), this.co = null), this.$o(), 
                        this.Bo(), [ 4 /*yield*/ , this.lo.runTransaction("shutdown", "readwrite", [ Or.store, Gr.store ], (function(e) {
                            var n = new Hr(e, H$1.q);
                            return t.vo(n).next((function() {
                                return t.Co(n);
                            }));
                        })) ];

                      case 1:
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                        // has obtained the primary lease.
                        return e.sent(), this.lo.close(), 
                        // Remove the entry marking the client as zombied from LocalStorage since
                        // we successfully deleted its metadata from IndexedDb.
                        this.qo(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Returns clients that are not zombied and have an updateTime within the
         * provided threshold.
         */
        t.prototype.Fo = function(t, e) {
            var n = this;
            return t.filter((function(t) {
                return n.No(t.updateTimeMs, e) && !n.ko(t.clientId);
            }));
        }, 
        /**
         * Returns the IDs of the clients that are currently active. If multi-tab
         * is not supported, returns an array that only contains the local client's
         * ID.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.Uo = function() {
            var t = this;
            return this.runTransaction("getActiveClients", "readonly", (function(e) {
                return Ki(e).rs().next((function(e) {
                    return t.Fo(e, 18e5).map((function(t) {
                        return t.clientId;
                    }));
                }));
            }));
        }, Object.defineProperty(t.prototype, "Er", {
            get: function() {
                return this.io;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.Qo = function(t) {
            return Ii.mi(t, this.Qt, this.Ei, this.Ti);
        }, t.prototype.Sr = function() {
            return this._o;
        }, t.prototype.Fr = function() {
            return this.fo;
        }, t.prototype.Ko = function() {
            return this.Ei;
        }, t.prototype.Wo = function() {
            return this.wo;
        }, t.prototype.runTransaction = function(t, e, n) {
            var r = this;
            N$1("IndexedDbPersistence", "Starting transaction:", t);
            var i, o = "readonly" === e ? "readonly" : "readwrite";
            // Do all transactions as readwrite against all object stores, since we
            // are the only reader/writer.
            return this.lo.runTransaction(t, o, Yr, (function(o) {
                return i = new Hr(o, r.so ? r.so.next() : H$1.q), "readwrite-primary" === e ? r.Vo(i).next((function(t) {
                    return !!t || r.bo(i);
                })).next((function(e) {
                    if (!e) throw A$1("Failed to obtain primary lease for action '" + t + "'."), r.isPrimary = !1, 
                    r.Zr.po((function() {
                        return r.uo(!1);
                    })), new q$1(M$1.FAILED_PRECONDITION, Tr);
                    return n(i);
                })).next((function(t) {
                    return r.So(i).next((function() {
                        return t;
                    }));
                })) : r.jo(i).next((function() {
                    return n(i);
                }));
            })).then((function(t) {
                return i.Vs(), t;
            }));
        }, 
        /**
         * Verifies that the current tab is the primary leaseholder or alternatively
         * that the leaseholder has opted into multi-tab synchronization.
         */
        // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
        // be turned off.
        t.prototype.jo = function(t) {
            var e = this;
            return Hi(t).get(Or.key).next((function(t) {
                if (null !== t && e.No(t.leaseTimestampMs, 5e3) && !e.ko(t.ownerId) && !e.Do(t) && !(e.no || e.allowTabSynchronization && t.allowTabSynchronization)) throw new q$1(M$1.FAILED_PRECONDITION, Qi);
            }));
        }, 
        /**
         * Obtains or extends the new primary lease for the local client. This
         * method does not verify that the client is eligible for this lease.
         */
        t.prototype.So = function(t) {
            var e = new Or(this.clientId, this.allowTabSynchronization, Date.now());
            return Hi(t).put(Or.key, e);
        }, t.Kn = function() {
            return dr.Kn();
        }, 
        /** Checks the primary lease and removes it if we are the current primary. */ t.prototype.vo = function(t) {
            var e = this, n = Hi(t);
            return n.get(Or.key).next((function(t) {
                return e.Do(t) ? (N$1("IndexedDbPersistence", "Releasing primary lease."), n.delete(Or.key)) : lr.resolve();
            }));
        }, 
        /** Verifies that `updateTimeMs` is within `maxAgeMs`. */ t.prototype.No = function(t, e) {
            var n = Date.now();
            return !(t < n - e || t > n && (A$1("Detected an update time that is in the future: " + t + " > " + n), 
            1));
        }, t.prototype.Io = function() {
            var t = this;
            null !== this.document && "function" == typeof this.document.addEventListener && (this.oo = function() {
                t.Zr.Ps((function() {
                    return t.inForeground = "visible" === t.document.visibilityState, t.To();
                }));
            }, this.document.addEventListener("visibilitychange", this.oo), this.inForeground = "visible" === this.document.visibilityState);
        }, t.prototype.$o = function() {
            this.oo && (this.document.removeEventListener("visibilitychange", this.oo), this.oo = null);
        }, 
        /**
         * Attaches a window.unload handler that will synchronously write our
         * clientId to a "zombie client id" location in LocalStorage. This can be used
         * by tabs trying to acquire the primary lease to determine that the lease
         * is no longer valid even if the timestamp is recent. This is particularly
         * important for the refresh case (so the tab correctly re-acquires the
         * primary lease). LocalStorage is used for this rather than IndexedDb because
         * it is a synchronous API and so can be used reliably from  an unload
         * handler.
         */
        t.prototype.mo = function() {
            var t, e = this;
            "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.ro = function() {
                // Note: In theory, this should be scheduled on the AsyncQueue since it
                // accesses internal state. We execute this code directly during shutdown
                // to make sure it gets a chance to run.
                e.Lo(), e.Zr.Ps((function() {
                    return e.Mo();
                }));
            }, this.window.addEventListener("unload", this.ro));
        }, t.prototype.Bo = function() {
            this.ro && (this.window.removeEventListener("unload", this.ro), this.ro = null);
        }, 
        /**
         * Returns whether a client is "zombied" based on its LocalStorage entry.
         * Clients become zombied when their tab closes without running all of the
         * cleanup logic in `shutdown()`.
         */
        t.prototype.ko = function(t) {
            var e;
            try {
                var n = null !== (null === (e = this.Eo) || void 0 === e ? void 0 : e.getItem(this.Oo(t)));
                return N$1("IndexedDbPersistence", "Client '" + t + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), 
                n;
            } catch (t) {
                // Gracefully handle if LocalStorage isn't working.
                return A$1("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
            }
        }, 
        /**
         * Record client as zombied (a client that had its tab closed). Zombied
         * clients are ignored during primary tab selection.
         */
        t.prototype.Lo = function() {
            if (this.Eo) try {
                this.Eo.setItem(this.Oo(this.clientId), String(Date.now()));
            } catch (t) {
                // Gracefully handle if LocalStorage isn't available / working.
                A$1("Failed to set zombie client id.", t);
            }
        }, 
        /** Removes the zombied client entry if it exists. */ t.prototype.qo = function() {
            if (this.Eo) try {
                this.Eo.removeItem(this.Oo(this.clientId));
            } catch (t) {
                // Ignore
            }
        }, t.prototype.Oo = function(t) {
            return "firestore_zombie_" + this.persistenceKey + "_" + t;
        }, t;
    }();

    /**
     * Oldest acceptable age in milliseconds for client metadata before the client
     * is considered inactive and its associated data is garbage collected.
     */
    /**
     * An IndexedDB-backed instance of Persistence. Data is stored persistently
     * across sessions.
     *
     * On Web only, the Firestore SDKs support shared access to its persistence
     * layer. This allows multiple browser tabs to read and write to IndexedDb and
     * to synchronize state even without network connectivity. Shared access is
     * currently optional and not enabled unless all clients invoke
     * `enablePersistence()` with `{synchronizeTabs:true}`.
     *
     * In multi-tab mode, if multiple clients are active at the same time, the SDK
     * will designate one client as the “primary client”. An effort is made to pick
     * a visible, network-connected and active client, and this client is
     * responsible for letting other clients know about its presence. The primary
     * client writes a unique client-generated identifier (the client ID) to
     * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
     * update this entry, another client can acquire the lease and take over as
     * primary.
     *
     * Some persistence operations in the SDK are designated as primary-client only
     * operations. This includes the acknowledgment of mutations and all updates of
     * remote documents. The effects of these operations are written to persistence
     * and then broadcast to other tabs via LocalStorage (see
     * `WebStorageSharedClientState`), which then refresh their state from
     * persistence.
     *
     * Similarly, the primary client listens to notifications sent by secondary
     * clients to discover persistence changes written by secondary clients, such as
     * the addition of new mutations and query targets.
     *
     * If multi-tab is not enabled and another tab already obtained the primary
     * lease, IndexedDbPersistence enters a failed state and all subsequent
     * operations will automatically fail.
     *
     * Additionally, there is an optimization so that when a tab is closed, the
     * primary lease is released immediately (this is especially important to make
     * sure that a refreshed tab is able to immediately re-acquire the primary
     * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
     * since it is an asynchronous API. So in addition to attempting to give up the
     * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
     * LocalStorage which acts as an indicator that another tab should go ahead and
     * take the primary lease immediately regardless of the current lease timestamp.
     *
     * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
     * longer optional.
     */
    /**
     * Helper to get a typed SimpleDbStore for the primary client object store.
     */
    function Hi(t) {
        return Kr(t, Or.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the client metadata object store.
     */ function Ki(t) {
        return Kr(t, Gr.store);
    }

    /**
     * Generates a string used as a prefix when storing data in IndexedDB and
     * LocalStorage.
     */ function Xi(t, e) {
        // Use two different prefix formats:
        //   * firestore / persistenceKey / projectID . databaseID / ...
        //   * firestore / persistenceKey / projectID / ...
        // projectIDs are DNS-compatible names and cannot contain dots
        // so there's no danger of collisions.
        var n = t.projectId;
        return t.o || (n += "." + t.database), "firestore/" + e + "/" + n + "/"
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */;
    }

    var Wi = function(t, e) {
        this.progress = t, this.Go = e;
    }, Zi = /** @class */ function() {
        function t(t, e, n) {
            this.fo = t, this.zo = e, this.Ei = n
            /**
         * Get the local view of the document identified by `key`.
         *
         * @returns Local view of the document or null if we don't have any cached
         * state for it.
         */;
        }
        return t.prototype.Ho = function(t, e) {
            var n = this;
            return this.zo.bi(t, e).next((function(r) {
                return n.Jo(t, e, r);
            }));
        }, 
        /** Internal version of `getDocument` that allows reusing batches. */ t.prototype.Jo = function(t, e, n) {
            return this.fo._i(t, e).next((function(t) {
                for (var r = 0, i = n; r < i.length; r++) {
                    t = i[r].Cs(e, t);
                }
                return t;
            }));
        }, 
        // Returns the view of the given `docs` as they would appear after applying
        // all mutations in the given `batches`.
        t.prototype.Yo = function(t, e, n) {
            var r = fn();
            return e.forEach((function(t, e) {
                for (var i = 0, o = n; i < o.length; i++) {
                    e = o[i].Cs(t, e);
                }
                r = r.zt(t, e);
            })), r;
        }, 
        /**
         * Gets the local view of the documents identified by `keys`.
         *
         * If we don't have cached state for a document in `keys`, a NoDocument will
         * be stored for that key in the resulting set.
         */
        t.prototype.Xo = function(t, e) {
            var n = this;
            return this.fo.getEntries(t, e).next((function(e) {
                return n.Zo(t, e);
            }));
        }, 
        /**
         * Similar to `getDocuments`, but creates the local view from the given
         * `baseDocs` without retrieving documents from the local store.
         */
        t.prototype.Zo = function(t, e) {
            var n = this;
            return this.zo.vi(t, e).next((function(r) {
                var i = n.Yo(t, e, r), o = hn();
                return i.forEach((function(t, e) {
                    // TODO(http://b/32275378): Don't conflate missing / deleted.
                    e || (e = new Lt(t, X$1.min())), o = o.zt(t, e);
                })), o;
            }));
        }, 
        /**
         * Performs a query against the local view of all documents.
         *
         * @param transaction - The persistence transaction.
         * @param query - The query to match documents against.
         * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
         *     documents that have been read since this snapshot version (exclusive).
         */
        t.prototype.Kr = function(t, e, n) {
            /**
     * Returns whether the query matches a single document by path (rather than a
     * collection).
     */
            return function(t) {
                return tt.wt(t.path) && null === t.collectionGroup && 0 === t.filters.length;
            }(e) ? this.tc(t, e.path) : ae(e) ? this.ec(t, e, n) : this.nc(t, e, n);
        }, t.prototype.tc = function(t, e) {
            // Just do a simple document lookup.
            return this.Ho(t, new tt(e)).next((function(t) {
                var e = pn();
                return t instanceof Pt && (e = e.zt(t.key, t)), e;
            }));
        }, t.prototype.ec = function(t, e, n) {
            var r = this, i = e.collectionGroup, o = pn();
            return this.Ei.Us(t, i).next((function(u) {
                return lr.forEach(u, (function(u) {
                    var s = function(t, e) {
                        return new ee(e, 
                        /*collectionGroup=*/ null, t.xt.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                    }(e, u.child(i));
                    return r.nc(t, s, n).next((function(t) {
                        t.forEach((function(t, e) {
                            o = o.zt(t, e);
                        }));
                    }));
                })).next((function() {
                    return o;
                }));
            }));
        }, t.prototype.nc = function(t, e, n) {
            var r, i, o = this;
            // Query the remote documents and overlay mutations.
                    return this.fo.Kr(t, e, n).next((function(n) {
                return r = n, o.zo.Di(t, e);
            })).next((function(e) {
                return i = e, o.sc(t, i, r).next((function(t) {
                    r = t;
                    for (var e = 0, n = i; e < n.length; e++) for (var o = n[e], u = 0, s = o.mutations; u < s.length; u++) {
                        var a = s[u], c = a.key, h = je(a, r.get(c), o.vs);
                        r = h instanceof Pt ? r.zt(c, h) : r.remove(c);
                    }
                }));
            })).next((function() {
                // Finally, filter out any documents that don't actually match
                // the query.
                return r.forEach((function(t, n) {
                    ve(e, n) || (r = r.remove(t));
                })), r;
            }));
        }, t.prototype.sc = function(t, e, n) {
            for (var r = mn(), i = 0, o = e; i < o.length; i++) for (var u = 0, s = o[i].mutations; u < s.length; u++) {
                var a = s[u];
                a instanceof Qe && null === n.get(a.key) && (r = r.add(a.key));
            }
            var c = n;
            return this.fo.getEntries(t, r).next((function(t) {
                return t.forEach((function(t, e) {
                    null !== e && e instanceof Pt && (c = c.zt(t, e));
                })), c;
            }));
        }, t;
    }(), Ji = /** @class */ function() {
        function t(t, e, n, r) {
            this.targetId = t, this.fromCache = e, this.ic = n, this.rc = r;
        }
        return t.oc = function(e, n) {
            for (var r = mn(), i = mn(), o = 0, u = n.docChanges; o < u.length; o++) {
                var s = u[o];
                switch (s.type) {
                  case 0 /* Added */ :
                    r = r.add(s.doc.key);
                    break;

                  case 1 /* Removed */ :
                    i = i.add(s.doc.key);
                    // do nothing
                            }
            }
            return new t(e, n.fromCache, r, i);
        }, t;
    }(), $i = /** @class */ function() {
        function t() {}
        /** Sets the document view to query against. */    return t.prototype.cc = function(t) {
            this.ac = t;
        }, 
        /** Returns all local documents matching the specified query. */ t.prototype.Kr = function(t, n, r, i) {
            var o = this;
            // Queries that match all documents don't benefit from using
            // key-based lookups. It is more efficient to scan all documents in a
            // collection, rather than to perform individual lookups.
                    return function(t) {
                return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.xt.length || 1 === t.xt.length && t.xt[0].field.ut());
            }(n) || r.isEqual(X$1.min()) ? this.uc(t, n) : this.ac.Xo(t, i).next((function(u) {
                var s = o.hc(n, u);
                return (ie(n) || oe(n)) && o.lc(n.limitType, s, i, r) ? o.uc(t, n) : (T$1() <= LogLevel.DEBUG && N$1("QueryEngine", "Re-using previous result from %s to execute query: %s", r.toString(), de(n)), 
                o.ac.Kr(t, n, r).next((function(t) {
                    // We merge `previousResults` into `updateResults`, since
                    // `updateResults` is already a DocumentMap. If a document is
                    // contained in both lists, then its contents are the same.
                    return s.forEach((function(e) {
                        t = t.zt(e.key, e);
                    })), t;
                })));
            }));
            // Queries that have never seen a snapshot without limbo free documents
            // should also be run as a full collection scan.
            }, 
        /** Applies the query filter and sorting to the provided documents.  */ t.prototype.hc = function(t, e) {
            // Sort the documents and re-apply the query filter since previously
            // matching documents do not necessarily still match the query.
            var n = new sn(ye(t));
            return e.forEach((function(e, r) {
                r instanceof Pt && ve(t, r) && (n = n.add(r));
            })), n;
        }, 
        /**
         * Determines if a limit query needs to be refilled from cache, making it
         * ineligible for index-free execution.
         *
         * @param sortedPreviousResults - The documents that matched the query when it
         * was last synchronized, sorted by the query's comparator.
         * @param remoteKeys - The document keys that matched the query at the last
         * snapshot.
         * @param limboFreeSnapshotVersion - The version of the snapshot when the
         * query was last synchronized.
         */
        t.prototype.lc = function(t, e, n, r) {
            // The query needs to be refilled if a previously matching document no
            // longer matches.
            if (n.size !== e.size) return !0;
            // Limit queries are not eligible for index-free query execution if there is
            // a potential that an older document from cache now sorts before a document
            // that was previously part of the limit. This, however, can only happen if
            // the document at the edge of the limit goes out of limit.
            // If a document that is not the limit boundary sorts differently,
            // the boundary of the limit itself did not change and documents from cache
            // will continue to be "rejected" by this boundary. Therefore, we can ignore
            // any modifications that don't affect the last document.
                    var i = "F" /* First */ === t ? e.last() : e.first();
            return !!i && (i.hasPendingWrites || i.version._(r) > 0);
        }, t.prototype.uc = function(t, n) {
            return T$1() <= LogLevel.DEBUG && N$1("QueryEngine", "Using full collection scan to execute query:", de(n)), 
            this.ac.Kr(t, n, X$1.min());
        }, t;
    }(), to = /** @class */ function() {
        function t(
        /** Manages our in-memory or durable persistence. */
        t, e, n, r) {
            this.persistence = t, this._c = e, this.Qt = r, 
            /**
                 * Maps a targetID to data about its target.
                 *
                 * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
                 * of `applyRemoteEvent()` idempotent.
                 */
            this.fc = new rn(V$1), 
            /** Maps a target to its targetID. */
            // TODO(wuandy): Evaluate if TargetId can be part of Target.
            this.dc = new gi((function(t) {
                return Ut(t);
            }), Mt), 
            /**
                 * The read time of the last entry processed by `getNewDocumentChanges()`.
                 *
                 * PORTING NOTE: This is only used for multi-tab synchronization.
                 */
            this.wc = X$1.min(), this.zo = t.Qo(n), this.Ec = t.Fr(), this._o = t.Sr(), this.Tc = new Zi(this.Ec, this.zo, this.persistence.Ko()), 
            this.wo = t.Wo(), this._c.cc(this.Tc);
        }
        return t.prototype.Ir = function(t) {
            var e = this;
            return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (function(n) {
                return t.Vr(n, e.fc);
            }));
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A readonly view of the local state of all documents we're tracking (i.e. we
     * have a cached version in remoteDocumentCache or local mutations for the
     * document). The view is computed by applying the mutations in the
     * MutationQueue to the RemoteDocumentCache.
     */ function eo(
    /** Manages our in-memory or durable persistence. */
    t, e, n, r) {
        return new to(t, e, n, r);
    }

    /**
     * Tells the LocalStore that the currently authenticated user has changed.
     *
     * In response the local store switches the mutation queue to the new user and
     * returns any resulting document changes.
     */
    // PORTING NOTE: Android and iOS only return the documents affected by the
    // change.
    function no(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i, o;
            return __generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return n = O$1(t), r = n.zo, i = n.Tc, [ 4 /*yield*/ , n.persistence.runTransaction("Handle user change", "readonly", (function(t) {
                        // Swap out the mutation queue, grabbing the pending mutation batches
                        // before and after.
                        var o;
                        return n.zo.pi(t).next((function(u) {
                            return o = u, r = n.persistence.Qo(e), 
                            // Recreate our LocalDocumentsView using the new
                            // MutationQueue.
                            i = new Zi(n.Ec, r, n.persistence.Ko()), r.pi(t);
                        })).next((function(e) {
                            for (var n = [], r = [], u = mn(), s = 0, a = o
                            // Union the old/new changed keys.
                            ; s < a.length; s++) {
                                var c = a[s];
                                n.push(c.batchId);
                                for (var h = 0, f = c.mutations; h < f.length; h++) {
                                    var l = f[h];
                                    u = u.add(l.key);
                                }
                            }
                            for (var p = 0, d = e; p < d.length; p++) {
                                var v = d[p];
                                r.push(v.batchId);
                                for (var y = 0, m = v.mutations; y < m.length; y++) {
                                    var g = m[y];
                                    u = u.add(g.key);
                                }
                            }
                            // Return the set of all (potentially) changed documents and the list
                            // of mutation batch IDs that were affected by change.
                                                    return i.Xo(t, u).next((function(t) {
                                return {
                                    Ic: t,
                                    mc: n,
                                    Ac: r
                                };
                            }));
                        }));
                    })) ];

                  case 1:
                    return o = u.sent(), [ 2 /*return*/ , (n.zo = r, n.Tc = i, n._c.cc(n.Tc), o) ];
                }
            }));
        }));
    }

    /* Accepts locally generated Mutations and commit them to storage. */
    /**
     * Acknowledges the given batch.
     *
     * On the happy path when a batch is acknowledged, the local store will
     *
     *  + remove the batch from the mutation queue;
     *  + apply the changes to the remote document cache;
     *  + recalculate the latency compensated view implied by those changes (there
     *    may be mutations in the queue that affect the documents but haven't been
     *    acknowledged yet); and
     *  + give the changed documents back the sync engine
     *
     * @returns The resulting (modified) documents.
     */ function ro(t, e) {
        var n = O$1(t);
        return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (function(t) {
            var r = e.batch.keys(), i = n.Ec.Nr({
                Wr: !0
            });
            return function(t, e, n, r) {
                var i = n.batch, o = i.keys(), u = lr.resolve();
                return o.forEach((function(t) {
                    u = u.next((function() {
                        return r._i(e, t);
                    })).next((function(e) {
                        var o = e, u = n.Fs.get(t);
                        k$1(null !== u), (!o || o.version._(u) < 0) && ((o = i.Ss(t, o, n)) && 
                        // We use the commitVersion as the readTime rather than the
                        // document's updateTime since the updateTime is not advanced
                        // for updates that do not modify the underlying document.
                        r.ai(o, n.Ns));
                    }));
                })), u.next((function() {
                    return t.zo.Ci(e, i);
                }));
            }(n, t, e, i).next((function() {
                return i.apply(t);
            })).next((function() {
                return n.zo.Fi(t);
            })).next((function() {
                return n.Tc.Xo(t, r);
            }));
        }));
    }

    /**
     * Removes mutations from the MutationQueue for the specified batch;
     * LocalDocuments will be recalculated.
     *
     * @returns The resulting modified documents.
     */
    /**
     * Returns the last consistent snapshot processed (used by the RemoteStore to
     * determine whether to buffer incoming snapshots from the backend).
     */ function io(t) {
        var e = O$1(t);
        return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (function(t) {
            return e._o.Qi(t);
        }));
    }

    /**
     * Updates the "ground-state" (remote) documents. We assume that the remote
     * event reflects any write batches that have been acknowledged or rejected
     * (i.e. we do not re-apply local mutations to updates from this event).
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */ function oo(t, e) {
        var n = O$1(t), r = e.kt, i = n.fc;
        return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (function(t) {
            var o = n.Ec.Nr({
                Wr: !0
            });
            // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                    i = n.fc;
            var u = [];
            e.Fe.forEach((function(e, o) {
                var s = i.get(o);
                if (s) {
                    // Only update the remote keys if the target is still active. This
                    // ensures that we can persist the updated target data along with
                    // the updated assignment.
                    u.push(n._o.sr(t, e.Qe, o).next((function() {
                        return n._o.er(t, e.qe, o);
                    })));
                    var a = e.resumeToken;
                    // Update the resume token if the change includes one.
                                    if (a.l() > 0) {
                        var c = s.Lt(a, r).Mt(t.bs);
                        i = i.zt(o, c), 
                        // Update the target data if there are target changes (or if
                        // sufficient time has passed since the last update).
                        /**
         * Returns true if the newTargetData should be persisted during an update of
         * an active target. TargetData should always be persisted when a target is
         * being released and should not call this function.
         *
         * While the target is active, TargetData updates can be omitted when nothing
         * about the target has changed except metadata like the resume token or
         * snapshot version. Occasionally it's worth the extra write to prevent these
         * values from getting too stale after a crash, but this doesn't have to be
         * too frequent.
         */
                        function(t, e, n) {
                            // Always persist target data if we don't already have a resume token.
                            return k$1(e.resumeToken.l() > 0), 0 === t.resumeToken.l() || (
                            // Don't allow resume token changes to be buffered indefinitely. This
                            // allows us to be reasonably up-to-date after a crash and avoids needing
                            // to loop over all active queries on shutdown. Especially in the browser
                            // we may not get time to do anything interesting while the current tab is
                            // closing.
                            e.kt.W() - t.kt.W() >= 3e8 || n.qe.size + n.Ue.size + n.Qe.size > 0);
                        }(s, c, e) && u.push(n._o.Hi(t, c));
                    }
                }
            }));
            var s = hn();
            // HACK: The only reason we allow a null snapshot version is so that we
            // can synthesize remote events when we get permission denied errors while
            // trying to resolve the state of a locally cached document that is in
            // limbo.
                    if (e.ke.forEach((function(r, i) {
                e.Me.has(r) && u.push(n.persistence.Ti.Or(t, r));
            })), 
            // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
            // documents in advance in a single call.
            u.push(uo(t, o, e.ke, r, void 0).next((function(t) {
                s = t;
            }))), !r.isEqual(X$1.min())) {
                var a = n._o.Qi(t).next((function(e) {
                    return n._o.Wi(t, t.bs, r);
                }));
                u.push(a);
            }
            return lr.Ln(u).next((function() {
                return o.apply(t);
            })).next((function() {
                return n.Tc.Zo(t, s);
            }));
        })).then((function(t) {
            return n.fc = i, t;
        }));
    }

    /**
     * Populates document change buffer with documents from backend or a bundle.
     * Returns the document changes resulting from applying those documents.
     *
     * @param txn - Transaction to use to read existing documents from storage.
     * @param documentBuffer - Document buffer to collect the resulted changes to be
     *        applied to storage.
     * @param documents - Documents to be applied.
     * @param globalVersion - A `SnapshotVersion` representing the read time if all
     *        documents have the same read time.
     * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
     *        have their own read time.
     *
     * Note: this function will use `documentVersions` if it is defined;
     * when it is not defined, resorts to `globalVersion`.
     */ function uo(t, e, n, r, 
    // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
    // this parameter.
    i) {
        var o = mn();
        return n.forEach((function(t) {
            return o = o.add(t);
        })), e.getEntries(t, o).next((function(t) {
            var o = hn();
            return n.forEach((function(n, u) {
                var s = t.get(n), a = (null == i ? void 0 : i.get(n)) || r;
                // Note: The order of the steps below is important, since we want
                // to ensure that rejected limbo resolutions (which fabricate
                // NoDocuments with SnapshotVersion.min()) never add documents to
                // cache.
                            u instanceof Lt && u.version.isEqual(X$1.min()) ? (
                // NoDocuments with SnapshotVersion.min() are used in manufactured
                // events. We remove these documents from cache since we lost
                // access.
                e.li(n, a), o = o.zt(n, u)) : null == s || u.version._(s.version) > 0 || 0 === u.version._(s.version) && s.hasPendingWrites ? (e.ai(u, a), 
                o = o.zt(n, u)) : N$1("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", s.version, " Watch version:", u.version);
            })), o;
        }))
        /**
     * Gets the mutation batch after the passed in batchId in the mutation queue
     * or null if empty.
     * @param afterBatchId - If provided, the batch to search after.
     * @returns The next mutation or null if there wasn't one.
     */;
    }

    function so(t, e) {
        var n = O$1(t);
        return n.persistence.runTransaction("Get next mutation batch", "readonly", (function(t) {
            return void 0 === e && (e = -1), n.zo.gi(t, e);
        }));
    }

    /**
     * Reads the current value of a Document with a given key or null if not
     * found - used for testing.
     */
    /**
     * Assigns the given target an internal ID so that its results can be pinned so
     * they don't get GC'd. A target must be allocated in the local store before
     * the store can be used to manage its view.
     *
     * Allocating an already allocated `Target` will return the existing `TargetData`
     * for that `Target`.
     */ function ao(t, e) {
        var n = O$1(t);
        return n.persistence.runTransaction("Allocate target", "readwrite", (function(t) {
            var r;
            return n._o.tr(t, e).next((function(i) {
                return i ? (
                // This target has been listened to previously, so reuse the
                // previous targetID.
                // TODO(mcg): freshen last accessed date?
                r = i, lr.resolve(r)) : n._o.Bi(t).next((function(i) {
                    return r = new ge(e, i, 0 /* Listen */ , t.bs), n._o.ji(t, r).next((function() {
                        return r;
                    }));
                }));
            }));
        })).then((function(t) {
            // If Multi-Tab is enabled, the existing target data may be newer than
            // the in-memory data
            var r = n.fc.get(t.targetId);
            return (null === r || t.kt._(r.kt) > 0) && (n.fc = n.fc.zt(t.targetId, t), n.dc.set(e, t.targetId)), 
            t;
        }));
    }

    /**
     * Returns the TargetData as seen by the LocalStore, including updates that may
     * have not yet been persisted to the TargetCache.
     */
    // Visible for testing.
    /**
     * Unpins all the documents associated with the given target. If
     * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
     * directly removes the associated target data from the target cache.
     *
     * Releasing a non-existing `Target` is a no-op.
     */
    // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
    function co(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i, o, u;
            return __generator(this, (function(s) {
                switch (s.label) {
                  case 0:
                    r = O$1(t), i = r.fc.get(e), o = n ? "readwrite" : "readwrite-primary", s.label = 1;

                  case 1:
                    return s.trys.push([ 1, 4, , 5 ]), n ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , r.persistence.runTransaction("Release target", o, (function(t) {
                        return r.persistence.Ti.removeTarget(t, i);
                    })) ];

                  case 2:
                    s.sent(), s.label = 3;

                  case 3:
                    return [ 3 /*break*/ , 5 ];

                  case 4:
                    if (!mr(u = s.sent())) throw u;
                    // All `releaseTarget` does is record the final metadata state for the
                    // target, but we've been recording this periodically during target
                    // activity. If we lose this write this could cause a very slight
                    // difference in the order of target deletion during GC, but we
                    // don't define exact LRU semantics so this is acceptable.
                                    return N$1("LocalStore", "Failed to update sequence numbers for target " + e + ": " + u), 
                    [ 3 /*break*/ , 5 ];

                  case 5:
                    return r.fc = r.fc.remove(e), r.dc.delete(i.target), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Runs the specified query against the local store and returns the results,
     * potentially taking advantage of query data from previous executions (such
     * as the set of remote keys).
     *
     * @param usePreviousResults - Whether results from previous executions can
     * be used to optimize this query execution.
     */ function ho(t, e, n) {
        var r = O$1(t), i = X$1.min(), o = mn();
        return r.persistence.runTransaction("Execute query", "readonly", (function(t) {
            return function(t, e, n) {
                var r = O$1(t), i = r.dc.get(n);
                return void 0 !== i ? lr.resolve(r.fc.get(i)) : r._o.tr(e, n);
            }(r, t, he(e)).next((function(e) {
                if (e) return i = e.lastLimboFreeSnapshotVersion, r._o.rr(t, e.targetId).next((function(t) {
                    o = t;
                }));
            })).next((function() {
                return r._c.Kr(t, e, n ? i : X$1.min(), n ? o : mn());
            })).next((function(t) {
                return {
                    documents: t,
                    Rc: o
                };
            }));
        }));
    }

    // PORTING NOTE: Multi-Tab only.
    function fo(t, e) {
        var n = O$1(t), r = O$1(n._o), i = n.fc.get(e);
        return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (function(t) {
            return r.Sn(t, e).next((function(t) {
                return t ? t.target : null;
            }));
        }));
    }

    /**
     * Returns the set of documents that have been updated since the last call.
     * If this is the first call, returns the set of changes since client
     * initialization. Further invocations will return document that have changed
     * since the prior call.
     */
    // PORTING NOTE: Multi-Tab only.
    function lo(t) {
        var e = O$1(t);
        return e.persistence.runTransaction("Get new document changes", "readonly", (function(t) {
            return function(t, e, n) {
                var r = O$1(t), i = hn(), o = ti(n), u = Fi(e), s = IDBKeyRange.lowerBound(o, !0);
                return u.hs({
                    index: Ur.readTimeIndex,
                    range: s
                }, (function(t, e) {
                    // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                    // the documents directly since we want to keep sentinel deletes.
                    var n = Jr(r.Qt, e);
                    i = i.zt(n.key, n), o = e.readTime;
                })).next((function() {
                    return {
                        Go: i,
                        readTime: ei(o)
                    };
                }));
            }(e.Ec, t, e.wc);
        })).then((function(t) {
            var n = t.Go, r = t.readTime;
            return e.wc = r, n;
        }));
    }

    /**
     * Reads the newest document change from persistence and moves the internal
     * synchronization marker forward so that calls to `getNewDocumentChanges()`
     * only return changes that happened after client initialization.
     */
    // PORTING NOTE: Multi-Tab only.
    function po(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e;
            return __generator(this, (function(n) {
                return [ 2 /*return*/ , (e = O$1(t)).persistence.runTransaction("Synchronize last document change read time", "readonly", (function(t) {
                    return function(t) {
                        var e = Fi(t), n = X$1.min();
                        // If there are no existing entries, we return SnapshotVersion.min().
                                            return e.hs({
                            index: Ur.readTimeIndex,
                            reverse: !0
                        }, (function(t, e, r) {
                            e.readTime && (n = ei(e.readTime)), r.done();
                        })).next((function() {
                            return n;
                        }));
                    }(t);
                })).then((function(t) {
                    e.wc = t;
                })) ];
            }));
        }));
    }

    /**
     * Creates a new target using the given bundle name, which will be used to
     * hold the keys of all documents from the bundle in query-document mappings.
     * This ensures that the loaded documents do not get garbage collected
     * right away.
     */
    /**
     * Applies the documents from a bundle to the "ground-state" (remote)
     * documents.
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */ function vo(t, e, n, r) {
        return __awaiter(this, void 0, void 0, (function() {
            var i, o, u, s, a, c, h, f, l, p;
            return __generator(this, (function(d) {
                switch (d.label) {
                  case 0:
                    for (i = O$1(t), o = mn(), u = hn(), s = vn(), a = 0, c = n; a < c.length; a++) h = c[a], 
                    f = e.Pc(h.metadata.name), h.document && (o = o.add(f)), u = u.zt(f, e.yc(h)), s = s.zt(f, e.gc(h.metadata.readTime));
                    return l = i.Ec.Nr({
                        Wr: !0
                    }), [ 4 /*yield*/ , ao(i, function(t) {
                        // It is OK that the path used for the query is not valid, because this will
                        // not be read and queried.
                        return he(re(Z$1.ot("__bundle__/docs/" + t)));
                    }(r)) ];

                  case 1:
                    // Allocates a target to hold all document keys from the bundle, such that
                    // they will not get garbage collected right away.
                    return p = d.sent(), [ 2 /*return*/ , i.persistence.runTransaction("Apply bundle documents", "readwrite", (function(t) {
                        return uo(t, l, u, X$1.min(), s).next((function(e) {
                            return l.apply(t), e;
                        })).next((function(e) {
                            return i._o.Yi(t, p.targetId).next((function() {
                                return i._o.er(t, o, p.targetId);
                            })).next((function() {
                                return i.Tc.Zo(t, e);
                            }));
                        }));
                    })) ];
                }
            }));
        }));
    }

    /**
     * Returns a promise of a boolean to indicate if the given bundle has already
     * been loaded and the create time is newer than the current loading bundle.
     */
    /**
     * Saves the given `NamedQuery` to local persistence.
     */ function yo(t, e, n) {
        return void 0 === n && (n = mn()), __awaiter(this, void 0, void 0, (function() {
            var r, i;
            return __generator(this, (function(o) {
                switch (o.label) {
                  case 0:
                    return [ 4 /*yield*/ , ao(t, he(si(e.bundledQuery))) ];

                  case 1:
                    return r = o.sent(), [ 2 /*return*/ , (i = O$1(t)).persistence.runTransaction("Save named query", "readwrite", (function(t) {
                        var o = Mn(e.readTime);
                        // Simply save the query itself if it is older than what the SDK already
                        // has.
                                            if (r.kt._(o) >= 0) return i.wo.$s(t, e);
                        // Update existing target data because the query from the bundle is newer.
                                            var u = r.Lt(U$1.T, o);
                        return i.fc = i.fc.zt(u.targetId, u), i._o.Hi(t, u).next((function() {
                            return i._o.Yi(t, r.targetId);
                        })).next((function() {
                            return i._o.er(t, n, r.targetId);
                        })).next((function() {
                            return i.wo.$s(t, e);
                        }));
                    })) ];
                }
            }));
        }));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var mo = /** @class */ function() {
        function t(t) {
            this.Qt = t, this.Vc = new Map, this.bc = new Map;
        }
        return t.prototype.ks = function(t, e) {
            return lr.resolve(this.Vc.get(e));
        }, t.prototype.Ms = function(t, e) {
            /** Decodes a BundleMetadata proto into a BundleMetadata object. */
            var n;
            return this.Vc.set(e.id, {
                id: (n = e).id,
                version: n.version,
                createTime: Mn(n.createTime)
            }), lr.resolve();
        }, t.prototype.Ls = function(t, e) {
            return lr.resolve(this.bc.get(e));
        }, t.prototype.$s = function(t, e) {
            return this.bc.set(e.name, function(t) {
                return {
                    name: t.name,
                    query: si(t.bundledQuery),
                    readTime: Mn(t.readTime)
                };
            }(e)), lr.resolve();
        }, t;
    }(), go = /** @class */ function() {
        function t() {
            // A set of outstanding references to a document sorted by key.
            this.vc = new sn(wo.Sc), 
            // A set of outstanding references to a document sorted by target id.
            this.Dc = new sn(wo.Cc)
            /** Returns true if the reference set contains no references. */;
        }
        return t.prototype.et = function() {
            return this.vc.et();
        }, 
        /** Adds a reference to the given document key for the given ID. */ t.prototype.nr = function(t, e) {
            var n = new wo(t, e);
            this.vc = this.vc.add(n), this.Dc = this.Dc.add(n);
        }, 
        /** Add references to the given document keys for the given ID. */ t.prototype.xc = function(t, e) {
            var n = this;
            t.forEach((function(t) {
                return n.nr(t, e);
            }));
        }, 
        /**
         * Removes a reference to the given document key for the given
         * ID.
         */
        t.prototype.ir = function(t, e) {
            this.Nc(new wo(t, e));
        }, t.prototype.Fc = function(t, e) {
            var n = this;
            t.forEach((function(t) {
                return n.ir(t, e);
            }));
        }, 
        /**
         * Clears all references with a given ID. Calls removeRef() for each key
         * removed.
         */
        t.prototype.Oc = function(t) {
            var e = this, n = new tt(new Z$1([])), r = new wo(n, t), i = new wo(n, t + 1), o = [];
            return this.Dc.me([ r, i ], (function(t) {
                e.Nc(t), o.push(t.key);
            })), o;
        }, t.prototype.kc = function() {
            var t = this;
            this.vc.forEach((function(e) {
                return t.Nc(e);
            }));
        }, t.prototype.Nc = function(t) {
            this.vc = this.vc.delete(t), this.Dc = this.Dc.delete(t);
        }, t.prototype.Mc = function(t) {
            var e = new tt(new Z$1([])), n = new wo(e, t), r = new wo(e, t + 1), i = mn();
            return this.Dc.me([ n, r ], (function(t) {
                i = i.add(t.key);
            })), i;
        }, t.prototype.Oi = function(t) {
            var e = new wo(t, 0), n = this.vc.Re(e);
            return null !== n && t.isEqual(n.key);
        }, t;
    }(), wo = /** @class */ function() {
        function t(t, e) {
            this.key = t, this.Lc = e
            /** Compare by key then by ID */;
        }
        return t.Sc = function(t, e) {
            return tt.H(t.key, e.key) || V$1(t.Lc, e.Lc);
        }, 
        /** Compare by ID then by key */ t.Cc = function(t, e) {
            return V$1(t.Lc, e.Lc) || tt.H(t.key, e.key);
        }, t;
    }(), bo = /** @class */ function() {
        function t(t, e) {
            this.Ei = t, this.Ti = e, 
            /**
                 * The set of all mutations that have been sent but not yet been applied to
                 * the backend.
                 */
            this.zo = [], 
            /** Next value to use when assigning sequential IDs to each mutation batch. */
            this.$c = 1, 
            /** An ordered mapping between documents and the mutations batch IDs. */
            this.Bc = new sn(wo.Sc);
        }
        return t.prototype.Ai = function(t) {
            return lr.resolve(0 === this.zo.length);
        }, t.prototype.Ri = function(t, e, n, r) {
            var i = this.$c;
            this.$c++, this.zo.length > 0 && this.zo[this.zo.length - 1];
            var o = new Xr(i, e, n, r);
            this.zo.push(o);
            // Track references by document key and index collection parents.
            for (var u = 0, s = r; u < s.length; u++) {
                var a = s[u];
                this.Bc = this.Bc.add(new wo(a.key, i)), this.Ei.qs(t, a.key.path.X());
            }
            return lr.resolve(o);
        }, t.prototype.Pi = function(t, e) {
            return lr.resolve(this.qc(e));
        }, t.prototype.gi = function(t, e) {
            var n = e + 1, r = this.Uc(n), i = r < 0 ? 0 : r;
            // The requested batchId may still be out of range so normalize it to the
            // start of the queue.
                    return lr.resolve(this.zo.length > i ? this.zo[i] : null);
        }, t.prototype.Vi = function() {
            return lr.resolve(0 === this.zo.length ? -1 : this.$c - 1);
        }, t.prototype.pi = function(t) {
            return lr.resolve(this.zo.slice());
        }, t.prototype.bi = function(t, e) {
            var n = this, r = new wo(e, 0), i = new wo(e, Number.POSITIVE_INFINITY), o = [];
            return this.Bc.me([ r, i ], (function(t) {
                var e = n.qc(t.Lc);
                o.push(e);
            })), lr.resolve(o);
        }, t.prototype.vi = function(t, e) {
            var n = this, r = new sn(V$1);
            return e.forEach((function(t) {
                var e = new wo(t, 0), i = new wo(t, Number.POSITIVE_INFINITY);
                n.Bc.me([ e, i ], (function(t) {
                    r = r.add(t.Lc);
                }));
            })), lr.resolve(this.Qc(r));
        }, t.prototype.Di = function(t, e) {
            // Use the query path as a prefix for testing if a document matches the
            // query.
            var n = e.path, r = n.length + 1, i = n;
            // Construct a document reference for actually scanning the index. Unlike
            // the prefix the document key in this reference must have an even number of
            // segments. The empty segment can be used a suffix of the query path
            // because it precedes all other segments in an ordered traversal.
                    tt.wt(i) || (i = i.child(""));
            var o = new wo(new tt(i), 0), u = new sn(V$1);
            // Find unique batchIDs referenced by all documents potentially matching the
            // query.
                    return this.Bc.Ae((function(t) {
                var e = t.key.path;
                return !!n.nt(e) && (
                // Rows with document keys more than one segment longer than the query
                // path can't be matches. For example, a query on 'rooms' can't match
                // the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                e.length === r && (u = u.add(t.Lc)), !0);
            }), o), lr.resolve(this.Qc(u));
        }, t.prototype.Qc = function(t) {
            var e = this, n = [];
            // Construct an array of matching batches, sorted by batchID to ensure that
            // multiple mutations affecting the same document key are applied in order.
                    return t.forEach((function(t) {
                var r = e.qc(t);
                null !== r && n.push(r);
            })), n;
        }, t.prototype.Ci = function(t, e) {
            var n = this;
            k$1(0 === this.Kc(e.batchId, "removed")), this.zo.shift();
            var r = this.Bc;
            return lr.forEach(e.mutations, (function(i) {
                var o = new wo(i.key, e.batchId);
                return r = r.delete(o), n.Ti.Ni(t, i.key);
            })).next((function() {
                n.Bc = r;
            }));
        }, t.prototype.xi = function(t) {
            // No-op since the memory mutation queue does not maintain a separate cache.
        }, t.prototype.Oi = function(t, e) {
            var n = new wo(e, 0), r = this.Bc.Re(n);
            return lr.resolve(e.isEqual(r && r.key));
        }, t.prototype.Fi = function(t) {
            return this.zo.length, lr.resolve();
        }, 
        /**
         * Finds the index of the given batchId in the mutation queue and asserts that
         * the resulting index is within the bounds of the queue.
         *
         * @param batchId - The batchId to search for
         * @param action - A description of what the caller is doing, phrased in passive
         * form (e.g. "acknowledged" in a routine that acknowledges batches).
         */
        t.prototype.Kc = function(t, e) {
            return this.Uc(t);
        }, 
        /**
         * Finds the index of the given batchId in the mutation queue. This operation
         * is O(1).
         *
         * @returns The computed index of the batch with the given batchId, based on
         * the state of the queue. Note this index can be negative if the requested
         * batchId has already been remvoed from the queue or past the end of the
         * queue if the batchId is larger than the last added batch.
         */
        t.prototype.Uc = function(t) {
            return 0 === this.zo.length ? 0 : t - this.zo[0].batchId;
            // Examine the front of the queue to figure out the difference between the
            // batchId and indexes in the array. Note that since the queue is ordered
            // by batchId, if the first batch has a larger batchId then the requested
            // batchId doesn't exist in the queue.
            }, 
        /**
         * A version of lookupMutationBatch that doesn't return a promise, this makes
         * other functions that uses this code easier to read and more efficent.
         */
        t.prototype.qc = function(t) {
            var e = this.Uc(t);
            return e < 0 || e >= this.zo.length ? null : this.zo[e];
        }, t;
    }(), _o = /** @class */ function() {
        /**
         * @param sizer - Used to assess the size of a document. For eager GC, this is
         * expected to just return 0 to avoid unnecessarily doing the work of
         * calculating the size.
         */
        function t(t, e) {
            this.Ei = t, this.Wc = e, 
            /** Underlying cache of documents and their read times. */
            this.docs = new rn(tt.H), 
            /** Size of all cached documents. */
            this.size = 0
            /**
         * Adds the supplied entry to the cache and updates the cache size as appropriate.
         *
         * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */;
        }
        return t.prototype.ai = function(t, e, n) {
            var r = e.key, i = this.docs.get(r), o = i ? i.size : 0, u = this.Wc(e);
            return this.docs = this.docs.zt(r, {
                hi: e,
                size: u,
                readTime: n
            }), this.size += u - o, this.Ei.qs(t, r.path.X());
        }, 
        /**
         * Removes the specified entry from the cache and updates the cache size as appropriate.
         *
         * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */
        t.prototype.li = function(t) {
            var e = this.docs.get(t);
            e && (this.docs = this.docs.remove(t), this.size -= e.size);
        }, t.prototype._i = function(t, e) {
            var n = this.docs.get(e);
            return lr.resolve(n ? n.hi : null);
        }, t.prototype.getEntries = function(t, e) {
            var n = this, r = fn();
            return e.forEach((function(t) {
                var e = n.docs.get(t);
                r = r.zt(t, e ? e.hi : null);
            })), lr.resolve(r);
        }, t.prototype.Kr = function(t, e, n) {
            for (var r = pn(), i = new tt(e.path.child("")), o = this.docs.ee(i)
            // Documents are ordered by key, so we can use a prefix scan to narrow down
            // the documents we need to match the query against.
            ; o.ce(); ) {
                var u = o.oe(), s = u.key, a = u.value, c = a.hi, h = a.readTime;
                if (!e.path.nt(s.path)) break;
                h._(n) <= 0 || c instanceof Pt && ve(e, c) && (r = r.zt(c.key, c));
            }
            return lr.resolve(r);
        }, t.prototype.jc = function(t, e) {
            return lr.forEach(this.docs, (function(t) {
                return e(t);
            }));
        }, t.prototype.Nr = function(t) {
            // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
            // a separate changelog and does not need special handling for removals.
            return new Io(this);
        }, t.prototype.kr = function(t) {
            return lr.resolve(this.size);
        }, t;
    }(), Io = /** @class */ function(t) {
        function e(e) {
            var n = this;
            return (n = t.call(this) || this).jr = e, n;
        }
        return __extends$1d(e, t), e.prototype.wi = function(t) {
            var e = this, n = [];
            return this.ri.forEach((function(r, i) {
                i && i.hi ? n.push(e.jr.ai(t, i.hi, e.ci(r))) : e.jr.li(r);
            })), lr.Ln(n);
        }, e.prototype.fi = function(t, e) {
            return this.jr._i(t, e);
        }, e.prototype.di = function(t, e) {
            return this.jr.getEntries(t, e);
        }, e;
    }(wi), Eo = /** @class */ function() {
        function t(t) {
            this.persistence = t, 
            /**
                 * Maps a target to the data about that target
                 */
            this.Gc = new gi((function(t) {
                return Ut(t);
            }), Mt), 
            /** The last received snapshot version. */
            this.lastRemoteSnapshotVersion = X$1.min(), 
            /** The highest numbered target ID encountered. */
            this.highestTargetId = 0, 
            /** The highest sequence number encountered. */
            this.zc = 0, 
            /**
                 * A ordered bidirectional mapping between documents and the remote target
                 * IDs.
                 */
            this.Hc = new go, this.targetCount = 0, this.Jc = Si.Li();
        }
        return t.prototype.In = function(t, e) {
            return this.Gc.forEach((function(t, n) {
                return e(n);
            })), lr.resolve();
        }, t.prototype.Qi = function(t) {
            return lr.resolve(this.lastRemoteSnapshotVersion);
        }, t.prototype.Ki = function(t) {
            return lr.resolve(this.zc);
        }, t.prototype.Bi = function(t) {
            return this.highestTargetId = this.Jc.next(), lr.resolve(this.highestTargetId);
        }, t.prototype.Wi = function(t, e, n) {
            return n && (this.lastRemoteSnapshotVersion = n), e > this.zc && (this.zc = e), 
            lr.resolve();
        }, t.prototype.Gi = function(t) {
            this.Gc.set(t.target, t);
            var e = t.targetId;
            e > this.highestTargetId && (this.Jc = new Si(e), this.highestTargetId = e), t.sequenceNumber > this.zc && (this.zc = t.sequenceNumber);
        }, t.prototype.ji = function(t, e) {
            return this.Gi(e), this.targetCount += 1, lr.resolve();
        }, t.prototype.Hi = function(t, e) {
            return this.Gi(e), lr.resolve();
        }, t.prototype.Ji = function(t, e) {
            return this.Gc.delete(e.target), this.Hc.Oc(e.targetId), this.targetCount -= 1, 
            lr.resolve();
        }, t.prototype.Xi = function(t, e, n) {
            var r = this, i = 0, o = [];
            return this.Gc.forEach((function(u, s) {
                s.sequenceNumber <= e && null === n.get(s.targetId) && (r.Gc.delete(u), o.push(r.Yi(t, s.targetId)), 
                i++);
            })), lr.Ln(o).next((function() {
                return i;
            }));
        }, t.prototype.Zi = function(t) {
            return lr.resolve(this.targetCount);
        }, t.prototype.tr = function(t, e) {
            var n = this.Gc.get(e) || null;
            return lr.resolve(n);
        }, t.prototype.er = function(t, e, n) {
            return this.Hc.xc(e, n), lr.resolve();
        }, t.prototype.sr = function(t, e, n) {
            this.Hc.Fc(e, n);
            var r = this.persistence.Ti, i = [];
            return r && e.forEach((function(e) {
                i.push(r.Ni(t, e));
            })), lr.Ln(i);
        }, t.prototype.Yi = function(t, e) {
            return this.Hc.Oc(e), lr.resolve();
        }, t.prototype.rr = function(t, e) {
            var n = this.Hc.Mc(e);
            return lr.resolve(n);
        }, t.prototype.Oi = function(t, e) {
            return lr.resolve(this.Hc.Oi(e));
        }, t;
    }(), To = /** @class */ function() {
        /**
         * The constructor accepts a factory for creating a reference delegate. This
         * allows both the delegate and this instance to have strong references to
         * each other without having nullable fields that would then need to be
         * checked or asserted on every access.
         */
        function t(t, e) {
            var n = this;
            this.Yc = {}, this.so = new H$1(0), this.io = !1, this.io = !0, this.Ti = t(this), 
            this._o = new Eo(this), this.Ei = new fi, this.fo = function(t, e) {
                return new _o(t, (function(t) {
                    return n.Ti.Xc(t);
                }));
            }(this.Ei), this.Qt = new Zr(e), this.wo = new mo(this.Qt);
        }
        return t.prototype.start = function() {
            return Promise.resolve();
        }, t.prototype.Mo = function() {
            // No durable state to ensure is closed on shutdown.
            return this.io = !1, Promise.resolve();
        }, Object.defineProperty(t.prototype, "Er", {
            get: function() {
                return this.io;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.Po = function() {
            // No op.
        }, t.prototype.yo = function() {
            // No op.
        }, t.prototype.Ko = function() {
            return this.Ei;
        }, t.prototype.Qo = function(t) {
            var e = this.Yc[t.A()];
            return e || (e = new bo(this.Ei, this.Ti), this.Yc[t.A()] = e), e;
        }, t.prototype.Sr = function() {
            return this._o;
        }, t.prototype.Fr = function() {
            return this.fo;
        }, t.prototype.Wo = function() {
            return this.wo;
        }, t.prototype.runTransaction = function(t, e, n) {
            var r = this;
            N$1("MemoryPersistence", "Starting transaction:", t);
            var i = new No(this.so.next());
            return this.Ti.Zc(), n(i).next((function(t) {
                return r.Ti.ta(i).next((function() {
                    return t;
                }));
            })).kn().then((function(t) {
                return i.Vs(), t;
            }));
        }, t.prototype.ea = function(t, e) {
            return lr.$n(Object.values(this.Yc).map((function(n) {
                return function() {
                    return n.Oi(t, e);
                };
            })));
        }, t;
    }(), No = /** @class */ function(t) {
        function e(e) {
            var n = this;
            return (n = t.call(this) || this).bs = e, n;
        }
        return __extends$1d(e, t), e;
    }(Nr), Ao = /** @class */ function() {
        function t(t) {
            this.persistence = t, 
            /** Tracks all documents that are active in Query views. */
            this.na = new go, 
            /** The list of documents that are potentially GCed after each transaction. */
            this.sa = null;
        }
        return t.ia = function(e) {
            return new t(e);
        }, Object.defineProperty(t.prototype, "ra", {
            get: function() {
                if (this.sa) return this.sa;
                throw x$1();
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.nr = function(t, e, n) {
            return this.na.nr(n, e), this.ra.delete(n.toString()), lr.resolve();
        }, t.prototype.ir = function(t, e, n) {
            return this.na.ir(n, e), this.ra.add(n.toString()), lr.resolve();
        }, t.prototype.Ni = function(t, e) {
            return this.ra.add(e.toString()), lr.resolve();
        }, t.prototype.removeTarget = function(t, e) {
            var n = this;
            this.na.Oc(e.targetId).forEach((function(t) {
                return n.ra.add(t.toString());
            }));
            var r = this.persistence.Sr();
            return r.rr(t, e.targetId).next((function(t) {
                t.forEach((function(t) {
                    return n.ra.add(t.toString());
                }));
            })).next((function() {
                return r.Ji(t, e);
            }));
        }, t.prototype.Zc = function() {
            this.sa = new Set;
        }, t.prototype.ta = function(t) {
            var e = this, n = this.persistence.Fr().Nr();
            // Remove newly orphaned documents.
                    return lr.forEach(this.ra, (function(r) {
                var i = tt._t(r);
                return e.oa(t, i).next((function(t) {
                    t || n.li(i);
                }));
            })).next((function() {
                return e.sa = null, n.apply(t);
            }));
        }, t.prototype.Or = function(t, e) {
            var n = this;
            return this.oa(t, e).next((function(t) {
                t ? n.ra.delete(e.toString()) : n.ra.add(e.toString());
            }));
        }, t.prototype.Xc = function(t) {
            // For eager GC, we don't care about the document size, there are no size thresholds.
            return 0;
        }, t.prototype.oa = function(t, e) {
            var n = this;
            return lr.$n([ function() {
                return lr.resolve(n.na.Oi(e));
            }, function() {
                return n.persistence.Sr().Oi(t, e);
            }, function() {
                return n.persistence.ea(t, e);
            } ]);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A collection of references to a document from some kind of numbered entity
     * (either a target ID or batch ID). As references are added to or removed from
     * the set corresponding events are emitted to a registered garbage collector.
     *
     * Each reference is represented by a DocumentReference object. Each of them
     * contains enough information to uniquely identify the reference. They are all
     * stored primarily in a set sorted by key. A document is considered garbage if
     * there's no references in that set (this can be efficiently checked thanks to
     * sorting by key).
     *
     * ReferenceSet also keeps a secondary set that contains references sorted by
     * IDs. This one is used to efficiently implement removal of all references by
     * some target ID.
     */
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The format of the LocalStorage key that stores the client state is:
    //     firestore_clients_<persistence_prefix>_<instance_key>
    /** Assembles the key for a client state in WebStorage */
    function So(t, e) {
        return "firestore_clients_" + t + "_" + e;
    }

    // The format of the WebStorage key that stores the mutation state is:
    //     firestore_mutations_<persistence_prefix>_<batch_id>
    //     (for unauthenticated users)
    // or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
    // 'user_uid' is last to avoid needing to escape '_' characters that it might
    // contain.
    /** Assembles the key for a mutation batch in WebStorage */ function Do(t, e, n) {
        var r = "firestore_mutations_" + t + "_" + n;
        return e.m() && (r += "_" + e.uid), r;
    }

    // The format of the WebStorage key that stores a query target's metadata is:
    //     firestore_targets_<persistence_prefix>_<target_id>
    /** Assembles the key for a query state in WebStorage */ function xo(t, e) {
        return "firestore_targets_" + t + "_" + e;
    }

    // The WebStorage prefix that stores the primary tab's online state. The
    // format of the key is:
    //     firestore_online_state_<persistence_prefix>
    /**
     * Holds the state of a mutation batch, including its user ID, batch ID and
     * whether the batch is 'pending', 'acknowledged' or 'rejected'.
     */
    // Visible for testing
    var ko = /** @class */ function() {
        function t(t, e, n, r) {
            this.user = t, this.batchId = e, this.state = n, this.error = r
            /**
         * Parses a MutationMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.ca = function(e, n, r) {
            var i = JSON.parse(r), o = "object" == typeof i && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(i.state) && (void 0 === i.error || "object" == typeof i.error), u = void 0;
            return o && i.error && ((o = "string" == typeof i.error.message && "string" == typeof i.error.code) && (u = new q$1(i.error.code, i.error.message))), 
            o ? new t(e, n, i.state, u) : (A$1("SharedClientState", "Failed to parse mutation state for ID '" + n + "': " + r), 
            null);
        }, t.prototype.aa = function() {
            var t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }, t;
    }(), Oo = /** @class */ function() {
        function t(t, e, n) {
            this.targetId = t, this.state = e, this.error = n
            /**
         * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.ca = function(e, n) {
            var r = JSON.parse(n), i = "object" == typeof r && -1 !== [ "not-current", "current", "rejected" ].indexOf(r.state) && (void 0 === r.error || "object" == typeof r.error), o = void 0;
            return i && r.error && ((i = "string" == typeof r.error.message && "string" == typeof r.error.code) && (o = new q$1(r.error.code, r.error.message))), 
            i ? new t(e, r.state, o) : (A$1("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n), 
            null);
        }, t.prototype.aa = function() {
            var t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }, t;
    }(), Po = /** @class */ function() {
        function t(t, e) {
            this.clientId = t, this.activeTargetIds = e
            /**
         * Parses a RemoteClientState from the JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.ca = function(e, n) {
            for (var r = JSON.parse(n), i = "object" == typeof r && r.activeTargetIds instanceof Array, o = wn(), u = 0; i && u < r.activeTargetIds.length; ++u) i = dt(r.activeTargetIds[u]), 
            o = o.add(r.activeTargetIds[u]);
            return i ? new t(e, o) : (A$1("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n), 
            null);
        }, t;
    }(), Lo = /** @class */ function() {
        function t(t, e) {
            this.clientId = t, this.onlineState = e
            /**
         * Parses a SharedOnlineState from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.ca = function(e) {
            var n = JSON.parse(e);
            return "object" == typeof n && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(n.onlineState) && "string" == typeof n.clientId ? new t(n.clientId, n.onlineState) : (A$1("SharedClientState", "Failed to parse online state: " + e), 
            null);
        }, t;
    }(), Vo = /** @class */ function() {
        function t() {
            this.activeTargetIds = wn();
        }
        return t.prototype.ua = function(t) {
            this.activeTargetIds = this.activeTargetIds.add(t);
        }, t.prototype.ha = function(t) {
            this.activeTargetIds = this.activeTargetIds.delete(t);
        }, 
        /**
         * Converts this entry into a JSON-encoded format we can use for WebStorage.
         * Does not encode `clientId` as it is part of the key in WebStorage.
         */
        t.prototype.aa = function() {
            var t = {
                activeTargetIds: this.activeTargetIds.it(),
                updateTimeMs: Date.now()
            };
            return JSON.stringify(t);
        }, t;
    }(), Co = /** @class */ function() {
        function t(t, e, n, r, i) {
            this.window = t, this.Zr = e, this.persistenceKey = n, this.la = r, this._a = null, 
            this.fa = null, this.M = null, this.da = this.wa.bind(this), this.Ea = new rn(V$1), 
            this.Er = !1, 
            /**
                 * Captures WebStorage events that occur before `start()` is called. These
                 * events are replayed once `WebStorageSharedClientState` is started.
                 */
            this.Ta = [];
            // Escape the special characters mentioned here:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
            var o = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
            this.storage = this.window.localStorage, this.currentUser = i, this.Ia = So(this.persistenceKey, this.la), 
            this.ma = 
            /** Assembles the key for the current sequence number. */
            function(t) {
                return "firestore_sequence_number_" + t;
            }(this.persistenceKey), this.Ea = this.Ea.zt(this.la, new Vo), this.Aa = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), 
            this.Ra = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.Pa = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), 
            this.ya = 
            /** Assembles the key for the online state of the primary tab. */
            function(t) {
                return "firestore_online_state_" + t;
            }(this.persistenceKey), this.ga = function(t) {
                return "firestore_bundle_loaded_" + t;
            }(this.persistenceKey), 
            // Rather than adding the storage observer during start(), we add the
            // storage observer during initialization. This ensures that we collect
            // events before other components populate their initial state (during their
            // respective start() calls). Otherwise, we might for example miss a
            // mutation that is added after LocalStore's start() processed the existing
            // mutations but before we observe WebStorage events.
            this.window.addEventListener("storage", this.da);
        }
        /** Returns 'true' if WebStorage is available in the current environment. */    return t.Kn = function(t) {
            return !(!t || !t.localStorage);
        }, t.prototype.start = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, n, r, i, o, u, s, a, c, h, f = this;
                return __generator(this, (function(l) {
                    switch (l.label) {
                      case 0:
                        return [ 4 /*yield*/ , this._a.Uo() ];

                      case 1:
                        for (t = l.sent(), e = 0, n = t; e < n.length; e++) (r = n[e]) !== this.la && (i = this.getItem(So(this.persistenceKey, r))) && (o = Po.ca(r, i)) && (this.Ea = this.Ea.zt(o.clientId, o));
                        for (this.Va(), (u = this.storage.getItem(this.ya)) && (s = this.pa(u)) && this.ba(s), 
                        a = 0, c = this.Ta; a < c.length; a++) h = c[a], this.wa(h);
                        return this.Ta = [], 
                        // Register a window unload hook to remove the client metadata entry from
                        // WebStorage even if `shutdown()` was not called.
                        this.window.addEventListener("unload", (function() {
                            return f.Mo();
                        })), this.Er = !0, [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.B = function(t) {
            this.setItem(this.ma, JSON.stringify(t));
        }, t.prototype.va = function() {
            return this.Sa(this.Ea);
        }, t.prototype.Da = function(t) {
            var e = !1;
            return this.Ea.forEach((function(n, r) {
                r.activeTargetIds.has(t) && (e = !0);
            })), e;
        }, t.prototype.Ca = function(t) {
            this.xa(t, "pending");
        }, t.prototype.Na = function(t, e, n) {
            this.xa(t, e, n), 
            // Once a final mutation result is observed by other clients, they no longer
            // access the mutation's metadata entry. Since WebStorage replays events
            // in order, it is safe to delete the entry right after updating it.
            this.Fa(t);
        }, t.prototype.Oa = function(t) {
            var e = "not-current";
            // Lookup an existing query state if the target ID was already registered
            // by another tab
                    if (this.Da(t)) {
                var n = this.storage.getItem(xo(this.persistenceKey, t));
                if (n) {
                    var r = Oo.ca(t, n);
                    r && (e = r.state);
                }
            }
            return this.ka.ua(t), this.Va(), e;
        }, t.prototype.Ma = function(t) {
            this.ka.ha(t), this.Va();
        }, t.prototype.La = function(t) {
            return this.ka.activeTargetIds.has(t);
        }, t.prototype.$a = function(t) {
            this.removeItem(xo(this.persistenceKey, t));
        }, t.prototype.Ba = function(t, e, n) {
            this.qa(t, e, n);
        }, t.prototype.Ua = function(t, e, n) {
            var r = this;
            e.forEach((function(t) {
                r.Fa(t);
            })), this.currentUser = t, n.forEach((function(t) {
                r.Ca(t);
            }));
        }, t.prototype.Qa = function(t) {
            this.Ka(t);
        }, t.prototype.Wa = function() {
            this.ja();
        }, t.prototype.Mo = function() {
            this.Er && (this.window.removeEventListener("storage", this.da), this.removeItem(this.Ia), 
            this.Er = !1);
        }, t.prototype.getItem = function(t) {
            var e = this.storage.getItem(t);
            return N$1("SharedClientState", "READ", t, e), e;
        }, t.prototype.setItem = function(t, e) {
            N$1("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
        }, t.prototype.removeItem = function(t) {
            N$1("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
        }, t.prototype.wa = function(t) {
            var e = this, n = t;
            // Note: The function is typed to take Event to be interface-compatible with
            // `Window.addEventListener`.
                    if (n.storageArea === this.storage) {
                if (N$1("SharedClientState", "EVENT", n.key, n.newValue), n.key === this.Ia) return void A$1("Received WebStorage notification for local change. Another client might have garbage-collected our state");
                this.Zr.po((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var t, e, r, i, o, u;
                        return __generator(this, (function(s) {
                            if (this.Er) {
                                if (null !== n.key) if (this.Aa.test(n.key)) {
                                    if (null == n.newValue) return t = this.Ga(n.key), [ 2 /*return*/ , this.za(t, null) ];
                                    if (e = this.Ha(n.key, n.newValue)) return [ 2 /*return*/ , this.za(e.clientId, e) ];
                                } else if (this.Ra.test(n.key)) {
                                    if (null !== n.newValue && (r = this.Ja(n.key, n.newValue))) return [ 2 /*return*/ , this.Ya(r) ];
                                } else if (this.Pa.test(n.key)) {
                                    if (null !== n.newValue && (i = this.Xa(n.key, n.newValue))) return [ 2 /*return*/ , this.Za(i) ];
                                } else if (n.key === this.ya) {
                                    if (null !== n.newValue && (o = this.pa(n.newValue))) return [ 2 /*return*/ , this.ba(o) ];
                                } else if (n.key === this.ma) (u = function(t) {
                                    var e = H$1.q;
                                    if (null != t) try {
                                        var n = JSON.parse(t);
                                        k$1("number" == typeof n), e = n;
                                    } catch (t) {
                                        A$1("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                    }
                                    return e;
                                }(n.newValue)) !== H$1.q && this.M(u); else if (n.key === this.ga) return [ 2 /*return*/ , this._a.tu() ];
                            } else this.Ta.push(n);
                            return [ 2 /*return*/ ];
                        }));
                    }));
                }));
            }
        }, Object.defineProperty(t.prototype, "ka", {
            get: function() {
                return this.Ea.get(this.la);
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.Va = function() {
            this.setItem(this.Ia, this.ka.aa());
        }, t.prototype.xa = function(t, e, n) {
            var r = new ko(this.currentUser, t, e, n), i = Do(this.persistenceKey, this.currentUser, t);
            this.setItem(i, r.aa());
        }, t.prototype.Fa = function(t) {
            var e = Do(this.persistenceKey, this.currentUser, t);
            this.removeItem(e);
        }, t.prototype.Ka = function(t) {
            var e = {
                clientId: this.la,
                onlineState: t
            };
            this.storage.setItem(this.ya, JSON.stringify(e));
        }, t.prototype.qa = function(t, e, n) {
            var r = xo(this.persistenceKey, t), i = new Oo(t, e, n);
            this.setItem(r, i.aa());
        }, t.prototype.ja = function() {
            this.setItem(this.ga, "value-not-used");
        }, 
        /**
         * Parses a client state key in WebStorage. Returns null if the key does not
         * match the expected key format.
         */
        t.prototype.Ga = function(t) {
            var e = this.Aa.exec(t);
            return e ? e[1] : null;
        }, 
        /**
         * Parses a client state in WebStorage. Returns 'null' if the value could not
         * be parsed.
         */
        t.prototype.Ha = function(t, e) {
            var n = this.Ga(t);
            return Po.ca(n, e);
        }, 
        /**
         * Parses a mutation batch state in WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.Ja = function(t, e) {
            var n = this.Ra.exec(t), r = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
            return ko.ca(new F$1(i), r, e);
        }, 
        /**
         * Parses a query target state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.Xa = function(t, e) {
            var n = this.Pa.exec(t), r = Number(n[1]);
            return Oo.ca(r, e);
        }, 
        /**
         * Parses an online state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.pa = function(t) {
            return Lo.ca(t);
        }, t.prototype.Ya = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    return t.user.uid === this.currentUser.uid ? [ 2 /*return*/ , this._a.eu(t.batchId, t.state, t.error) ] : (N$1("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid), 
                    [ 2 /*return*/ ]);
                }));
            }));
        }, t.prototype.Za = function(t) {
            return this._a.nu(t.targetId, t.state, t.error);
        }, t.prototype.za = function(t, e) {
            var n = this, r = e ? this.Ea.zt(t, e) : this.Ea.remove(t), i = this.Sa(this.Ea), o = this.Sa(r), u = [], s = [];
            return o.forEach((function(t) {
                i.has(t) || u.push(t);
            })), i.forEach((function(t) {
                o.has(t) || s.push(t);
            })), this._a.su(u, s).then((function() {
                n.Ea = r;
            }));
        }, t.prototype.ba = function(t) {
            // We check whether the client that wrote this online state is still active
            // by comparing its client ID to the list of clients kept active in
            // IndexedDb. If a client does not update their IndexedDb client state
            // within 5 seconds, it is considered inactive and we don't emit an online
            // state event.
            this.Ea.get(t.clientId) && this.fa(t.onlineState);
        }, t.prototype.Sa = function(t) {
            var e = wn();
            return t.forEach((function(t, n) {
                e = e.Pe(n.activeTargetIds);
            })), e;
        }, t;
    }(), Ro = /** @class */ function() {
        function t() {
            this.iu = new Vo, this.ru = {}, this.fa = null, this.M = null;
        }
        return t.prototype.Ca = function(t) {
            // No op.
        }, t.prototype.Na = function(t, e, n) {
            // No op.
        }, t.prototype.Oa = function(t) {
            return this.iu.ua(t), this.ru[t] || "not-current";
        }, t.prototype.Ba = function(t, e, n) {
            this.ru[t] = e;
        }, t.prototype.Ma = function(t) {
            this.iu.ha(t);
        }, t.prototype.La = function(t) {
            return this.iu.activeTargetIds.has(t);
        }, t.prototype.$a = function(t) {
            delete this.ru[t];
        }, t.prototype.va = function() {
            return this.iu.activeTargetIds;
        }, t.prototype.Da = function(t) {
            return this.iu.activeTargetIds.has(t);
        }, t.prototype.start = function() {
            return this.iu = new Vo, Promise.resolve();
        }, t.prototype.Ua = function(t, e, n) {
            // No op.
        }, t.prototype.Qa = function(t) {
            // No op.
        }, t.prototype.Mo = function() {}, t.prototype.B = function(t) {}, t.prototype.Wa = function() {
            // No op.
        }, t;
    }(), Uo = /** @class */ function() {
        function t() {}
        return t.prototype.ou = function(t) {
            // No-op.
        }, t.prototype.Mo = function() {
            // No-op.
        }, t;
    }(), Mo = /** @class */ function() {
        function t() {
            var t = this;
            this.cu = function() {
                return t.au();
            }, this.uu = function() {
                return t.hu();
            }, this.lu = [], this._u();
        }
        return t.prototype.ou = function(t) {
            this.lu.push(t);
        }, t.prototype.Mo = function() {
            window.removeEventListener("online", this.cu), window.removeEventListener("offline", this.uu);
        }, t.prototype._u = function() {
            window.addEventListener("online", this.cu), window.addEventListener("offline", this.uu);
        }, t.prototype.au = function() {
            N$1("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
            for (var t = 0, e = this.lu; t < e.length; t++) {
                (0, e[t])(0 /* AVAILABLE */);
            }
        }, t.prototype.hu = function() {
            N$1("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
            for (var t = 0, e = this.lu; t < e.length; t++) {
                (0, e[t])(1 /* UNAVAILABLE */);
            }
        }, 
        // TODO(chenbrian): Consider passing in window either into this component or
        // here for testing via FakeWindow.
        /** Checks that all used attributes of window are available. */
        t.Kn = function() {
            return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
        }, t;
    }(), qo = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    }, jo = /** @class */ function() {
        function t(t) {
            this.fu = t.fu, this.du = t.du;
        }
        return t.prototype.wu = function(t) {
            this.Eu = t;
        }, t.prototype.Tu = function(t) {
            this.Iu = t;
        }, t.prototype.onMessage = function(t) {
            this.mu = t;
        }, t.prototype.close = function() {
            this.du();
        }, t.prototype.send = function(t) {
            this.fu(t);
        }, t.prototype.Au = function() {
            this.Eu();
        }, t.prototype.Ru = function(t) {
            this.Iu(t);
        }, t.prototype.Pu = function(t) {
            this.mu(t);
        }, t;
    }(), Fo = /** @class */ function(t) {
        function e(e) {
            var n = this;
            return (n = t.call(this, e) || this).forceLongPolling = e.forceLongPolling, n.i = e.i, 
            n;
        }
        /**
         * Base class for all Rest-based connections to the backend (WebChannel and
         * HTTP).
         */
        return __extends$1d(e, t), e.prototype.Su = function(t, e, n, r) {
            return new Promise((function(i, o) {
                var u = new XhrIo;
                u.listenOnce(EventType$1.COMPLETE, (function() {
                    try {
                        switch (u.getLastErrorCode()) {
                          case ErrorCode.NO_ERROR:
                            var e = u.getResponseJson();
                            N$1("Connection", "XHR received:", JSON.stringify(e)), i(e);
                            break;

                          case ErrorCode.TIMEOUT:
                            N$1("Connection", 'RPC "' + t + '" timed out'), o(new q$1(M$1.DEADLINE_EXCEEDED, "Request time out"));
                            break;

                          case ErrorCode.HTTP_ERROR:
                            var n = u.getStatus();
                            if (N$1("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", u.getResponseText()), 
                            n > 0) {
                                var r = u.getResponseJson().error;
                                if (r && r.status && r.message) {
                                    var s = function(t) {
                                        var e = t.toLowerCase().replace(/_/g, "-");
                                        return Object.values(M$1).indexOf(e) >= 0 ? e : M$1.UNKNOWN;
                                    }(r.status);
                                    o(new q$1(s, r.message));
                                } else o(new q$1(M$1.UNKNOWN, "Server responded with status " + u.getStatus()));
                            } else 
                            // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            o(new q$1(M$1.UNAVAILABLE, "Connection failed."));
                            break;

                          default:
                            x$1();
                        }
                    } finally {
                        N$1("Connection", 'RPC "' + t + '" completed.');
                    }
                }));
                var s = JSON.stringify(r);
                u.send(e, "POST", s, n, 15);
            }));
        }, e.prototype.Cu = function(t, e) {
            var n = [ this.gu, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], c = createWebChannelTransport(), h = getStatEventTarget(), f = {
                // Required for backend stickiness, routing behavior is based on this
                // parameter.
                httpSessionIdParam: "gsessionid",
                initMessageHeaders: {},
                messageUrlParams: {
                    // This param is used to improve routing and project isolation by the
                    // backend and must be included in every request.
                    database: "projects/" + this.t.projectId + "/databases/" + this.t.database
                },
                sendRawJson: !0,
                supportsCrossDomainXhr: !0,
                internalChannelParams: {
                    // Override the default timeout (randomized between 10-20 seconds) since
                    // a large write batch on a slow internet connection may take a long
                    // time to send to the backend. Rather than have WebChannel impose a
                    // tight timeout which could lead to infinite timeouts and retries, we
                    // set it very large (5-10 minutes) and rely on the browser's builtin
                    // timeouts to kick in if the request isn't working.
                    forwardChannelRequestTimeoutMs: 6e5
                },
                forceLongPolling: this.forceLongPolling,
                detectBufferingProxy: this.i
            };
            this.vu(f.initMessageHeaders, e), 
            // Sending the custom headers we just added to request.initMessageHeaders
            // (Authorization, etc.) will trigger the browser to make a CORS preflight
            // request because the XHR will no longer meet the criteria for a "simple"
            // CORS request:
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
            // Therefore to avoid the CORS preflight request (an extra network
            // roundtrip), we use the httpHeadersOverwriteParam option to specify that
            // the headers should instead be encoded into a special "$httpHeaders" query
            // parameter, which is recognized by the webchannel backend. This is
            // formally defined here:
            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
            // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
            // doesn't have an Origin header. So we have to exclude a few browser environments that are
            // known to (sometimes) not include an Origin. See
            // https://github.com/firebase/firebase-js-sdk/issues/1491.
            isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (f.httpHeadersOverwriteParam = "$httpHeaders");
            var m = n.join("");
            N$1("Connection", "Creating WebChannel: " + m, f);
            var g = c.createWebChannel(m, f), w = !1, b = !1, _ = new jo({
                fu: function(t) {
                    b ? N$1("Connection", "Not sending because WebChannel is closed:", t) : (w || (N$1("Connection", "Opening WebChannel transport."), 
                    g.open(), w = !0), N$1("Connection", "WebChannel sending:", t), g.send(t));
                },
                du: function() {
                    return g.close();
                }
            }), I = function(t, e, n) {
                // TODO(dimond): closure typing seems broken because WebChannel does
                // not implement goog.events.Listenable
                t.listen(e, (function(t) {
                    try {
                        n(t);
                    } catch (t) {
                        setTimeout((function() {
                            throw t;
                        }), 0);
                    }
                }));
            };
            // WebChannel supports sending the first message with the handshake - saving
            // a network round trip. However, it will have to call send in the same
            // JS event loop as open. In order to enforce this, we delay actually
            // opening the WebChannel until send is called. Whether we have called
            // open is tracked with this variable.
                    // Closure events are guarded and exceptions are swallowed, so catch any
            // exception and rethrow using a setTimeout so they become visible again.
            // Note that eventually this function could go away if we are confident
            // enough the code is exception free.
            return I(g, WebChannel.EventType.OPEN, (function() {
                b || N$1("Connection", "WebChannel transport opened.");
            })), I(g, WebChannel.EventType.CLOSE, (function() {
                b || (b = !0, N$1("Connection", "WebChannel transport closed"), _.Ru());
            })), I(g, WebChannel.EventType.ERROR, (function(t) {
                b || (b = !0, S$1("Connection", "WebChannel transport errored:", t), _.Ru(new q$1(M$1.UNAVAILABLE, "The operation could not be completed")));
            })), I(g, WebChannel.EventType.MESSAGE, (function(t) {
                var e;
                if (!b) {
                    var n = t.data[0];
                    k$1(!!n);
                    // TODO(b/35143891): There is a bug in One Platform that caused errors
                    // (and only errors) to be wrapped in an extra array. To be forward
                    // compatible with the bug we need to check either condition. The latter
                    // can be removed once the fix has been rolled out.
                    // Use any because msgData.error is not typed.
                    var r = n, i = r.error || (null === (e = r[0]) || void 0 === e ? void 0 : e.error);
                    if (i) {
                        N$1("Connection", "WebChannel received error:", i);
                        // error.status will be a string like 'OK' or 'NOT_FOUND'.
                        var o = i.status, u = 
                        /**
     * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
     *
     * @returns The Code equivalent to the given status string or undefined if
     *     there is no match.
     */
                        function(t) {
                            // lookup by string
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            var e = We[t];
                            if (void 0 !== e) return nn(e);
                        }(o), s = i.message;
                        void 0 === u && (u = M$1.INTERNAL, s = "Unknown error status: " + o + " with message " + i.message), 
                        // Mark closed so no further events are propagated
                        b = !0, _.Ru(new q$1(u, s)), g.close();
                    } else N$1("Connection", "WebChannel received:", n), _.Pu(n);
                }
            })), I(h, Event.STAT_EVENT, (function(t) {
                t.stat === Stat.PROXY ? N$1("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && N$1("Connection", "Detected no buffering proxy");
            })), setTimeout((function() {
                // Technically we could/should wait for the WebChannel opened event,
                // but because we want to send the first message with the WebChannel
                // handshake we pretend the channel opened here (asynchronously), and
                // then delay the actual open until the first message is sent.
                _.Au();
            }), 0), _;
        }, e;
    }(/** @class */ function() {
        function t(t) {
            this.yu = t, this.t = t.t;
            var e = t.ssl ? "https" : "http";
            this.gu = e + "://" + t.host, this.Vu = "projects/" + this.t.projectId + "/databases/" + this.t.database + "/documents";
        }
        return t.prototype.pu = function(t, e, n, r) {
            var i = this.bu(t, e);
            N$1("RestConnection", "Sending: ", i, n);
            var o = {};
            return this.vu(o, r), this.Su(t, i, o, n).then((function(t) {
                return N$1("RestConnection", "Received: ", t), t;
            }), (function(e) {
                throw S$1("RestConnection", t + " failed with error: ", e, "url: ", i, "request:", n), 
                e;
            }));
        }, t.prototype.Du = function(t, e, n, r) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.pu(t, e, n, r);
        }, 
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */
        t.prototype.vu = function(t, e) {
            if (t["X-Goog-Api-Client"] = "gl-js/ fire/8.2.6", 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid triggering preflight requests.
            t["Content-Type"] = "text/plain", e) for (var n in e.g) e.g.hasOwnProperty(n) && (t[n] = e.g[n]);
        }, t.prototype.bu = function(t, e) {
            var n = qo[t];
            return this.gu + "/v1/" + e + ":" + n;
        }, t;
    }());

    /**
     * Holds the state of a query target, including its target ID and whether the
     * target is 'not-current', 'current' or 'rejected'.
     */
    // Visible for testing
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Initializes the WebChannelConnection for the browser. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The Platform's 'window' implementation or null if not available. */
    function zo() {
        // `window` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof window ? window : null;
    }

    /** The Platform's 'document' implementation or null if not available. */ function Go() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Bo(t) {
        return new Vn(t, /* useProto3Json= */ !0);
    }

    /**
     * An instance of the Platform's 'TextEncoder' implementation.
     */
    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */ var Qo = /** @class */ function() {
        function t(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        e, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        n
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , r
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , i) {
            void 0 === n && (n = 1e3), void 0 === r && (r = 1.5), void 0 === i && (i = 6e4), 
            this.Zr = t, this.fs = e, this.xu = n, this.Nu = r, this.Fu = i, this.Ou = 0, this.ku = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.Mu = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    return t.prototype.reset = function() {
            this.Ou = 0;
        }, 
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */
        t.prototype.Lu = function() {
            this.Ou = this.Fu;
        }, 
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */
        t.prototype.$u = function(t) {
            var e = this;
            // Cancel any pending backoff operation.
                    this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            var n = Math.floor(this.Ou + this.Bu()), r = Math.max(0, Date.now() - this.Mu), i = Math.max(0, n - r);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    i > 0 && N$1("ExponentialBackoff", "Backing off for " + i + " ms (base delay: " + this.Ou + " ms, delay with jitter: " + n + " ms, last attempt: " + r + " ms ago)"), 
            this.ku = this.Zr.Tr(this.fs, i, (function() {
                return e.Mu = Date.now(), t();
            })), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.Ou *= this.Nu, this.Ou < this.xu && (this.Ou = this.xu), this.Ou > this.Fu && (this.Ou = this.Fu);
        }, t.prototype.qu = function() {
            null !== this.ku && (this.ku.Rs(), this.ku = null);
        }, t.prototype.cancel = function() {
            null !== this.ku && (this.ku.cancel(), this.ku = null);
        }, 
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ t.prototype.Bu = function() {
            return (Math.random() - .5) * this.Ou;
        }, t;
    }(), Yo = /** @class */ function() {
        function t(t, e, n, r, i, o) {
            this.Zr = t, this.Uu = n, this.Qu = r, this.Ku = i, this.listener = o, this.state = 0 /* Initial */ , 
            /**
                 * A close count that's incremented every time the stream is closed; used by
                 * getCloseGuardedDispatcher() to invalidate callbacks that happen after
                 * close.
                 */
            this.Wu = 0, this.ju = null, this.stream = null, this.Gu = new Qo(t, e)
            /**
         * Returns true if start() has been called and no error has occurred. True
         * indicates the stream is open or in the process of opening (which
         * encompasses respecting backoff, getting auth tokens, and starting the
         * actual RPC). Use isOpen() to determine if the stream is open and ready for
         * outbound requests.
         */;
        }
        return t.prototype.zu = function() {
            return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
        }, 
        /**
         * Returns true if the underlying RPC is open (the onOpen() listener has been
         * called) and the stream is ready for outbound requests.
         */
        t.prototype.Hu = function() {
            return 2 /* Open */ === this.state;
        }, 
        /**
         * Starts the RPC. Only allowed if isStarted() returns false. The stream is
         * not immediately ready for use: onOpen() will be invoked when the RPC is
         * ready for outbound requests, at which point isOpen() will return true.
         *
         * When start returns, isStarted() will return true.
         */
        t.prototype.start = function() {
            3 /* Error */ !== this.state ? this.auth() : this.Ju();
        }, 
        /**
         * Stops the RPC. This call is idempotent and allowed regardless of the
         * current isStarted() state.
         *
         * When stop returns, isStarted() and isOpen() will both return false.
         */
        t.prototype.stop = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.zu() ? [ 4 /*yield*/ , this.close(0 /* Initial */) ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * After an error the stream will usually back off on the next attempt to
         * start it. If the error warrants an immediate restart of the stream, the
         * sender can use this to indicate that the receiver should not back off.
         *
         * Each error will call the onClose() listener. That function can decide to
         * inhibit backoff if required.
         */
        t.prototype.Yu = function() {
            this.state = 0 /* Initial */ , this.Gu.reset();
        }, 
        /**
         * Marks this stream as idle. If no further actions are performed on the
         * stream for one minute, the stream will automatically close itself and
         * notify the stream's onClose() handler with Status.OK. The stream will then
         * be in a !isStarted() state, requiring the caller to start the stream again
         * before further use.
         *
         * Only streams that are in state 'Open' can be marked idle, as all other
         * states imply pending network operations.
         */
        t.prototype.Xu = function() {
            var t = this;
            // Starts the idle time if we are in state 'Open' and are not yet already
            // running a timer (in which case the previous idle timeout still applies).
                    this.Hu() && null === this.ju && (this.ju = this.Zr.Tr(this.Uu, 6e4, (function() {
                return t.Zu();
            })));
        }, 
        /** Sends a message to the underlying stream. */ t.prototype.th = function(t) {
            this.eh(), this.stream.send(t);
        }, 
        /** Called by the idle timer when the stream should close due to inactivity. */ t.prototype.Zu = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    return this.Hu() ? [ 2 /*return*/ , this.close(0 /* Initial */) ] : [ 2 /*return*/ ];
                }));
            }));
        }, 
        /** Marks the stream as active again. */ t.prototype.eh = function() {
            this.ju && (this.ju.cancel(), this.ju = null);
        }, 
        /**
         * Closes the stream and cleans up as necessary:
         *
         * * closes the underlying GRPC stream;
         * * calls the onClose handler with the given 'error';
         * * sets internal stream state to 'finalState';
         * * adjusts the backoff timer based on the error
         *
         * A new stream can be opened by calling start().
         *
         * @param finalState - the intended state of the stream after closing.
         * @param error - the error the connection was closed with.
         */
        t.prototype.close = function(t, e) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        // Notify the listener that the stream closed.
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        return this.eh(), this.Gu.cancel(), 
                        // Invalidates any stream-related callbacks (e.g. from auth or the
                        // underlying stream), guaranteeing they won't execute.
                        this.Wu++, 3 /* Error */ !== t ? 
                        // If this is an intentional close ensure we don't delay our next connection attempt.
                        this.Gu.reset() : e && e.code === M$1.RESOURCE_EXHAUSTED ? (
                        // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                        A$1(e.toString()), A$1("Using maximum backoff delay to prevent overloading the backend."), 
                        this.Gu.Lu()) : e && e.code === M$1.UNAUTHENTICATED && 
                        // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                        // just expired.
                        this.Ku.p(), 
                        // Clean up the underlying stream because we are no longer interested in events.
                        null !== this.stream && (this.nh(), this.stream.close(), this.stream = null), 
                        // This state must be assigned before calling onClose() to allow the callback to
                        // inhibit backoff or otherwise manipulate the state in its non-started state.
                        this.state = t, [ 4 /*yield*/ , this.listener.Tu(e) ];

                      case 1:
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        // Notify the listener that the stream closed.
                        return n.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Can be overridden to perform additional cleanup before the stream is closed.
         * Calling super.tearDown() is not required.
         */
        t.prototype.nh = function() {}, t.prototype.auth = function() {
            var t = this;
            this.state = 1 /* Starting */;
            var e = this.sh(this.Wu), n = this.Wu;
            // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                    this.Ku.getToken().then((function(e) {
                // Stream can be stopped while waiting for authentication.
                // TODO(mikelehen): We really should just use dispatchIfNotClosed
                // and let this dispatch onto the queue, but that opened a spec test can
                // of worms that I don't want to deal with in this PR.
                t.Wu === n && 
                // Normally we'd have to schedule the callback on the AsyncQueue.
                // However, the following calls are safe to be called outside the
                // AsyncQueue since they don't chain asynchronous calls
                t.ih(e);
            }), (function(n) {
                e((function() {
                    var e = new q$1(M$1.UNKNOWN, "Fetching auth token failed: " + n.message);
                    return t.rh(e);
                }));
            }));
        }, t.prototype.ih = function(t) {
            var e = this, n = this.sh(this.Wu);
            this.stream = this.oh(t), this.stream.wu((function() {
                n((function() {
                    return e.state = 2 /* Open */ , e.listener.wu();
                }));
            })), this.stream.Tu((function(t) {
                n((function() {
                    return e.rh(t);
                }));
            })), this.stream.onMessage((function(t) {
                n((function() {
                    return e.onMessage(t);
                }));
            }));
        }, t.prototype.Ju = function() {
            var t = this;
            this.state = 4 /* Backoff */ , this.Gu.$u((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        return this.state = 0 /* Initial */ , this.start(), [ 2 /*return*/ ];
                    }));
                }));
            }));
        }, 
        // Visible for tests
        t.prototype.rh = function(t) {
            // In theory the stream could close cleanly, however, in our current model
            // we never expect this to happen because if we stop a stream ourselves,
            // this callback will never be called. To prevent cases where we retry
            // without a backoff accidentally, we set the stream to error in all cases.
            return N$1("PersistentStream", "close with error: " + t), this.stream = null, this.close(3 /* Error */ , t);
        }, 
        /**
         * Returns a "dispatcher" function that dispatches operations onto the
         * AsyncQueue but only runs them if closeCount remains unchanged. This allows
         * us to turn auth / stream callbacks into no-ops if the stream is closed /
         * re-opened, etc.
         */
        t.prototype.sh = function(t) {
            var e = this;
            return function(n) {
                e.Zr.Ps((function() {
                    return e.Wu === t ? n() : (N$1("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                    Promise.resolve());
                }));
            };
        }, t;
    }(), Ho = /** @class */ function(t) {
        function e(e, n, r, i, o) {
            var u = this;
            return (u = t.call(this, e, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , n, r, o) || this).Qt = i, 
            u;
        }
        return __extends$1d(e, t), e.prototype.oh = function(t) {
            return this.Qu.Cu("Listen", t);
        }, e.prototype.onMessage = function(t) {
            // A successful response means the stream is healthy
            this.Gu.reset();
            var e = function(t, e) {
                var n;
                if ("targetChange" in e) {
                    e.targetChange;
                    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
                    // if unset
                    var r = function(t) {
                        return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : x$1();
                    }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], o = function(t, e) {
                        return t.Bt ? (k$1(void 0 === e || "string" == typeof e), U$1.fromBase64String(e || "")) : (k$1(void 0 === e || e instanceof Uint8Array), 
                        U$1.fromUint8Array(e || new Uint8Array));
                    }(t, e.targetChange.resumeToken), u = (s = e.targetChange.cause) && function(t) {
                        var e = void 0 === t.code ? M$1.UNKNOWN : nn(t.code);
                        return new q$1(e, t.message || "");
                    }(s);
                    n = new Sn(r, i, o, u || null);
                } else if ("documentChange" in e) {
                    e.documentChange, (r = e.documentChange).document, r.document.name, r.document.updateTime, 
                    i = zn(t, r.document.name), o = Mn(r.document.updateTime);
                    var s = new Dt({
                        mapValue: {
                            fields: r.document.fields
                        }
                    }), a = (u = new Pt(i, o, s, {}), r.targetIds || []), c = r.removedTargetIds || [];
                    n = new Nn(a, c, u.key, u);
                } else if ("documentDelete" in e) e.documentDelete, (r = e.documentDelete).document, 
                i = zn(t, r.document), o = r.readTime ? Mn(r.readTime) : X$1.min(), s = new Lt(i, o), 
                u = r.removedTargetIds || [], n = new Nn([], u, s.key, s); else if ("documentRemove" in e) e.documentRemove, 
                (r = e.documentRemove).document, i = zn(t, r.document), o = r.removedTargetIds || [], 
                n = new Nn([], o, i, null); else {
                    if (!("filter" in e)) return x$1();
                    e.filter;
                    var h = e.filter;
                    h.targetId, r = h.count || 0, i = new tn(r), o = h.targetId, n = new An(o, i);
                }
                return n;
            }(this.Qt, t), n = function(t) {
                // We have only reached a consistent snapshot for the entire stream if there
                // is a read_time set and it applies to all targets (i.e. the list of
                // targets is empty). The backend is guaranteed to send such responses.
                if (!("targetChange" in t)) return X$1.min();
                var e = t.targetChange;
                return e.targetIds && e.targetIds.length ? X$1.min() : e.readTime ? Mn(e.readTime) : X$1.min();
            }(t);
            return this.listener.ah(e, n);
        }, 
        /**
         * Registers interest in the results of the given target. If the target
         * includes a resumeToken it will be included in the request. Results that
         * affect the target will be streamed back as WatchChange messages that
         * reference the targetId.
         */
        e.prototype.uh = function(t) {
            var e = {};
            e.database = Qn(this.Qt), e.addTarget = function(t, e) {
                var n, r = e.target;
                return (n = qt(r) ? {
                    documents: Zn(t, r)
                } : {
                    query: Jn(t, r)
                }).targetId = e.targetId, e.resumeToken.l() > 0 ? n.resumeToken = Rn(t, e.resumeToken) : e.kt._(X$1.min()) > 0 && (
                // TODO(wuandy): Consider removing above check because it is most likely true.
                // Right now, many tests depend on this behaviour though (leaving min() out
                // of serialization).
                n.readTime = Cn(t, e.kt.j())), n;
            }(this.Qt, t);
            var n = function(t, e) {
                var n = function(t, e) {
                    switch (e) {
                      case 0 /* Listen */ :
                        return null;

                      case 1 /* ExistenceFilterMismatch */ :
                        return "existence-filter-mismatch";

                      case 2 /* LimboResolution */ :
                        return "limbo-document";

                      default:
                        return x$1();
                    }
                }(0, e.Ot);
                return null == n ? null : {
                    "goog-listen-tags": n
                };
            }(this.Qt, t);
            n && (e.labels = n), this.th(e);
        }, 
        /**
         * Unregisters interest in the results of the target associated with the
         * given targetId.
         */
        e.prototype.hh = function(t) {
            var e = {};
            e.database = Qn(this.Qt), e.removeTarget = t, this.th(e);
        }, e;
    }(Yo), Ko = /** @class */ function(t) {
        function e(e, n, r, i, o) {
            var u = this;
            return (u = t.call(this, e, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , n, r, o) || this).Qt = i, 
            u.lh = !1, u;
        }
        return __extends$1d(e, t), Object.defineProperty(e.prototype, "_h", {
            /**
             * Tracks whether or not a handshake has been successfully exchanged and
             * the stream is ready to accept mutations.
             */
            get: function() {
                return this.lh;
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Override of PersistentStream.start
        e.prototype.start = function() {
            this.lh = !1, this.lastStreamToken = void 0, t.prototype.start.call(this);
        }, e.prototype.nh = function() {
            this.lh && this.fh([]);
        }, e.prototype.oh = function(t) {
            return this.Qu.Cu("Write", t);
        }, e.prototype.onMessage = function(t) {
            if (
            // Always capture the last stream token.
            k$1(!!t.streamToken), this.lastStreamToken = t.streamToken, this.lh) {
                // A successful first write response means the stream is healthy,
                // Note, that we could consider a successful handshake healthy, however,
                // the write itself might be causing an error we want to back off from.
                this.Gu.reset();
                var e = function(t, e) {
                    return t && t.length > 0 ? (k$1(void 0 !== e), t.map((function(t) {
                        return function(t, e) {
                            // NOTE: Deletes don't have an updateTime.
                            var n = t.updateTime ? Mn(t.updateTime) : Mn(e);
                            n.isEqual(X$1.min()) && (
                            // The Firestore Emulator currently returns an update time of 0 for
                            // deletes of non-existing documents (rather than null). This breaks the
                            // test "get deleted doc while offline with source=cache" as NoDocuments
                            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
                            // TODO(#2149): Remove this when Emulator is fixed
                            n = Mn(e));
                            var r = null;
                            return t.transformResults && t.transformResults.length > 0 && (r = t.transformResults), 
                            new Ce(n, r);
                        }(t, e);
                    }))) : [];
                }(t.writeResults, t.commitTime), n = Mn(t.commitTime);
                return this.listener.dh(n, e);
            }
            // The first response is always the handshake response
                    return k$1(!t.writeResults || 0 === t.writeResults.length), this.lh = !0, 
            this.listener.wh();
        }, 
        /**
         * Sends an initial streamToken to the server, performing the handshake
         * required to make the StreamingWrite RPC work. Subsequent
         * calls should wait until onHandshakeComplete was called.
         */
        e.prototype.Eh = function() {
            // TODO(dimond): Support stream resumption. We intentionally do not set the
            // stream token on the handshake, ignoring any stream token we might have.
            var t = {};
            t.database = Qn(this.Qt), this.th(t);
        }, 
        /** Sends a group of mutations to the Firestore backend to apply. */ e.prototype.fh = function(t) {
            var e = this, n = {
                streamToken: this.lastStreamToken,
                writes: t.map((function(t) {
                    return Xn(e.Qt, t);
                }))
            };
            this.th(n);
        }, e;
    }(Yo), Xo = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this) || this).credentials = e, i.Qu = n, i.Qt = r, i.Th = !1, 
            i;
        }
        return __extends$1d(e, t), e.prototype.Ih = function() {
            if (this.Th) throw new q$1(M$1.FAILED_PRECONDITION, "The client has already been terminated.");
        }, 
        /** Gets an auth token and invokes the provided RPC. */ e.prototype.pu = function(t, e, n) {
            var r = this;
            return this.Ih(), this.credentials.getToken().then((function(i) {
                return r.Qu.pu(t, e, n, i);
            })).catch((function(t) {
                throw t.code === M$1.UNAUTHENTICATED && r.credentials.p(), t;
            }));
        }, 
        /** Gets an auth token and invokes the provided RPC with streamed results. */ e.prototype.Du = function(t, e, n) {
            var r = this;
            return this.Ih(), this.credentials.getToken().then((function(i) {
                return r.Qu.Du(t, e, n, i);
            })).catch((function(t) {
                throw t.code === M$1.UNAUTHENTICATED && r.credentials.p(), t;
            }));
        }, e.prototype.terminate = function() {
            this.Th = !1;
        }, e;
    }((function() {})), Wo = /** @class */ function() {
        function t(t, e) {
            this._s = t, this.fa = e, 
            /** The current OnlineState. */
            this.state = "Unknown" /* Unknown */ , 
            /**
                 * A count of consecutive failures to open the stream. If it reaches the
                 * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
                 * Offline.
                 */
            this.mh = 0, 
            /**
                 * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
                 * transition from OnlineState.Unknown to OnlineState.Offline without waiting
                 * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
                 */
            this.Ah = null, 
            /**
                 * Whether the client should log a warning message if it fails to connect to
                 * the backend (initially true, cleared after a successful stream, or if we've
                 * logged the message already).
                 */
            this.Rh = !0
            /**
         * Called by RemoteStore when a watch stream is started (including on each
         * backoff attempt).
         *
         * If this is the first attempt, it sets the OnlineState to Unknown and starts
         * the onlineStateTimer.
         */;
        }
        return t.prototype.Ph = function() {
            var t = this;
            0 === this.mh && (this.yh("Unknown" /* Unknown */), this.Ah = this._s.Tr("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (function() {
                return t.Ah = null, t.gh("Backend didn't respond within 10 seconds."), t.yh("Offline" /* Offline */), 
                Promise.resolve();
            })));
        }, 
        /**
         * Updates our OnlineState as appropriate after the watch stream reports a
         * failure. The first failure moves us to the 'Unknown' state. We then may
         * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
         * actually transition to the 'Offline' state.
         */
        t.prototype.Vh = function(t) {
            "Online" /* Online */ === this.state ? this.yh("Unknown" /* Unknown */) : (this.mh++, 
            this.mh >= 1 && (this.ph(), this.gh("Connection failed 1 times. Most recent error: " + t.toString()), 
            this.yh("Offline" /* Offline */)));
        }, 
        /**
         * Explicitly sets the OnlineState to the specified state.
         *
         * Note that this resets our timers / failure counters, etc. used by our
         * Offline heuristics, so must not be used in place of
         * handleWatchStreamStart() and handleWatchStreamFailure().
         */
        t.prototype.set = function(t) {
            this.ph(), this.mh = 0, "Online" /* Online */ === t && (
            // We've connected to watch at least once. Don't warn the developer
            // about being offline going forward.
            this.Rh = !1), this.yh(t);
        }, t.prototype.yh = function(t) {
            t !== this.state && (this.state = t, this.fa(t));
        }, t.prototype.gh = function(t) {
            var e = "Could not reach Cloud Firestore backend. " + t + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
            this.Rh ? (A$1(e), this.Rh = !1) : N$1("OnlineStateTracker", e);
        }, t.prototype.ph = function() {
            null !== this.Ah && (this.Ah.cancel(), this.Ah = null);
        }, t;
    }(), Zo = function(
    /**
         * The local store, used to fill the write pipeline with outbound mutations.
         */
    t, 
    /** The client-side proxy for interacting with the backend. */
    e, n, r, i) {
        var o = this;
        this.bh = t, this.Sh = e, this._s = n, this.Dh = {}, 
        /**
                 * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
                 * LocalStore via fillWritePipeline() and have or will send to the write
                 * stream.
                 *
                 * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
                 * restart the write stream. When the stream is established the writes in the
                 * pipeline will be sent in order.
                 *
                 * Writes remain in writePipeline until they are acknowledged by the backend
                 * and thus will automatically be re-sent if the stream is interrupted /
                 * restarted before they're acknowledged.
                 *
                 * Write responses from the backend are linked to their originating request
                 * purely based on order, and so we can just shift() writes from the front of
                 * the writePipeline as we receive responses.
                 */
        this.Ch = [], 
        /**
                 * A mapping of watched targets that the client cares about tracking and the
                 * user has explicitly called a 'listen' for this target.
                 *
                 * These targets may or may not have been sent to or acknowledged by the
                 * server. On re-establishing the listen stream, these targets should be sent
                 * to the server. The targets removed with unlistens are removed eagerly
                 * without waiting for confirmation from the listen stream.
                 */
        this.xh = new Map, 
        /**
                 * A set of reasons for why the RemoteStore may be offline. If empty, the
                 * RemoteStore may start its network connections.
                 */
        this.Nh = new Set, 
        /**
                 * Event handlers that get called when the network is disabled or enabled.
                 *
                 * PORTING NOTE: These functions are used on the Web client to create the
                 * underlying streams (to support tree-shakeable streams). On Android and iOS,
                 * the streams are created during construction of RemoteStore.
                 */
        this.Fh = [], this.Oh = i, this.Oh.ou((function(t) {
            n.Ps((function() {
                return __awaiter(o, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            return uu(this) ? (N$1("RemoteStore", "Restarting streams for network reachability change."), 
                            [ 4 /*yield*/ , function(t) {
                                return __awaiter(this, void 0, void 0, (function() {
                                    var e;
                                    return __generator(this, (function(n) {
                                        switch (n.label) {
                                          case 0:
                                            return (e = O$1(t)).Nh.add(4 /* ConnectivityChange */), [ 4 /*yield*/ , $o(e) ];

                                          case 1:
                                            return n.sent(), e.kh.set("Unknown" /* Unknown */), e.Nh.delete(4 /* ConnectivityChange */), 
                                            [ 4 /*yield*/ , Jo(e) ];

                                          case 2:
                                            return n.sent(), [ 2 /*return*/ ];
                                        }
                                    }));
                                }));
                            }(this) ]) : [ 3 /*break*/ , 2 ];

                          case 1:
                            t.sent(), t.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        })), this.kh = new Wo(n, r);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A PersistentStream is an abstract base class that represents a streaming RPC
     * to the Firestore backend. It's built on top of the connections own support
     * for streaming RPCs, and adds several critical features for our clients:
     *
     *   - Exponential backoff on failure
     *   - Authentication via CredentialsProvider
     *   - Dispatching all callbacks into the shared worker queue
     *   - Closing idle streams after 60 seconds of inactivity
     *
     * Subclasses of PersistentStream implement serialization of models to and
     * from the JSON representation of the protocol buffers for a specific
     * streaming RPC.
     *
     * ## Starting and Stopping
     *
     * Streaming RPCs are stateful and need to be start()ed before messages can
     * be sent and received. The PersistentStream will call the onOpen() function
     * of the listener once the stream is ready to accept requests.
     *
     * Should a start() fail, PersistentStream will call the registered onClose()
     * listener with a FirestoreError indicating what went wrong.
     *
     * A PersistentStream can be started and stopped repeatedly.
     *
     * Generic types:
     *  SendType: The type of the outgoing message of the underlying
     *    connection stream
     *  ReceiveType: The type of the incoming message of the underlying
     *    connection stream
     *  ListenerType: The type of the listener that will be used for callbacks
     */ function Jo(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    if (!uu(t)) return [ 3 /*break*/ , 4 ];
                    e = 0, n = t.Fh, r.label = 1;

                  case 1:
                    return e < n.length ? [ 4 /*yield*/ , (0, n[e])(/* enabled= */ !0) ] : [ 3 /*break*/ , 4 ];

                  case 2:
                    r.sent(), r.label = 3;

                  case 3:
                    return e++, [ 3 /*break*/ , 1 ];

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Temporarily disables the network. The network can be re-enabled using
     * enableNetwork().
     */ function $o(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    e = 0, n = t.Fh, r.label = 1;

                  case 1:
                    return e < n.length ? [ 4 /*yield*/ , (0, n[e])(/* enabled= */ !1) ] : [ 3 /*break*/ , 4 ];

                  case 2:
                    r.sent(), r.label = 3;

                  case 3:
                    return e++, [ 3 /*break*/ , 1 ];

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Starts new listen for the given target. Uses resume token if provided. It
     * is a no-op if the target of given `TargetData` is already being listened to.
     */ function tu(t, e) {
        var n = O$1(t);
        n.xh.has(e.targetId) || (
        // Mark this as something the client is currently listening for.
        n.xh.set(e.targetId, e), ou(n) ? 
        // The listen will be sent in onWatchStreamOpen
        iu(n) : _u(n).Hu() && nu(n, e));
    }

    /**
     * Removes the listen from server. It is a no-op if the given target id is
     * not being listened to.
     */ function eu(t, e) {
        var n = O$1(t), r = _u(n);
        n.xh.delete(e), r.Hu() && ru(n, e), 0 === n.xh.size && (r.Hu() ? r.Xu() : uu(n) && 
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        n.kh.set("Unknown" /* Unknown */));
    }

    /**
     * We need to increment the the expected number of pending responses we're due
     * from watch so we wait for the ack to process any messages from this target.
     */ function nu(t, e) {
        t.Mh.on(e.targetId), _u(t).uh(e)
        /**
     * We need to increment the expected number of pending responses we're due
     * from watch so we wait for the removal on the server before we process any
     * messages from this target.
     */;
    }

    function ru(t, e) {
        t.Mh.on(e), _u(t).hh(e);
    }

    function iu(t) {
        t.Mh = new xn({
            vn: function(e) {
                return t.Dh.vn(e);
            },
            Sn: function(e) {
                return t.xh.get(e) || null;
            }
        }), _u(t).start(), t.kh.Ph()
        /**
     * Returns whether the watch stream should be started because it's necessary
     * and has not yet been started.
     */;
    }

    function ou(t) {
        return uu(t) && !_u(t).zu() && t.xh.size > 0;
    }

    function uu(t) {
        return 0 === O$1(t).Nh.size;
    }

    function su(t) {
        t.Mh = void 0;
    }

    function au(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                return t.xh.forEach((function(e, n) {
                    nu(t, e);
                })), [ 2 /*return*/ ];
            }));
        }));
    }

    function cu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(n) {
                return su(t), 
                // If we still need the watch stream, retry the connection.
                ou(t) ? (t.kh.Vh(e), iu(t)) : 
                // No need to restart watch stream because there are no active targets.
                // The online state is set to unknown because there is no active attempt
                // at establishing a connection
                t.kh.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
            }));
        }));
    }

    function hu(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i, o;
            return __generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    if (t.kh.set("Online" /* Online */), !(e instanceof Sn && 2 /* Removed */ === e.state && e.cause)) 
                    // Mark the client as online since we got a message from the server
                    return [ 3 /*break*/ , 6 ];
                    u.label = 1;

                  case 1:
                    return u.trys.push([ 1, 3, , 5 ]), [ 4 /*yield*/ , 
                    /** Handles an error on a target */
                    function(t, e) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var n, r, i, o;
                            return __generator(this, (function(u) {
                                switch (u.label) {
                                  case 0:
                                    n = e.cause, r = 0, i = e.targetIds, u.label = 1;

                                  case 1:
                                    return r < i.length ? (o = i[r], t.xh.has(o) ? [ 4 /*yield*/ , t.Dh.Lh(o, n) ] : [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 5 ];

                                  case 2:
                                    u.sent(), t.xh.delete(o), t.Mh.removeTarget(o), u.label = 3;

                                  case 3:
                                    u.label = 4;

                                  case 4:
                                    return r++, [ 3 /*break*/ , 1 ];

                                  case 5:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    }(t, e) ];

                  case 2:
                    return u.sent(), [ 3 /*break*/ , 5 ];

                  case 3:
                    return r = u.sent(), N$1("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), r), 
                    [ 4 /*yield*/ , fu(t, r) ];

                  case 4:
                    return u.sent(), [ 3 /*break*/ , 5 ];

                  case 5:
                    return [ 3 /*break*/ , 13 ];

                  case 6:
                    if (e instanceof Nn ? t.Mh.dn(e) : e instanceof An ? t.Mh.Pn(e) : t.Mh.Tn(e), n.isEqual(X$1.min())) return [ 3 /*break*/ , 13 ];
                    u.label = 7;

                  case 7:
                    return u.trys.push([ 7, 11, , 13 ]), [ 4 /*yield*/ , io(t.bh) ];

                  case 8:
                    return i = u.sent(), n._(i) >= 0 ? [ 4 /*yield*/ , 
                    /**
                     * Takes a batch of changes from the Datastore, repackages them as a
                     * RemoteEvent, and passes that on to the listener, which is typically the
                     * SyncEngine.
                     */
                    function(t, e) {
                        var n = t.Mh.Vn(e);
                        // Update in-memory resume tokens. LocalStore will update the
                        // persistent view of these when applying the completed RemoteEvent.
                                            return n.Fe.forEach((function(n, r) {
                            if (n.resumeToken.l() > 0) {
                                var i = t.xh.get(r);
                                // A watched target might have been removed already.
                                                            i && t.xh.set(r, i.Lt(n.resumeToken, e));
                            }
                        })), 
                        // Re-establish listens for the targets that have been invalidated by
                        // existence filter mismatches.
                        n.Oe.forEach((function(e) {
                            var n = t.xh.get(e);
                            if (n) {
                                // Clear the resume token for the target, since we're in a known mismatch
                                // state.
                                t.xh.set(e, n.Lt(U$1.T, n.kt)), 
                                // Cause a hard reset by unwatching and rewatching immediately, but
                                // deliberately don't send a resume token so that we get a full update.
                                ru(t, e);
                                // Mark the target we send as being on behalf of an existence filter
                                // mismatch, but don't actually retain that in listenTargets. This ensures
                                // that we flag the first re-listen this way without impacting future
                                // listens of this target (that might happen e.g. on reconnect).
                                var r = new ge(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                                nu(t, r);
                            }
                        })), t.Dh.$h(n);
                    }(t, n) ] : [ 3 /*break*/ , 10 ];

                    // We have received a target change with a global snapshot if the snapshot
                    // version is not equal to SnapshotVersion.min().
                                  case 9:
                    // We have received a target change with a global snapshot if the snapshot
                    // version is not equal to SnapshotVersion.min().
                    u.sent(), u.label = 10;

                  case 10:
                    return [ 3 /*break*/ , 13 ];

                  case 11:
                    return N$1("RemoteStore", "Failed to raise snapshot:", o = u.sent()), [ 4 /*yield*/ , fu(t, o) ];

                  case 12:
                    return u.sent(), [ 3 /*break*/ , 13 ];

                  case 13:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Recovery logic for IndexedDB errors that takes the network offline until
     * `op` succeeds. Retries are scheduled with backoff using
     * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
     * validated via a generic operation.
     *
     * The returned Promise is resolved once the network is disabled and before
     * any retry attempt.
     */ function fu(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r = this;
            return __generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    if (!mr(e)) throw e;
                    // Disable network and raise offline snapshots
                    return t.Nh.add(1 /* IndexedDbFailed */), [ 4 /*yield*/ , $o(t) ];

                  case 1:
                    // Disable network and raise offline snapshots
                    return i.sent(), t.kh.set("Offline" /* Offline */), n || (
                    // Use a simple read operation to determine if IndexedDB recovered.
                    // Ideally, we would expose a health check directly on SimpleDb, but
                    // RemoteStore only has access to persistence through LocalStore.
                    n = function() {
                        return io(t.bh);
                    }), 
                    // Probe IndexedDB periodically and re-enable network
                    t._s.po((function() {
                        return __awaiter(r, void 0, void 0, (function() {
                            return __generator(this, (function(e) {
                                switch (e.label) {
                                  case 0:
                                    return N$1("RemoteStore", "Retrying IndexedDB access"), [ 4 /*yield*/ , n() ];

                                  case 1:
                                    return e.sent(), t.Nh.delete(1 /* IndexedDbFailed */), [ 4 /*yield*/ , Jo(t) ];

                                  case 2:
                                    return e.sent(), [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    })), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Executes `op`. If `op` fails, takes the network offline until `op`
     * succeeds. Returns after the first attempt.
     */ function lu(t, e) {
        return e().catch((function(n) {
            return fu(t, n, e);
        }));
    }

    function pu(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n, r, i, o;
            return __generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    e = O$1(t), n = Iu(e), r = e.Ch.length > 0 ? e.Ch[e.Ch.length - 1].batchId : -1, u.label = 1;

                  case 1:
                    if (!
                    /**
     * Returns true if we can add to the write pipeline (i.e. the network is
     * enabled and the write pipeline is not full).
     */
                    function(t) {
                        return uu(t) && t.Ch.length < 10;
                    }
                    /**
     * Queues additional writes to be sent to the write stream, sending them
     * immediately if the write stream is established.
     */ (e)) return [ 3 /*break*/ , 7 ];
                    u.label = 2;

                  case 2:
                    return u.trys.push([ 2, 4, , 6 ]), [ 4 /*yield*/ , so(e.bh, r) ];

                  case 3:
                    return null === (i = u.sent()) ? (0 === e.Ch.length && n.Xu(), [ 3 /*break*/ , 7 ]) : (r = i.batchId, 
                    function(t, e) {
                        t.Ch.push(e);
                        var n = Iu(t);
                        n.Hu() && n._h && n.fh(e.mutations);
                    }(e, i), [ 3 /*break*/ , 6 ]);

                  case 4:
                    return o = u.sent(), [ 4 /*yield*/ , fu(e, o) ];

                  case 5:
                    return u.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 3 /*break*/ , 1 ];

                  case 7:
                    return du(e) && vu(e), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function du(t) {
        return uu(t) && !Iu(t).zu() && t.Ch.length > 0;
    }

    function vu(t) {
        Iu(t).start();
    }

    function yu(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                return Iu(t).Eh(), [ 2 /*return*/ ];
            }));
        }));
    }

    function mu(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n, r, i;
            return __generator(this, (function(o) {
                // Send the write pipeline now that the stream is established.
                for (e = Iu(t), n = 0, r = t.Ch; n < r.length; n++) i = r[n], e.fh(i.mutations);
                return [ 2 /*return*/ ];
            }));
        }));
    }

    function gu(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i;
            return __generator(this, (function(o) {
                switch (o.label) {
                  case 0:
                    return r = t.Ch.shift(), i = Wr.from(r, e, n), [ 4 /*yield*/ , lu(t, (function() {
                        return t.Dh.Bh(i);
                    })) ];

                  case 1:
                    // It's possible that with the completion of this mutation another
                    // slot has freed up.
                    return o.sent(), [ 4 /*yield*/ , pu(t) ];

                  case 2:
                    // It's possible that with the completion of this mutation another
                    // slot has freed up.
                    return o.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function wu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return e && Iu(t)._h ? [ 4 /*yield*/ , function(t, e) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var n, r;
                            return __generator(this, (function(i) {
                                switch (i.label) {
                                  case 0:
                                    return en(r = e.code) && r !== M$1.ABORTED ? (n = t.Ch.shift(), 
                                    // In this case it's also unlikely that the server itself is melting
                                    // down -- this was just a bad request so inhibit backoff on the next
                                    // restart.
                                    Iu(t).Yu(), [ 4 /*yield*/ , lu(t, (function() {
                                        return t.Dh.qh(n.batchId, e);
                                    })) ]) : [ 3 /*break*/ , 3 ];

                                  case 1:
                                    // It's possible that with the completion of this mutation
                                    // another slot has freed up.
                                    return i.sent(), [ 4 /*yield*/ , pu(t) ];

                                  case 2:
                                    // In this case it's also unlikely that the server itself is melting
                                    // down -- this was just a bad request so inhibit backoff on the next
                                    // restart.
                                    // It's possible that with the completion of this mutation
                                    // another slot has freed up.
                                    i.sent(), i.label = 3;

                                  case 3:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    }(t, e) ] : [ 3 /*break*/ , 2 ];

                    // This error affects the actual write.
                                  case 1:
                    // This error affects the actual write.
                    n.sent(), n.label = 2;

                  case 2:
                    // If the write stream closed after the write handshake completes, a write
                    // operation failed and we fail the pending operation.
                    // The write stream might have been started by refilling the write
                    // pipeline for failed writes
                    return du(t) && vu(t), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Toggles the network state when the client gains or loses its primary lease.
     */ function bu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n;
            return __generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    return n = O$1(t), e ? (n.Nh.delete(2 /* IsSecondary */), [ 4 /*yield*/ , Jo(n) ]) : [ 3 /*break*/ , 2 ];

                  case 1:
                    return i.sent(), [ 3 /*break*/ , 5 ];

                  case 2:
                    return (e) ? [ 3 /*break*/ , 4 ] : (n.Nh.add(2 /* IsSecondary */), [ 4 /*yield*/ , $o(n) ]);

                  case 3:
                    i.sent(), n.kh.set("Unknown" /* Unknown */), i.label = 4;

                  case 4:
                    i.label = 5;

                  case 5:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * If not yet initialized, registers the WatchStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function _u(t) {
        var e = this;
        return t.Uh || (
        // Create stream (but note that it is not started yet).
        t.Uh = function(t, e, n) {
            var r = O$1(t);
            return r.Ih(), new Ho(e, r.Qu, r.credentials, r.Qt, n);
        }(t.Sh, t._s, {
            wu: au.bind(null, t),
            Tu: cu.bind(null, t),
            ah: hu.bind(null, t)
        }), t.Fh.push((function(n) {
            return __awaiter(e, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return n ? (t.Uh.Yu(), ou(t) ? iu(t) : t.kh.set("Unknown" /* Unknown */), [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 1 ];

                      case 1:
                        return [ 4 /*yield*/ , t.Uh.stop() ];

                      case 2:
                        e.sent(), su(t), e.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }))), t.Uh
        /**
     * If not yet initialized, registers the WriteStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */;
    }

    function Iu(t) {
        var e = this;
        return t.Qh || (
        // Create stream (but note that it is not started yet).
        t.Qh = function(t, e, n) {
            var r = O$1(t);
            return r.Ih(), new Ko(e, r.Qu, r.credentials, r.Qt, n);
        }(t.Sh, t._s, {
            wu: yu.bind(null, t),
            Tu: wu.bind(null, t),
            wh: mu.bind(null, t),
            dh: gu.bind(null, t)
        }), t.Fh.push((function(n) {
            return __awaiter(e, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return n ? (t.Qh.Yu(), [ 4 /*yield*/ , pu(t) ]) : [ 3 /*break*/ , 2 ];

                      case 1:
                        // This will start the write stream if necessary.
                        return e.sent(), [ 3 /*break*/ , 4 ];

                      case 2:
                        return [ 4 /*yield*/ , t.Qh.stop() ];

                      case 3:
                        e.sent(), t.Ch.length > 0 && (N$1("RemoteStore", "Stopping write stream with " + t.Ch.length + " pending writes"), 
                        t.Ch = []), e.label = 4;

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }))), t.Qh
        /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Holds the listeners and the last received ViewSnapshot for a query being
     * tracked by EventManager.
     */;
    }

    var Eu = function() {
        this.Kh = void 0, this.listeners = [];
    }, Tu = function() {
        this.queries = new gi((function(t) {
            return pe(t);
        }), le), this.onlineState = "Unknown" /* Unknown */ , this.Wh = new Set;
    };

    function Nu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i, o, u, s, a;
            return __generator(this, (function(c) {
                switch (c.label) {
                  case 0:
                    if (n = O$1(t), r = e.query, i = !1, (o = n.queries.get(r)) || (i = !0, o = new Eu), 
                    !i) return [ 3 /*break*/ , 4 ];
                    c.label = 1;

                  case 1:
                    return c.trys.push([ 1, 3, , 4 ]), u = o, [ 4 /*yield*/ , n.jh(r) ];

                  case 2:
                    return u.Kh = c.sent(), [ 3 /*break*/ , 4 ];

                  case 3:
                    return s = c.sent(), a = Er(s, "Initialization of query '" + de(e.query) + "' failed"), 
                    [ 2 /*return*/ , void e.onError(a) ];

                  case 4:
                    return n.queries.set(r, o), o.listeners.push(e), 
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    e.Gh(n.onlineState), o.Kh && e.zh(o.Kh) && xu(n), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Au(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i, o, u;
            return __generator(this, (function(s) {
                return n = O$1(t), r = e.query, i = !1, (o = n.queries.get(r)) && (u = o.listeners.indexOf(e)) >= 0 && (o.listeners.splice(u, 1), 
                i = 0 === o.listeners.length), i ? [ 2 /*return*/ , (n.queries.delete(r), n.Hh(r)) ] : [ 2 /*return*/ ];
            }));
        }));
    }

    function Su(t, e) {
        for (var n = O$1(t), r = !1, i = 0, o = e; i < o.length; i++) {
            var u = o[i], s = u.query, a = n.queries.get(s);
            if (a) {
                for (var c = 0, h = a.listeners; c < h.length; c++) {
                    h[c].zh(u) && (r = !0);
                }
                a.Kh = u;
            }
        }
        r && xu(n);
    }

    function Du(t, e, n) {
        var r = O$1(t), i = r.queries.get(e);
        if (i) for (var o = 0, u = i.listeners; o < u.length; o++) {
            u[o].onError(n);
        }
        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
        // after an error.
            r.queries.delete(e);
    }

    // Call all global snapshot listeners that have been set.
    function xu(t) {
        t.Wh.forEach((function(t) {
            t.next();
        }));
    }

    /**
     * QueryListener takes a series of internal view snapshots and determines
     * when to raise the event.
     *
     * It uses an Observer to dispatch events.
     */ var ku = /** @class */ function() {
        function t(t, e, n) {
            this.query = t, this.Jh = e, 
            /**
                 * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
                 * observer. This flag is set to true once we've actually raised an event.
                 */
            this.Yh = !1, this.Xh = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {}
            /**
         * Applies the new ViewSnapshot to this listener, raising a user-facing event
         * if applicable (depending on what changed, whether the user has opted into
         * metadata-only changes, etc.). Returns true if a user-facing event was
         * indeed raised.
         */;
        }
        return t.prototype.zh = function(t) {
            if (!this.options.includeMetadataChanges) {
                for (
                // Remove the metadata only changes.
                var e = [], n = 0, r = t.docChanges; n < r.length; n++) {
                    var i = r[n];
                    3 /* Metadata */ !== i.type && e.push(i);
                }
                t = new In(t.query, t.docs, t.Se, e, t.De, t.fromCache, t.Ce, 
                /* excludesMetadataChanges= */ !0);
            }
            var o = !1;
            return this.Yh ? this.Zh(t) && (this.Jh.next(t), o = !0) : this.tl(t, this.onlineState) && (this.el(t), 
            o = !0), this.Xh = t, o;
        }, t.prototype.onError = function(t) {
            this.Jh.error(t);
        }, 
        /** Returns whether a snapshot was raised. */ t.prototype.Gh = function(t) {
            this.onlineState = t;
            var e = !1;
            return this.Xh && !this.Yh && this.tl(this.Xh, t) && (this.el(this.Xh), e = !0), 
            e;
        }, t.prototype.tl = function(t, e) {
            // Always raise the first event when we're synced
            if (!t.fromCache) return !0;
            // NOTE: We consider OnlineState.Unknown as online (it should become Offline
            // or Online if we wait long enough).
                    var n = "Offline" /* Offline */ !== e;
            // Don't raise the event if we're online, aren't synced yet (checked
            // above) and are waiting for a sync.
                    return !(this.options.nl && n || t.docs.et() && "Offline" /* Offline */ !== e);
            // Raise data from cache if we have any documents or we are offline
            }, t.prototype.Zh = function(t) {
            // We don't need to handle includeDocumentMetadataChanges here because
            // the Metadata only changes have already been stripped out if needed.
            // At this point the only changes we will see are the ones we should
            // propagate.
            if (t.docChanges.length > 0) return !0;
            var e = this.Xh && this.Xh.hasPendingWrites !== t.hasPendingWrites;
            return !(!t.Ce && !e) && !0 === this.options.includeMetadataChanges;
            // Generally we should have hit one of the cases above, but it's possible
            // to get here if there were only metadata docChanges and they got
            // stripped out.
            }, t.prototype.el = function(t) {
            t = In.Ne(t.query, t.docs, t.De, t.fromCache), this.Yh = !0, this.Jh.next(t);
        }, t;
    }(), Ou = /** @class */ function() {
        function t(t, 
        // How many bytes this element takes to store in the bundle.
        e) {
            this.payload = t, this.byteLength = e;
        }
        return t.prototype.sl = function() {
            return "metadata" in this.payload;
        }, t;
    }(), Pu = /** @class */ function() {
        function t(t) {
            this.Qt = t;
        }
        return t.prototype.Pc = function(t) {
            return zn(this.Qt, t);
        }, 
        /**
         * Converts a BundleDocument to a MaybeDocument.
         */
        t.prototype.yc = function(t) {
            return t.metadata.exists ? Kn(this.Qt, t.document, !1) : new Lt(this.Pc(t.metadata.name), this.gc(t.metadata.readTime));
        }, t.prototype.gc = function(t) {
            return Mn(t);
        }, t;
    }(), Lu = /** @class */ function() {
        function t(t, e, n) {
            this.il = t, this.bh = e, this.Qt = n, 
            /** Batched queries to be saved into storage */
            this.queries = [], 
            /** Batched documents to be saved into storage */
            this.documents = [], this.progress = Vu(t)
            /**
         * Adds an element from the bundle to the loader.
         *
         * Returns a new progress if adding the element leads to a new progress,
         * otherwise returns null.
         */;
        }
        return t.prototype.rl = function(t) {
            this.progress.bytesLoaded += t.byteLength;
            var e = this.progress.documentsLoaded;
            return t.payload.namedQuery ? this.queries.push(t.payload.namedQuery) : t.payload.documentMetadata ? (this.documents.push({
                metadata: t.payload.documentMetadata
            }), t.payload.documentMetadata.exists || ++e) : t.payload.document && (this.documents[this.documents.length - 1].document = t.payload.document, 
            ++e), e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, 
            Object.assign({}, this.progress)) : null;
        }, t.prototype.ol = function(t) {
            for (var e = new Map, n = new Pu(this.Qt), r = 0, i = t; r < i.length; r++) {
                var o = i[r];
                if (o.metadata.queries) for (var u = n.Pc(o.metadata.name), s = 0, a = o.metadata.queries; s < a.length; s++) {
                    var c = a[s], h = (e.get(c) || mn()).add(u);
                    e.set(c, h);
                }
            }
            return e;
        }, 
        /**
         * Update the progress to 'Success' and return the updated progress.
         */
        t.prototype.complete = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, n, r, i;
                return __generator(this, (function(o) {
                    switch (o.label) {
                      case 0:
                        return [ 4 /*yield*/ , vo(this.bh, new Pu(this.Qt), this.documents, this.il.id) ];

                      case 1:
                        t = o.sent(), e = this.ol(this.documents), n = 0, r = this.queries, o.label = 2;

                      case 2:
                        return n < r.length ? (i = r[n], [ 4 /*yield*/ , yo(this.bh, i, e.get(i.name)) ]) : [ 3 /*break*/ , 5 ];

                      case 3:
                        o.sent(), o.label = 4;

                      case 4:
                        return n++, [ 3 /*break*/ , 2 ];

                      case 5:
                        return [ 2 /*return*/ , (this.progress.taskState = "Success", new Wi(Object.assign({}, this.progress), t)) ];
                    }
                }));
            }));
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A complete element in the bundle stream, together with the byte length it
     * occupies in the stream.
     */
    /**
     * Returns a `LoadBundleTaskProgress` representing the initial progress of
     * loading a bundle.
     */
    function Vu(t) {
        return {
            taskState: "Running",
            documentsLoaded: 0,
            bytesLoaded: 0,
            totalDocuments: t.totalDocuments,
            totalBytes: t.totalBytes
        };
    }

    /**
     * Returns a `LoadBundleTaskProgress` representing the progress that the loading
     * has succeeded.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Cu = function(t) {
        this.key = t;
    }, Ru = function(t) {
        this.key = t;
    }, Uu = /** @class */ function() {
        function t(t, 
        /** Documents included in the remote target */
        e) {
            this.query = t, this.cl = e, this.al = null, 
            /**
                 * A flag whether the view is current with the backend. A view is considered
                 * current after it has seen the current flag from the backend and did not
                 * lose consistency within the watch stream (e.g. because of an existence
                 * filter mismatch).
                 */
            this.Be = !1, 
            /** Documents in the view but not in the remote target */
            this.ul = mn(), 
            /** Document Keys that have local changes */
            this.De = mn(), this.hl = ye(t), this.ll = new bn(this.hl);
        }
        return Object.defineProperty(t.prototype, "_l", {
            /**
             * The set of remote documents that the server has told us belongs to the target associated with
             * this view.
             */
            get: function() {
                return this.cl;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Iterates over a set of doc changes, applies the query limit, and computes
         * what the new results should be, what the changes were, and whether we may
         * need to go back to the local cache for more results. Does not make any
         * changes to the view.
         * @param docChanges - The doc changes to apply to this view.
         * @param previousChanges - If this is being called with a refill, then start
         *        with this set of docs and changes instead of the current view.
         * @returns a new set of docs, changes, and refill flag.
         */
        t.prototype.fl = function(t, e) {
            var n = this, r = e ? e.dl : new _n, i = e ? e.ll : this.ll, o = e ? e.De : this.De, u = i, s = !1, a = ie(this.query) && i.size === this.query.limit ? i.last() : null, c = oe(this.query) && i.size === this.query.limit ? i.first() : null;
            // Drop documents out to meet limit/limitToLast requirement.
            if (t.Xt((function(t, e) {
                var h = i.get(t), f = e instanceof Pt ? e : null;
                f && (f = ve(n.query, f) ? f : null);
                var l = !!h && n.De.has(h.key), p = !!f && (f.Vt || 
                // We only consider committed mutations for documents that were
                // mutated during the lifetime of the view.
                n.De.has(f.key) && f.hasCommittedMutations), d = !1;
                // Calculate change
                h && f ? h.data().isEqual(f.data()) ? l !== p && (r.track({
                    type: 3 /* Metadata */ ,
                    doc: f
                }), d = !0) : n.wl(h, f) || (r.track({
                    type: 2 /* Modified */ ,
                    doc: f
                }), d = !0, (a && n.hl(f, a) > 0 || c && n.hl(f, c) < 0) && (
                // This doc moved from inside the limit to outside the limit.
                // That means there may be some other doc in the local cache
                // that should be included instead.
                s = !0)) : !h && f ? (r.track({
                    type: 0 /* Added */ ,
                    doc: f
                }), d = !0) : h && !f && (r.track({
                    type: 1 /* Removed */ ,
                    doc: h
                }), d = !0, (a || c) && (
                // A doc was removed from a full limit query. We'll need to
                // requery from the local cache to see if we know about some other
                // doc that should be in the results.
                s = !0)), d && (f ? (u = u.add(f), o = p ? o.add(t) : o.delete(t)) : (u = u.delete(t), 
                o = o.delete(t)));
            })), ie(this.query) || oe(this.query)) for (;u.size > this.query.limit; ) {
                var h = ie(this.query) ? u.last() : u.first();
                u = u.delete(h.key), o = o.delete(h.key), r.track({
                    type: 1 /* Removed */ ,
                    doc: h
                });
            }
            return {
                ll: u,
                dl: r,
                lc: s,
                De: o
            };
        }, t.prototype.wl = function(t, e) {
            // We suppress the initial change event for documents that were modified as
            // part of a write acknowledgment (e.g. when the value of a server transform
            // is applied) as Watch will send us the same document again.
            // By suppressing the event, we only raise two user visible events (one with
            // `hasPendingWrites` and the final state of the document) instead of three
            // (one with `hasPendingWrites`, the modified document with
            // `hasPendingWrites` and the final state of the document).
            return t.Vt && e.hasCommittedMutations && !e.Vt;
        }, 
        /**
         * Updates the view with the given ViewDocumentChanges and optionally updates
         * limbo docs and sync state from the provided target change.
         * @param docChanges - The set of changes to make to the view's docs.
         * @param updateLimboDocuments - Whether to update limbo documents based on
         *        this change.
         * @param targetChange - A target change to apply for computing limbo docs and
         *        sync state.
         * @returns A new ViewChange with the given docs, changes, and sync state.
         */
        // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
        t.prototype.wi = function(t, e, n) {
            var r = this, i = this.ll;
            this.ll = t.ll, this.De = t.De;
            // Sort changes based on type and query comparator
            var o = t.dl.ve();
            o.sort((function(t, e) {
                return function(t, e) {
                    var n = function(t) {
                        switch (t) {
                          case 0 /* Added */ :
                            return 1;

                          case 2 /* Modified */ :
                          case 3 /* Metadata */ :
                            // A metadata change is converted to a modified change at the public
                            // api layer.  Since we sort by document key and then change type,
                            // metadata and modified changes must be sorted equivalently.
                            return 2;

                          case 1 /* Removed */ :
                            return 0;

                          default:
                            return x$1();
                        }
                    };
                    return n(t) - n(e);
                }(t.type, e.type) || r.hl(t.doc, e.doc);
            })), this.El(n);
            var u = e ? this.Tl() : [], s = 0 === this.ul.size && this.Be ? 1 /* Synced */ : 0 /* Local */ , a = s !== this.al;
            return this.al = s, 0 !== o.length || a ? {
                snapshot: new In(this.query, t.ll, i, o, t.De, 0 /* Local */ === s, a, 
                /* excludesMetadataChanges= */ !1),
                Il: u
            } : {
                Il: u
            };
            // no changes
            }, 
        /**
         * Applies an OnlineState change to the view, potentially generating a
         * ViewChange if the view's syncState changes as a result.
         */
        t.prototype.Gh = function(t) {
            return this.Be && "Offline" /* Offline */ === t ? (
            // If we're offline, set `current` to false and then call applyChanges()
            // to refresh our syncState and generate a ViewChange as appropriate. We
            // are guaranteed to get a new TargetChange that sets `current` back to
            // true once the client is back online.
            this.Be = !1, this.wi({
                ll: this.ll,
                dl: new _n,
                De: this.De,
                lc: !1
            }, 
            /* updateLimboDocuments= */ !1)) : {
                Il: []
            };
        }, 
        /**
         * Returns whether the doc for the given key should be in limbo.
         */
        t.prototype.ml = function(t) {
            // If the remote end says it's part of this query, it's not in limbo.
            return !this.cl.has(t) && 
            // The local store doesn't think it's a result, so it shouldn't be in limbo.
            !!this.ll.has(t) && !this.ll.get(t).Vt;
        }, 
        /**
         * Updates syncedDocuments, current, and limbo docs based on the given change.
         * Returns the list of changes to which docs are in limbo.
         */
        t.prototype.El = function(t) {
            var e = this;
            t && (t.qe.forEach((function(t) {
                return e.cl = e.cl.add(t);
            })), t.Ue.forEach((function(t) {})), t.Qe.forEach((function(t) {
                return e.cl = e.cl.delete(t);
            })), this.Be = t.Be);
        }, t.prototype.Tl = function() {
            var t = this;
            // We can only determine limbo documents when we're in-sync with the server.
                    if (!this.Be) return [];
            // TODO(klimt): Do this incrementally so that it's not quadratic when
            // updating many documents.
                    var e = this.ul;
            this.ul = mn(), this.ll.forEach((function(e) {
                t.ml(e.key) && (t.ul = t.ul.add(e.key));
            }));
            // Diff the new limbo docs with the old limbo docs.
            var n = [];
            return e.forEach((function(e) {
                t.ul.has(e) || n.push(new Ru(e));
            })), this.ul.forEach((function(t) {
                e.has(t) || n.push(new Cu(t));
            })), n;
        }, 
        /**
         * Update the in-memory state of the current view with the state read from
         * persistence.
         *
         * We update the query view whenever a client's primary status changes:
         * - When a client transitions from primary to secondary, it can miss
         *   LocalStorage updates and its query views may temporarily not be
         *   synchronized with the state on disk.
         * - For secondary to primary transitions, the client needs to update the list
         *   of `syncedDocuments` since secondary clients update their query views
         *   based purely on synthesized RemoteEvents.
         *
         * @param queryResult.documents - The documents that match the query according
         * to the LocalStore.
         * @param queryResult.remoteKeys - The keys of the documents that match the
         * query according to the backend.
         *
         * @returns The ViewChange that resulted from this synchronization.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Al = function(t) {
            this.cl = t.Rc, this.ul = mn();
            var e = this.fl(t.documents);
            return this.wi(e, /*updateLimboDocuments=*/ !0);
        }, 
        /**
         * Returns a view snapshot as if this query was just listened to. Contains
         * a document add for every existing document and the `fromCache` and
         * `hasPendingWrites` status of the already established view.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Rl = function() {
            return In.Ne(this.query, this.ll, this.De, 0 /* Local */ === this.al);
        }, t;
    }(), Mu = function(
    /**
         * The query itself.
         */
    t, 
    /**
         * The target number created by the client that is used in the watch
         * stream to identify this query.
         */
    e, 
    /**
         * The view is responsible for computing the final merged truth of what
         * docs are in the query. It gets notified of local and remote changes,
         * and applies the query filters and limits to determine the most correct
         * possible results.
         */
    n) {
        this.query = t, this.targetId = e, this.view = n;
    }, qu = function(t) {
        this.key = t, 
        /**
                 * Set to true once we've received a document. This is used in
                 * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
                 * decide whether it needs to manufacture a delete event for the target once
                 * the target is CURRENT.
                 */
        this.Pl = !1;
    }, ju = /** @class */ function() {
        function t(t, e, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        r, i, o) {
            this.bh = t, this.yl = e, this.gl = n, this.Vl = r, this.currentUser = i, this.pl = o, 
            this.bl = {}, this.vl = new gi((function(t) {
                return pe(t);
            }), le), this.Sl = new Map, 
            /**
                 * The keys of documents that are in limbo for which we haven't yet started a
                 * limbo resolution query.
                 */
            this.Dl = [], 
            /**
                 * Keeps track of the target ID for each document that is in limbo with an
                 * active target.
                 */
            this.Cl = new rn(tt.H), 
            /**
                 * Keeps track of the information about an active limbo resolution for each
                 * active target ID that was started for the purpose of limbo resolution.
                 */
            this.xl = new Map, this.Nl = new go, 
            /** Stores user completion handlers, indexed by User and BatchId. */
            this.Fl = {}, 
            /** Stores user callbacks waiting for all pending writes to be acknowledged. */
            this.Ol = new Map, this.kl = Si.$i(), this.onlineState = "Unknown" /* Unknown */ , 
            // The primary state is set to `true` or `false` immediately after Firestore
            // startup. In the interim, a client should only be considered primary if
            // `isPrimary` is true.
            this.Ml = void 0;
        }
        return Object.defineProperty(t.prototype, "Ll", {
            get: function() {
                return !0 === this.Ml;
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }();

    /**
     * Initiates the new listen, resolves promise when listen enqueued to the
     * server. All the subsequent view snapshots or errors are sent to the
     * subscribed handlers. Returns the initial snapshot.
     */
    function Fu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i, o, u, s;
            return __generator(this, (function(a) {
                switch (a.label) {
                  case 0:
                    return n = ys(t), (o = n.vl.get(e)) ? (
                    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
                    // already exists when EventManager calls us for the first time. This
                    // happens when the primary tab is already listening to this query on
                    // behalf of another tab and the user of the primary also starts listening
                    // to the query. EventManager will not have an assigned target ID in this
                    // case and calls `listen` to obtain this ID.
                    r = o.targetId, n.Vl.Oa(r), i = o.view.Rl(), [ 3 /*break*/ , 4 ]) : [ 3 /*break*/ , 1 ];

                  case 1:
                    return [ 4 /*yield*/ , ao(n.bh, he(e)) ];

                  case 2:
                    return u = a.sent(), s = n.Vl.Oa(u.targetId), r = u.targetId, [ 4 /*yield*/ , zu(n, e, r, "current" === s) ];

                  case 3:
                    i = a.sent(), n.Ll && tu(n.yl, u), a.label = 4;

                  case 4:
                    return [ 2 /*return*/ , i ];
                }
            }));
        }));
    }

    /**
     * Registers a view for a previously unknown query and computes its initial
     * snapshot.
     */ function zu(t, e, n, r) {
        return __awaiter(this, void 0, void 0, (function() {
            var i, o, u, s, a, c;
            return __generator(this, (function(h) {
                switch (h.label) {
                  case 0:
                    // PORTING NOTE: On Web only, we inject the code that registers new Limbo
                    // targets based on view changes. This allows us to only depend on Limbo
                    // changes when user code includes queries.
                    return t.$l = function(e, n, r) {
                        return function(t, e, n, r) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var i, o, u;
                                return __generator(this, (function(s) {
                                    switch (s.label) {
                                      case 0:
                                        return i = e.view.fl(n), i.lc ? [ 4 /*yield*/ , ho(t.bh, e.query, 
                                        /* usePreviousResults= */ !1).then((function(t) {
                                            var n = t.documents;
                                            return e.view.fl(n, i);
                                        })) ] : [ 3 /*break*/ , 2 ];

                                      case 1:
                                        // The query has a limit and some docs were removed, so we need
                                        // to re-run the query against the local store to make sure we
                                        // didn't lose any good docs that had been past the limit.
                                        i = s.sent(), s.label = 2;

                                      case 2:
                                        return o = r && r.Fe.get(e.targetId), u = e.view.wi(i, 
                                        /* updateLimboDocuments= */ t.Ll, o), [ 2 /*return*/ , (es(t, e.targetId, u.Il), 
                                        u.snapshot) ];
                                    }
                                }));
                            }));
                        }(t, e, n, r);
                    }, [ 4 /*yield*/ , ho(t.bh, e, 
                    /* usePreviousResults= */ !0) ];

                  case 1:
                    return i = h.sent(), o = new Uu(e, i.Rc), u = o.fl(i.documents), s = Tn.$e(n, r && "Offline" /* Offline */ !== t.onlineState), 
                    a = o.wi(u, 
                    /* updateLimboDocuments= */ t.Ll, s), es(t, n, a.Il), c = new Mu(e, n, o), [ 2 /*return*/ , (t.vl.set(e, c), 
                    t.Sl.has(n) ? t.Sl.get(n).push(e) : t.Sl.set(n, [ e ]), a.snapshot) ];
                }
            }));
        }));
    }

    /** Stops listening to the query. */ function Gu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i;
            return __generator(this, (function(o) {
                switch (o.label) {
                  case 0:
                    return n = O$1(t), r = n.vl.get(e), (i = n.Sl.get(r.targetId)).length > 1 ? [ 2 /*return*/ , (n.Sl.set(r.targetId, i.filter((function(t) {
                        return !le(t, e);
                    }))), void n.vl.delete(e)) ] : n.Ll ? (
                    // We need to remove the local query target first to allow us to verify
                    // whether any other client is still interested in this target.
                    n.Vl.Ma(r.targetId), n.Vl.Da(r.targetId) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , co(n.bh, r.targetId, 
                    /*keepPersistedTargetData=*/ !1).then((function() {
                        n.Vl.$a(r.targetId), eu(n.yl, r.targetId), $u(n, r.targetId);
                    })).catch(mi) ]) : [ 3 /*break*/ , 3 ];

                  case 1:
                    o.sent(), o.label = 2;

                  case 2:
                    return [ 3 /*break*/ , 5 ];

                  case 3:
                    return $u(n, r.targetId), [ 4 /*yield*/ , co(n.bh, r.targetId, 
                    /*keepPersistedTargetData=*/ !0) ];

                  case 4:
                    o.sent(), o.label = 5;

                  case 5:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Initiates the write of local mutation batch which involves adding the
     * writes to the mutation queue, notifying the remote store about new
     * mutations and raising events for any changes this write caused.
     *
     * The promise returned by this call is resolved when the above steps
     * have completed, *not* when the write was acked by the backend. The
     * userCallback is resolved once the write was acked/rejected by the
     * backend (or failed locally for any other reason).
     */ function Bu(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i, o, u;
            return __generator(this, (function(s) {
                switch (s.label) {
                  case 0:
                    r = ms(t), s.label = 1;

                  case 1:
                    return s.trys.push([ 1, 5, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                        var n, r = O$1(t), i = K$1.now(), o = e.reduce((function(t, e) {
                            return t.add(e.key);
                        }), mn());
                        return r.persistence.runTransaction("Locally write mutations", "readwrite", (function(t) {
                            return r.Tc.Xo(t, o).next((function(o) {
                                n = o;
                                for (
                                // For non-idempotent mutations (such as `FieldValue.increment()`),
                                // we record the base state in a separate patch mutation. This is
                                // later used to guarantee consistent values and prevents flicker
                                // even if the backend sends us an update that already includes our
                                // transform.
                                var u = [], s = 0, a = e; s < a.length; s++) {
                                    var c = a[s], h = Fe(c, n.get(c.key));
                                    null != h && 
                                    // NOTE: The base state should only be applied if there's some
                                    // existing document to override, so use a Precondition of
                                    // exists=true
                                    u.push(new Qe(c.key, h, kt(h.proto.mapValue), Re.exists(!0)));
                                }
                                return r.zo.Ri(t, i, u, e);
                            }));
                        })).then((function(t) {
                            var e = t.xs(n);
                            return {
                                batchId: t.batchId,
                                ri: e
                            };
                        }));
                    }(r.bh, e) ];

                  case 2:
                    return i = s.sent(), r.Vl.Ca(i.batchId), function(t, e, n) {
                        var r = t.Fl[t.currentUser.A()];
                        r || (r = new rn(V$1)), r = r.zt(e, n), t.Fl[t.currentUser.A()] = r;
                    }(r, i.batchId, n), [ 4 /*yield*/ , is(r, i.ri) ];

                  case 3:
                    return s.sent(), [ 4 /*yield*/ , pu(r.yl) ];

                  case 4:
                    return s.sent(), [ 3 /*break*/ , 6 ];

                  case 5:
                    return o = s.sent(), u = Er(o, "Failed to persist write"), n.reject(u), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Applies one remote event to the sync engine, notifying any views of the
     * changes, and releasing any pending mutation batches that would become
     * visible because of the snapshot version the remote event contains.
     */ function Qu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r;
            return __generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    n = O$1(t), i.label = 1;

                  case 1:
                    return i.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , oo(n.bh, e) ];

                  case 2:
                    return r = i.sent(), 
                    // Update `receivedDocument` as appropriate for any limbo targets.
                    e.Fe.forEach((function(t, e) {
                        var r = n.xl.get(e);
                        r && (
                        // Since this is a limbo resolution lookup, it's for a single document
                        // and it could be added, modified, or removed, but not a combination.
                        k$1(t.qe.size + t.Ue.size + t.Qe.size <= 1), t.qe.size > 0 ? r.Pl = !0 : t.Ue.size > 0 ? k$1(r.Pl) : t.Qe.size > 0 && (k$1(r.Pl), 
                        r.Pl = !1));
                    })), [ 4 /*yield*/ , is(n, r, e) ];

                  case 3:
                    // Update `receivedDocument` as appropriate for any limbo targets.
                    return i.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , mi(i.sent()) ];

                  case 5:
                    return i.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Applies an OnlineState change to the sync engine and notifies any views of
     * the change.
     */ function Yu(t, e, n) {
        var r = O$1(t);
        // If we are the secondary client, we explicitly ignore the remote store's
        // online state (the local client may go offline, even though the primary
        // tab remains online) and only apply the primary tab's online state from
        // SharedClientState.
            if (r.Ll && 0 /* RemoteStore */ === n || !r.Ll && 1 /* SharedClientState */ === n) {
            var i = [];
            r.vl.forEach((function(t, n) {
                var r = n.view.Gh(e);
                r.snapshot && i.push(r.snapshot);
            })), function(t, e) {
                var n = O$1(t);
                n.onlineState = e;
                var r = !1;
                n.queries.forEach((function(t, n) {
                    for (var i = 0, o = n.listeners; i < o.length; i++) {
                        // Run global snapshot listeners if a consistent snapshot has been emitted.
                        o[i].Gh(e) && (r = !0);
                    }
                })), r && xu(n);
            }(r.gl, e), i.length && r.bl.ah(i), r.onlineState = e, r.Ll && r.Vl.Qa(e);
        }
    }

    /**
     * Rejects the listen for the given targetID. This can be triggered by the
     * backend for any active target.
     *
     * @param syncEngine - The sync engine implementation.
     * @param targetId - The targetID corresponds to one previously initiated by the
     * user as part of TargetData passed to listen() on RemoteStore.
     * @param err - A description of the condition that has forced the rejection.
     * Nearly always this will be an indication that the user is no longer
     * authorized to see the data matching the target.
     */ function Hu(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i, o, u, s, a;
            return __generator(this, (function(c) {
                switch (c.label) {
                  case 0:
                    // PORTING NOTE: Multi-tab only.
                    return (r = O$1(t)).Vl.Ba(e, "rejected", n), i = r.xl.get(e), (o = i && i.key) ? (u = (u = new rn(tt.H)).zt(o, new Lt(o, X$1.min())), 
                    s = mn().add(o), a = new En(X$1.min(), 
                    /* targetChanges= */ new Map, 
                    /* targetMismatches= */ new sn(V$1), u, s), [ 4 /*yield*/ , Qu(r, a) ]) : [ 3 /*break*/ , 2 ];

                  case 1:
                    return c.sent(), 
                    // Since this query failed, we won't want to manually unlisten to it.
                    // We only remove it from bookkeeping after we successfully applied the
                    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
                    // this query when the RemoteStore restarts the Watch stream, which should
                    // re-trigger the target failure.
                    r.Cl = r.Cl.remove(o), r.xl.delete(e), rs(r), [ 3 /*break*/ , 4 ];

                  case 2:
                    return [ 4 /*yield*/ , co(r.bh, e, 
                    /* keepPersistedTargetData */ !1).then((function() {
                        return $u(r, e, n);
                    })).catch(mi) ];

                  case 3:
                    c.sent(), c.label = 4;

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Ku(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i;
            return __generator(this, (function(o) {
                switch (o.label) {
                  case 0:
                    n = O$1(t), r = e.batch.batchId, o.label = 1;

                  case 1:
                    return o.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , ro(n.bh, e) ];

                  case 2:
                    return i = o.sent(), 
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught
                    // up), so we raise user callbacks first so that they consistently happen
                    // before listen events.
                    Ju(n, r, /*error=*/ null), Zu(n, r), n.Vl.Na(r, "acknowledged"), [ 4 /*yield*/ , is(n, i) ];

                  case 3:
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught
                    // up), so we raise user callbacks first so that they consistently happen
                    // before listen events.
                    return o.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , mi(o.sent()) ];

                  case 5:
                    return o.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Xu(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i;
            return __generator(this, (function(o) {
                switch (o.label) {
                  case 0:
                    r = O$1(t), o.label = 1;

                  case 1:
                    return o.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                        var n = O$1(t);
                        return n.persistence.runTransaction("Reject batch", "readwrite-primary", (function(t) {
                            var r;
                            return n.zo.Pi(t, e).next((function(e) {
                                return k$1(null !== e), r = e.keys(), n.zo.Ci(t, e);
                            })).next((function() {
                                return n.zo.Fi(t);
                            })).next((function() {
                                return n.Tc.Xo(t, r);
                            }));
                        }));
                    }(r.bh, e) ];

                  case 2:
                    return i = o.sent(), 
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught up),
                    // so we raise user callbacks first so that they consistently happen before
                    // listen events.
                    Ju(r, e, n), Zu(r, e), r.Vl.Na(e, "rejected", n), [ 4 /*yield*/ , is(r, i) ];

                  case 3:
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught up),
                    // so we raise user callbacks first so that they consistently happen before
                    // listen events.
                    return o.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , mi(o.sent()) ];

                  case 5:
                    return o.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Registers a user callback that resolves when all pending mutations at the moment of calling
     * are acknowledged .
     */ function Wu(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i, o, u;
            return __generator(this, (function(s) {
                switch (s.label) {
                  case 0:
                    uu((n = O$1(t)).yl) || N$1("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), 
                    s.label = 1;

                  case 1:
                    return s.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , function(t) {
                        var e = O$1(t);
                        return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (function(t) {
                            return e.zo.Vi(t);
                        }));
                    }(n.bh) ];

                  case 2:
                    return -1 === (r = s.sent()) ? [ 2 /*return*/ , void e.resolve() ] : ((i = n.Ol.get(r) || []).push(e), 
                    n.Ol.set(r, i), [ 3 /*break*/ , 4 ]);

                  case 3:
                    return o = s.sent(), u = Er(o, "Initialization of waitForPendingWrites() operation failed"), 
                    e.reject(u), [ 3 /*break*/ , 4 ];

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
     * if there are any.
     */ function Zu(t, e) {
        (t.Ol.get(e) || []).forEach((function(t) {
            t.resolve();
        })), t.Ol.delete(e)
        /** Reject all outstanding callbacks waiting for pending writes to complete. */;
    }

    function Ju(t, e, n) {
        var r = O$1(t), i = r.Fl[r.currentUser.A()];
        // NOTE: Mutations restored from persistence won't have callbacks, so it's
        // okay for there to be no callback for this ID.
        if (i) {
            var o = i.get(e);
            o && (n ? o.reject(n) : o.resolve(), i = i.remove(e)), r.Fl[r.currentUser.A()] = i;
        }
    }

    function $u(t, e, n) {
        void 0 === n && (n = null), t.Vl.Ma(e);
        for (var r = 0, i = t.Sl.get(e); r < i.length; r++) {
            var o = i[r];
            t.vl.delete(o), n && t.bl.Bl(o, n);
        }
        t.Sl.delete(e), t.Ll && t.Nl.Oc(e).forEach((function(e) {
            t.Nl.Oi(e) || 
            // We removed the last reference for this key
            ts(t, e);
        }));
    }

    function ts(t, e) {
        // It's possible that the target already got removed because the query failed. In that case,
        // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
        var n = t.Cl.get(e);
        null !== n && (eu(t.yl, n), t.Cl = t.Cl.remove(e), t.xl.delete(n), rs(t));
    }

    function es(t, e, n) {
        for (var r = 0, i = n; r < i.length; r++) {
            var o = i[r];
            o instanceof Cu ? (t.Nl.nr(o.key, e), ns(t, o)) : o instanceof Ru ? (N$1("SyncEngine", "Document no longer in limbo: " + o.key), 
            t.Nl.ir(o.key, e), t.Nl.Oi(o.key) || 
            // We removed the last reference for this key
            ts(t, o.key)) : x$1();
        }
    }

    function ns(t, e) {
        var n = e.key;
        t.Cl.get(n) || (N$1("SyncEngine", "New document in limbo: " + n), t.Dl.push(n), rs(t));
    }

    /**
     * Starts listens for documents in limbo that are enqueued for resolution,
     * subject to a maximum number of concurrent resolutions.
     *
     * Without bounding the number of concurrent resolutions, the server can fail
     * with "resource exhausted" errors which can lead to pathological client
     * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
     */ function rs(t) {
        for (;t.Dl.length > 0 && t.Cl.size < t.pl; ) {
            var e = t.Dl.shift(), n = t.kl.next();
            t.xl.set(n, new qu(e)), t.Cl = t.Cl.zt(e, n), tu(t.yl, new ge(he(re(e.path)), n, 2 /* LimboResolution */ , H$1.q));
        }
    }

    function is(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i, o, u;
            return __generator(this, (function(s) {
                switch (s.label) {
                  case 0:
                    return r = O$1(t), i = [], o = [], u = [], r.vl.et() ? [ 3 /*break*/ , 3 ] : (r.vl.forEach((function(t, s) {
                        u.push(r.$l(s, e, n).then((function(t) {
                            if (t) {
                                r.Ll && r.Vl.Ba(s.targetId, t.fromCache ? "not-current" : "current"), i.push(t);
                                var e = Ji.oc(s.targetId, t);
                                o.push(e);
                            }
                        })));
                    })), [ 4 /*yield*/ , Promise.all(u) ]);

                  case 1:
                    return s.sent(), r.bl.ah(i), [ 4 /*yield*/ , function(t, e) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var n, r, i, o, u, s, a, c, h;
                            return __generator(this, (function(f) {
                                switch (f.label) {
                                  case 0:
                                    n = O$1(t), f.label = 1;

                                  case 1:
                                    return f.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (function(t) {
                                        return lr.forEach(e, (function(e) {
                                            return lr.forEach(e.ic, (function(r) {
                                                return n.persistence.Ti.nr(t, e.targetId, r);
                                            })).next((function() {
                                                return lr.forEach(e.rc, (function(r) {
                                                    return n.persistence.Ti.ir(t, e.targetId, r);
                                                }));
                                            }));
                                        }));
                                    })) ];

                                  case 2:
                                    return f.sent(), [ 3 /*break*/ , 4 ];

                                  case 3:
                                    if (!mr(r = f.sent())) throw r;
                                    // If `notifyLocalViewChanges` fails, we did not advance the sequence
                                    // number for the documents that were included in this transaction.
                                    // This might trigger them to be deleted earlier than they otherwise
                                    // would have, but it should not invalidate the integrity of the data.
                                                                    return N$1("LocalStore", "Failed to update sequence numbers: " + r), 
                                    [ 3 /*break*/ , 4 ];

                                  case 4:
                                    for (i = 0, o = e; i < o.length; i++) u = o[i], s = u.targetId, u.fromCache || (a = n.fc.get(s), 
                                    c = a.kt, h = a.$t(c), 
                                    // Advance the last limbo free snapshot version
                                    n.fc = n.fc.zt(s, h));
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    }(r.bh, o) ];

                  case 2:
                    s.sent(), s.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function os(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r;
            return __generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    return (n = O$1(t)).currentUser.isEqual(e) ? [ 3 /*break*/ , 3 ] : (N$1("SyncEngine", "User change. New user:", e.A()), 
                    [ 4 /*yield*/ , no(n.bh, e) ]);

                  case 1:
                    return r = i.sent(), n.currentUser = e, 
                    // Fails tasks waiting for pending writes requested by previous user.
                    function(t, e) {
                        t.Ol.forEach((function(t) {
                            t.forEach((function(t) {
                                t.reject(new q$1(M$1.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
                            }));
                        })), t.Ol.clear();
                    }(n), 
                    // TODO(b/114226417): Consider calling this only in the primary tab.
                    n.Vl.Ua(e, r.mc, r.Ac), [ 4 /*yield*/ , is(n, r.Ic) ];

                  case 2:
                    i.sent(), i.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function us(t, e) {
        var n = O$1(t), r = n.xl.get(e);
        if (r && r.Pl) return mn().add(r.key);
        var i = mn(), o = n.Sl.get(e);
        if (!o) return i;
        for (var u = 0, s = o; u < s.length; u++) {
            var a = s[u], c = n.vl.get(a);
            i = i.Pe(c.view._l);
        }
        return i;
    }

    /**
     * Reconcile the list of synced documents in an existing view with those
     * from persistence.
     */ function ss(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i;
            return __generator(this, (function(o) {
                switch (o.label) {
                  case 0:
                    return [ 4 /*yield*/ , ho((n = O$1(t)).bh, e.query, 
                    /* usePreviousResults= */ !0) ];

                  case 1:
                    return r = o.sent(), i = e.view.Al(r), [ 2 /*return*/ , (n.Ll && es(n, e.targetId, i.Il), 
                    i) ];
                }
            }));
        }));
    }

    /**
     * Retrieves newly changed documents from remote document cache and raises
     * snapshots if needed.
     */
    // PORTING NOTE: Multi-Tab only.
    function as(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e;
            return __generator(this, (function(n) {
                return [ 2 /*return*/ , lo((e = O$1(t)).bh).then((function(t) {
                    return is(e, t);
                })) ];
            }));
        }));
    }

    /** Applies a mutation state to an existing batch.  */
    // PORTING NOTE: Multi-Tab only.
    function cs(t, e, n, r) {
        return __awaiter(this, void 0, void 0, (function() {
            var i, o;
            return __generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return [ 4 /*yield*/ , function(t, e) {
                        var n = O$1(t), r = O$1(n.zo);
                        return n.persistence.runTransaction("Lookup mutation documents", "readonly", (function(t) {
                            return r.yi(t, e).next((function(e) {
                                return e ? n.Tc.Xo(t, e) : lr.resolve(null);
                            }));
                        }));
                    }((i = O$1(t)).bh, e) ];

                  case 1:
                    return null === (o = u.sent()) ? [ 3 /*break*/ , 6 ] : "pending" !== n ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , pu(i.yl) ];

                  case 2:
                    // If we are the primary client, we need to send this write to the
                    // backend. Secondary clients will ignore these writes since their remote
                    // connection is disabled.
                    return u.sent(), [ 3 /*break*/ , 4 ];

                  case 3:
                    "acknowledged" === n || "rejected" === n ? (
                    // NOTE: Both these methods are no-ops for batches that originated from
                    // other clients.
                    Ju(i, e, r || null), Zu(i, e), function(t, e) {
                        O$1(O$1(t).zo).xi(e);
                    }(i.bh, e)) : x$1(), u.label = 4;

                  case 4:
                    return [ 4 /*yield*/ , is(i, o) ];

                  case 5:
                    return u.sent(), [ 3 /*break*/ , 7 ];

                  case 6:
                    // A throttled tab may not have seen the mutation before it was completed
                    // and removed from the mutation queue, in which case we won't have cached
                    // the affected documents. In this case we can safely ignore the update
                    // since that means we didn't apply the mutation locally at all (if we
                    // had, we would have cached the affected documents), and so we will just
                    // see any resulting document changes via normal remote document updates
                    // as applicable.
                    N$1("SyncEngine", "Cannot apply mutation batch with id: " + e), u.label = 7;

                  case 7:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    function hs(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i, o, u, s, a, c;
            return __generator(this, (function(h) {
                switch (h.label) {
                  case 0:
                    return ys(n = O$1(t)), ms(n), !0 !== e || !0 === n.Ml ? [ 3 /*break*/ , 3 ] : (r = n.Vl.va(), 
                    [ 4 /*yield*/ , fs(n, r.it()) ]);

                  case 1:
                    return i = h.sent(), n.Ml = !0, [ 4 /*yield*/ , bu(n.yl, !0) ];

                  case 2:
                    for (h.sent(), o = 0, u = i; o < u.length; o++) s = u[o], tu(n.yl, s);
                    return [ 3 /*break*/ , 7 ];

                  case 3:
                    return !1 !== e || !1 === n.Ml ? [ 3 /*break*/ , 7 ] : (a = [], c = Promise.resolve(), 
                    n.Sl.forEach((function(t, e) {
                        n.Vl.La(e) ? a.push(e) : c = c.then((function() {
                            return $u(n, e), co(n.bh, e, 
                            /*keepPersistedTargetData=*/ !0);
                        })), eu(n.yl, e);
                    })), [ 4 /*yield*/ , c ]);

                  case 4:
                    return h.sent(), [ 4 /*yield*/ , fs(n, a) ];

                  case 5:
                    return h.sent(), 
                    // PORTING NOTE: Multi-Tab only.
                    function(t) {
                        var e = O$1(t);
                        e.xl.forEach((function(t, n) {
                            eu(e.yl, n);
                        })), e.Nl.kc(), e.xl = new Map, e.Cl = new rn(tt.H);
                    }(n), n.Ml = !1, [ 4 /*yield*/ , bu(n.yl, !1) ];

                  case 6:
                    h.sent(), h.label = 7;

                  case 7:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function fs(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i, o, u, s, a, c, h, f, l, p, d, v;
            return __generator(this, (function(y) {
                switch (y.label) {
                  case 0:
                    n = O$1(t), r = [], i = [], o = 0, u = e, y.label = 1;

                  case 1:
                    return o < u.length ? (s = u[o], a = void 0, (c = n.Sl.get(s)) && 0 !== c.length ? [ 4 /*yield*/ , ao(n.bh, he(c[0])) ] : [ 3 /*break*/ , 7 ]) : [ 3 /*break*/ , 13 ];

                  case 2:
                    // For queries that have a local View, we fetch their current state
                    // from LocalStore (as the resume token and the snapshot version
                    // might have changed) and reconcile their views with the persisted
                    // state (the list of syncedDocuments may have gotten out of sync).
                    a = y.sent(), h = 0, f = c, y.label = 3;

                  case 3:
                    return h < f.length ? (l = f[h], p = n.vl.get(l), [ 4 /*yield*/ , ss(n, p) ]) : [ 3 /*break*/ , 6 ];

                  case 4:
                    (d = y.sent()).snapshot && i.push(d.snapshot), y.label = 5;

                  case 5:
                    return h++, [ 3 /*break*/ , 3 ];

                  case 6:
                    return [ 3 /*break*/ , 11 ];

                  case 7:
                    return [ 4 /*yield*/ , fo(n.bh, s) ];

                  case 8:
                    return v = y.sent(), [ 4 /*yield*/ , ao(n.bh, v) ];

                  case 9:
                    return a = y.sent(), [ 4 /*yield*/ , zu(n, ls(v), s, 
                    /*current=*/ !1) ];

                  case 10:
                    y.sent(), y.label = 11;

                  case 11:
                    r.push(a), y.label = 12;

                  case 12:
                    return o++, [ 3 /*break*/ , 1 ];

                  case 13:
                    return [ 2 /*return*/ , (n.bl.ah(i), r) ];
                }
            }));
        }));
    }

    /**
     * Creates a `Query` object from the specified `Target`. There is no way to
     * obtain the original `Query`, so we synthesize a `Query` from the `Target`
     * object.
     *
     * The synthesized result might be different from the original `Query`, but
     * since the synthesized `Query` should return the same results as the
     * original one (only the presentation of results might differ), the potential
     * difference will not cause issues.
     */
    // PORTING NOTE: Multi-Tab only.
    function ls(t) {
        return ne(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
    }

    /** Returns the IDs of the clients that are currently active. */
    // PORTING NOTE: Multi-Tab only.
    function ps(t) {
        var e = O$1(t);
        return O$1(O$1(e.bh).persistence).Uo();
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    function ds(t, e, n, r) {
        return __awaiter(this, void 0, void 0, (function() {
            var i, o, u;
            return __generator(this, (function(s) {
                switch (s.label) {
                  case 0:
                    return (i = O$1(t)).Ml ? (
                    // If we receive a target state notification via WebStorage, we are
                    // either already secondary or another tab has taken the primary lease.
                    N$1("SyncEngine", "Ignoring unexpected query state notification."), [ 3 /*break*/ , 8 ]) : [ 3 /*break*/ , 1 ];

                  case 1:
                    if (!i.Sl.has(e)) return [ 3 /*break*/ , 8 ];
                    switch (n) {
                      case "current":
                      case "not-current":
                        return [ 3 /*break*/ , 2 ];

                      case "rejected":
                        return [ 3 /*break*/ , 5 ];
                    }
                    return [ 3 /*break*/ , 7 ];

                  case 2:
                    return [ 4 /*yield*/ , lo(i.bh) ];

                  case 3:
                    return o = s.sent(), u = En.Le(e, "current" === n), [ 4 /*yield*/ , is(i, o, u) ];

                  case 4:
                    return s.sent(), [ 3 /*break*/ , 8 ];

                  case 5:
                    return [ 4 /*yield*/ , co(i.bh, e, 
                    /* keepPersistedTargetData */ !0) ];

                  case 6:
                    return s.sent(), $u(i, e, r), [ 3 /*break*/ , 8 ];

                  case 7:
                    x$1(), s.label = 8;

                  case 8:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /** Adds or removes Watch targets for queries from different tabs. */ function vs(t, e, n) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i, o, u, s, a, c, h, f, l;
            return __generator(this, (function(p) {
                switch (p.label) {
                  case 0:
                    if (!(r = ys(t)).Ml) return [ 3 /*break*/ , 10 ];
                    i = 0, o = e, p.label = 1;

                  case 1:
                    return i < o.length ? (u = o[i], r.Sl.has(u) ? (
                    // A target might have been added in a previous attempt
                    N$1("SyncEngine", "Adding an already active target " + u), [ 3 /*break*/ , 5 ]) : [ 4 /*yield*/ , fo(r.bh, u) ]) : [ 3 /*break*/ , 6 ];

                  case 2:
                    return s = p.sent(), [ 4 /*yield*/ , ao(r.bh, s) ];

                  case 3:
                    return a = p.sent(), [ 4 /*yield*/ , zu(r, ls(s), a.targetId, 
                    /*current=*/ !1) ];

                  case 4:
                    p.sent(), tu(r.yl, a), p.label = 5;

                  case 5:
                    return i++, [ 3 /*break*/ , 1 ];

                  case 6:
                    c = function(t) {
                        return __generator(this, (function(e) {
                            switch (e.label) {
                              case 0:
                                return r.Sl.has(t) ? [ 4 /*yield*/ , co(r.bh, t, 
                                /* keepPersistedTargetData */ !1).then((function() {
                                    eu(r.yl, t), $u(r, t);
                                })).catch(mi) ] : [ 3 /*break*/ , 2 ];

                                // Release queries that are still active.
                                                          case 1:
                                // Release queries that are still active.
                                e.sent(), e.label = 2;

                              case 2:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }, h = 0, f = n, p.label = 7;

                  case 7:
                    return h < f.length ? (l = f[h], [ 5 /*yield**/ , c(l) ]) : [ 3 /*break*/ , 10 ];

                  case 8:
                    p.sent(), p.label = 9;

                  case 9:
                    return h++, [ 3 /*break*/ , 7 ];

                  case 10:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function ys(t) {
        var e = O$1(t);
        return e.yl.Dh.$h = Qu.bind(null, e), e.yl.Dh.vn = us.bind(null, e), e.yl.Dh.Lh = Hu.bind(null, e), 
        e.bl.ah = Su.bind(null, e.gl), e.bl.Bl = Du.bind(null, e.gl), e;
    }

    function ms(t) {
        var e = O$1(t);
        return e.yl.Dh.Bh = Ku.bind(null, e), e.yl.Dh.qh = Xu.bind(null, e), e
        /**
     * Loads a Firestore bundle into the SDK. The returned promise resolves when
     * the bundle finished loading.
     *
     * @param syncEngine - SyncEngine to use.
     * @param bundleReader - Bundle to load into the SDK.
     * @param task - LoadBundleTask used to update the loading progress to public API.
     */;
    }

    function gs(t, e, n) {
        var r = O$1(t);
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
            (function(t, e, n) {
            return __awaiter(this, void 0, void 0, (function() {
                var r, i, o, u, s, a;
                return __generator(this, (function(c) {
                    switch (c.label) {
                      case 0:
                        return c.trys.push([ 0, 14, , 15 ]), [ 4 /*yield*/ , e.getMetadata() ];

                      case 1:
                        return r = c.sent(), [ 4 /*yield*/ , function(t, e) {
                            var n = O$1(t), r = Mn(e.createTime);
                            return n.persistence.runTransaction("hasNewerBundle", "readonly", (function(t) {
                                return n.wo.ks(t, e.id);
                            })).then((function(t) {
                                return !!t && t.createTime._(r) >= 0;
                            }));
                        }(t.bh, r) ];

                      case 2:
                        return c.sent() ? [ 4 /*yield*/ , e.close() ] : [ 3 /*break*/ , 4 ];

                      case 3:
                        return [ 2 /*return*/ , (c.sent(), void n.ql(function(t) {
                            return {
                                taskState: "Success",
                                documentsLoaded: t.totalDocuments,
                                bytesLoaded: t.totalBytes,
                                totalDocuments: t.totalDocuments,
                                totalBytes: t.totalBytes
                            };
                        }(r))) ];

                      case 4:
                        return n.Ul(Vu(r)), i = new Lu(r, t.bh, e.Qt), [ 4 /*yield*/ , e.Ql() ];

                      case 5:
                        o = c.sent(), c.label = 6;

                      case 6:
                        return o ? [ 4 /*yield*/ , i.rl(o) ] : [ 3 /*break*/ , 10 ];

                      case 7:
                        return (u = c.sent()) && n.Ul(u), [ 4 /*yield*/ , e.Ql() ];

                      case 8:
                        o = c.sent(), c.label = 9;

                      case 9:
                        return [ 3 /*break*/ , 6 ];

                      case 10:
                        return [ 4 /*yield*/ , i.complete() ];

                      case 11:
                        // TODO(b/160876443): This currently raises snapshots with
                        // `fromCache=false` if users already listen to some queries and bundles
                        // has newer version.
                        return s = c.sent(), [ 4 /*yield*/ , is(t, s.Go, 
                        /* remoteEvent */ void 0) ];

                      case 12:
                        // Save metadata, so loading the same bundle will skip.
                        // TODO(b/160876443): This currently raises snapshots with
                        // `fromCache=false` if users already listen to some queries and bundles
                        // has newer version.
                        return c.sent(), [ 4 /*yield*/ , function(t, e) {
                            var n = O$1(t);
                            return n.persistence.runTransaction("Save bundle", "readwrite", (function(t) {
                                return n.wo.Ms(t, e);
                            }));
                        }(t.bh, r) ];

                      case 13:
                        // TODO(b/160876443): This currently raises snapshots with
                        // `fromCache=false` if users already listen to some queries and bundles
                        // has newer version.
                        // Save metadata, so loading the same bundle will skip.
                        return c.sent(), n.ql(s.progress), [ 3 /*break*/ , 15 ];

                      case 14:
                        return S$1("SyncEngine", "Loading bundle failed with " + (a = c.sent())), n.Kl(a), 
                        [ 3 /*break*/ , 15 ];

                      case 15:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Provides all components needed for Firestore with in-memory persistence.
     * Uses EagerGC garbage collection.
     */)(r, e, n).then((function() {
            r.Vl.Wa();
        }));
    }

    var ws = /** @class */ function() {
        function t() {
            this.synchronizeTabs = !1;
        }
        return t.prototype.initialize = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return this.Qt = Bo(t.yu.t), this.Vl = this.Wl(t), this.persistence = this.jl(t), 
                        [ 4 /*yield*/ , this.persistence.start() ];

                      case 1:
                        return e.sent(), this.Gl = this.zl(t), this.bh = this.Hl(t), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.zl = function(t) {
            return null;
        }, t.prototype.Hl = function(t) {
            return eo(this.persistence, new $i, t.Jl, this.Qt);
        }, t.prototype.jl = function(t) {
            return new To(Ao.ia, this.Qt);
        }, t.prototype.Wl = function(t) {
            return new Ro;
        }, t.prototype.terminate = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.Gl && this.Gl.stop(), [ 4 /*yield*/ , this.Vl.Mo() ];

                      case 1:
                        return t.sent(), [ 4 /*yield*/ , this.persistence.Mo() ];

                      case 2:
                        return t.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t;
    }(), bs = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this) || this).Yl = e, i.cacheSizeBytes = n, i.forceOwnership = r, 
            i.synchronizeTabs = !1, i;
        }
        return __extends$1d(e, t), e.prototype.initialize = function(e) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return [ 4 /*yield*/ , t.prototype.initialize.call(this, e) ];

                      case 1:
                        return n.sent(), [ 4 /*yield*/ , po(this.bh) ];

                      case 2:
                        return n.sent(), [ 4 /*yield*/ , this.Yl.initialize(this, e) ];

                      case 3:
                        // Enqueue writes from a previous session
                        return n.sent(), [ 4 /*yield*/ , ms(this.Yl._a) ];

                      case 4:
                        // Enqueue writes from a previous session
                        return n.sent(), [ 4 /*yield*/ , pu(this.Yl.yl) ];

                      case 5:
                        return n.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, e.prototype.Hl = function(t) {
            return eo(this.persistence, new $i, t.Jl, this.Qt);
        }, e.prototype.zl = function(t) {
            var e = this.persistence.Ti.lr;
            return new Vi(e, t._s);
        }, e.prototype.jl = function(t) {
            var e = Xi(t.yu.t, t.yu.persistenceKey), n = void 0 !== this.cacheSizeBytes ? yi.Ys(this.cacheSizeBytes) : yi.ti;
            return new Yi(this.synchronizeTabs, e, t.clientId, n, t._s, zo(), Go(), this.Qt, this.Vl, !!this.forceOwnership);
        }, e.prototype.Wl = function(t) {
            return new Ro;
        }, e;
    }(ws), _s = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e, n, /* forceOwnership= */ !1) || this).Yl = e, r.cacheSizeBytes = n, 
            r.synchronizeTabs = !0, r;
        }
        return __extends$1d(e, t), e.prototype.initialize = function(e) {
            return __awaiter(this, void 0, void 0, (function() {
                var n, r = this;
                return __generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        return [ 4 /*yield*/ , t.prototype.initialize.call(this, e) ];

                      case 1:
                        return i.sent(), n = this.Yl._a, this.Vl instanceof Co ? (this.Vl._a = {
                            eu: cs.bind(null, n),
                            nu: ds.bind(null, n),
                            su: vs.bind(null, n),
                            Uo: ps.bind(null, n),
                            tu: as.bind(null, n)
                        }, [ 4 /*yield*/ , this.Vl.start() ]) : [ 3 /*break*/ , 3 ];

                      case 2:
                        i.sent(), i.label = 3;

                      case 3:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return [ 4 /*yield*/ , this.persistence.Ro((function(t) {
                            return __awaiter(r, void 0, void 0, (function() {
                                return __generator(this, (function(e) {
                                    switch (e.label) {
                                      case 0:
                                        return [ 4 /*yield*/ , hs(this.Yl._a, t) ];

                                      case 1:
                                        return e.sent(), this.Gl && (t && !this.Gl.Er ? this.Gl.start(this.bh) : t || this.Gl.stop()), 
                                        [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        })) ];

                      case 4:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return i.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, e.prototype.Wl = function(t) {
            var e = zo();
            if (!Co.Kn(e)) throw new q$1(M$1.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
            var n = Xi(t.yu.t, t.yu.persistenceKey);
            return new Co(e, t._s, n, t.clientId, t.Jl);
        }, e;
    }(bs), Is = /** @class */ function() {
        function t() {}
        return t.prototype.initialize = function(t, e) {
            return __awaiter(this, void 0, void 0, (function() {
                var n = this;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return this.bh ? [ 3 /*break*/ , 2 ] : (this.bh = t.bh, this.Vl = t.Vl, this.Sh = this.Xl(e), 
                        this.yl = this.Zl(e), this.gl = this.t_(e), this._a = this.e_(e, 
                        /* startAsPrimary=*/ !t.synchronizeTabs), this.Vl.fa = function(t) {
                            return Yu(n._a, t, 1 /* SharedClientState */);
                        }, this.yl.Dh.n_ = os.bind(null, this._a), [ 4 /*yield*/ , bu(this.yl, this._a.Ll) ]);

                      case 1:
                        r.sent(), r.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.t_ = function(t) {
            return new Tu;
        }, t.prototype.Xl = function(t) {
            var e, n = Bo(t.yu.t), r = (e = t.yu, new Fo(e));
            /** Return the Platform-specific connectivity monitor. */ return function(t, e, n) {
                return new Xo(t, e, n);
            }(t.credentials, r, n);
        }, t.prototype.Zl = function(t) {
            var e, n, r, i, o, u = this;
            return e = this.bh, n = this.Sh, r = t._s, i = function(t) {
                return Yu(u._a, t, 0 /* RemoteStore */);
            }, o = Mo.Kn() ? new Mo : new Uo, new Zo(e, n, r, i, o);
        }, t.prototype.e_ = function(t, e) {
            return function(t, e, n, 
            // PORTING NOTE: Manages state synchronization in multi-tab environments.
            r, i, o, u) {
                var s = new ju(t, e, n, r, i, o);
                return u && (s.Ml = !0), s;
            }(this.bh, this.yl, this.gl, this.Vl, t.Jl, t.pl, e);
        }, t.prototype.terminate = function() {
            return function(t) {
                return __awaiter(this, void 0, void 0, (function() {
                    var e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            return e = O$1(t), N$1("RemoteStore", "RemoteStore shutting down."), e.Nh.add(5 /* Shutdown */), 
                            [ 4 /*yield*/ , $o(e) ];

                          case 1:
                            return n.sent(), e.Oh.Mo(), 
                            // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                            // triggering spurious listener events with cached data, etc.
                            e.kh.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }(this.yl);
        }, t;
    }();

    /**
     * Provides all components needed for Firestore with IndexedDB persistence.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * How many bytes to read each time when `ReadableStreamReader.read()` is
     * called. Only applicable for byte streams that we control (e.g. those backed
     * by an UInt8Array).
     */
    /**
     * Builds a `ByteStreamReader` from a UInt8Array.
     * @param source - The data source to use.
     * @param bytesPerRead - How many bytes each `read()` from the returned reader
     *        will read.
     */
    function Es(t, e) {
        void 0 === e && (e = 10240);
        var n = 0;
        return {
            read: function() {
                return __awaiter(this, void 0, void 0, (function() {
                    var r;
                    return __generator(this, (function(i) {
                        return n < t.byteLength ? (r = {
                            value: t.slice(n, n + e),
                            done: !1
                        }, [ 2 /*return*/ , (n += e, r) ]) : [ 2 /*return*/ , {
                            done: !0
                        } ];
                        // TypesScript's lib.dom.d.ts doesn't have proper typings of
                        // ReadableStreamReadResult yet.
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    }));
                }));
            },
            cancel: function() {
                return __awaiter(this, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        return [ 2 /*return*/ ];
                    }));
                }));
            },
            releaseLock: function() {}
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * A wrapper implementation of Observer<T> that will dispatch events
     * asynchronously. To allow immediate silencing, a mute call is added which
     * causes events scheduled to no longer be raised.
     */ var Ts = /** @class */ function() {
        function t(t) {
            this.observer = t, 
            /**
                 * When set to true, will not raise future events. Necessary to deal with
                 * async detachment of listener.
                 */
            this.muted = !1;
        }
        return t.prototype.next = function(t) {
            this.observer.next && this.s_(this.observer.next, t);
        }, t.prototype.error = function(t) {
            this.observer.error ? this.s_(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
        }, t.prototype.i_ = function() {
            this.muted = !0;
        }, t.prototype.s_ = function(t, e) {
            var n = this;
            this.muted || setTimeout((function() {
                n.muted || t(e);
            }), 0);
        }, t;
    }(), Ns = /** @class */ function() {
        function t(
        /** The reader to read from underlying binary bundle data source. */
        t, e) {
            var n = this;
            this.r_ = t, this.Qt = e, 
            /** Cached bundle metadata. */
            this.metadata = new fr, 
            /**
                 * Internal buffer to hold bundle content, accumulating incomplete element
                 * content.
                 */
            this.buffer = new Uint8Array, this.o_ = new TextDecoder("utf-8"), 
            // Read the metadata (which is the first element).
            this.c_().then((function(t) {
                t && t.sl() ? n.metadata.resolve(t.payload.metadata) : n.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             " + JSON.stringify(null == t ? void 0 : t.payload)));
            }), (function(t) {
                return n.metadata.reject(t);
            }));
        }
        return t.prototype.close = function() {
            return this.r_.cancel();
        }, t.prototype.getMetadata = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    return [ 2 /*return*/ , this.metadata.promise ];
                }));
            }));
        }, t.prototype.Ql = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.getMetadata() ];

                      case 1:
                        // Makes sure metadata is read before proceeding.
                        return [ 2 /*return*/ , (t.sent(), this.c_()) ];
                    }
                }));
            }));
        }, 
        /**
         * Reads from the head of internal buffer, and pulling more data from
         * underlying stream if a complete element cannot be found, until an
         * element(including the prefixed length and the JSON string) is found.
         *
         * Once a complete element is read, it is dropped from internal buffer.
         *
         * Returns either the bundled element, or null if we have reached the end of
         * the stream.
         */
        t.prototype.c_ = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, n, r;
                return __generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.a_() ];

                      case 1:
                        return null === (t = i.sent()) ? [ 2 /*return*/ , null ] : (e = this.o_.decode(t), 
                        n = Number(e), isNaN(n) && this.u_("length string (" + e + ") is not valid number"), 
                        [ 4 /*yield*/ , this.h_(n) ]);

                      case 2:
                        return r = i.sent(), [ 2 /*return*/ , new Ou(JSON.parse(r), t.length + n) ];
                    }
                }));
            }));
        }, 
        /** First index of '{' from the underlying buffer. */ t.prototype.l_ = function() {
            return this.buffer.findIndex((function(t) {
                return t === "{".charCodeAt(0);
            }));
        }, 
        /**
         * Reads from the beginning of the internal buffer, until the first '{', and
         * return the content.
         *
         * If reached end of the stream, returns a null.
         */
        t.prototype.a_ = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.l_() < 0 ? [ 4 /*yield*/ , this.__() ] : [ 3 /*break*/ , 3 ];

                      case 1:
                        if (n.sent()) return [ 3 /*break*/ , 3 ];
                        n.label = 2;

                      case 2:
                        return [ 3 /*break*/ , 0 ];

                      case 3:
                        // Broke out of the loop because underlying stream is closed, and there
                        // happens to be no more data to process.
                        return 0 === this.buffer.length ? [ 2 /*return*/ , null ] : (
                        // Broke out of the loop because underlying stream is closed, but still
                        // cannot find an open bracket.
                        (t = this.l_()) < 0 && this.u_("Reached the end of bundle when a length string is expected."), 
                        e = this.buffer.slice(0, t), [ 2 /*return*/ , (this.buffer = this.buffer.slice(t), 
                        e) ]);
                    }
                }));
            }));
        }, 
        /**
         * Reads from a specified position from the internal buffer, for a specified
         * number of bytes, pulling more data from the underlying stream if needed.
         *
         * Returns a string decoded from the read bytes.
         */
        t.prototype.h_ = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.buffer.length < t ? [ 4 /*yield*/ , this.__() ] : [ 3 /*break*/ , 3 ];

                      case 1:
                        n.sent() && this.u_("Reached the end of bundle when more is expected."), n.label = 2;

                      case 2:
                        return [ 3 /*break*/ , 0 ];

                      case 3:
                        // Update the internal buffer to drop the read json string.
                        return e = this.o_.decode(this.buffer.slice(0, t)), [ 2 /*return*/ , (this.buffer = this.buffer.slice(t), 
                        e) ];
                    }
                }));
            }));
        }, t.prototype.u_ = function(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            throw this.r_.cancel(), new Error("Invalid bundle format: " + t);
        }, 
        /**
         * Pulls more data from underlying stream to internal buffer.
         * Returns a boolean indicating whether the stream is finished.
         */
        t.prototype.__ = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.r_.read() ];

                      case 1:
                        return (t = n.sent()).done || ((e = new Uint8Array(this.buffer.length + t.value.length)).set(this.buffer), 
                        e.set(t.value, this.buffer.length), this.buffer = e), [ 2 /*return*/ , t.done ];
                    }
                }));
            }));
        }, t;
    }(), As = /** @class */ function() {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        function t() {
            for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
            for (var n = 0; n < t.length; ++n) if (0 === t[n].length) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this.f_ = new $(t);
        }
        /**
         * Returns true if this `FieldPath` is equal to the provided one.
         *
         * @param other - The `FieldPath` to compare against.
         * @returns true if this `FieldPath` is equal to the provided one.
         */    return t.prototype.isEqual = function(t) {
            return this.f_.isEqual(t.f_);
        }, t;
    }(), Ss = 
    /**
         * @param _methodName - The public API endpoint that returns this class.
         */
    function(t) {
        this._methodName = t;
    }, Ds = function(t) {
        this.d_ = t;
    };

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class representing a bundle.
     *
     * Takes a bundle stream or buffer, and presents abstractions to read bundled
     * elements out of the underlying content.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function xs(t, e, n) {
        if (!n) throw new q$1(M$1.INVALID_ARGUMENT, "Function " + t + "() cannot be called with an empty " + e + ".");
    }

    function ks(t, e) {
        if (void 0 === e) return {
            merge: !1
        };
        if (void 0 !== e.mergeFields && void 0 !== e.merge) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
        return e;
    }

    /**
     * Validates that two boolean options are not set at the same time.
     */ function Os(t, e, n, r) {
        if (!0 === e && !0 === r) throw new q$1(M$1.INVALID_ARGUMENT, t + " and " + n + " cannot be used together.");
    }

    /**
     * Validates that `path` refers to a document (indicated by the fact it contains
     * an even numbers of segments).
     */ function Ps(t) {
        if (!tt.wt(t)) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t + " has " + t.length + ".");
    }

    /**
     * Validates that `path` refers to a collection (indicated by the fact it
     * contains an odd numbers of segments).
     */ function Ls(t) {
        if (tt.wt(t)) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t + " has " + t.length + ".");
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */
    /** Returns a string describing the type / value of the provided input. */ function Vs(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            var e = 
            /** Hacky method to try to get the constructor name for an object. */
            function(t) {
                if (t.constructor) {
                    var e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                    if (e && e.length > 1) return e[1];
                }
                return null;
            }(t);
            return e ? "a custom " + e + " object" : "an object";
        }
        return "function" == typeof t ? "a function" : x$1();
    }

    function Cs(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        if ("_delegate" in t && (
        // Unwrap Compat types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t = t.d_), !(t instanceof e)) {
            if (e.name === t.constructor.name) throw new q$1(M$1.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
            var n = Vs(t);
            throw new q$1(M$1.INVALID_ARGUMENT, "Expected type '" + e.name + "', but it was: " + n);
        }
        return t;
    }

    function Rs(t, e) {
        if (e <= 0) throw new q$1(M$1.INVALID_ARGUMENT, "Function " + t + "() requires a positive number, but it was: " + e + ".");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // settings() defaults:
    /**
     * A concrete type describing all the values that can be applied via a
     * user-supplied firestore.Settings object. This is a separate type so that
     * defaults can be supplied and the value can be checked for equality.
     */ var Us = /** @class */ function() {
        function t(t) {
            var e;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new q$1(M$1.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = !0;
            } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
            if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
            void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
                if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new q$1(M$1.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
            Os("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
        }
        return t.prototype.isEqual = function(t) {
            return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties;
        }, t;
    }(), Ms = new Map, qs = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e) {
            this.w_ = "(lite)", this.E_ = new Us({}), this.T_ = !1, t instanceof I$1 ? (this.I_ = t, 
            this.m_ = new G$1) : (this.A_ = t, this.I_ = function(t) {
                if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new q$1(M$1.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
                return new I$1(t.options.projectId);
            }(t), this.m_ = new B(e));
        }
        return Object.defineProperty(t.prototype, "app", {
            /**
             * The {@link FirebaseApp} associated with this `Firestore` service
             * instance.
             */
            get: function() {
                if (!this.A_) throw new q$1(M$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
                return this.A_;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "R_", {
            get: function() {
                return this.T_;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "P_", {
            get: function() {
                return void 0 !== this.y_;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.g_ = function(t) {
            if (this.T_) throw new q$1(M$1.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
            this.E_ = new Us(t), void 0 !== t.credentials && (this.m_ = function(t) {
                if (!t) return new G$1;
                switch (t.type) {
                  case "gapi":
                    var e = t.client;
                    // Make sure this really is a Gapi client.
                                    return k$1(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                    new Y$1(e, t.sessionIndex || "0");

                  case "provider":
                    return t.client;

                  default:
                    throw new q$1(M$1.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
                }
            }(t.credentials));
        }, t.prototype.V_ = function() {
            return this.E_;
        }, t.prototype.p_ = function() {
            return this.T_ = !0, this.E_;
        }, t.prototype._delete = function() {
            return this.y_ || (this.y_ = this.b_()), this.y_;
        }, t.prototype.toJSON = function() {
            return {
                app: this.A_,
                t: this.I_,
                settings: this.E_
            };
        }, 
        /**
         * Terminates all components used by this client. Subclasses can override
         * this method to clean up their own dependencies, but must also call this
         * method.
         *
         * Only ever called once.
         */
        t.prototype.b_ = function() {
            /**
     * Removes all components associated with the provided instance. Must be called
     * when the `Firestore` instance is terminated.
     */
            return t = this, (e = Ms.get(t)) && (N$1("ComponentProvider", "Removing Datastore"), 
            Ms.delete(t), e.terminate()), Promise.resolve();
            var t, e;
        }, t;
    }(), js = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e, n) {
            this.v_ = e, this.S_ = n, 
            /** The type of this Firestore reference. */
            this.type = "document", this.firestore = t;
        }
        return Object.defineProperty(t.prototype, "D_", {
            get: function() {
                return this.S_.path;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "id", {
            /**
             * The document's identifier within its collection.
             */
            get: function() {
                return this.S_.path.tt();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "path", {
            /**
             * A string representing the path of the referenced document (relative
             * to the root of the database).
             */
            get: function() {
                return this.S_.path.rt();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "parent", {
            /**
             * The collection this `DocumentReference` belongs to.
             */
            get: function() {
                return new zs(this.firestore, this.v_, this.S_.path.X());
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Applies a custom data converter to this `DocumentReference`, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * setDoc}, {@link getDoc}, etc. with the returned `DocumentReference`
         * instance, the provided converter will convert between Firestore data and
         * your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `DocumentReference<U>` that uses the provided converter.
         */
        t.prototype.withConverter = function(e) {
            return new t(this.firestore, e, this.S_);
        }, t;
    }(), Fs = /** @class */ function() {
        // This is the lite version of the Query class in the main SDK.
        /** @hideconstructor protected */
        function t(t, e, n) {
            this.v_ = e, this.C_ = n, 
            /** The type of this Firestore reference. */
            this.type = "query", this.firestore = t
            /**
         * Applies a custom data converter to this query, allowing you to use your own
         * custom model objects with Firestore. When you call {@link getDocs} with
         * the returned query, the provided converter will convert between Firestore
         * data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `Query<U>` that uses the provided converter.
         */;
        }
        return t.prototype.withConverter = function(e) {
            return new t(this.firestore, e, this.C_);
        }, t;
    }(), zs = /** @class */ function(t) {
        /** @hideconstructor */
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this, e, n, re(r)) || this).firestore = e, i.D_ = r, i.type = "collection", 
            i;
        }
        return __extends$1d(e, t), Object.defineProperty(e.prototype, "id", {
            /** The collection's identifier. */ get: function() {
                return this.C_.path.tt();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "path", {
            /**
             * A string representing the path of the referenced collection (relative
             * to the root of the database).
             */
            get: function() {
                return this.C_.path.rt();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "parent", {
            /**
             * A reference to the containing `DocumentReference` if this is a
             * subcollection. If this isn't a subcollection, the reference is null.
             */
            get: function() {
                var t = this.D_.X();
                return t.et() ? null : new js(this.firestore, 
                /* converter= */ null, new tt(t));
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Applies a custom data converter to this CollectionReference, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * addDoc} with the returned `CollectionReference` instance, the provided
         * converter will convert between Firestore data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `CollectionReference<U>` that uses the provided converter.
         */
        e.prototype.withConverter = function(t) {
            return new e(this.firestore, t, this.D_);
        }, e;
    }(Fs);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Gs(t, e) {
        for (var n, r = [], i = 2; i < arguments.length; i++) r[i - 2] = arguments[i];
        if (t instanceof Ds && (t = t.d_), xs("collection", "path", e), t instanceof qs) return Ls(n = Z$1.ot.apply(Z$1, __spreadArrays([ e ], r))), 
        new zs(t, /* converter= */ null, n);
        if (!(t instanceof js || t instanceof zs)) throw new q$1(M$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        return Ls(n = Z$1.ot.apply(Z$1, __spreadArrays([ t.path ], r)).child(Z$1.ot(e))), new zs(t.firestore, 
        /* converter= */ null, n);
    }

    // TODO(firestorelite): Consider using ErrorFactory -
    // https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
    /**
     * Creates and returns a new `Query` instance that includes all documents in the
     * database that are contained in a collection or subcollection with the
     * given `collectionId`.
     *
     * @param firestore - A reference to the root Firestore instance.
     * @param collectionId - Identifies the collections to query over. Every
     * collection or subcollection with this ID as the last segment of its path
     * will be included. Cannot contain a slash.
     * @returns The created `Query`.
     */ function Bs(t, e) {
        for (var n, r = [], i = 2; i < arguments.length; i++) r[i - 2] = arguments[i];
        if (t instanceof Ds && (t = t.d_), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        1 === arguments.length && (e = L$1.u()), xs("doc", "path", e), t instanceof qs) return Ps(n = Z$1.ot.apply(Z$1, __spreadArrays([ e ], r))), 
        new js(t, 
        /* converter= */ null, new tt(n));
        if (!(t instanceof js || t instanceof zs)) throw new q$1(M$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        return Ps(n = t.D_.child(Z$1.ot.apply(Z$1, __spreadArrays([ e ], r)))), new js(t.firestore, t instanceof zs ? t.v_ : null, new tt(n));
    }

    /**
     * Returns true if the provided references are equal.
     *
     * @param left - A reference to compare.
     * @param right - A reference to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function Qs(t, e) {
        return t instanceof Ds && (t = t.d_), e instanceof Ds && (e = e.d_), (t instanceof js || t instanceof zs) && (e instanceof js || e instanceof zs) && t.firestore === e.firestore && t.path === e.path && t.v_ === e.v_
        /**
     * Returns true if the provided queries point to the same collection and apply
     * the same constraints.
     *
     * @param left - A `Query` to compare.
     * @param right - A `Query` to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */;
    }

    function Ys(t, e) {
        return t instanceof Ds && (t = t.d_), e instanceof Ds && (e = e.d_), t instanceof Fs && e instanceof Fs && t.firestore === e.firestore && le(t.C_, e.C_) && t.v_ === e.v_
        /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * An immutable object representing a geographic location in Firestore. The
     * location is represented as latitude/longitude pair.
     *
     * Latitude values are in the range of [-90, 90].
     * Longitude values are in the range of [-180, 180].
     */;
    }

    var Hs = /** @class */ function() {
        /**
         * Creates a new immutable `GeoPoint` object with the provided latitude and
         * longitude values.
         * @param latitude - The latitude as number between -90 and 90.
         * @param longitude - The longitude as number between -180 and 180.
         */
        function t(t, e) {
            if (!isFinite(t) || t < -90 || t > 90) throw new q$1(M$1.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(e) || e < -180 || e > 180) throw new q$1(M$1.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
            this.x_ = t, this.N_ = e;
        }
        return Object.defineProperty(t.prototype, "latitude", {
            /**
             * The latitude of this `GeoPoint` instance.
             */
            get: function() {
                return this.x_;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "longitude", {
            /**
             * The longitude of this `GeoPoint` instance.
             */
            get: function() {
                return this.N_;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Returns true if this `GeoPoint` is equal to the provided one.
         *
         * @param other - The `GeoPoint` to compare against.
         * @returns true if this `GeoPoint` is equal to the provided one.
         */
        t.prototype.isEqual = function(t) {
            return this.x_ === t.x_ && this.N_ === t.N_;
        }, t.prototype.toJSON = function() {
            return {
                latitude: this.x_,
                longitude: this.N_
            };
        }, 
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */
        t.prototype.U = function(t) {
            return V$1(this.x_, t.x_) || V$1(this.N_, t.N_);
        }, t;
    }(), Ks = /^__.*__$/, Xs = /** @class */ function() {
        function t(t, e, n) {
            this.data = t, this.Gt = e, this.fieldTransforms = n;
        }
        return t.prototype.F_ = function(t, e) {
            return null !== this.Gt ? new Qe(t, this.data, this.Gt, e, this.fieldTransforms) : new Be(t, this.data, e, this.fieldTransforms);
        }, t;
    }(), Ws = /** @class */ function() {
        function t(t, 
        // The fieldMask does not include document transforms.
        e, n) {
            this.data = t, this.Gt = e, this.fieldTransforms = n;
        }
        return t.prototype.F_ = function(t, e) {
            return new Qe(t, this.data, this.Gt, e, this.fieldTransforms);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Zs(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw x$1();
        }
    }

    /** A "context" object passed around while parsing user data. */ var Js = /** @class */ function() {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings - The settings for the parser.
         * @param databaseId - The database ID of the Firestore instance.
         * @param serializer - The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties - Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms - A mutable list of field transforms encountered
         * while parsing the data.
         * @param fieldMask - A mutable list of field paths encountered while parsing
         * the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        function t(t, e, n, r, i, o) {
            this.settings = t, this.t = e, this.Qt = n, this.ignoreUndefinedProperties = r, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === i && this.O_(), this.fieldTransforms = i || [], this.Gt = o || [];
        }
        return Object.defineProperty(t.prototype, "path", {
            get: function() {
                return this.settings.path;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "k_", {
            get: function() {
                return this.settings.k_;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /** Returns a new context with the specified settings overwritten. */ t.prototype.M_ = function(e) {
            return new t(Object.assign(Object.assign({}, this.settings), e), this.t, this.Qt, this.ignoreUndefinedProperties, this.fieldTransforms, this.Gt);
        }, t.prototype.L_ = function(t) {
            var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.M_({
                path: n,
                B_: !1
            });
            return r.q_(t), r;
        }, t.prototype.U_ = function(t) {
            var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.M_({
                path: n,
                B_: !1
            });
            return r.O_(), r;
        }, t.prototype.Q_ = function(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.M_({
                path: void 0,
                B_: !0
            });
        }, t.prototype.K_ = function(t) {
            return ga(t, this.settings.methodName, this.settings.W_ || !1, this.path, this.settings.j_);
        }, 
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ t.prototype.contains = function(t) {
            return void 0 !== this.Gt.find((function(e) {
                return t.nt(e);
            })) || void 0 !== this.fieldTransforms.find((function(e) {
                return t.nt(e.field);
            }));
        }, t.prototype.O_ = function() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (var t = 0; t < this.path.length; t++) this.q_(this.path.get(t));
        }, t.prototype.q_ = function(t) {
            if (0 === t.length) throw this.K_("Document fields must not be empty");
            if (Zs(this.k_) && Ks.test(t)) throw this.K_('Document fields cannot begin and end with "__"');
        }, t;
    }(), $s = /** @class */ function() {
        function t(t, e, n) {
            this.t = t, this.ignoreUndefinedProperties = e, this.Qt = n || Bo(t)
            /** Creates a new top-level parse context. */;
        }
        return t.prototype.G_ = function(t, e, n, r) {
            return void 0 === r && (r = !1), new Js({
                k_: t,
                methodName: e,
                j_: n,
                path: $.ct(),
                B_: !1,
                W_: r
            }, this.t, this.Qt, this.ignoreUndefinedProperties);
        }, t;
    }();

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */ function ta$1(t) {
        var e = t.p_(), n = Bo(t.I_);
        return new $s(t.I_, !!e.ignoreUndefinedProperties, n);
    }

    /** Parse document data from a set() call. */ function ea$1(t, e, n, r, i, o) {
        void 0 === o && (o = {});
        var u = t.G_(o.merge || o.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
        da$1("Data must be an object, but it was:", u, r);
        var s, a, c = la(r, u);
        if (o.merge) s = new it(u.Gt), a = u.fieldTransforms; else if (o.mergeFields) {
            for (var h = [], f = 0, l = o.mergeFields; f < l.length; f++) {
                var p = va$1(e, l[f], n);
                if (!u.contains(p)) throw new q$1(M$1.INVALID_ARGUMENT, "Field '" + p + "' is specified in your field mask but missing from your input data.");
                wa$1(h, p) || h.push(p);
            }
            s = new it(h), a = u.fieldTransforms.filter((function(t) {
                return s.Tt(t.field);
            }));
        } else s = null, a = u.fieldTransforms;
        return new Xs(new Dt(c), s, a);
    }

    var na$1 = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.prototype.z_ = function(t) {
            if (2 /* MergeSet */ !== t.k_) throw 1 /* Update */ === t.k_ ? t.K_(this._methodName + "() can only appear at the top level of your update data") : t.K_(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
                    return t.Gt.push(t.path), null;
        }, e.prototype.isEqual = function(t) {
            return t instanceof e;
        }, e;
    }(Ss);

    /**
     * Creates a child context for parsing SerializableFieldValues.
     *
     * This is different than calling `ParseContext.contextWith` because it keeps
     * the fieldTransforms and fieldMask separate.
     *
     * The created context has its `dataSource` set to `UserDataSource.Argument`.
     * Although these values are used with writes, any elements in these FieldValues
     * are not considered writes since they cannot contain any FieldValue sentinels,
     * etc.
     *
     * @param fieldValue - The sentinel FieldValue for which to create a child
     *     context.
     * @param context - The parent context.
     * @param arrayElement - Whether or not the FieldValue has an array.
     */ function ra$1(t, e, n) {
        return new Js({
            k_: 3 /* Argument */ ,
            j_: e.settings.j_,
            methodName: t._methodName,
            B_: n
        }, e.t, e.Qt, e.ignoreUndefinedProperties);
    }

    var ia = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.prototype.z_ = function(t) {
            return new Ve(t.path, new Ae);
        }, e.prototype.isEqual = function(t) {
            return t instanceof e;
        }, e;
    }(Ss), oa$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e) || this).H_ = n, r;
        }
        return __extends$1d(e, t), e.prototype.z_ = function(t) {
            var e = ra$1(this, t, 
            /*array=*/ !0), n = this.H_.map((function(t) {
                return fa$1(t, e);
            })), r = new Se(n);
            return new Ve(t.path, r);
        }, e.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, e;
    }(Ss), ua$2 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e) || this).H_ = n, r;
        }
        return __extends$1d(e, t), e.prototype.z_ = function(t) {
            var e = ra$1(this, t, 
            /*array=*/ !0), n = this.H_.map((function(t) {
                return fa$1(t, e);
            })), r = new xe(n);
            return new Ve(t.path, r);
        }, e.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, e;
    }(Ss), sa$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e) || this).J_ = n, r;
        }
        return __extends$1d(e, t), e.prototype.z_ = function(t) {
            var e = new Oe(t.Qt, _e(t.Qt, this.J_));
            return new Ve(t.path, e);
        }, e.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, e;
    }(Ss);

    /** Parse update data from an update() call. */ function aa$1(t, e, n, r) {
        var i = t.G_(1 /* Update */ , e, n);
        da$1("Data must be an object, but it was:", i, r);
        var o = [], u = new xt;
        nt(r, (function(t, r) {
            var s = ma$1(e, t, n);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    r instanceof Ds && (r = r.d_);
            var a = i.U_(s);
            if (r instanceof na$1) 
            // Add it to the field mask, but don't add anything to updateData.
            o.push(s); else {
                var c = fa$1(r, a);
                null != c && (o.push(s), u.set(s, c));
            }
        }));
        var s = new it(o);
        return new Ws(u.Pt(), s, i.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function ca$1(t, e, n, r, i, o) {
        var u = t.G_(1 /* Update */ , e, n), s = [ va$1(e, r, n) ], a = [ i ];
        if (o.length % 2 != 0) throw new q$1(M$1.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
        for (var c = 0; c < o.length; c += 2) s.push(va$1(e, o[c])), a.push(o[c + 1]);
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (var h = [], f = new xt, l = s.length - 1; l >= 0; --l) if (!wa$1(h, s[l])) {
            var p = s[l], d = a[l];
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
            d instanceof Ds && (d = d.d_);
            var v = u.U_(p);
            if (d instanceof na$1) 
            // Add it to the field mask, but don't add anything to updateData.
            h.push(p); else {
                var y = fa$1(d, v);
                null != y && (h.push(p), f.set(p, y));
            }
        }
        var m = new it(h);
        return new Ws(f.Pt(), m, u.fieldTransforms);
    }

    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays - Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */ function ha$1(t, e, n, r) {
        return void 0 === r && (r = !1), fa$1(n, t.G_(r ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input - Data to be parsed.
     * @param context - A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @returns The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function fa$1(t, e) {
        if (
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t instanceof Ds && (t = t.d_), pa$1(t)) return da$1("Unsupported field value:", e, t), 
        la(t, e);
        if (t instanceof Ss) 
        // FieldValues usually parse into transforms (except FieldValue.delete())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
         * "Parses" the provided FieldValueImpl, adding any necessary transforms to
         * context.fieldTransforms.
         */
        return function(t, e) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!Zs(e.k_)) throw e.K_(t._methodName + "() can only be used with update() and set()");
            if (!e.path) throw e.K_(t._methodName + "() is not currently supported inside arrays");
            var n = t.z_(e);
            n && e.fieldTransforms.push(n);
        }(t, e), null;
        if (void 0 === t && e.ignoreUndefinedProperties) 
        // If the input is undefined it can never participate in the fieldMask, so
        // don't handle this below. If `ignoreUndefinedProperties` is false,
        // `parseScalarValue` will reject an undefined value.
        return null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        e.path && e.Gt.push(e.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (e.settings.B_ && 4 /* ArrayArgument */ !== e.k_) throw e.K_("Nested arrays are not supported");
            return function(t, e) {
                for (var n = [], r = 0, i = 0, o = t; i < o.length; i++) {
                    var u = fa$1(o[i], e.Q_(r));
                    null == u && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    u = {
                        nullValue: "NULL_VALUE"
                    }), n.push(u), r++;
                }
                return {
                    arrayValue: {
                        values: n
                    }
                };
            }(t, e);
        }
        return function(t, e) {
            if (t instanceof Ds && (t = t.d_), null === t) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return _e(e.Qt, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                var n = K$1.fromDate(t);
                return {
                    timestampValue: Cn(e.Qt, n)
                };
            }
            if (t instanceof K$1) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                n = new K$1(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: Cn(e.Qt, n)
                };
            }
            if (t instanceof Hs) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof j) return {
                bytesValue: Rn(e.Qt, t.I)
            };
            if (t instanceof js) {
                n = e.t;
                var r = t.firestore.I_;
                if (!r.isEqual(n)) throw e.K_("Document reference is for database " + r.projectId + "/" + r.database + " but should be for database " + n.projectId + "/" + n.database);
                return {
                    referenceValue: qn(t.firestore.I_ || e.t, t.S_.path)
                };
            }
            throw e.K_("Unsupported field value: " + Vs(t));
        }(t, e);
    }

    function la(t, e) {
        var n = {};
        return rt(t) ? 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        e.path && e.path.length > 0 && e.Gt.push(e.path) : nt(t, (function(t, r) {
            var i = fa$1(r, e.L_(t));
            null != i && (n[t] = i);
        })), {
            mapValue: {
                fields: n
            }
        };
    }

    function pa$1(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof K$1 || t instanceof Hs || t instanceof j || t instanceof js || t instanceof Ss);
    }

    function da$1(t, e, n) {
        if (!pa$1(n) || !function(t) {
            return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
        }(n)) {
            var r = Vs(n);
            throw "an object" === r ? e.K_(t + " a custom object") : e.K_(t + " " + r);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function va$1(t, e, n) {
        if (
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        e instanceof Ds && (e = e.d_), e instanceof As) return e.f_;
        if ("string" == typeof e) return ma$1(t, e);
        throw ga("Field path arguments must be of type string or FieldPath.", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
    }

    /**
     * Matches any characters in a field path string that are reserved.
     */ var ya = new RegExp("[~\\*/\\[\\]]");

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName - The publicly visible method name
     * @param path - The dot-separated string form of a field path which will be
     * split on dots.
     * @param targetDoc - The document against which the field path will be
     * evaluated.
     */ function ma$1(t, e, n) {
        if (e.search(ya) >= 0) throw ga("Invalid field path (" + e + "). Paths must not contain '~', '*', '/', '[', or ']'", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
        try {
            return (new (As.bind.apply(As, __spreadArrays([ void 0 ], e.split("."))))).f_;
        } catch (r) {
            throw ga("Invalid field path (" + e + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, n);
        }
    }

    function ga(t, e, n, r, i) {
        var o = r && !r.et(), u = void 0 !== i, s = "Function " + e + "() called with invalid data";
        n && (s += " (via `toFirestore()`)");
        var a = "";
        return (o || u) && (a += " (found", o && (a += " in field " + r), u && (a += " in document " + i), 
        a += ")"), new q$1(M$1.INVALID_ARGUMENT, (s += ". ") + t + a)
        /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */;
    }

    function wa$1(t, e) {
        return t.some((function(t) {
            return t.isEqual(e);
        }));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal transaction object responsible for accumulating the mutations to
     * perform and the base versions for any documents read.
     */ var ba$1 = /** @class */ function() {
        function t(t) {
            this.Sh = t, 
            // The version of each document that was read during this transaction.
            this.Y_ = new Map, this.mutations = [], this.X_ = !1, 
            /**
                 * A deferred usage error that occurred previously in this transaction that
                 * will cause the transaction to fail once it actually commits.
                 */
            this.Z_ = null, 
            /**
                 * Set of documents that have been written in the transaction.
                 *
                 * When there's more than one write to the same key in a transaction, any
                 * writes after the first are handled differently.
                 */
            this.tf = new Set;
        }
        return t.prototype.ef = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, n = this;
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        if (this.nf(), this.mutations.length > 0) throw new q$1(M$1.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                        return [ 4 /*yield*/ , function(t, e) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var n, r, i, o, u, s;
                                return __generator(this, (function(a) {
                                    switch (a.label) {
                                      case 0:
                                        return n = O$1(t), r = Qn(n.Qt) + "/documents", i = {
                                            documents: e.map((function(t) {
                                                return Fn(n.Qt, t);
                                            }))
                                        }, [ 4 /*yield*/ , n.Du("BatchGetDocuments", r, i) ];

                                      case 1:
                                        return o = a.sent(), u = new Map, o.forEach((function(t) {
                                            var e = function(t, e) {
                                                return "found" in e ? function(t, e) {
                                                    k$1(!!e.found), e.found.name, e.found.updateTime;
                                                    var n = zn(t, e.found.name), r = Mn(e.found.updateTime), i = new Dt({
                                                        mapValue: {
                                                            fields: e.found.fields
                                                        }
                                                    });
                                                    return new Pt(n, r, i, {});
                                                }(t, e) : "missing" in e ? function(t, e) {
                                                    k$1(!!e.missing), k$1(!!e.readTime);
                                                    var n = zn(t, e.missing), r = Mn(e.readTime);
                                                    return new Lt(n, r);
                                                }(t, e) : x$1();
                                            }(n.Qt, t);
                                            u.set(e.key.toString(), e);
                                        })), s = [], [ 2 /*return*/ , (e.forEach((function(t) {
                                            var e = u.get(t.toString());
                                            k$1(!!e), s.push(e);
                                        })), s) ];
                                    }
                                }));
                            }));
                        }(this.Sh, t) ];

                      case 1:
                        return [ 2 /*return*/ , ((e = r.sent()).forEach((function(t) {
                            t instanceof Lt || t instanceof Pt ? n.sf(t) : x$1();
                        })), e) ];
                    }
                }));
            }));
        }, t.prototype.set = function(t, e) {
            this.write(e.F_(t, this.jt(t))), this.tf.add(t.toString());
        }, t.prototype.update = function(t, e) {
            try {
                this.write(e.F_(t, this.rf(t)));
            } catch (t) {
                this.Z_ = t;
            }
            this.tf.add(t.toString());
        }, t.prototype.delete = function(t) {
            this.write(new Je(t, this.jt(t))), this.tf.add(t.toString());
        }, t.prototype.commit = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        if (this.nf(), this.Z_) throw this.Z_;
                        return t = this.Y_, 
                        // For each mutation, note that the doc was written.
                        this.mutations.forEach((function(e) {
                            t.delete(e.key.toString());
                        })), 
                        // For each document that was read but not written to, we want to perform
                        // a `verify` operation.
                        t.forEach((function(t, n) {
                            var r = tt._t(n);
                            e.mutations.push(new $e(r, e.jt(r)));
                        })), [ 4 /*yield*/ , function(t, e) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var n, r, i;
                                return __generator(this, (function(o) {
                                    switch (o.label) {
                                      case 0:
                                        return n = O$1(t), r = Qn(n.Qt) + "/documents", i = {
                                            writes: e.map((function(t) {
                                                return Xn(n.Qt, t);
                                            }))
                                        }, [ 4 /*yield*/ , n.pu("Commit", r, i) ];

                                      case 1:
                                        return o.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        }(this.Sh, this.mutations) ];

                      case 1:
                        // For each mutation, note that the doc was written.
                        return n.sent(), this.X_ = !0, [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.sf = function(t) {
            var e;
            if (t instanceof Pt) e = t.version; else {
                if (!(t instanceof Lt)) throw x$1();
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                            e = X$1.min();
            }
            var n = this.Y_.get(t.key.toString());
            if (n) {
                if (!e.isEqual(n)) 
                // This transaction will fail no matter what.
                throw new q$1(M$1.ABORTED, "Document version changed between two reads.");
            } else this.Y_.set(t.key.toString(), e);
        }, 
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */
        t.prototype.jt = function(t) {
            var e = this.Y_.get(t.toString());
            return !this.tf.has(t.toString()) && e ? Re.updateTime(e) : Re.Kt();
        }, 
        /**
         * Returns the precondition for a document if the operation is an update.
         */
        t.prototype.rf = function(t) {
            var e = this.Y_.get(t.toString());
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.tf.has(t.toString()) && e) {
                if (e.isEqual(X$1.min())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new q$1(M$1.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return Re.updateTime(e);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
                    return Re.exists(!0);
        }, t.prototype.write = function(t) {
            this.nf(), this.mutations.push(t);
        }, t.prototype.nf = function() {}, t;
    }(), _a$2 = /** @class */ function() {
        function t(t, e, n, r) {
            this._s = t, this.Sh = e, this.updateFunction = n, this.Es = r, this.cf = 5, this.Gu = new Qo(this._s, "transaction_retry" /* TransactionRetry */)
            /** Runs the transaction and sets the result on deferred. */;
        }
        return t.prototype.run = function() {
            this.af();
        }, t.prototype.af = function() {
            var t = this;
            this.Gu.$u((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    var t, e, n = this;
                    return __generator(this, (function(r) {
                        return t = new ba$1(this.Sh), (e = this.uf(t)) && e.then((function(e) {
                            n._s.Ps((function() {
                                return t.commit().then((function() {
                                    n.Es.resolve(e);
                                })).catch((function(t) {
                                    n.hf(t);
                                }));
                            }));
                        })).catch((function(t) {
                            n.hf(t);
                        })), [ 2 /*return*/ ];
                    }));
                }));
            }));
        }, t.prototype.uf = function(t) {
            try {
                var e = this.updateFunction(t);
                return !lt(e) && e.catch && e.then ? e : (this.Es.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.Es.reject(t), null;
            }
        }, t.prototype.hf = function(t) {
            var e = this;
            this.cf > 0 && this.lf(t) ? (this.cf -= 1, this._s.Ps((function() {
                return e.af(), Promise.resolve();
            }))) : this.Es.reject(t);
        }, t.prototype.lf = function(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                var e = t.code;
                return "aborted" === e || "failed-precondition" === e || !en(e);
            }
            return !1;
        }, t;
    }(), Ia$1 = /** @class */ function() {
        function t(t, 
        /**
         * Asynchronous queue responsible for all of our internal processing. When
         * we get incoming work from the user (via public API) or the network
         * (incoming GRPC messages), we should always schedule onto this queue.
         * This ensures all of our work is properly serialized (e.g. we don't
         * start processing a new operation while the previous one is waiting for
         * an async I/O to complete).
         */
        e, n) {
            var r = this;
            this.credentials = t, this._s = e, this.yu = n, this.user = F$1.UNAUTHENTICATED, this.clientId = L$1.u(), 
            this._f = function() {}, this.C = new fr, this.credentials.v((function(t) {
                N$1("FirestoreClient", "Received user=", t.uid), r.user = t, r._f(t), r.C.resolve();
            }));
        }
        return t.prototype.getConfiguration = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.C.promise ];

                      case 1:
                        return [ 2 /*return*/ , (t.sent(), {
                            _s: this._s,
                            yu: this.yu,
                            clientId: this.clientId,
                            credentials: this.credentials,
                            Jl: this.user,
                            pl: 100
                        }) ];
                    }
                }));
            }));
        }, t.prototype.ff = function(t) {
            var e = this;
            this._f = t, 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.C.promise.then((function() {
                return e._f(e.user);
            }));
        }, 
        /**
         * Checks that the client has not been terminated. Ensures that other methods on
         * this class cannot be called after the client is terminated.
         */
        t.prototype.df = function() {
            if (this._s.wf) throw new q$1(M$1.FAILED_PRECONDITION, "The client has already been terminated.");
        }, t.prototype.terminate = function() {
            var t = this;
            this._s.Ef();
            var e = new fr;
            return this._s.Tf((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    var t, n;
                    return __generator(this, (function(r) {
                        switch (r.label) {
                          case 0:
                            return r.trys.push([ 0, 5, , 6 ]), this.If ? [ 4 /*yield*/ , this.If.terminate() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            r.sent(), r.label = 2;

                          case 2:
                            return this.mf ? [ 4 /*yield*/ , this.mf.terminate() ] : [ 3 /*break*/ , 4 ];

                          case 3:
                            r.sent(), r.label = 4;

                          case 4:
                            // `removeChangeListener` must be called after shutting down the
                            // RemoteStore as it will prevent the RemoteStore from retrieving
                            // auth tokens.
                            return this.credentials.S(), e.resolve(), [ 3 /*break*/ , 6 ];

                          case 5:
                            return t = r.sent(), n = Er(t, "Failed to shutdown persistence"), e.reject(n), [ 3 /*break*/ , 6 ];

                          case 6:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), e.promise;
        }, t;
    }();

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * TransactionRunner encapsulates the logic needed to run and retry transactions
     * with backoff.
     */ function Ea$1(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r, i = this;
            return __generator(this, (function(o) {
                switch (o.label) {
                  case 0:
                    return t._s.Af(), N$1("FirestoreClient", "Initializing OfflineComponentProvider"), 
                    [ 4 /*yield*/ , t.getConfiguration() ];

                  case 1:
                    return n = o.sent(), [ 4 /*yield*/ , e.initialize(n) ];

                  case 2:
                    return o.sent(), r = n.Jl, t.ff((function(n) {
                        r.isEqual(n) || (r = n, t._s.po((function() {
                            return __awaiter(i, void 0, void 0, (function() {
                                return __generator(this, (function(t) {
                                    switch (t.label) {
                                      case 0:
                                        return [ 4 /*yield*/ , no(e.bh, n) ];

                                      case 1:
                                        return t.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        })));
                    })), 
                    // When a user calls clearPersistence() in one client, all other clients
                    // need to be terminated to allow the delete to succeed.
                    e.persistence.Po((function() {
                        return t.terminate();
                    })), t.mf = e, [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Ta$1(t, e) {
        return __awaiter(this, void 0, void 0, (function() {
            var n, r;
            return __generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    return t._s.Af(), [ 4 /*yield*/ , Na$1(t) ];

                  case 1:
                    return n = i.sent(), N$1("FirestoreClient", "Initializing OnlineComponentProvider"), 
                    [ 4 /*yield*/ , t.getConfiguration() ];

                  case 2:
                    return r = i.sent(), [ 4 /*yield*/ , e.initialize(n, r) ];

                  case 3:
                    return i.sent(), 
                    // The CredentialChangeListener of the online component provider takes
                    // precedence over the offline component provider.
                    t.ff((function(n) {
                        return t._s.po((function() {
                            return function(t, e) {
                                return __awaiter(this, void 0, void 0, (function() {
                                    var n, r;
                                    return __generator(this, (function(i) {
                                        switch (i.label) {
                                          case 0:
                                            return (n = O$1(t))._s.Af(), N$1("RemoteStore", "RemoteStore received new credentials"), 
                                            r = uu(n), 
                                            // Tear down and re-create our network streams. This will ensure we get a
                                            // fresh auth token for the new user and re-fill the write pipeline with
                                            // new mutations from the LocalStore (since mutations are per-user).
                                            n.Nh.add(3 /* CredentialChange */), [ 4 /*yield*/ , $o(n) ];

                                          case 1:
                                            return i.sent(), r && 
                                            // Don't set the network status to Unknown if we are offline.
                                            n.kh.set("Unknown" /* Unknown */), [ 4 /*yield*/ , n.Dh.n_(e) ];

                                          case 2:
                                            return i.sent(), n.Nh.delete(3 /* CredentialChange */), [ 4 /*yield*/ , Jo(n) ];

                                          case 3:
                                            // Tear down and re-create our network streams. This will ensure we get a
                                            // fresh auth token for the new user and re-fill the write pipeline with
                                            // new mutations from the LocalStore (since mutations are per-user).
                                            return i.sent(), [ 2 /*return*/ ];
                                        }
                                    }));
                                }));
                            }(e.yl, n);
                        }));
                    })), t.If = e, [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function Na$1(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return t.mf ? [ 3 /*break*/ , 2 ] : (N$1("FirestoreClient", "Using default OfflineComponentProvider"), 
                    [ 4 /*yield*/ , Ea$1(t, new ws) ]);

                  case 1:
                    e.sent(), e.label = 2;

                  case 2:
                    return [ 2 /*return*/ , t.mf ];
                }
            }));
        }));
    }

    function Aa$1(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return t.If ? [ 3 /*break*/ , 2 ] : (N$1("FirestoreClient", "Using default OnlineComponentProvider"), 
                    [ 4 /*yield*/ , Ta$1(t, new Is) ]);

                  case 1:
                    e.sent(), e.label = 2;

                  case 2:
                    return [ 2 /*return*/ , t.If ];
                }
            }));
        }));
    }

    function Sa$1(t) {
        return Na$1(t).then((function(t) {
            return t.persistence;
        }));
    }

    function Da$1(t) {
        return Na$1(t).then((function(t) {
            return t.bh;
        }));
    }

    function xa(t) {
        return Aa$1(t).then((function(t) {
            return t.yl;
        }));
    }

    function ka$1(t) {
        return Aa$1(t).then((function(t) {
            return t._a;
        }));
    }

    function Oa$1(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, n;
            return __generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return [ 4 /*yield*/ , Aa$1(t) ];

                  case 1:
                    return e = r.sent(), [ 2 /*return*/ , ((n = e.gl).jh = Fu.bind(null, e._a), n.Hh = Gu.bind(null, e._a), 
                    n) ];
                }
            }));
        }));
    }

    /** Enables the network connection and re-enqueues all pending operations. */ function Pa$1(t, e, n) {
        var r = this;
        void 0 === n && (n = {});
        var i = new fr;
        return t._s.Ps((function() {
            return __awaiter(r, void 0, void 0, (function() {
                var r;
                return __generator(this, (function(o) {
                    switch (o.label) {
                      case 0:
                        return r = function(t, e, n, r, i) {
                            var o = new Ts({
                                next: function(o) {
                                    // Remove query first before passing event to user to avoid
                                    // user actions affecting the now stale query.
                                    e.Ps((function() {
                                        return Au(t, u);
                                    }));
                                    var s = o.docs.has(n);
                                    !s && o.fromCache ? 
                                    // TODO(dimond): If we're online and the document doesn't
                                    // exist then we resolve with a doc.exists set to false. If
                                    // we're offline however, we reject the Promise in this
                                    // case. Two options: 1) Cache the negative response from
                                    // the server so we can deliver that even when you're
                                    // offline 2) Actually reject the Promise in the online case
                                    // if the document doesn't exist.
                                    i.reject(new q$1(M$1.UNAVAILABLE, "Failed to get document because the client is offline.")) : s && o.fromCache && r && "server" === r.source ? i.reject(new q$1(M$1.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(o);
                                },
                                error: function(t) {
                                    return i.reject(t);
                                }
                            }), u = new ku(re(n.path), o, {
                                includeMetadataChanges: !0,
                                nl: !0
                            });
                            return Nu(t, u);
                        }, [ 4 /*yield*/ , Oa$1(t) ];

                      case 1:
                        return [ 2 /*return*/ , r.apply(void 0, [ o.sent(), t._s, e, n, i ]) ];
                    }
                }));
            }));
        })), i.promise;
    }

    function La$1(t, e, n) {
        var r = this;
        void 0 === n && (n = {});
        var i = new fr;
        return t._s.Ps((function() {
            return __awaiter(r, void 0, void 0, (function() {
                var r;
                return __generator(this, (function(o) {
                    switch (o.label) {
                      case 0:
                        return r = function(t, e, n, r, i) {
                            var o = new Ts({
                                next: function(n) {
                                    // Remove query first before passing event to user to avoid
                                    // user actions affecting the now stale query.
                                    e.Ps((function() {
                                        return Au(t, u);
                                    })), n.fromCache && "server" === r.source ? i.reject(new q$1(M$1.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                                },
                                error: function(t) {
                                    return i.reject(t);
                                }
                            }), u = new ku(n, o, {
                                includeMetadataChanges: !0,
                                nl: !0
                            });
                            return Nu(t, u);
                        }, [ 4 /*yield*/ , Oa$1(t) ];

                      case 1:
                        return [ 2 /*return*/ , r.apply(void 0, [ o.sent(), t._s, e, n, i ]) ];
                    }
                }));
            }));
        })), i.promise;
    }

    var Va$1 = /** @class */ function() {
        function t() {
            var t = this;
            // The last promise in the queue.
                    this.Rf = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.Pf = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.yf = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.gf = [], 
            // visible for testing
            this.Vf = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.pf = !1, 
            // List of TimerIds to fast-forward delays for.
            this.bf = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.Gu = new Qo(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.vf = function() {
                var e = Go();
                e && N$1("AsyncQueue", "Visibility state changed to " + e.visibilityState), t.Gu.qu();
            };
            var e = Go();
            e && "function" == typeof e.addEventListener && e.addEventListener("visibilitychange", this.vf);
        }
        return Object.defineProperty(t.prototype, "wf", {
            get: function() {
                return this.yf;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */
        t.prototype.Ps = function(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }, t.prototype.Tf = function(t) {
            this.Sf(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.Df(t);
        }, t.prototype.Ef = function() {
            if (!this.yf) {
                this.yf = !0;
                var t = Go();
                t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.vf);
            }
        }, t.prototype.enqueue = function(t) {
            return this.Sf(), this.yf ? new Promise((function(t) {})) : this.Df(t);
        }, t.prototype.po = function(t) {
            var e = this;
            this.Ps((function() {
                return e.Pf.push(t), e.Cf();
            }));
        }, 
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */
        t.prototype.Cf = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        if (0 === this.Pf.length) return [ 3 /*break*/ , 5 ];
                        n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , this.Pf[0]() ];

                      case 2:
                        return n.sent(), this.Pf.shift(), this.Gu.reset(), [ 3 /*break*/ , 4 ];

                      case 3:
                        if (!mr(t = n.sent())) throw t;
                        // Failure will be handled by AsyncQueue
                                            return N$1("AsyncQueue", "Operation failed with retryable error: " + t), 
                        [ 3 /*break*/ , 4 ];

                      case 4:
                        this.Pf.length > 0 && 
                        // If there are additional operations, we re-schedule `retryNextOp()`.
                        // This is necessary to run retryable operations that failed during
                        // their initial attempt since we don't know whether they are already
                        // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                        // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                        // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                        // call scheduled here.
                        // Since `backoffAndRun()` cancels an existing backoff and schedules a
                        // new backoff on every call, there is only ever a single additional
                        // operation in the queue.
                        this.Gu.$u((function() {
                            return e.Cf();
                        })), n.label = 5;

                      case 5:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Df = function(t) {
            var e = this, n = this.Rf.then((function() {
                return e.pf = !0, t().catch((function(t) {
                    // Re-throw the error so that this.tail becomes a rejected Promise and
                    // all further attempts to chain (via .then) will just short-circuit
                    // and return the rejected Promise.
                    throw e.Vf = t, e.pf = !1, A$1("INTERNAL UNHANDLED ERROR: ", 
                    /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error - Error or FirestoreError
     */
                    function(t) {
                        var e = t.message || "";
                        return t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack), 
                        e;
                    }(t)), t;
                })).then((function(t) {
                    return e.pf = !1, t;
                }));
            }));
            return this.Rf = n, n;
        }, t.prototype.Tr = function(t, e, n) {
            var r = this;
            this.Sf(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.bf.indexOf(t) > -1 && (e = 0);
            var i = Ir.Ts(this, t, e, n, (function(t) {
                return r.xf(t);
            }));
            return this.gf.push(i), i;
        }, t.prototype.Sf = function() {
            this.Vf && x$1();
        }, t.prototype.Af = function() {}, 
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */
        t.prototype.Nf = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t;
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return [ 4 /*yield*/ , t = this.Rf ];

                      case 1:
                        e.sent(), e.label = 2;

                      case 2:
                        if (t !== this.Rf) return [ 3 /*break*/ , 0 ];
                        e.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */
        t.prototype.Ff = function(t) {
            for (var e = 0, n = this.gf; e < n.length; e++) {
                if (n[e].fs === t) return !0;
            }
            return !1;
        }, 
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId - Delayed operations up to and including this TimerId
         * will be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */
        t.prototype.Of = function(t) {
            var e = this;
            // Note that draining may generate more delayed ops, so we do that first.
                    return this.Nf().then((function() {
                // Run ops in the same order they'd run if they ran naturally.
                e.gf.sort((function(t, e) {
                    return t.ds - e.ds;
                }));
                for (var n = 0, r = e.gf; n < r.length; n++) {
                    var i = r[n];
                    if (i.Rs(), "all" /* All */ !== t && i.fs === t) break;
                }
                return e.Nf();
            }));
        }, 
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */
        t.prototype.kf = function(t) {
            this.bf.push(t);
        }, 
        /** Called once a DelayedOperation is run or canceled. */ t.prototype.xf = function(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            var e = this.gf.indexOf(t);
            this.gf.splice(e, 1);
        }, t;
    }();

    function Ca$1(t) {
        /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
        return function(t, e) {
            if ("object" != typeof t || null === t) return !1;
            for (var n = t, r = 0, i = [ "next", "error", "complete" ]; r < i.length; r++) {
                var o = i[r];
                if (o in n && "function" == typeof n[o]) return !0;
            }
            return !1;
        }(t);
    }

    var Ra$1 = /** @class */ function() {
        function t() {
            this.Mf = {}, this.Lf = new fr, this.$f = {
                taskState: "Running",
                totalBytes: 0,
                totalDocuments: 0,
                bytesLoaded: 0,
                documentsLoaded: 0
            }
            /**
         * Registers functions to listen to bundle loading progress events.
         * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
         *   each time a Firestore document is loaded from the bundle.
         * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
         *   error, and there should be no more updates after this.
         * @param complete - Called when the loading task is complete.
         */;
        }
        return t.prototype.onProgress = function(t, e, n) {
            this.Mf = {
                next: t,
                error: e,
                complete: n
            };
        }, 
        /**
         * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
         *
         * @param onRejected - Called when an error occurs during bundle loading.
         */
        t.prototype.catch = function(t) {
            return this.Lf.promise.catch(t);
        }, 
        /**
         * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
         *
         * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
         *   The update will always have its `taskState` set to `"Success"`.
         * @param onRejected - Called when an error occurs during bundle loading.
         */
        t.prototype.then = function(t, e) {
            return this.Lf.promise.then(t, e);
        }, 
        /**
         * Notifies all observers that bundle loading has completed, with a provided
         * `LoadBundleTaskProgress` object.
         *
         * @private
         */
        t.prototype.ql = function(t) {
            this.Ul(t), this.Mf.complete && this.Mf.complete(), this.Lf.resolve(t);
        }, 
        /**
         * Notifies all observers that bundle loading has failed, with a provided
         * `Error` as the reason.
         *
         * @private
         */
        t.prototype.Kl = function(t) {
            this.$f.taskState = "Error", this.Mf.next && this.Mf.next(this.$f), this.Mf.error && this.Mf.error(t), 
            this.Lf.reject(t);
        }, 
        /**
         * Notifies a progress update of loading a bundle.
         * @param progress - The new progress.
         *
         * @private
         */
        t.prototype.Ul = function(t) {
            this.$f = t, this.Mf.next && this.Mf.next(t);
        }, t;
    }(), Ua$1 = -1, Ma$1 = /** @class */ function(t) {
        /** @hideconstructor */
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e, n) || this).Bf = new Va$1, r.w_ = "name" in e ? e.name : "[DEFAULT]", 
            r;
        }
        return __extends$1d(e, t), e.prototype.b_ = function() {
            return this.qf || 
            // The client must be initialized to ensure that all subsequent API
            // usage throws an exception.
            ja$1(this), this.qf.terminate();
        }, e;
    }(qs);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** DOMException error code constants. */ function qa$1(t) {
        return t.qf || ja$1(t), t.qf.df(), t.qf;
    }

    function ja$1(t) {
        var e = t.p_(), n = function(t, e, n) {
            return new _(t, e, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling);
        }(t.I_, t.w_, e);
        t.qf = new Ia$1(t.m_, t.Bf, n);
    }

    /**
     * Attempts to enable persistent storage, if possible.
     *
     * Must be called before any other functions (other than
     * {@link initializeFirestore}, {@link getFirestore} or
     * {@link clearIndexedDbPersistence}.
     *
     * If this fails, `enableIndexedDbPersistence()` will reject the promise it
     * returns. Note that even after this failure, the `Firestore` instance will
     * remain usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the `code` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param firestore - The `Firestore` instance to enable persistence for.
     * @param persistenceSettings - Optional settings object to configure
     * persistence.
     * @returns A promise that represents successfully enabling persistent storage.
     */
    /**
     * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
     * If the operation fails with a recoverable error (see
     * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
     * but the client remains usable.
     */ function Fa$1(t, e, n) {
        var r = this, i = new fr;
        return t._s.enqueue((function() {
            return __awaiter(r, void 0, void 0, (function() {
                var r;
                return __generator(this, (function(o) {
                    switch (o.label) {
                      case 0:
                        return o.trys.push([ 0, 3, , 4 ]), [ 4 /*yield*/ , Ea$1(t, n) ];

                      case 1:
                        return o.sent(), [ 4 /*yield*/ , Ta$1(t, e) ];

                      case 2:
                        return o.sent(), i.resolve(), [ 3 /*break*/ , 4 ];

                      case 3:
                        if (!
                        /**
             * Decides whether the provided error allows us to gracefully disable
             * persistence (as opposed to crashing the client).
             */
                        function(t) {
                            return "FirebaseError" === t.name ? t.code === M$1.FAILED_PRECONDITION || t.code === M$1.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || (22 === t.code || 20 === t.code || 
                            // Firefox Private Browsing mode disables IndexedDb and returns
                            // INVALID_STATE for any usage.
                            11 === t.code);
                        }(r = o.sent())) throw r;
                        return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + r), 
                        i.reject(r), [ 3 /*break*/ , 4 ];

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        })).then((function() {
            return i.promise;
        }));
    }

    /**
     * Re-enables use of the network for this Firestore instance after a prior
     * call to {@link disableNetwork}.
     *
     * @returns A promise that is resolved once the network has been enabled.
     */
    function za$1(t) {
        if (t.R_ || t.P_) throw new q$1(M$1.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     */ var Ga$1 = /** @class */ function() {
        function t() {}
        return t.prototype.Uf = function(t, e) {
            switch (void 0 === e && (e = "none"), vt(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return st(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.Qf(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.Kf(t, e);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return this.Wf(at(t.bytesValue));

              case 7 /* RefValue */ :
                return this.jf(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.Gf(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.zf(t.arrayValue, e);

              case 10 /* ObjectValue */ :
                return this.Hf(t.mapValue, e);

              default:
                throw x$1();
            }
        }, t.prototype.Hf = function(t, e) {
            var n = this, r = {};
            return nt(t.fields || {}, (function(t, i) {
                r[t] = n.Uf(i, e);
            })), r;
        }, t.prototype.Gf = function(t) {
            return new Hs(st(t.latitude), st(t.longitude));
        }, t.prototype.zf = function(t, e) {
            var n = this;
            return (t.values || []).map((function(t) {
                return n.Uf(t, e);
            }));
        }, t.prototype.Kf = function(t, e) {
            switch (e) {
              case "previous":
                var n = ht(t);
                return null == n ? null : this.Uf(n, e);

              case "estimate":
                return this.Qf(ft(t));

              default:
                return null;
            }
        }, t.prototype.Qf = function(t) {
            var e = ut(t);
            return new K$1(e.seconds, e.nanos);
        }, t.prototype.Jf = function(t, e) {
            var n = Z$1.ot(t);
            k$1(hr(n));
            var r = new I$1(n.get(1), n.get(3)), i = new tt(n.Y(5));
            return r.isEqual(e) || 
            // TODO(b/64130202): Somehow support foreign references.
            A$1("Document " + i + " contains a document reference within a different database (" + r.projectId + "/" + r.database + ") which is not supported. It will be treated as a reference in the current database (" + e.projectId + "/" + e.database + ") instead."), 
            i;
        }, t;
    }(), Ba$1 = /** @class */ function() {
        // Note: This class is stripped down version of the DocumentSnapshot in
        // the legacy SDK. The changes are:
        // - No support for SnapshotMetadata.
        // - No support for SnapshotOptions.
        /** @hideconstructor protected */
        function t(t, e, n, r, i) {
            this.Yf = t, this.Xf = e, this.S_ = n, this.Zf = r, this.v_ = i;
        }
        return Object.defineProperty(t.prototype, "id", {
            /** Property of the `DocumentSnapshot` that provides the document's ID. */ get: function() {
                return this.S_.path.tt();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "ref", {
            /**
             * The `DocumentReference` for the document included in the `DocumentSnapshot`.
             */
            get: function() {
                return new js(this.Yf, this.v_, this.S_);
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Signals whether or not the document at the snapshot's location exists.
         *
         * @returns true if the document exists.
         */
        t.prototype.exists = function() {
            return null !== this.Zf;
        }, 
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * @returns An `Object` containing all fields in the document or `undefined`
         * if the document doesn't exist.
         */
        t.prototype.data = function() {
            if (this.Zf) {
                if (this.v_) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    var t = new Qa$1(this.Yf, this.Xf, this.S_, this.Zf, 
                    /* converter= */ null);
                    return this.v_.fromFirestore(t);
                }
                return this.Xf.Uf(this.Zf.bt());
            }
        }, 
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t.prototype.get = function(t) {
            if (this.Zf) {
                var e = this.Zf.data().field(Ya$1("DocumentSnapshot.get", t));
                if (null !== e) return this.Xf.Uf(e);
            }
        }, t;
    }(), Qa$1 = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * @override
         * @returns An `Object` containing all fields in the document.
         */    return __extends$1d(e, t), e.prototype.data = function() {
            return t.prototype.data.call(this);
        }, e;
    }(Ba$1);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */
    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */
    function Ya$1(t, e) {
        return "string" == typeof e ? ma$1(t, e) : e instanceof Ds ? e.d_.f_ : e.f_;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Ha$1(t) {
        if (oe(t) && 0 === t.xt.length) throw new q$1(M$1.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }

    /**
     * A `QueryConstraint` is used to narrow the set of documents returned by a
     * Firestore query. `QueryConstraint`s are created by invoking {@link where},
     * {@link orderBy}, {@link startAt}, {@link startAfter}, {@link
     * endBefore}, {@link endAt}, {@link limit} or {@link limitToLast} and
     * can then be passed to {@link query} to create a new query instance that
     * also contains this `QueryConstraint`.
     */ var Ka$1 = function() {};

    /**
     * Creates a new immutable instance of `query` that is extended to also include
     * additional query constraints.
     *
     * @param query - The query instance to use as a base for the new constraints.
     * @param queryConstraints - The list of `QueryConstraint`s to apply.
     * @throws if any of the provided query constraints cannot be combined with the
     * existing or new constraints.
     */ function Xa$1(t) {
        for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
        for (var r = 0, i = e; r < i.length; r++) {
            var o = i[r];
            t = o.td(t);
        }
        return t;
    }

    var Wa$1 = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this) || this).ed = e, i.nd = n, i.sd = r, i.type = "where", 
            i;
        }
        return __extends$1d(e, t), e.prototype.td = function(t) {
            var e = ta$1(t.firestore), n = function(t, e, n, r, i, o, u) {
                var s;
                if (i.ut()) {
                    if ("array-contains" /* ARRAY_CONTAINS */ === o || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === o) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
                    if ("in" /* IN */ === o || "not-in" /* NOT_IN */ === o) {
                        rc$1(u, o);
                        for (var a = [], c = 0, h = u; c < h.length; c++) {
                            var f = h[c];
                            a.push(nc$1(r, t, f));
                        }
                        s = {
                            arrayValue: {
                                values: a
                            }
                        };
                    } else s = nc$1(r, t, u);
                } else "in" /* IN */ !== o && "not-in" /* NOT_IN */ !== o && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== o || rc$1(u, o), 
                s = ha$1(n, "where", u, 
                /* allowArrays= */ "in" /* IN */ === o || "not-in" /* NOT_IN */ === o);
                var l = jt.create(i, o, s);
                return function(t, e) {
                    if (e.Ct()) {
                        var n = se(t);
                        if (null !== n && !n.isEqual(e.field)) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '" + n.toString() + "' and '" + e.field.toString() + "'");
                        var r = ue(t);
                        null !== r && ic$1(t, e.field, r);
                    }
                    var i = function(t, e) {
                        for (var n = 0, r = t.filters; n < r.length; n++) {
                            var i = r[n];
                            if (e.indexOf(i.op) >= 0) return i.op;
                        }
                        return null;
                    }(t, 
                    /**
     * Given an operator, returns the set of operators that cannot be used with it.
     *
     * Operators in a query must adhere to the following set of rules:
     * 1. Only one array operator is allowed.
     * 2. Only one disjunctive operator is allowed.
     * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
     * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
     *
     * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
     * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
     */
                    function(t) {
                        switch (t) {
                          case "!=" /* NOT_EQUAL */ :
                            return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                          case "array-contains" /* ARRAY_CONTAINS */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                          case "in" /* IN */ :
                            return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "not-in" /* NOT_IN */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                          default:
                            return [];
                        }
                    }(e.op));
                    if (null !== i) 
                    // Special case when it's a duplicate op to give a slightly clearer error message.
                    throw i === e.op ? new q$1(M$1.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e.op.toString() + "' filter.") : new q$1(M$1.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e.op.toString() + "' filters with '" + i.toString() + "' filters.");
                }(t, l), l;
            }(t.C_, 0, e, t.firestore.I_, this.ed, this.nd, this.sd);
            return new Fs(t.firestore, t.v_, function(t, e) {
                var n = t.filters.concat([ e ]);
                return new ee(t.path, t.collectionGroup, t.xt.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
            }(t.C_, n));
        }, e;
    }(Ka$1), Za$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this) || this).ed = e, r.rd = n, r.type = "orderBy", r;
        }
        return __extends$1d(e, t), e.prototype.td = function(t) {
            var e = function(t, e, n) {
                if (null !== t.startAt) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
                if (null !== t.endAt) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
                var r = new Zt(e, n);
                return function(t, e) {
                    if (null === ue(t)) {
                        // This is the first order by. It must match any inequality.
                        var n = se(t);
                        null !== n && ic$1(t, n, e.field);
                    }
                }(t, r), r;
            }(t.C_, this.ed, this.rd);
            return new Fs(t.firestore, t.v_, function(t, e) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                var n = t.xt.concat([ e ]);
                return new ee(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
            }(t.C_, e));
        }, e;
    }(Ka$1), Ja$1 = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this) || this).type = e, i.od = n, i.ad = r, i;
        }
        return __extends$1d(e, t), e.prototype.td = function(t) {
            return new Fs(t.firestore, t.v_, fe(t.C_, this.od, this.ad));
        }, e;
    }(Ka$1), $a$1 = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this) || this).type = e, i.ud = n, i.hd = r, i;
        }
        return __extends$1d(e, t), e.prototype.td = function(t) {
            var e = ec$1(t, this.type, this.ud, this.hd);
            return new Fs(t.firestore, t.v_, function(t, e) {
                return new ee(t.path, t.collectionGroup, t.xt.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
            }(t.C_, e));
        }, e;
    }(Ka$1), tc = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this) || this).type = e, i.ud = n, i.hd = r, i;
        }
        return __extends$1d(e, t), e.prototype.td = function(t) {
            var e = ec$1(t, this.type, this.ud, this.hd);
            return new Fs(t.firestore, t.v_, function(t, e) {
                return new ee(t.path, t.collectionGroup, t.xt.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
            }(t.C_, e));
        }, e;
    }(Ka$1);

    /**
     * Creates a `QueryConstraint` that enforces that documents must contain the
     * specified field and that the value should satisfy the relation constraint
     * provided.
     *
     * @param fieldPath - The path to compare
     * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
     *   "&lt;=", "!=").
     * @param value - The value for comparison
     * @returns The created `Query`.
     */
    /** Helper function to create a bound from a document or fields */
    function ec$1(t, e, n, r) {
        if (n[0] instanceof Ds && (n[0] = n[0].d_), n[0] instanceof Ba$1) return function(t, e, n, r, i) {
            if (!r) throw new q$1(M$1.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n + "().");
            // Because people expect to continue/end a query at the exact document
            // provided, we need to use the implicit sort order rather than the explicit
            // sort order, because it's guaranteed to contain the document key. That way
            // the position becomes unambiguous and the query continues/ends exactly at
            // the provided document. Without the key (by using the explicit sort
            // orders), multiple documents could match the position, yielding duplicate
            // results.
            for (var o = [], u = 0, s = ce(t); u < s.length; u++) {
                var a = s[u];
                if (a.field.ut()) o.push(It(e, r.key)); else {
                    var c = r.field(a.field);
                    if (ct(c)) throw new q$1(M$1.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                    if (null === c) {
                        var h = a.field.rt();
                        throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h + "' (used as the orderBy) does not exist.");
                    }
                    o.push(c);
                }
            }
            return new Xt(o, i);
        }(t.C_, t.firestore.I_, e, n[0].Zf, r);
        var i = ta$1(t.firestore);
        return function(t, e, n, r, i, o) {
            // Use explicit order by's because it has to match the query the user made
            var u = t.xt;
            if (i.length > u.length) throw new q$1(M$1.INVALID_ARGUMENT, "Too many arguments provided to " + r + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
            for (var s = [], a = 0; a < i.length; a++) {
                var c = i[a];
                if (u[a].field.ut()) {
                    if ("string" != typeof c) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r + "(), but got a " + typeof c);
                    if (!ae(t) && -1 !== c.indexOf("/")) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r + "() must be a plain document ID, but '" + c + "' contains a slash.");
                    var h = t.path.child(Z$1.ot(c));
                    if (!tt.wt(h)) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r + "() must result in a valid document path, but '" + h + "' is not because it contains an odd number of segments.");
                    var f = new tt(h);
                    s.push(It(e, f));
                } else {
                    var l = ha$1(n, r, c);
                    s.push(l);
                }
            }
            return new Xt(s, o);
        }(t.C_, t.firestore.I_, i, e, n, r);
    }

    function nc$1(t, e, n) {
        if (n instanceof Ds && (n = n.d_), "string" == typeof n) {
            if ("" === n) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!ae(e) && -1 !== n.indexOf("/")) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n + "' contains a '/' character.");
            var r = e.path.child(Z$1.ot(n));
            if (!tt.wt(r)) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r + "' is not because it has an odd number of segments (" + r.length + ").");
            return It(t, new tt(r));
        }
        if (n instanceof js) return It(t, n.S_);
        throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Vs(n) + ".");
    }

    /**
     * Validates that the value passed into a disjunctive filter satisfies all
     * array requirements.
     */ function rc$1(t, e) {
        if (!Array.isArray(t) || 0 === t.length) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
        if (t.length > 10) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
    }

    function ic$1(t, e, n) {
        if (!n.isEqual(e)) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n.toString() + "' instead.");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts custom model object of type T into DocumentData by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to DocumentData
     * because we want to provide the user with a more specific error message if
     * their set() or fails due to invalid data originating from a toFirestore()
     * call.
     */ function oc$1(t, e, n) {
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e;
    }

    var uc$1 = /** @class */ function(t) {
        function e(e) {
            var n = this;
            return (n = t.call(this) || this).firestore = e, n;
        }
        return __extends$1d(e, t), e.prototype.Wf = function(t) {
            return new j(t);
        }, e.prototype.jf = function(t) {
            var e = this.Jf(t, this.firestore.I_);
            return new js(this.firestore, /* converter= */ null, e);
        }, e;
    }(Ga$1), sc$1 = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e) {
            this.hasPendingWrites = t, this.fromCache = e
            /**
         * Returns true if this `SnapshotMetadata` is equal to the provided one.
         *
         * @param other - The `SnapshotMetadata` to compare against.
         * @returns true if this `SnapshotMetadata` is equal to the provided one.
         */;
        }
        return t.prototype.isEqual = function(t) {
            return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
        }, t;
    }(), ac$1 = /** @class */ function(t) {
        /** @hideconstructor protected */
        function e(e, n, r, i, o, u) {
            var s = this;
            return (s = t.call(this, e, n, r, i, u) || this).Yf = e, s.ld = e, s.metadata = o, 
            s;
        }
        /**
         * Property of the `DocumentSnapshot` that signals whether or not the data
         * exists. True if the document exists.
         */    return __extends$1d(e, t), e.prototype.exists = function() {
            return t.prototype.exists.call(this);
        }, 
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * By default, `FieldValue.serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document or `undefined` if
         * the document doesn't exist.
         */
        e.prototype.data = function(t) {
            if (void 0 === t && (t = {}), this.Zf) {
                if (this.v_) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    var e = new cc$1(this.Yf, this.Xf, this.S_, this.Zf, this.metadata, 
                    /* converter= */ null);
                    return this.v_.fromFirestore(e, t);
                }
                return this.Xf.Uf(this.Zf.bt(), t.serverTimestamps);
            }
        }, 
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
         * its final value will be returned as `null`. You can override this by
         * passing an options object.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @param options - An options object to configure how the field is retrieved
         * from the snapshot (for example the desired behavior for server timestamps
         * that have not yet been set to their final value).
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        e.prototype.get = function(t, e) {
            if (void 0 === e && (e = {}), this.Zf) {
                var n = this.Zf.data().field(Ya$1("DocumentSnapshot.get", t));
                if (null !== n) return this.Xf.Uf(n, e.serverTimestamps);
            }
        }, e;
    }(Ba$1), cc$1 = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * By default, `FieldValue.serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @override
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document.
         */    return __extends$1d(e, t), e.prototype.data = function(e) {
            return void 0 === e && (e = {}), t.prototype.data.call(this, e);
        }, e;
    }(ac$1), hc$1 = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e, n, r) {
            this.Yf = t, this.Xf = e, this._d = r, this.metadata = new sc$1(r.hasPendingWrites, r.fromCache), 
            this.query = n;
        }
        return Object.defineProperty(t.prototype, "docs", {
            /** An array of all the documents in the `QuerySnapshot`. */ get: function() {
                var t = [];
                return this.forEach((function(e) {
                    return t.push(e);
                })), t;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "size", {
            /** The number of documents in the `QuerySnapshot`. */ get: function() {
                return this._d.docs.size;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "empty", {
            /** True if there are no documents in the `QuerySnapshot`. */ get: function() {
                return 0 === this.size;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Enumerates all of the documents in the `QuerySnapshot`.
         *
         * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
         * each document in the snapshot.
         * @param thisArg - The `this` binding for the callback.
         */
        t.prototype.forEach = function(t, e) {
            var n = this;
            this._d.docs.forEach((function(r) {
                t.call(e, new cc$1(n.Yf, n.Xf, r.key, r, new sc$1(n._d.De.has(r.key), n._d.fromCache), n.query.v_));
            }));
        }, 
        /**
         * Returns an array of the documents changes since the last snapshot. If this
         * is the first snapshot, all documents will be in the list as 'added'
         * changes.
         *
         * @param options - `SnapshotListenOptions` that control whether metadata-only
         * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
         * snapshot events.
         */
        t.prototype.docChanges = function(t) {
            void 0 === t && (t = {});
            var e = !!t.includeMetadataChanges;
            if (e && this._d.xe) throw new q$1(M$1.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
            return this.fd && this.dd === e || (this.fd = 
            /** Calculates the array of DocumentChanges for a given ViewSnapshot. */
            function(t, e) {
                if (t._d.Se.et()) {
                    // Special case the first snapshot because index calculation is easy and
                    // fast
                    var n = 0;
                    return t._d.docChanges.map((function(e) {
                        var r = new cc$1(t.Yf, t.Xf, e.doc.key, e.doc, new sc$1(t._d.De.has(e.doc.key), t._d.fromCache), t.query.v_);
                        return e.doc, {
                            type: "added",
                            doc: r,
                            oldIndex: -1,
                            newIndex: n++
                        };
                    }));
                }
                // A DocumentSet that is updated incrementally as changes are applied to use
                // to lookup the index of a document.
                var r = t._d.Se;
                return t._d.docChanges.filter((function(t) {
                    return e || 3 /* Metadata */ !== t.type;
                })).map((function(e) {
                    var n = new cc$1(t.Yf, t.Xf, e.doc.key, e.doc, new sc$1(t._d.De.has(e.doc.key), t._d.fromCache), t.query.v_), i = -1, o = -1;
                    return 0 /* Added */ !== e.type && (i = r.indexOf(e.doc.key), r = r.delete(e.doc.key)), 
                    1 /* Removed */ !== e.type && (o = (r = r.add(e.doc)).indexOf(e.doc.key)), {
                        type: fc$1(e.type),
                        doc: n,
                        oldIndex: i,
                        newIndex: o
                    };
                }));
            }(this, e), this.dd = e), this.fd;
        }, t;
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Metadata about a snapshot, describing the state of the snapshot.
     */ function fc$1(t) {
        switch (t) {
          case 0 /* Added */ :
            return "added";

          case 2 /* Modified */ :
          case 3 /* Metadata */ :
            return "modified";

          case 1 /* Removed */ :
            return "removed";

          default:
            return x$1();
        }
    }

    // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
    // metadata
    /**
     * Returns true if the provided snapshots are equal.
     *
     * @param left - A snapshot to compare.
     * @param right - A snapshot to compare.
     * @returns true if the snapshots are equal.
     */ function lc$1(t, e) {
        return t instanceof ac$1 && e instanceof ac$1 ? t.Yf === e.Yf && t.S_.isEqual(e.S_) && (null === t.Zf ? null === e.Zf : t.Zf.isEqual(e.Zf)) && t.v_ === e.v_ : t instanceof hc$1 && e instanceof hc$1 && t.Yf === e.Yf && Ys(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._d.isEqual(e._d);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Reads the document referred to by this `DocumentReference`.
     *
     * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
     * for data from the server, but it may return cached data or fail if you are
     * offline and the server cannot be reached. To specify this behavior, invoke
     * {@link getDocFromCache} or {@link getDocFromServer}.
     *
     * @param reference - The reference of the document to fetch.
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ var pc$1 = /** @class */ function(t) {
        function e(e) {
            var n = this;
            return (n = t.call(this) || this).firestore = e, n;
        }
        return __extends$1d(e, t), e.prototype.Wf = function(t) {
            return new j(t);
        }, e.prototype.jf = function(t) {
            var e = this.Jf(t, this.firestore.I_);
            return new js(this.firestore, /* converter= */ null, e);
        }, e;
    }(Ga$1);

    /**
     * Reads the document referred to by this `DocumentReference` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function dc$1(t, e, n) {
        for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
        t = Cs(t, js);
        var o = Cs(t.firestore, Ma$1), u = ta$1(o);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        return e instanceof Ds && (e = e.d_), yc$1(o, [ ("string" == typeof e || e instanceof As ? ca$1(u, "updateDoc", t.S_, e, n, r) : aa$1(u, "updateDoc", t.S_, e)).F_(t.S_, Re.exists(!0)) ]);
    }

    /**
     * Deletes the document referred to by the specified `DocumentReference`.
     *
     * @param reference - A reference to the document to delete.
     * @returns A Promise resolved once the document has been successfully
     * deleted from the backend (note that it won't resolve while you're offline).
     */ function vc$1(t) {
        for (var e, n, r, i = [], o = 1; o < arguments.length; o++) i[o - 1] = arguments[o];
        t instanceof Ds && (t = t.d_);
        var u = {
            includeMetadataChanges: !1
        }, s = 0;
        "object" != typeof i[s] || Ca$1(i[s]) || (u = i[s], s++);
        var a, c, h, f = {
            includeMetadataChanges: u.includeMetadataChanges
        };
        if (Ca$1(i[s])) {
            var l = i[s];
            i[s] = null === (e = l.next) || void 0 === e ? void 0 : e.bind(l), i[s + 1] = null === (n = l.error) || void 0 === n ? void 0 : n.bind(l), 
            i[s + 2] = null === (r = l.complete) || void 0 === r ? void 0 : r.bind(l);
        }
        if (t instanceof js) c = Cs(t.firestore, Ma$1), h = re(t.S_.path), a = {
            next: function(e) {
                i[s] && i[s](mc$1(c, t, e));
            },
            error: i[s + 1],
            complete: i[s + 2]
        }; else {
            var p = Cs(t, Fs);
            c = Cs(p.firestore, Ma$1), h = p.C_;
            var d = new pc$1(c);
            a = {
                next: function(t) {
                    i[s] && i[s](new hc$1(c, d, p, t));
                },
                error: i[s + 1],
                complete: i[s + 2]
            }, Ha$1(t.C_);
        }
        return function(t, e, n, r) {
            var i = this, o = new Ts(r), u = new ku(e, o, n);
            return t._s.Ps((function() {
                return __awaiter(i, void 0, void 0, (function() {
                    var e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            return e = Nu, [ 4 /*yield*/ , Oa$1(t) ];

                          case 1:
                            return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), u ]) ];
                        }
                    }));
                }));
            })), function() {
                o.i_(), t._s.Ps((function() {
                    return __awaiter(i, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return e = Au, [ 4 /*yield*/ , Oa$1(t) ];

                              case 1:
                                return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), u ]) ];
                            }
                        }));
                    }));
                }));
            };
        }(qa$1(c), h, f, a);
    }

    /** Locally writes `mutations` on the async queue. */ function yc$1(t, e) {
        return function(t, e) {
            var n = this, r = new fr;
            return t._s.Ps((function() {
                return __awaiter(n, void 0, void 0, (function() {
                    var n;
                    return __generator(this, (function(i) {
                        switch (i.label) {
                          case 0:
                            return n = Bu, [ 4 /*yield*/ , ka$1(t) ];

                          case 1:
                            return [ 2 /*return*/ , n.apply(void 0, [ i.sent(), e, r ]) ];
                        }
                    }));
                }));
            })), r.promise;
        }(qa$1(t), e);
    }

    /**
     * Converts a ViewSnapshot that contains the single document specified by `ref`
     * to a DocumentSnapshot.
     */ function mc$1(t, e, n) {
        var r = n.docs.get(e.S_), i = new pc$1(t);
        return new ac$1(t, i, e.S_, r, new sc$1(n.hasPendingWrites, n.fromCache), e.v_);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A write batch, used to perform multiple writes as a single atomic unit.
     *
     * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
     * provides methods for adding writes to the write batch. None of the writes
     * will be committed (or visible locally) until {@link WriteBatch#commit} is
     * called.
     */ var gc$1 = /** @class */ function() {
        /** @hideconstructor */
        function t(t, e) {
            this.Yf = t, this.wd = e, this.Ed = [], this.Td = !1, this.Id = ta$1(t);
        }
        return t.prototype.set = function(t, e, n) {
            this.md();
            var r = wc$1(t, this.Yf), i = oc$1(r.v_, e, n), o = ea$1(this.Id, "WriteBatch.set", r.S_, i, null !== r.v_, n);
            return this.Ed.push(o.F_(r.S_, Re.Kt())), this;
        }, t.prototype.update = function(t, e, n) {
            for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
            this.md();
            var o, u = wc$1(t, this.Yf);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    return e instanceof Ds && (e = e.d_), o = "string" == typeof e || e instanceof As ? ca$1(this.Id, "WriteBatch.update", u.S_, e, n, r) : aa$1(this.Id, "WriteBatch.update", u.S_, e), 
            this.Ed.push(o.F_(u.S_, Re.exists(!0))), this;
        }, 
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `WriteBatch` instance. Used for chaining method calls.
         */
        t.prototype.delete = function(t) {
            this.md();
            var e = wc$1(t, this.Yf);
            return this.Ed = this.Ed.concat(new Je(e.S_, Re.Kt())), this;
        }, 
        /**
         * Commits all of the writes in this write batch as a single atomic unit.
         *
         * The result of these writes will only be reflected in document reads that
         * occur after the returned Promise resolves. If the client is offline, the
         * write fails. If you would like to see local modifications or buffer writes
         * until the client is online, use the full Firestore SDK.
         *
         * @returns A Promise resolved once all of the writes in the batch have been
         * successfully written to the backend as an atomic unit (note that it won't
         * resolve while you're offline).
         */
        t.prototype.commit = function() {
            return this.md(), this.Td = !0, this.Ed.length > 0 ? this.wd(this.Ed) : Promise.resolve();
        }, t.prototype.md = function() {
            if (this.Td) throw new q$1(M$1.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
        }, t;
    }();

    function wc$1(t, e) {
        if (t instanceof Ds && (t = t.d_), t.firestore !== e) throw new q$1(M$1.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
    // legacy SDK.
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */ var bc$1 = /** @class */ function(t) {
        // This class implements the same logic as the Transaction API in the Lite SDK
        // but is subclassed in order to return its own DocumentSnapshot types.
        /** @hideconstructor */
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e, n) || this).Yf = e, r;
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    return __extends$1d(e, t), e.prototype.get = function(e) {
            var n = this, r = wc$1(e, this.Yf), i = new pc$1(this.Yf);
            return t.prototype.get.call(this, e).then((function(t) {
                return new ac$1(n.Yf, i, r.S_, t.Zf, new sc$1(
                /* hasPendingWrites= */ !1, 
                /* fromCache= */ !1), r.v_);
            }));
        }, e;
    }(/** @class */ function() {
        /** @hideconstructor */
        function t(t, e) {
            this.Yf = t, this.Ad = e, this.Id = ta$1(t)
            /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */;
        }
        return t.prototype.get = function(t) {
            var e = this, n = wc$1(t, this.Yf), r = new uc$1(this.Yf);
            return this.Ad.ef([ n.S_ ]).then((function(t) {
                if (!t || 1 !== t.length) return x$1();
                var i = t[0];
                if (i instanceof Lt) return new Ba$1(e.Yf, r, n.S_, null, n.v_);
                if (i instanceof Pt) return new Ba$1(e.Yf, r, i.key, i, n.v_);
                throw x$1();
            }));
        }, t.prototype.set = function(t, e, n) {
            var r = wc$1(t, this.Yf), i = oc$1(r.v_, e, n), o = ea$1(this.Id, "Transaction.set", r.S_, i, null !== r.v_, n);
            return this.Ad.set(r.S_, o), this;
        }, t.prototype.update = function(t, e, n) {
            for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
            var o, u = wc$1(t, this.Yf);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    return e instanceof Ds && (e = e.d_), o = "string" == typeof e || e instanceof As ? ca$1(this.Id, "Transaction.update", u.S_, e, n, r) : aa$1(this.Id, "Transaction.update", u.S_, e), 
            this.Ad.update(u.S_, o), this;
        }, 
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `Transaction` instance. Used for chaining method calls.
         */
        t.prototype.delete = function(t) {
            var e = wc$1(t, this.Yf);
            return this.Ad.delete(e.S_), this;
        }, t;
    }());

    /**
     * Executes the given `updateFunction` and then attempts to commit the changes
     * applied within the transaction. If any document read within the transaction
     * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
     * commit after 5 attempts, the transaction fails.
     *
     * The maximum number of writes allowed in a single transaction is 500.
     *
     * @param firestore - A reference to the Firestore database to run this
     * transaction against.
     * @param updateFunction - The function to execute within the transaction
     * context.
     * @returns If the transaction completed successfully or was explicitly aborted
     * (the `updateFunction` returned a failed promise), the promise returned by the
     * `updateFunction `is returned here. Otherwise, if the transaction failed, a
     * rejected promise with the corresponding failure error is returned.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Helper function to assert Uint8Array is available at runtime. */ function _c() {
        if ("undefined" == typeof Uint8Array) throw new q$1(M$1.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
    }

    /** Helper function to assert Base64 functions are available at runtime. */ function Ic$1() {
        if ("undefined" == typeof atob) throw new q$1(M$1.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
    }

    /** Immutable class holding a blob (binary data) */ var Ec$1 = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.fromBase64String = function(t) {
            return Ic$1(), new e(j.fromBase64String(t));
        }, e.fromUint8Array = function(t) {
            return _c(), new e(j.fromUint8Array(t));
        }, e.prototype.toBase64 = function() {
            return Ic$1(), this.d_.toBase64();
        }, e.prototype.toUint8Array = function() {
            return _c(), this.d_.toUint8Array();
        }, e.prototype.isEqual = function(t) {
            return this.d_.isEqual(t.d_);
        }, e.prototype.toString = function() {
            return "Blob(base64: " + this.toBase64() + ")";
        }, e;
    }(Ds), Tc$1 = /** @class */ function() {
        function t() {}
        return t.prototype.enableIndexedDbPersistence = function(t, e) {
            return function(t, e) {
                za$1(t = Cs(t, Ma$1));
                var n = qa$1(t), r = t.p_(), i = new Is;
                return Fa$1(n, i, new bs(i, r.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
            }(t.d_, {
                forceOwnership: e
            });
        }, t.prototype.enableMultiTabIndexedDbPersistence = function(t) {
            return function(t) {
                za$1(t = Cs(t, Ma$1));
                var e = qa$1(t), n = t.p_(), r = new Is;
                return Fa$1(e, r, new _s(r, n.cacheSizeBytes));
            }(t.d_);
        }, t.prototype.clearIndexedDbPersistence = function(t) {
            return function(t) {
                var e = this;
                if (t.R_ && !t.P_) throw new q$1(M$1.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
                var n = new fr;
                return t.Bf.Tf((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(r) {
                            switch (r.label) {
                              case 0:
                                return r.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t) {
                                    return __awaiter(this, void 0, void 0, (function() {
                                        var e;
                                        return __generator(this, (function(n) {
                                            switch (n.label) {
                                              case 0:
                                                return dr.Kn() ? (e = t + "main", [ 4 /*yield*/ , dr.delete(e) ]) : [ 2 /*return*/ , Promise.resolve() ];

                                              case 1:
                                                return n.sent(), [ 2 /*return*/ ];
                                            }
                                        }));
                                    }));
                                }(Xi(t.I_, t.w_)) ];

                              case 1:
                                return r.sent(), n.resolve(), [ 3 /*break*/ , 3 ];

                              case 2:
                                return e = r.sent(), n.reject(e), [ 3 /*break*/ , 3 ];

                              case 3:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }));
                })), n.promise
                /**
     * Waits until all currently pending writes for the active user have been
     * acknowledged by the backend.
     *
     * The returned Promise resolves immediately if there are no outstanding writes.
     * Otherwise, the Promise waits for all previously issued writes (including
     * those written in a previous app session), but it does not wait for writes
     * that were added after the function is called. If you want to wait for
     * additional writes, call `waitForPendingWrites()` again.
     *
     * Any outstanding `waitForPendingWrites()` Promises are rejected during user
     * changes.
     *
     * @returns A Promise which resolves when all currently pending writes have been
     * acknowledged by the backend.
     */;
            }(t.d_);
        }, t;
    }(), Nc$1 = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this, n) || this).Rd = r, i.INTERNAL = {
                delete: function() {
                    return i.terminate();
                }
            }, e instanceof I$1 || (i.Pd = e), i;
        }
        return __extends$1d(e, t), Object.defineProperty(e.prototype, "I_", {
            get: function() {
                return this.d_.I_;
            },
            enumerable: !1,
            configurable: !0
        }), e.prototype.settings = function(t) {
            t.merge && 
            // Remove the property from the settings once the merge is completed
            delete (t = Object.assign(Object.assign({}, this.d_.V_()), t)).merge, this.d_.g_(t);
        }, e.prototype.useEmulator = function(t, e) {
            !function(t, e, n) {
                var r = (t = Cs(t, qs)).V_();
                "firestore.googleapis.com" !== r.host && r.host !== e && S$1("Host has been set in both settings() and useEmulator(), emulator host will be used"), 
                t.g_(Object.assign(Object.assign({}, r), {
                    host: e + ":" + n,
                    ssl: !1
                }));
            }(this.d_, t, e);
        }, e.prototype.enableNetwork = function() {
            return function(t) {
                var e = this;
                return t._s.enqueue((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var e, n;
                        return __generator(this, (function(r) {
                            switch (r.label) {
                              case 0:
                                return [ 4 /*yield*/ , Sa$1(t) ];

                              case 1:
                                return e = r.sent(), [ 4 /*yield*/ , xa(t) ];

                              case 2:
                                return n = r.sent(), [ 2 /*return*/ , (e.yo(!0), function(t) {
                                    var e = O$1(t);
                                    return e.Nh.delete(0 /* UserDisabled */), Jo(e);
                                }(n)) ];
                            }
                        }));
                    }));
                }));
            }
            /** Disables the network connection. Pending operations will not complete. */ (qa$1(Cs(this.d_, Ma$1)));
        }, e.prototype.disableNetwork = function() {
            return function(t) {
                var e = this;
                return t._s.enqueue((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var e, n;
                        return __generator(this, (function(r) {
                            switch (r.label) {
                              case 0:
                                return [ 4 /*yield*/ , Sa$1(t) ];

                              case 1:
                                return e = r.sent(), [ 4 /*yield*/ , xa(t) ];

                              case 2:
                                return n = r.sent(), [ 2 /*return*/ , (e.yo(!1), function(t) {
                                    return __awaiter(this, void 0, void 0, (function() {
                                        var e;
                                        return __generator(this, (function(n) {
                                            switch (n.label) {
                                              case 0:
                                                return (e = O$1(t)).Nh.add(0 /* UserDisabled */), [ 4 /*yield*/ , $o(e) ];

                                              case 1:
                                                return n.sent(), 
                                                // Set the OnlineState to Offline so get()s return from cache, etc.
                                                e.kh.set("Offline" /* Offline */), [ 2 /*return*/ ];
                                            }
                                        }));
                                    }));
                                }(n)) ];
                            }
                        }));
                    }));
                }));
            }
            /**
     * Returns a Promise that resolves when all writes that were pending at the time
     * this method was called received server acknowledgement. An acknowledgement
     * can be either acceptance or rejection.
     */ (qa$1(Cs(this.d_, Ma$1)));
        }, e.prototype.enablePersistence = function(t) {
            var e = !1, n = !1;
            return t && Os("synchronizeTabs", e = !!t.synchronizeTabs, "experimentalForceOwningTab", n = !!t.experimentalForceOwningTab), 
            e ? this.Rd.enableMultiTabIndexedDbPersistence(this) : this.Rd.enableIndexedDbPersistence(this, n);
        }, e.prototype.clearPersistence = function() {
            return this.Rd.clearIndexedDbPersistence(this);
        }, e.prototype.terminate = function() {
            return this.Pd && (this.Pd._removeServiceInstance("firestore"), this.Pd._removeServiceInstance("firestore-exp")), 
            this.d_._delete();
        }, e.prototype.waitForPendingWrites = function() {
            return function(t) {
                var e = this, n = new fr;
                return t._s.Ps((function() {
                    return __awaiter(e, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(r) {
                            switch (r.label) {
                              case 0:
                                return e = Wu, [ 4 /*yield*/ , ka$1(t) ];

                              case 1:
                                return [ 2 /*return*/ , e.apply(void 0, [ r.sent(), n ]) ];
                            }
                        }));
                    }));
                })), n.promise;
            }(qa$1(Cs(this.d_, Ma$1)));
        }, e.prototype.onSnapshotsInSync = function(t) {
            return function(t, e) {
                return function(t, e) {
                    var n = this, r = new Ts(e);
                    return t._s.Ps((function() {
                        return __awaiter(n, void 0, void 0, (function() {
                            var e;
                            return __generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    return e = function(t, e) {
                                        O$1(t).Wh.add(e), 
                                        // Immediately fire an initial event, indicating all existing listeners
                                        // are in-sync.
                                        e.next();
                                    }, [ 4 /*yield*/ , Oa$1(t) ];

                                  case 1:
                                    return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), r ]) ];
                                }
                            }));
                        }));
                    })), function() {
                        r.i_(), t._s.Ps((function() {
                            return __awaiter(n, void 0, void 0, (function() {
                                var e;
                                return __generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        return e = function(t, e) {
                                            O$1(t).Wh.delete(e);
                                        }, [ 4 /*yield*/ , Oa$1(t) ];

                                      case 1:
                                        return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), r ]) ];
                                    }
                                }));
                            }));
                        }));
                    }
                    /**
     * Takes an updateFunction in which a set of reads and writes can be performed
     * atomically. In the updateFunction, the client can read and write values
     * using the supplied transaction object. After the updateFunction, all
     * changes will be committed. If a retryable error occurs (ex: some other
     * client has changed any of the data referenced), then the updateFunction
     * will be called again after a backoff. If the updateFunction still fails
     * after all retries, then the transaction will be rejected.
     *
     * The transaction object passed to the updateFunction contains methods for
     * accessing documents and collections. Unlike other datastore access, data
     * accessed with the transaction will not reflect local changes that have not
     * been committed. For this reason, it is required that all reads are
     * performed before any writes. Transactions must be performed while online.
     */;
                }(qa$1(t = Cs(t, Ma$1)), Ca$1(e) ? e : {
                    next: e
                });
            }(this.d_, t);
        }, Object.defineProperty(e.prototype, "app", {
            get: function() {
                if (!this.Pd) throw new q$1(M$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
                return this.Pd;
            },
            enumerable: !1,
            configurable: !0
        }), e.prototype.collection = function(t) {
            try {
                return new jc$1(this, Gs(this.d_, t));
            } catch (t) {
                throw Pc$1(t, "collection()", "Firestore.collection()");
            }
        }, e.prototype.doc = function(t) {
            try {
                return new Oc$1(this, Bs(this.d_, t));
            } catch (t) {
                throw Pc$1(t, "doc()", "Firestore.doc()");
            }
        }, e.prototype.collectionGroup = function(t) {
            try {
                return new Uc$1(this, function(t, e) {
                    if (t = Cs(t, qs), xs("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid collection ID '" + e + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
                    return new Fs(t, 
                    /* converter= */ null, 
                    /**
     * Creates a new Query for a collection group query that matches all documents
     * within the provided collection group.
     */
                    function(t) {
                        return new ee(Z$1.ct(), t);
                    }(e));
                }(this.d_, t));
            } catch (t) {
                throw Pc$1(t, "collectionGroup()", "Firestore.collectionGroup()");
            }
        }, e.prototype.runTransaction = function(t) {
            var e = this;
            return function(t, e) {
                return function(t, e) {
                    var n = this, r = new fr;
                    return t._s.Ps((function() {
                        return __awaiter(n, void 0, void 0, (function() {
                            var n;
                            return __generator(this, (function(i) {
                                switch (i.label) {
                                  case 0:
                                    return [ 4 /*yield*/ , function(t) {
                                        return Aa$1(t).then((function(t) {
                                            return t.Sh;
                                        }));
                                    }(t) ];

                                  case 1:
                                    return n = i.sent(), new _a$2(t._s, n, e, r).run(), [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    })), r.promise;
                }(qa$1(t), (function(n) {
                    return e(new bc$1(t, n));
                }));
            }(this.d_, (function(n) {
                return t(new Dc$1(e, n));
            }));
        }, e.prototype.batch = function() {
            var t = this;
            return qa$1(this.d_), new xc(new gc$1(this.d_, (function(e) {
                return yc$1(t.d_, e);
            })));
        }, e.prototype.loadBundle = function(t) {
            throw new q$1(M$1.FAILED_PRECONDITION, '"loadBundle()" does not exist, have you imported "firebase/firestore/bundle"?');
        }, e.prototype.namedQuery = function(t) {
            throw new q$1(M$1.FAILED_PRECONDITION, '"namedQuery()" does not exist, have you imported "firebase/firestore/bundle"?');
        }, e;
    }(Ds), Ac$1 = /** @class */ function(t) {
        function e(e) {
            var n = this;
            return (n = t.call(this) || this).firestore = e, n;
        }
        return __extends$1d(e, t), e.prototype.Wf = function(t) {
            return new Ec$1(new j(t));
        }, e.prototype.jf = function(t) {
            var e = this.Jf(t, this.firestore.I_);
            return Oc$1.yd(e, this.firestore, /* converter= */ null);
        }, e;
    }(Ga$1);

    /**
     * The persistence provider included with the full Firestore SDK.
     */ function Sc$1(t) {
        var e;
        e = t, E$1.setLogLevel(e);
    }

    /**
     * A reference to a transaction.
     */ var Dc$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, n) || this).Yf = e, r.Xf = new Ac$1(e), r;
        }
        return __extends$1d(e, t), e.prototype.get = function(t) {
            var e = this, n = Fc$1(t);
            return this.d_.get(n).then((function(t) {
                return new Cc$1(e.Yf, new ac$1(e.Yf.d_, e.Xf, t.S_, t.Zf, t.metadata, n.v_));
            }));
        }, e.prototype.set = function(t, e, n) {
            var r = Fc$1(t);
            return n ? (ks("Transaction.set", n), this.d_.set(r, e, n)) : this.d_.set(r, e), 
            this;
        }, e.prototype.update = function(t, e, n) {
            for (var r, i = [], o = 3; o < arguments.length; o++) i[o - 3] = arguments[o];
            var u = Fc$1(t);
            return 2 === arguments.length ? this.d_.update(u, e) : (r = this.d_).update.apply(r, __spreadArrays([ u, e, n ], i)), 
            this;
        }, e.prototype.delete = function(t) {
            var e = Fc$1(t);
            return this.d_.delete(e), this;
        }, e;
    }(Ds), xc = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.prototype.set = function(t, e, n) {
            var r = Fc$1(t);
            return n ? (ks("WriteBatch.set", n), this.d_.set(r, e, n)) : this.d_.set(r, e), 
            this;
        }, e.prototype.update = function(t, e, n) {
            for (var r, i = [], o = 3; o < arguments.length; o++) i[o - 3] = arguments[o];
            var u = Fc$1(t);
            return 2 === arguments.length ? this.d_.update(u, e) : (r = this.d_).update.apply(r, __spreadArrays([ u, e, n ], i)), 
            this;
        }, e.prototype.delete = function(t) {
            var e = Fc$1(t);
            return this.d_.delete(e), this;
        }, e.prototype.commit = function() {
            return this.d_.commit();
        }, e;
    }(Ds), kc$1 = /** @class */ function(t) {
        function e(e, n, r) {
            var i = this;
            return (i = t.call(this, r) || this).Yf = e, i.Xf = n, i;
        }
        return __extends$1d(e, t), e.prototype.fromFirestore = function(t, e) {
            var n = new cc$1(this.Yf.d_, this.Xf, t.S_, t.Zf, t.metadata, 
            /* converter= */ null);
            return this.d_.fromFirestore(new Rc$1(this.Yf, n), null != e ? e : {});
        }, e.prototype.toFirestore = function(t, e) {
            return e ? this.d_.toFirestore(t, e) : this.d_.toFirestore(t);
        }, 
        // Use the same instance of `FirestoreDataConverter` for the given instances
        // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will
        // compare equal for two objects created with the same converter instance.
        e.gd = function(t, n) {
            var r = e.Vd, i = r.get(t);
            i || (i = new WeakMap, r.set(t, i));
            var o = i.get(n);
            return o || (o = new e(t, new Ac$1(t), n), i.set(n, o)), o;
        }, e;
    }(Ds);

    kc$1.Vd = new WeakMap;

    /**
     * A reference to a particular document in a collection in the database.
     */
    var Oc$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, n) || this).firestore = e, r.Xf = new Ac$1(e), r;
        }
        return __extends$1d(e, t), e.pd = function(t, n, r) {
            if (t.length % 2 != 0) throw new q$1(M$1.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t.rt() + " has " + t.length);
            return new e(n, new js(n.d_, r, new tt(t)));
        }, e.yd = function(t, n, r) {
            return new e(n, new js(n.d_, r, t));
        }, Object.defineProperty(e.prototype, "id", {
            get: function() {
                return this.d_.id;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "parent", {
            get: function() {
                return new jc$1(this.firestore, this.d_.parent);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "path", {
            get: function() {
                return this.d_.path;
            },
            enumerable: !1,
            configurable: !0
        }), e.prototype.collection = function(t) {
            try {
                return new jc$1(this.firestore, Gs(this.d_, t));
            } catch (t) {
                throw Pc$1(t, "collection()", "DocumentReference.collection()");
            }
        }, e.prototype.isEqual = function(t) {
            return t instanceof Ds && (t = t.d_), t instanceof js && Qs(this.d_, t);
        }, e.prototype.set = function(t, e) {
            e = ks("DocumentReference.set", e);
            try {
                return function(t, e, n) {
                    t = Cs(t, js);
                    var r = Cs(t.firestore, Ma$1), i = oc$1(t.v_, e, n);
                    return yc$1(r, [ ea$1(ta$1(r), "setDoc", t.S_, i, null !== t.v_, n).F_(t.S_, Re.Kt()) ]);
                }(this.d_, t, e);
            } catch (t) {
                throw Pc$1(t, "setDoc()", "DocumentReference.set()");
            }
        }, e.prototype.update = function(t, e) {
            for (var n = [], r = 2; r < arguments.length; r++) n[r - 2] = arguments[r];
            try {
                return 1 === arguments.length ? dc$1(this.d_, t) : dc$1.apply(void 0, __spreadArrays([ this.d_, t, e ], n));
            } catch (t) {
                throw Pc$1(t, "updateDoc()", "DocumentReference.update()");
            }
        }, e.prototype.delete = function() {
            return yc$1(Cs((t = this.d_).firestore, Ma$1), [ new Je(t.S_, Re.Kt()) ]);
            var t;
            /**
     * Add a new document to specified `CollectionReference` with the given data,
     * assigning it a document ID automatically.
     *
     * @param reference - A reference to the collection to add this document to.
     * @param data - An Object containing the data for the new document.
     * @returns A Promise resolved with a `DocumentReference` pointing to the
     * newly created document after it has been written to the backend (Note that it
     * won't resolve while you're offline).
     */    }, e.prototype.onSnapshot = function() {
            for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            var r = Lc$1(e), i = Vc$1(e, (function(e) {
                return new Cc$1(t.firestore, new ac$1(t.firestore.d_, t.Xf, e.S_, e.Zf, e.metadata, t.d_.v_));
            }));
            return vc$1(this.d_, r, i);
        }, e.prototype.get = function(t) {
            var e = this;
            return ("cache" === (null == t ? void 0 : t.source) ? function(t) {
                t = Cs(t, js);
                var e = Cs(t.firestore, Ma$1), n = qa$1(e), r = new pc$1(e);
                return function(t, e) {
                    var n = this, r = new fr;
                    return t._s.Ps((function() {
                        return __awaiter(n, void 0, void 0, (function() {
                            var n;
                            return __generator(this, (function(i) {
                                switch (i.label) {
                                  case 0:
                                    return n = function(t, e, n) {
                                        return __awaiter(this, void 0, void 0, (function() {
                                            var r, i;
                                            return __generator(this, (function(o) {
                                                switch (o.label) {
                                                  case 0:
                                                    return o.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t, e) {
                                                        var n = O$1(t);
                                                        return n.persistence.runTransaction("read document", "readonly", (function(t) {
                                                            return n.Tc.Ho(t, e);
                                                        }));
                                                    }(t, e) ];

                                                  case 1:
                                                    return (i = o.sent()) instanceof Pt ? n.resolve(i) : i instanceof Lt ? n.resolve(null) : n.reject(new q$1(M$1.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), 
                                                    [ 3 /*break*/ , 3 ];

                                                  case 2:
                                                    return r = o.sent(), i = Er(r, "Failed to get document '" + e + " from cache"), 
                                                    n.reject(i), [ 3 /*break*/ , 3 ];

                                                  case 3:
                                                    return [ 2 /*return*/ ];
                                                }
                                            }));
                                        }));
                                    }, [ 4 /*yield*/ , Da$1(t) ];

                                  case 1:
                                    return [ 2 /*return*/ , n.apply(void 0, [ i.sent(), e, r ]) ];
                                }
                            }));
                        }));
                    })), r.promise;
                }(n, t.S_).then((function(n) {
                    return new ac$1(e, r, t.S_, n, new sc$1(n instanceof Pt && n.Vt, 
                    /* fromCache= */ !0), t.v_);
                }));
            }(this.d_) : "server" === (null == t ? void 0 : t.source) ? function(t) {
                t = Cs(t, js);
                var e = Cs(t.firestore, Ma$1);
                return Pa$1(qa$1(e), t.S_, {
                    source: "server"
                }).then((function(n) {
                    return mc$1(e, t, n);
                }));
            }(this.d_) : function(t) {
                t = Cs(t, js);
                var e = Cs(t.firestore, Ma$1);
                return Pa$1(qa$1(e), t.S_).then((function(n) {
                    return mc$1(e, t, n);
                }));
            }(this.d_)).then((function(t) {
                return new Cc$1(e.firestore, new ac$1(e.firestore.d_, e.Xf, t.S_, t.Zf, t.metadata, e.d_.v_));
            }));
        }, e.prototype.withConverter = function(t) {
            return new e(this.firestore, this.d_.withConverter(kc$1.gd(this.firestore, t)));
        }, e;
    }(Ds);

    /**
     * Replaces the function name in an error thrown by the firestore-exp API
     * with the function names used in the classic API.
     */ function Pc$1(t, e, n) {
        return t.message = t.message.replace(e, n), t
        /**
     * Iterates the list of arguments from an `onSnapshot` call and returns the
     * first argument that may be an `SnapshotListenOptions` object. Returns an
     * empty object if none is found.
     */;
    }

    function Lc$1(t) {
        for (var e = 0, n = t; e < n.length; e++) {
            var r = n[e];
            if ("object" == typeof r && !Ca$1(r)) return r;
        }
        return {};
    }

    /**
     * Creates an observer that can be passed to the firestore-exp SDK. The
     * observer converts all observed values into the format expected by the classic
     * SDK.
     *
     * @param args - The list of arguments from an `onSnapshot` call.
     * @param wrapper - The function that converts the firestore-exp type into the
     * type used by this shim.
     */ function Vc$1(t, e) {
        var n, r, i;
        return {
            next: function(t) {
                i.next && i.next(e(t));
            },
            error: null === (n = (i = Ca$1(t[0]) ? t[0] : Ca$1(t[1]) ? t[1] : "function" == typeof t[0] ? {
                next: t[0],
                error: t[1],
                complete: t[2]
            } : {
                next: t[1],
                error: t[2],
                complete: t[3]
            }).error) || void 0 === n ? void 0 : n.bind(i),
            complete: null === (r = i.complete) || void 0 === r ? void 0 : r.bind(i)
        };
    }

    var Cc$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, n) || this).Yf = e, r;
        }
        return __extends$1d(e, t), Object.defineProperty(e.prototype, "ref", {
            get: function() {
                return new Oc$1(this.Yf, this.d_.ref);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "id", {
            get: function() {
                return this.d_.id;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "metadata", {
            get: function() {
                return this.d_.metadata;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "exists", {
            get: function() {
                return this.d_.exists();
            },
            enumerable: !1,
            configurable: !0
        }), e.prototype.data = function(t) {
            return this.d_.data(t);
        }, e.prototype.get = function(t, e) {
            return this.d_.get(t, e);
        }, e.prototype.isEqual = function(t) {
            return lc$1(this.d_, t.d_);
        }, e;
    }(Ds), Rc$1 = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.prototype.data = function(t) {
            return this.d_.data(t);
        }, e;
    }(Cc$1), Uc$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, n) || this).firestore = e, r.Xf = new Ac$1(e), r;
        }
        return __extends$1d(e, t), e.prototype.where = function(t, n, r) {
            try {
                // The "as string" cast is a little bit of a hack. `where` accepts the
                // FieldPath Compat type as input, but is not typed as such in order to
                // not expose this via our public typings file.
                return new e(this.firestore, Xa$1(this.d_, function(t, e, n) {
                    var r = e, i = Ya$1("where", t);
                    return new Wa$1(i, r, n);
                }(t, n, r)));
            } catch (t) {
                throw Pc$1(t, /(orderBy|where)\(\)/, "Query.$1()");
            }
        }, e.prototype.orderBy = function(t, n) {
            try {
                // The "as string" cast is a little bit of a hack. `orderBy` accepts the
                // FieldPath Compat type as input, but is not typed as such in order to
                // not expose this via our public typings file.
                return new e(this.firestore, Xa$1(this.d_, function(t, e) {
                    void 0 === e && (e = "asc");
                    var n = e, r = Ya$1("orderBy", t);
                    return new Za$1(r, n);
                }(t, n)));
            } catch (t) {
                throw Pc$1(t, /(orderBy|where)\(\)/, "Query.$1()");
            }
        }, e.prototype.limit = function(t) {
            try {
                return new e(this.firestore, Xa$1(this.d_, function(t) {
                    return Rs("limit", t), new Ja$1("limit", t, "F" /* First */);
                }(t)));
            } catch (t) {
                throw Pc$1(t, "limit()", "Query.limit()");
            }
        }, e.prototype.limitToLast = function(t) {
            try {
                return new e(this.firestore, Xa$1(this.d_, function(t) {
                    return Rs("limitToLast", t), new Ja$1("limitToLast", t, "L" /* Last */);
                }(t)));
            } catch (t) {
                throw Pc$1(t, "limitToLast()", "Query.limitToLast()");
            }
        }, e.prototype.startAt = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            try {
                return new e(this.firestore, Xa$1(this.d_, function() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    return new $a$1("startAt", t, /*before=*/ !0);
                }.apply(void 0, t)));
            } catch (t) {
                throw Pc$1(t, "startAt()", "Query.startAt()");
            }
        }, e.prototype.startAfter = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            try {
                return new e(this.firestore, Xa$1(this.d_, function() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    return new $a$1("startAfter", t, 
                    /*before=*/ !1);
                }.apply(void 0, t)));
            } catch (t) {
                throw Pc$1(t, "startAfter()", "Query.startAfter()");
            }
        }, e.prototype.endBefore = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            try {
                return new e(this.firestore, Xa$1(this.d_, function() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    return new tc("endBefore", t, /*before=*/ !0);
                }.apply(void 0, t)));
            } catch (t) {
                throw Pc$1(t, "endBefore()", "Query.endBefore()");
            }
        }, e.prototype.endAt = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            try {
                return new e(this.firestore, Xa$1(this.d_, function() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    return new tc("endAt", t, /*before=*/ !1);
                }.apply(void 0, t)));
            } catch (t) {
                throw Pc$1(t, "endAt()", "Query.endAt()");
            }
        }, e.prototype.isEqual = function(t) {
            return Ys(this.d_, t.d_);
        }, e.prototype.get = function(t) {
            var e = this;
            return ("cache" === (null == t ? void 0 : t.source) ? 
            /**
         * Executes the query and returns the results as a `QuerySnapshot` from cache.
         * Returns an error if the document is not currently cached.
         *
         * @returns A Promise that will be resolved with the results of the query.
         */
            function(t) {
                t = Cs(t, Fs);
                var e = Cs(t.firestore, Ma$1), n = qa$1(e), r = new pc$1(e);
                return function(t, e) {
                    var n = this, r = new fr;
                    return t._s.Ps((function() {
                        return __awaiter(n, void 0, void 0, (function() {
                            var n;
                            return __generator(this, (function(i) {
                                switch (i.label) {
                                  case 0:
                                    return n = function(t, e, n) {
                                        return __awaiter(this, void 0, void 0, (function() {
                                            var r, i, o, u, s;
                                            return __generator(this, (function(a) {
                                                switch (a.label) {
                                                  case 0:
                                                    return a.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , ho(t, e, 
                                                    /* usePreviousResults= */ !0) ];

                                                  case 1:
                                                    return s = a.sent(), r = new Uu(e, s.Rc), i = r.fl(s.documents), o = r.wi(i, 
                                                    /* updateLimboDocuments= */ !1), n.resolve(o.snapshot), [ 3 /*break*/ , 3 ];

                                                  case 2:
                                                    return u = a.sent(), s = Er(u, "Failed to execute query '" + e + " against cache"), 
                                                    n.reject(s), [ 3 /*break*/ , 3 ];

                                                  case 3:
                                                    return [ 2 /*return*/ ];
                                                }
                                            }));
                                        }));
                                    }, [ 4 /*yield*/ , Da$1(t) ];

                                  case 1:
                                    return [ 2 /*return*/ , n.apply(void 0, [ i.sent(), e, r ]) ];
                                }
                            }));
                        }));
                    })), r.promise;
                }(n, t.C_).then((function(n) {
                    return new hc$1(e, r, t, n);
                }));
            }(this.d_) : "server" === (null == t ? void 0 : t.source) ? function(t) {
                t = Cs(t, Fs);
                var e = Cs(t.firestore, Ma$1), n = qa$1(e), r = new pc$1(e);
                return La$1(n, t.C_, {
                    source: "server"
                }).then((function(n) {
                    return new hc$1(e, r, t, n);
                }));
            }(this.d_) : function(t) {
                t = Cs(t, Fs);
                var e = Cs(t.firestore, Ma$1), n = qa$1(e), r = new pc$1(e);
                return Ha$1(t.C_), La$1(n, t.C_).then((function(n) {
                    return new hc$1(e, r, t, n);
                }));
            }(this.d_)).then((function(t) {
                return new qc$1(e.firestore, new hc$1(e.firestore.d_, e.Xf, e.d_, t._d));
            }));
        }, e.prototype.onSnapshot = function() {
            for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            var r = Lc$1(e), i = Vc$1(e, (function(e) {
                return new qc$1(t.firestore, new hc$1(t.firestore.d_, t.Xf, t.d_, e._d));
            }));
            return vc$1(this.d_, r, i);
        }, e.prototype.withConverter = function(t) {
            return new e(this.firestore, this.d_.withConverter(kc$1.gd(this.firestore, t)));
        }, e;
    }(Ds), Mc$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, n) || this).Yf = e, r;
        }
        return __extends$1d(e, t), Object.defineProperty(e.prototype, "type", {
            get: function() {
                return this.d_.type;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "doc", {
            get: function() {
                return new Rc$1(this.Yf, this.d_.doc);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "oldIndex", {
            get: function() {
                return this.d_.oldIndex;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "newIndex", {
            get: function() {
                return this.d_.newIndex;
            },
            enumerable: !1,
            configurable: !0
        }), e;
    }(Ds), qc$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, n) || this).Yf = e, r;
        }
        return __extends$1d(e, t), Object.defineProperty(e.prototype, "query", {
            get: function() {
                return new Uc$1(this.Yf, this.d_.query);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "metadata", {
            get: function() {
                return this.d_.metadata;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "size", {
            get: function() {
                return this.d_.size;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "empty", {
            get: function() {
                return this.d_.empty;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "docs", {
            get: function() {
                var t = this;
                return this.d_.docs.map((function(e) {
                    return new Rc$1(t.Yf, e);
                }));
            },
            enumerable: !1,
            configurable: !0
        }), e.prototype.docChanges = function(t) {
            var e = this;
            return this.d_.docChanges(t).map((function(t) {
                return new Mc$1(e.Yf, t);
            }));
        }, e.prototype.forEach = function(t, e) {
            var n = this;
            this.d_.forEach((function(r) {
                t.call(e, new Rc$1(n.Yf, r));
            }));
        }, e.prototype.isEqual = function(t) {
            return lc$1(this.d_, t.d_);
        }, e;
    }(Ds), jc$1 = /** @class */ function(t) {
        function e(e, n) {
            var r = this;
            return (r = t.call(this, e, n) || this).firestore = e, r.d_ = n, r;
        }
        return __extends$1d(e, t), Object.defineProperty(e.prototype, "id", {
            get: function() {
                return this.d_.id;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "path", {
            get: function() {
                return this.d_.path;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(e.prototype, "parent", {
            get: function() {
                var t = this.d_.parent;
                return t ? new Oc$1(this.firestore, t) : null;
            },
            enumerable: !1,
            configurable: !0
        }), e.prototype.doc = function(t) {
            try {
                return new Oc$1(this.firestore, void 0 === t ? Bs(this.d_) : Bs(this.d_, t));
            } catch (t) {
                throw Pc$1(t, "doc()", "CollectionReference.doc()");
            }
        }, e.prototype.add = function(t) {
            var e = this;
            return function(t, e) {
                var n = Cs(t.firestore, Ma$1), r = Bs(t), i = oc$1(t.v_, e);
                return yc$1(n, [ ea$1(ta$1(t.firestore), "addDoc", r.S_, i, null !== t.v_, {}).F_(r.S_, Re.exists(!1)) ]).then((function() {
                    return r;
                }));
            }(this.d_, t).then((function(t) {
                return new Oc$1(e.firestore, t);
            }));
        }, e.prototype.isEqual = function(t) {
            return Qs(this.d_, t.d_);
        }, e.prototype.withConverter = function(t) {
            return new e(this.firestore, this.d_.withConverter(kc$1.gd(this.firestore, t)));
        }, e;
    }(Uc$1);

    function Fc$1(t) {
        return t instanceof Ds && (t = t.d_), Cs(t, js);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The objects that are a part of this API are exposed to third-parties as
    // compiled javascript so we want to flag our private members with a leading
    // underscore to discourage their use.
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a list
     * of field names (referring to a nested field in the document).
     */ var zc$1 = /** @class */ function(t) {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        function e() {
            for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
            return t.call(this, new (As.bind.apply(As, __spreadArrays([ void 0 ], e)))) || this;
        }
        return __extends$1d(e, t), e.documentId = function() {
            /**
             * Internal Note: The backend doesn't technically support querying by
             * document ID. Instead it queries by the entire document name (full path
             * included), but in the cases we currently support documentId(), the net
             * effect is the same.
             */
            return new e($.ht().rt());
        }, e.prototype.isEqual = function(t) {
            return t instanceof Ds && (t = t.d_), t instanceof As && this.d_.f_.isEqual(t.f_);
        }, e;
    }(Ds), Gc$1 = /** @class */ function(t) {
        function e() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return __extends$1d(e, t), e.serverTimestamp = function() {
            var t = new ia("serverTimestamp");
            return t._methodName = "FieldValue.serverTimestamp", new e(t);
        }, e.delete = function() {
            var t = new na$1("deleteField");
            return t._methodName = "FieldValue.delete", new e(t);
        }, e.arrayUnion = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            var r = 
            /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to union the given elements with any array
     * value that already exists on the server. Each specified element that doesn't
     * already exist in the array will be added to the end. If the field being
     * modified is not already an array it will be overwritten with an array
     * containing exactly the specified elements.
     *
     * @param elements - The elements to union into the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`.
     */
            function() {
                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                // NOTE: We don't actually parse the data until it's used in set() or
                // update() since we'd need the Firestore instance to do this.
                            return new oa$1("arrayUnion", t);
            }.apply(void 0, t);
            return r._methodName = "FieldValue.arrayUnion", new e(r);
        }, e.arrayRemove = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            var r = function() {
                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                // NOTE: We don't actually parse the data until it's used in set() or
                // update() since we'd need the Firestore instance to do this.
                            return new ua$2("arrayRemove", t);
            }.apply(void 0, t);
            return r._methodName = "FieldValue.arrayRemove", new e(r);
        }, e.increment = function(t) {
            var n = function(t) {
                return new sa$1("increment", t);
            }(t);
            return n._methodName = "FieldValue.increment", new e(n);
        }, e.prototype.isEqual = function(t) {
            return this.d_.isEqual(t.d_);
        }, e;
    }(Ds);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a sentinel for use with {@link updateDoc} or
     * {@link setDoc} with `{merge: true}` to mark a field for deletion.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function Bc$1(t) {
        /**
     * Loads a Firestore bundle into the local cache.
     *
     * @param firestore - The `Firestore` instance to load bundles for for.
     * @param bundleData - An object representing the bundle to be loaded. Valid objects are
     *   `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
     *
     * @return
     *   A `LoadBundleTask` object, which notifies callers with progress updates, and completion
     *   or error events. It can be used as a `Promise<LoadBundleTaskProgress>`.
     */
        return function(t, e) {
            var n = qa$1(t = Cs(t, Ma$1)), r = new Ra$1;
            return function(t, e, n, r) {
                var i = this, o = function(t, e) {
                    return function(t, e) {
                        return new Ns(t, e);
                    }(function(t, e) {
                        if (t instanceof Uint8Array) return Es(t, e);
                        if (t instanceof ArrayBuffer) return Es(new Uint8Array(t), e);
                        if (t instanceof ReadableStream) return t.getReader();
                        throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
                    }("string" == typeof t ? (new TextEncoder).encode(t) : t), e);
                }(n, Bo(e));
                t._s.Ps((function() {
                    return __awaiter(i, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return e = gs, [ 4 /*yield*/ , ka$1(t) ];

                              case 1:
                                return e.apply(void 0, [ n.sent(), o, r ]), [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }));
            }(n, t.I_, e, r), r;
        }(this.d_, t);
    }

    function Qc$1(t) {
        var e, n, r = this;
        return (e = this.d_, n = t, function(t, e) {
            var n = this;
            return t._s.enqueue((function() {
                return __awaiter(n, void 0, void 0, (function() {
                    var n;
                    return __generator(this, (function(r) {
                        switch (r.label) {
                          case 0:
                            return n = function(t, e) {
                                var n = O$1(t);
                                return n.persistence.runTransaction("Get named query", "readonly", (function(t) {
                                    return n.wo.Ls(t, e);
                                }));
                            }, [ 4 /*yield*/ , Da$1(t) ];

                          case 1:
                            return [ 2 /*return*/ , n.apply(void 0, [ r.sent(), e ]) ];
                        }
                    }));
                }));
            }));
        }(qa$1(e = Cs(e, Ma$1)), n).then((function(t) {
            return t ? new Fs(e, null, t.query) : null;
        }))).then((function(t) {
            return t ? new Uc$1(r, t) : null;
        }));
    }

    var P$2 = {
        Firestore: Nc$1,
        GeoPoint: Hs,
        Timestamp: K$1,
        Blob: Ec$1,
        Transaction: Dc$1,
        WriteBatch: xc,
        DocumentReference: Oc$1,
        DocumentSnapshot: Cc$1,
        Query: Uc$1,
        QueryDocumentSnapshot: Rc$1,
        QuerySnapshot: qc$1,
        CollectionReference: jc$1,
        FieldPath: zc$1,
        FieldValue: Gc$1,
        setLogLevel: Sc$1,
        CACHE_SIZE_UNLIMITED: Ua$1
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Registers the main Firestore build with the components framework.
     * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
     */
    function d(e) {
        !
        /**
     * Configures Firestore as part of the Firebase SDK by calling registerService.
     *
     * @param firebase - The FirebaseNamespace to register Firestore with
     * @param firestoreFactory - A factory function that returns a new Firestore
     *    instance.
     */
        function(e, r) {
            e.INTERNAL.registerComponent(new Component("firestore", (function(e) {
                var t = e.getProvider("app").getImmediate();
                return r(t, e.getProvider("auth-internal"));
            }), "PUBLIC" /* PUBLIC */).setServiceProps(Object.assign({}, P$2)));
        }(e, (function(e, s) {
            return new Nc$1(e, new Ma$1(e, s), new Tc$1);
        })), e.registerVersion("@firebase/firestore", "2.1.5");
    }

    d(firebase$1);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Prototype patches bundle loading to Firestore.
     */ function t$1(o) {
        o.prototype.loadBundle = Bc$1, o.prototype.namedQuery = Qc$1;
    }

    t$1(Nc$1);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Standard error codes for different ways a request can fail, as defined by:
     * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
     *
     * This map is used primarily to convert from a backend error code string to
     * a client SDK error code string, and make sure it's in the supported set.
     */
    var errorCodeMap = {
        OK: 'ok',
        CANCELLED: 'cancelled',
        UNKNOWN: 'unknown',
        INVALID_ARGUMENT: 'invalid-argument',
        DEADLINE_EXCEEDED: 'deadline-exceeded',
        NOT_FOUND: 'not-found',
        ALREADY_EXISTS: 'already-exists',
        PERMISSION_DENIED: 'permission-denied',
        UNAUTHENTICATED: 'unauthenticated',
        RESOURCE_EXHAUSTED: 'resource-exhausted',
        FAILED_PRECONDITION: 'failed-precondition',
        ABORTED: 'aborted',
        OUT_OF_RANGE: 'out-of-range',
        UNIMPLEMENTED: 'unimplemented',
        INTERNAL: 'internal',
        UNAVAILABLE: 'unavailable',
        DATA_LOSS: 'data-loss'
    };
    /**
     * An explicit error that can be thrown from a handler to send an error to the
     * client that called the function.
     */
    var HttpsErrorImpl = /** @class */ (function (_super) {
        __extends$1d(HttpsErrorImpl, _super);
        function HttpsErrorImpl(code, message, details) {
            var _this = _super.call(this, message) || this;
            // This is a workaround for a bug in TypeScript when extending Error:
            // tslint:disable-next-line
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);
            _this.code = code;
            _this.details = details;
            return _this;
        }
        return HttpsErrorImpl;
    }(Error));
    /**
     * Takes an HTTP status code and returns the corresponding ErrorCode.
     * This is the standard HTTP status code -> error mapping defined in:
     * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
     *
     * @param status An HTTP status code.
     * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.
     */
    function codeForHTTPStatus(status) {
        // Make sure any successful status is OK.
        if (status >= 200 && status < 300) {
            return 'ok';
        }
        switch (status) {
            case 0:
                // This can happen if the server returns 500.
                return 'internal';
            case 400:
                return 'invalid-argument';
            case 401:
                return 'unauthenticated';
            case 403:
                return 'permission-denied';
            case 404:
                return 'not-found';
            case 409:
                return 'aborted';
            case 429:
                return 'resource-exhausted';
            case 499:
                return 'cancelled';
            case 500:
                return 'internal';
            case 501:
                return 'unimplemented';
            case 503:
                return 'unavailable';
            case 504:
                return 'deadline-exceeded';
        }
        return 'unknown';
    }
    /**
     * Takes an HTTP response and returns the corresponding Error, if any.
     */
    function _errorForResponse(status, bodyJSON, serializer) {
        var code = codeForHTTPStatus(status);
        // Start with reasonable defaults from the status code.
        var description = code;
        var details = undefined;
        // Then look through the body for explicit details.
        try {
            var errorJSON = bodyJSON && bodyJSON.error;
            if (errorJSON) {
                var status_1 = errorJSON.status;
                if (typeof status_1 === 'string') {
                    if (!errorCodeMap[status_1]) {
                        // They must've included an unknown error code in the body.
                        return new HttpsErrorImpl('internal', 'internal');
                    }
                    code = errorCodeMap[status_1];
                    // TODO(klimt): Add better default descriptions for error enums.
                    // The default description needs to be updated for the new code.
                    description = status_1;
                }
                var message = errorJSON.message;
                if (typeof message === 'string') {
                    description = message;
                }
                details = errorJSON.details;
                if (details !== undefined) {
                    details = serializer.decode(details);
                }
            }
        }
        catch (e) {
            // If we couldn't parse explicit error data, that's fine.
        }
        if (code === 'ok') {
            // Technically, there's an edge case where a developer could explicitly
            // return an error code of OK, and we will treat it as success, but that
            // seems reasonable.
            return null;
        }
        return new HttpsErrorImpl(code, description, details);
    }

    /**
     * Helper class to get metadata that should be included with a function call.
     */
    var ContextProvider = /** @class */ (function () {
        function ContextProvider(authProvider, messagingProvider) {
            var _this = this;
            this.auth = null;
            this.messaging = null;
            this.auth = authProvider.getImmediate({ optional: true });
            this.messaging = messagingProvider.getImmediate({
                optional: true
            });
            if (!this.auth) {
                authProvider.get().then(function (auth) { return (_this.auth = auth); }, function () {
                    /* get() never rejects */
                });
            }
            if (!this.messaging) {
                messagingProvider.get().then(function (messaging) { return (_this.messaging = messaging); }, function () {
                    /* get() never rejects */
                });
            }
        }
        ContextProvider.prototype.getAuthToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                var token;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.auth) {
                                return [2 /*return*/, undefined];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.auth.getToken()];
                        case 2:
                            token = _a.sent();
                            if (!token) {
                                return [2 /*return*/, undefined];
                            }
                            return [2 /*return*/, token.accessToken];
                        case 3:
                            _a.sent();
                            // If there's any error when trying to get the auth token, leave it off.
                            return [2 /*return*/, undefined];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ContextProvider.prototype.getInstanceIdToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.messaging ||
                        !('Notification' in self) ||
                        Notification.permission !== 'granted') {
                        return [2 /*return*/, undefined];
                    }
                    try {
                        return [2 /*return*/, this.messaging.getToken()];
                    }
                    catch (e) {
                        // We don't warn on this, because it usually means messaging isn't set up.
                        // console.warn('Failed to retrieve instance id token.', e);
                        // If there's any error when trying to get the token, leave it off.
                        return [2 /*return*/, undefined];
                    }
                    return [2 /*return*/];
                });
            });
        };
        ContextProvider.prototype.getContext = function () {
            return __awaiter(this, void 0, void 0, function () {
                var authToken, instanceIdToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getAuthToken()];
                        case 1:
                            authToken = _a.sent();
                            return [4 /*yield*/, this.getInstanceIdToken()];
                        case 2:
                            instanceIdToken = _a.sent();
                            return [2 /*return*/, { authToken: authToken, instanceIdToken: instanceIdToken }];
                    }
                });
            });
        };
        return ContextProvider;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';
    var UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';
    function mapValues(
    // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    o, f) {
        var result = {};
        for (var key in o) {
            if (o.hasOwnProperty(key)) {
                result[key] = f(o[key]);
            }
        }
        return result;
    }
    var Serializer = /** @class */ (function () {
        function Serializer() {
        }
        // Takes data and encodes it in a JSON-friendly way, such that types such as
        // Date are preserved.
        Serializer.prototype.encode = function (data) {
            var _this = this;
            if (data == null) {
                return null;
            }
            if (data instanceof Number) {
                data = data.valueOf();
            }
            if (typeof data === 'number' && isFinite(data)) {
                // Any number in JS is safe to put directly in JSON and parse as a double
                // without any loss of precision.
                return data;
            }
            if (data === true || data === false) {
                return data;
            }
            if (Object.prototype.toString.call(data) === '[object String]') {
                return data;
            }
            if (Array.isArray(data)) {
                return data.map(function (x) { return _this.encode(x); });
            }
            if (typeof data === 'function' || typeof data === 'object') {
                return mapValues(data, function (x) { return _this.encode(x); });
            }
            // If we got this far, the data is not encodable.
            throw new Error('Data cannot be encoded in JSON: ' + data);
        };
        // Takes data that's been encoded in a JSON-friendly form and returns a form
        // with richer datatypes, such as Dates, etc.
        Serializer.prototype.decode = function (json) {
            var _this = this;
            if (json == null) {
                return json;
            }
            if (json['@type']) {
                switch (json['@type']) {
                    case LONG_TYPE:
                    // Fall through and handle this the same as unsigned.
                    case UNSIGNED_LONG_TYPE: {
                        // Technically, this could work return a valid number for malformed
                        // data if there was a number followed by garbage. But it's just not
                        // worth all the extra code to detect that case.
                        var value = Number(json['value']);
                        if (isNaN(value)) {
                            throw new Error('Data cannot be decoded from JSON: ' + json);
                        }
                        return value;
                    }
                    default: {
                        throw new Error('Data cannot be decoded from JSON: ' + json);
                    }
                }
            }
            if (Array.isArray(json)) {
                return json.map(function (x) { return _this.decode(x); });
            }
            if (typeof json === 'function' || typeof json === 'object') {
                return mapValues(json, function (x) { return _this.decode(x); });
            }
            // Anything else is safe to return.
            return json;
        };
        return Serializer;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a Promise that will be rejected after the given duration.
     * The error will be of type HttpsErrorImpl.
     *
     * @param millis Number of milliseconds to wait before rejecting.
     */
    function failAfter(millis) {
        var timer;
        var promise = new Promise(function (_, reject) {
            timer = setTimeout(function () {
                reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));
            }, millis);
        });
        return {
            timer: timer,
            promise: promise
        };
    }
    /**
     * The main class for the Firebase Functions SDK.
     */
    var Service = /** @class */ (function () {
        /**
         * Creates a new Functions service for the given app and (optional) region or custom domain.
         * @param app_ The FirebaseApp to use.
         * @param regionOrCustomDomain_ one of:
         *   a) A region to call functions from, such as us-central1
         *   b) A custom domain to use as a functions prefix, such as https://mydomain.com
         */
        function Service(app_, authProvider, messagingProvider, regionOrCustomDomain_, fetchImpl) {
            var _this = this;
            if (regionOrCustomDomain_ === void 0) { regionOrCustomDomain_ = 'us-central1'; }
            this.app_ = app_;
            this.fetchImpl = fetchImpl;
            this.serializer = new Serializer();
            this.emulatorOrigin = null;
            this.INTERNAL = {
                delete: function () {
                    return Promise.resolve(_this.deleteService());
                }
            };
            this.contextProvider = new ContextProvider(authProvider, messagingProvider);
            // Cancels all ongoing requests when resolved.
            this.cancelAllRequests = new Promise(function (resolve) {
                _this.deleteService = function () {
                    return resolve();
                };
            });
            // Resolve the region or custom domain overload by attempting to parse it.
            try {
                var url = new URL(regionOrCustomDomain_);
                this.customDomain = url.origin;
                this.region = 'us-central1';
            }
            catch (e) {
                this.customDomain = null;
                this.region = regionOrCustomDomain_;
            }
        }
        Object.defineProperty(Service.prototype, "app", {
            get: function () {
                return this.app_;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the URL for a callable with the given name.
         * @param name The name of the callable.
         */
        Service.prototype._url = function (name) {
            var projectId = this.app_.options.projectId;
            if (this.emulatorOrigin !== null) {
                var origin_1 = this.emulatorOrigin;
                return origin_1 + "/" + projectId + "/" + this.region + "/" + name;
            }
            if (this.customDomain !== null) {
                return this.customDomain + "/" + name;
            }
            return "https://" + this.region + "-" + projectId + ".cloudfunctions.net/" + name;
        };
        /**
         * Modify this instance to communicate with the Cloud Functions emulator.
         *
         * Note: this must be called before this instance has been used to do any operations.
         *
         * @param host The emulator host (ex: localhost)
         * @param port The emulator port (ex: 5001)
         */
        Service.prototype.useEmulator = function (host, port) {
            this.emulatorOrigin = "http://" + host + ":" + port;
        };
        /**
         * Changes this instance to point to a Cloud Functions emulator running
         * locally. See https://firebase.google.com/docs/functions/local-emulator
         *
         * @deprecated Prefer the useEmulator(host, port) method.
         * @param origin The origin of the local emulator, such as
         * "http://localhost:5005".
         */
        Service.prototype.useFunctionsEmulator = function (origin) {
            this.emulatorOrigin = origin;
        };
        /**
         * Returns a reference to the callable https trigger with the given name.
         * @param name The name of the trigger.
         */
        Service.prototype.httpsCallable = function (name, options) {
            var _this = this;
            return function (data) {
                return _this.call(name, data, options || {});
            };
        };
        /**
         * Does an HTTP POST and returns the completed response.
         * @param url The url to post to.
         * @param body The JSON body of the post.
         * @param headers The HTTP headers to include in the request.
         * @return A Promise that will succeed when the request finishes.
         */
        Service.prototype.postJSON = function (url, body, headers) {
            return __awaiter(this, void 0, void 0, function () {
                var response, json;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            headers['Content-Type'] = 'application/json';
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.fetchImpl(url, {
                                    method: 'POST',
                                    body: JSON.stringify(body),
                                    headers: headers
                                })];
                        case 2:
                            response = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a.sent();
                            // This could be an unhandled error on the backend, or it could be a
                            // network error. There's no way to know, since an unhandled error on the
                            // backend will fail to set the proper CORS header, and thus will be
                            // treated as a network error by fetch.
                            return [2 /*return*/, {
                                    status: 0,
                                    json: null
                                }];
                        case 4:
                            json = null;
                            _a.label = 5;
                        case 5:
                            _a.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, response.json()];
                        case 6:
                            json = _a.sent();
                            return [3 /*break*/, 8];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 8];
                        case 8: return [2 /*return*/, {
                                status: response.status,
                                json: json
                            }];
                    }
                });
            });
        };
        /**
         * Calls a callable function asynchronously and returns the result.
         * @param name The name of the callable trigger.
         * @param data The data to pass as params to the function.s
         */
        Service.prototype.call = function (name, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            url = this._url(name);
                            // Encode any special types, such as dates, in the input data.
                            data = this.serializer.encode(data);
                            body = { data: data };
                            headers = {};
                            return [4 /*yield*/, this.contextProvider.getContext()];
                        case 1:
                            context = _b.sent();
                            if (context.authToken) {
                                headers['Authorization'] = 'Bearer ' + context.authToken;
                            }
                            if (context.instanceIdToken) {
                                headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;
                            }
                            timeout = options.timeout || 70000;
                            _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;
                            return [4 /*yield*/, Promise.race([
                                    clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),
                                    failAfterPromise,
                                    clearTimeoutWrapper(timer, this.cancelAllRequests)
                                ])];
                        case 2:
                            response = _b.sent();
                            // If service was deleted, interrupted response throws an error.
                            if (!response) {
                                throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');
                            }
                            error = _errorForResponse(response.status, response.json, this.serializer);
                            if (error) {
                                throw error;
                            }
                            if (!response.json) {
                                throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');
                            }
                            responseData = response.json.data;
                            // TODO(klimt): For right now, allow "result" instead of "data", for
                            // backwards compatibility.
                            if (typeof responseData === 'undefined') {
                                responseData = response.json.result;
                            }
                            if (typeof responseData === 'undefined') {
                                // Consider the response malformed.
                                throw new HttpsErrorImpl('internal', 'Response is missing data field.');
                            }
                            decodedData = this.serializer.decode(responseData);
                            return [2 /*return*/, { data: decodedData }];
                    }
                });
            });
        };
        return Service;
    }());
    function clearTimeoutWrapper(timer, promise) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promise];
                    case 1:
                        result = _a.sent();
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        clearTimeout(timer);
                        return [2 /*return*/, result];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Type constant for Firebase Functions.
     */
    var FUNCTIONS_TYPE = 'functions';
    function registerFunctions(instance, fetchImpl) {
        var namespaceExports = {
            // no-inline
            Functions: Service
        };
        function factory(container, regionOrCustomDomain) {
            // Dependencies
            var app = container.getProvider('app').getImmediate();
            var authProvider = container.getProvider('auth-internal');
            var messagingProvider = container.getProvider('messaging');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return new Service(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl);
        }
        instance.INTERNAL.registerComponent(new Component(FUNCTIONS_TYPE, factory, "PUBLIC" /* PUBLIC */)
            .setServiceProps(namespaceExports)
            .setMultipleInstances(true));
    }

    var name$e = "@firebase/functions";
    var version$3 = "0.6.1";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerFunctions(firebase$1, fetch.bind(self));
    firebase$1.registerVersion(name$e, version$3);

    var idb = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      factory(exports) ;
    }(commonjsGlobal, function (exports) {
      function toArray(arr) {
        return Array.prototype.slice.call(arr);
      }

      function promisifyRequest(request) {
        return new Promise(function(resolve, reject) {
          request.onsuccess = function() {
            resolve(request.result);
          };

          request.onerror = function() {
            reject(request.error);
          };
        });
      }

      function promisifyRequestCall(obj, method, args) {
        var request;
        var p = new Promise(function(resolve, reject) {
          request = obj[method].apply(obj, args);
          promisifyRequest(request).then(resolve, reject);
        });

        p.request = request;
        return p;
      }

      function promisifyCursorRequestCall(obj, method, args) {
        var p = promisifyRequestCall(obj, method, args);
        return p.then(function(value) {
          if (!value) return;
          return new Cursor(value, p.request);
        });
      }

      function proxyProperties(ProxyClass, targetProp, properties) {
        properties.forEach(function(prop) {
          Object.defineProperty(ProxyClass.prototype, prop, {
            get: function() {
              return this[targetProp][prop];
            },
            set: function(val) {
              this[targetProp][prop] = val;
            }
          });
        });
      }

      function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype)) return;
          ProxyClass.prototype[prop] = function() {
            return promisifyRequestCall(this[targetProp], prop, arguments);
          };
        });
      }

      function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype)) return;
          ProxyClass.prototype[prop] = function() {
            return this[targetProp][prop].apply(this[targetProp], arguments);
          };
        });
      }

      function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype)) return;
          ProxyClass.prototype[prop] = function() {
            return promisifyCursorRequestCall(this[targetProp], prop, arguments);
          };
        });
      }

      function Index(index) {
        this._index = index;
      }

      proxyProperties(Index, '_index', [
        'name',
        'keyPath',
        'multiEntry',
        'unique'
      ]);

      proxyRequestMethods(Index, '_index', IDBIndex, [
        'get',
        'getKey',
        'getAll',
        'getAllKeys',
        'count'
      ]);

      proxyCursorRequestMethods(Index, '_index', IDBIndex, [
        'openCursor',
        'openKeyCursor'
      ]);

      function Cursor(cursor, request) {
        this._cursor = cursor;
        this._request = request;
      }

      proxyProperties(Cursor, '_cursor', [
        'direction',
        'key',
        'primaryKey',
        'value'
      ]);

      proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
        'update',
        'delete'
      ]);

      // proxy 'next' methods
      ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
        if (!(methodName in IDBCursor.prototype)) return;
        Cursor.prototype[methodName] = function() {
          var cursor = this;
          var args = arguments;
          return Promise.resolve().then(function() {
            cursor._cursor[methodName].apply(cursor._cursor, args);
            return promisifyRequest(cursor._request).then(function(value) {
              if (!value) return;
              return new Cursor(value, cursor._request);
            });
          });
        };
      });

      function ObjectStore(store) {
        this._store = store;
      }

      ObjectStore.prototype.createIndex = function() {
        return new Index(this._store.createIndex.apply(this._store, arguments));
      };

      ObjectStore.prototype.index = function() {
        return new Index(this._store.index.apply(this._store, arguments));
      };

      proxyProperties(ObjectStore, '_store', [
        'name',
        'keyPath',
        'indexNames',
        'autoIncrement'
      ]);

      proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
        'put',
        'add',
        'delete',
        'clear',
        'get',
        'getAll',
        'getKey',
        'getAllKeys',
        'count'
      ]);

      proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
        'openCursor',
        'openKeyCursor'
      ]);

      proxyMethods(ObjectStore, '_store', IDBObjectStore, [
        'deleteIndex'
      ]);

      function Transaction(idbTransaction) {
        this._tx = idbTransaction;
        this.complete = new Promise(function(resolve, reject) {
          idbTransaction.oncomplete = function() {
            resolve();
          };
          idbTransaction.onerror = function() {
            reject(idbTransaction.error);
          };
          idbTransaction.onabort = function() {
            reject(idbTransaction.error);
          };
        });
      }

      Transaction.prototype.objectStore = function() {
        return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
      };

      proxyProperties(Transaction, '_tx', [
        'objectStoreNames',
        'mode'
      ]);

      proxyMethods(Transaction, '_tx', IDBTransaction, [
        'abort'
      ]);

      function UpgradeDB(db, oldVersion, transaction) {
        this._db = db;
        this.oldVersion = oldVersion;
        this.transaction = new Transaction(transaction);
      }

      UpgradeDB.prototype.createObjectStore = function() {
        return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
      };

      proxyProperties(UpgradeDB, '_db', [
        'name',
        'version',
        'objectStoreNames'
      ]);

      proxyMethods(UpgradeDB, '_db', IDBDatabase, [
        'deleteObjectStore',
        'close'
      ]);

      function DB(db) {
        this._db = db;
      }

      DB.prototype.transaction = function() {
        return new Transaction(this._db.transaction.apply(this._db, arguments));
      };

      proxyProperties(DB, '_db', [
        'name',
        'version',
        'objectStoreNames'
      ]);

      proxyMethods(DB, '_db', IDBDatabase, [
        'close'
      ]);

      // Add cursor iterators
      // TODO: remove this once browsers do the right thing with promises
      ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
        [ObjectStore, Index].forEach(function(Constructor) {
          // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
          if (!(funcName in Constructor.prototype)) return;

          Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
            var args = toArray(arguments);
            var callback = args[args.length - 1];
            var nativeObject = this._store || this._index;
            var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
            request.onsuccess = function() {
              callback(request.result);
            };
          };
        });
      });

      // polyfill getAll
      [Index, ObjectStore].forEach(function(Constructor) {
        if (Constructor.prototype.getAll) return;
        Constructor.prototype.getAll = function(query, count) {
          var instance = this;
          var items = [];

          return new Promise(function(resolve) {
            instance.iterateCursor(query, function(cursor) {
              if (!cursor) {
                resolve(items);
                return;
              }
              items.push(cursor.value);

              if (count !== undefined && items.length == count) {
                resolve(items);
                return;
              }
              cursor.continue();
            });
          });
        };
      });

      function openDb(name, version, upgradeCallback) {
        var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
        var request = p.request;

        if (request) {
          request.onupgradeneeded = function(event) {
            if (upgradeCallback) {
              upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
            }
          };
        }

        return p.then(function(db) {
          return new DB(db);
        });
      }

      function deleteDb(name) {
        return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);
      }

      exports.openDb = openDb;
      exports.deleteDb = deleteDb;

      Object.defineProperty(exports, '__esModule', { value: true });

    }));
    });

    var name$f = "@firebase/installations";
    var version$4 = "0.4.19";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PENDING_TIMEOUT_MS = 10000;
    var PACKAGE_VERSION = "w:" + version$4;
    var INTERNAL_AUTH_VERSION = 'FIS_v2';
    var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
    var SERVICE = 'installations';
    var SERVICE_NAME = 'Installations';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$3;
    var ERROR_DESCRIPTION_MAP = (_a$3 = {},
        _a$3["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
        _a$3["not-registered" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',
        _a$3["installation-not-found" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',
        _a$3["request-failed" /* REQUEST_FAILED */] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
        _a$3["app-offline" /* APP_OFFLINE */] = 'Could not process request. Application offline.',
        _a$3["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */] = "Can't delete installation while there is a pending registration request.",
        _a$3);
    var ERROR_FACTORY$1 = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
    /** Returns true if error is a FirebaseError that is based on an error from the server. */
    function isServerError(error) {
        return (error instanceof FirebaseError &&
            error.code.includes("request-failed" /* REQUEST_FAILED */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getInstallationsEndpoint(_a) {
        var projectId = _a.projectId;
        return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
    }
    function extractAuthTokenInfoFromResponse(response) {
        return {
            token: response.token,
            requestStatus: 2 /* COMPLETED */,
            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
            creationTime: Date.now()
        };
    }
    function getErrorFromResponse(requestName, response) {
        return __awaiter(this, void 0, void 0, function () {
            var responseJson, errorData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, response.json()];
                    case 1:
                        responseJson = _a.sent();
                        errorData = responseJson.error;
                        return [2 /*return*/, ERROR_FACTORY$1.create("request-failed" /* REQUEST_FAILED */, {
                                requestName: requestName,
                                serverCode: errorData.code,
                                serverMessage: errorData.message,
                                serverStatus: errorData.status
                            })];
                }
            });
        });
    }
    function getHeaders(_a) {
        var apiKey = _a.apiKey;
        return new Headers({
            'Content-Type': 'application/json',
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    function getHeadersWithAuth(appConfig, _a) {
        var refreshToken = _a.refreshToken;
        var headers = getHeaders(appConfig);
        headers.append('Authorization', getAuthorizationHeader(refreshToken));
        return headers;
    }
    /**
     * Calls the passed in fetch wrapper and returns the response.
     * If the returned response has a status of 5xx, re-runs the function once and
     * returns the response.
     */
    function retryIfServerError(fn) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn()];
                    case 1:
                        result = _a.sent();
                        if (result.status >= 500 && result.status < 600) {
                            // Internal Server Error. Retry request.
                            return [2 /*return*/, fn()];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    }
    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
        // This works because the server will never respond with fractions of a second.
        return Number(responseExpiresIn.replace('s', '000'));
    }
    function getAuthorizationHeader(refreshToken) {
        return INTERNAL_AUTH_VERSION + " " + refreshToken;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createInstallationRequest(appConfig, _a) {
        var fid = _a.fid;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getInstallationsEndpoint(appConfig);
                        headers = getHeaders(appConfig);
                        body = {
                            fid: fid,
                            authVersion: INTERNAL_AUTH_VERSION,
                            appId: appConfig.appId,
                            sdkVersion: PACKAGE_VERSION
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        registeredInstallationEntry = {
                            fid: responseValue.fid || fid,
                            registrationStatus: 2 /* COMPLETED */,
                            refreshToken: responseValue.refreshToken,
                            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
                        };
                        return [2 /*return*/, registeredInstallationEntry];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a promise that resolves after given time passes. */
    function sleep(ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function bufferToBase64UrlSafe(array) {
        var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));
        return b64.replace(/\+/g, '-').replace(/\//g, '_');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
    var INVALID_FID = '';
    /**
     * Generates a new FID using random values from Web Crypto API.
     * Returns an empty string if FID generation fails for any reason.
     */
    function generateFid() {
        try {
            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
            // bytes. our implementation generates a 17 byte array instead.
            var fidByteArray = new Uint8Array(17);
            var crypto_1 = self.crypto || self.msCrypto;
            crypto_1.getRandomValues(fidByteArray);
            // Replace the first 4 random bits with the constant FID header of 0b0111.
            fidByteArray[0] = 112 + (fidByteArray[0] % 16);
            var fid = encode(fidByteArray);
            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
        }
        catch (_a) {
            // FID generation errored
            return INVALID_FID;
        }
    }
    /** Converts a FID Uint8Array to a base64 string representation. */
    function encode(fidByteArray) {
        var b64String = bufferToBase64UrlSafe(fidByteArray);
        // Remove the 23rd character that was added because of the extra 4 bits at the
        // end of our 17 byte array, and the '=' padding.
        return b64String.substr(0, 22);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a string key that can be used to identify the app. */
    function getKey$2(appConfig) {
        return appConfig.appName + "!" + appConfig.appId;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var fidChangeCallbacks = new Map();
    /**
     * Calls the onIdChange callbacks with the new FID value, and broadcasts the
     * change to other tabs.
     */
    function fidChanged(appConfig, fid) {
        var key = getKey$2(appConfig);
        callFidChangeCallbacks(key, fid);
        broadcastFidChange(key, fid);
    }
    function addCallback(appConfig, callback) {
        // Open the broadcast channel if it's not already open,
        // to be able to listen to change events from other tabs.
        getBroadcastChannel();
        var key = getKey$2(appConfig);
        var callbackSet = fidChangeCallbacks.get(key);
        if (!callbackSet) {
            callbackSet = new Set();
            fidChangeCallbacks.set(key, callbackSet);
        }
        callbackSet.add(callback);
    }
    function removeCallback(appConfig, callback) {
        var key = getKey$2(appConfig);
        var callbackSet = fidChangeCallbacks.get(key);
        if (!callbackSet) {
            return;
        }
        callbackSet.delete(callback);
        if (callbackSet.size === 0) {
            fidChangeCallbacks.delete(key);
        }
        // Close broadcast channel if there are no more callbacks.
        closeBroadcastChannel();
    }
    function callFidChangeCallbacks(key, fid) {
        var e_1, _a;
        var callbacks = fidChangeCallbacks.get(key);
        if (!callbacks) {
            return;
        }
        try {
            for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
                var callback = callbacks_1_1.value;
                callback(fid);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    function broadcastFidChange(key, fid) {
        var channel = getBroadcastChannel();
        if (channel) {
            channel.postMessage({ key: key, fid: fid });
        }
        closeBroadcastChannel();
    }
    var broadcastChannel = null;
    /** Opens and returns a BroadcastChannel if it is supported by the browser. */
    function getBroadcastChannel() {
        if (!broadcastChannel && 'BroadcastChannel' in self) {
            broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
            broadcastChannel.onmessage = function (e) {
                callFidChangeCallbacks(e.data.key, e.data.fid);
            };
        }
        return broadcastChannel;
    }
    function closeBroadcastChannel() {
        if (fidChangeCallbacks.size === 0 && broadcastChannel) {
            broadcastChannel.close();
            broadcastChannel = null;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DATABASE_NAME = 'firebase-installations-database';
    var DATABASE_VERSION = 1;
    var OBJECT_STORE_NAME = 'firebase-installations-store';
    var dbPromise = null;
    function getDbPromise() {
        if (!dbPromise) {
            dbPromise = idb.openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (upgradeDB.oldVersion) {
                    case 0:
                        upgradeDB.createObjectStore(OBJECT_STORE_NAME);
                }
            });
        }
        return dbPromise;
    }
    /** Assigns or overwrites the record for the given key with the given value. */
    function set$1(appConfig, value) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, objectStore, oldValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$2(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        objectStore = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, objectStore.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        return [4 /*yield*/, objectStore.put(value, key)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 4:
                        _a.sent();
                        if (!oldValue || oldValue.fid !== value.fid) {
                            fidChanged(appConfig, value.fid);
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    }
    /** Removes record(s) from the objectStore that match the given key. */
    function remove(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$2(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Atomically updates a record with the result of updateFn, which gets
     * called with the current value. If newValue is undefined, the record is
     * deleted instead.
     * @return Updated value
     */
    function update$1(appConfig, updateFn) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, store, oldValue, newValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$2(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        store = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, store.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        newValue = updateFn(oldValue);
                        if (!(newValue === undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, store.delete(key)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, store.put(newValue, key)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, tx.complete];
                    case 7:
                        _a.sent();
                        if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
                            fidChanged(appConfig, newValue.fid);
                        }
                        return [2 /*return*/, newValue];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates and returns the InstallationEntry from the database.
     * Also triggers a registration request if it is necessary and possible.
     */
    function getInstallationEntry(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise, installationEntry;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update$1(appConfig, function (oldEntry) {
                            var installationEntry = updateOrCreateInstallationEntry(oldEntry);
                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
                            registrationPromise = entryWithPromise.registrationPromise;
                            return entryWithPromise.installationEntry;
                        })];
                    case 1:
                        installationEntry = _b.sent();
                        if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];
                        _a = {};
                        return [4 /*yield*/, registrationPromise];
                    case 2: 
                    // FID generation failed. Waiting for the FID from the server.
                    return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];
                    case 3: return [2 /*return*/, {
                            installationEntry: installationEntry,
                            registrationPromise: registrationPromise
                        }];
                }
            });
        });
    }
    /**
     * Creates a new Installation Entry if one does not exist.
     * Also clears timed out pending requests.
     */
    function updateOrCreateInstallationEntry(oldEntry) {
        var entry = oldEntry || {
            fid: generateFid(),
            registrationStatus: 0 /* NOT_STARTED */
        };
        return clearTimedOutRequest(entry);
    }
    /**
     * If the Firebase Installation is not registered yet, this will trigger the
     * registration and return an InProgressInstallationEntry.
     *
     * If registrationPromise does not exist, the installationEntry is guaranteed
     * to be registered.
     */
    function triggerRegistrationIfNecessary(appConfig, installationEntry) {
        if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
            if (!navigator.onLine) {
                // Registration required but app is offline.
                var registrationPromiseWithError = Promise.reject(ERROR_FACTORY$1.create("app-offline" /* APP_OFFLINE */));
                return {
                    installationEntry: installationEntry,
                    registrationPromise: registrationPromiseWithError
                };
            }
            // Try registering. Change status to IN_PROGRESS.
            var inProgressEntry = {
                fid: installationEntry.fid,
                registrationStatus: 1 /* IN_PROGRESS */,
                registrationTime: Date.now()
            };
            var registrationPromise = registerInstallation(appConfig, inProgressEntry);
            return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };
        }
        else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {
            return {
                installationEntry: installationEntry,
                registrationPromise: waitUntilFidRegistration(appConfig)
            };
        }
        else {
            return { installationEntry: installationEntry };
        }
    }
    /** This will be executed only once for each new Firebase Installation. */
    function registerInstallation(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var registeredInstallationEntry, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 7]);
                        return [4 /*yield*/, createInstallationRequest(appConfig, installationEntry)];
                    case 1:
                        registeredInstallationEntry = _a.sent();
                        return [2 /*return*/, set$1(appConfig, registeredInstallationEntry)];
                    case 2:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3 /*break*/, 4];
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(appConfig)];
                    case 3:
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: 
                    // Registration failed. Set FID as not registered.
                    return [4 /*yield*/, set$1(appConfig, {
                            fid: installationEntry.fid,
                            registrationStatus: 0 /* NOT_STARTED */
                        })];
                    case 5:
                        // Registration failed. Set FID as not registered.
                        _a.sent();
                        _a.label = 6;
                    case 6: throw e_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /** Call if FID registration is pending in another request. */
    function waitUntilFidRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 1:
                        entry = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // createInstallation request still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // createInstallation request still in progress.
                        _b.sent();
                        return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 4:
                        entry = _b.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        if (!(entry.registrationStatus === 0 /* NOT_STARTED */)) return [3 /*break*/, 7];
                        return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 6:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            return [2 /*return*/, registrationPromise];
                        }
                        else {
                            // if there is no registrationPromise, entry is registered.
                            return [2 /*return*/, installationEntry];
                        }
                    case 7: return [2 /*return*/, entry];
                }
            });
        });
    }
    /**
     * Called only if there is a CreateInstallation request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * CreateInstallation request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateInstallationRequest(appConfig) {
        return update$1(appConfig, function (oldEntry) {
            if (!oldEntry) {
                throw ERROR_FACTORY$1.create("installation-not-found" /* INSTALLATION_NOT_FOUND */);
            }
            return clearTimedOutRequest(oldEntry);
        });
    }
    function clearTimedOutRequest(entry) {
        if (hasInstallationRequestTimedOut(entry)) {
            return {
                fid: entry.fid,
                registrationStatus: 0 /* NOT_STARTED */
            };
        }
        return entry;
    }
    function hasInstallationRequestTimedOut(installationEntry) {
        return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function generateAuthTokenRequest(_a, installationEntry) {
        var appConfig = _a.appConfig, platformLoggerProvider = _a.platformLoggerProvider;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        platformLogger = platformLoggerProvider.getImmediate({
                            optional: true
                        });
                        if (platformLogger) {
                            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
                        }
                        body = {
                            installation: {
                                sdkVersion: PACKAGE_VERSION
                            }
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
                        return [2 /*return*/, completedAuthToken];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }
    function getGenerateAuthTokenEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a valid authentication token for the installation. Generates a new
     * token if one doesn't exist, is expired or about to expire.
     *
     * Should only be called if the Firebase Installation is registered.
     */
    function refreshAuthToken(dependencies, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tokenPromise, entry, authToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update$1(dependencies.appConfig, function (oldEntry) {
                            if (!isEntryRegistered(oldEntry)) {
                                throw ERROR_FACTORY$1.create("not-registered" /* NOT_REGISTERED */);
                            }
                            var oldAuthToken = oldEntry.authToken;
                            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
                                // There is a valid token in the DB.
                                return oldEntry;
                            }
                            else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
                                // There already is a token request in progress.
                                tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);
                                return oldEntry;
                            }
                            else {
                                // No token or token expired.
                                if (!navigator.onLine) {
                                    throw ERROR_FACTORY$1.create("app-offline" /* APP_OFFLINE */);
                                }
                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                                tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);
                                return inProgressEntry;
                            }
                        })];
                    case 1:
                        entry = _b.sent();
                        if (!tokenPromise) return [3 /*break*/, 3];
                        return [4 /*yield*/, tokenPromise];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = entry.authToken;
                        _b.label = 4;
                    case 4:
                        authToken = _a;
                        return [2 /*return*/, authToken];
                }
            });
        });
    }
    /**
     * Call only if FID is registered and Auth Token request is in progress.
     *
     * Waits until the current pending request finishes. If the request times out,
     * tries once in this thread as well.
     */
    function waitUntilAuthTokenRequest(dependencies, forceRefresh) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];
                    case 1:
                        entry = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // generateAuthToken still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // generateAuthToken still in progress.
                        _a.sent();
                        return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];
                    case 4:
                        entry = _a.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        authToken = entry.authToken;
                        if (authToken.requestStatus === 0 /* NOT_STARTED */) {
                            // The request timed out or failed in a different call. Try again.
                            return [2 /*return*/, refreshAuthToken(dependencies, forceRefresh)];
                        }
                        else {
                            return [2 /*return*/, authToken];
                        }
                }
            });
        });
    }
    /**
     * Called only if there is a GenerateAuthToken request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * GenerateAuthToken request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateAuthTokenRequest(appConfig) {
        return update$1(appConfig, function (oldEntry) {
            if (!isEntryRegistered(oldEntry)) {
                throw ERROR_FACTORY$1.create("not-registered" /* NOT_REGISTERED */);
            }
            var oldAuthToken = oldEntry.authToken;
            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
                return __assign(__assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
            }
            return oldEntry;
        });
    }
    function fetchAuthTokenFromServer(dependencies, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 8]);
                        return [4 /*yield*/, generateAuthTokenRequest(dependencies, installationEntry)];
                    case 1:
                        authToken = _a.sent();
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: authToken });
                        return [4 /*yield*/, set$1(dependencies.appConfig, updatedInstallationEntry)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, authToken];
                    case 3:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) &&
                            (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3 /*break*/, 5];
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(dependencies.appConfig)];
                    case 4:
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
                        return [4 /*yield*/, set$1(dependencies.appConfig, updatedInstallationEntry)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    function isEntryRegistered(installationEntry) {
        return (installationEntry !== undefined &&
            installationEntry.registrationStatus === 2 /* COMPLETED */);
    }
    function isAuthTokenValid(authToken) {
        return (authToken.requestStatus === 2 /* COMPLETED */ &&
            !isAuthTokenExpired(authToken));
    }
    function isAuthTokenExpired(authToken) {
        var now = Date.now();
        return (now < authToken.creationTime ||
            authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
    }
    /** Returns an updated InstallationEntry with an InProgressAuthToken. */
    function makeAuthTokenRequestInProgressEntry(oldEntry) {
        var inProgressAuthToken = {
            requestStatus: 1 /* IN_PROGRESS */,
            requestTime: Date.now()
        };
        return __assign(__assign({}, oldEntry), { authToken: inProgressAuthToken });
    }
    function hasAuthTokenRequestTimedOut(authToken) {
        return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&
            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getId(dependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(dependencies.appConfig)];
                    case 1:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            registrationPromise.catch(console.error);
                        }
                        else {
                            // If the installation is already registered, update the authentication
                            // token if needed.
                            refreshAuthToken(dependencies).catch(console.error);
                        }
                        return [2 /*return*/, installationEntry.fid];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getToken(dependencies, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, completeInstallationRegistration(dependencies.appConfig)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, refreshAuthToken(dependencies, forceRefresh)];
                    case 2:
                        authToken = _a.sent();
                        return [2 /*return*/, authToken.token];
                }
            });
        });
    }
    function completeInstallationRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 1:
                        registrationPromise = (_a.sent()).registrationPromise;
                        if (!registrationPromise) return [3 /*break*/, 3];
                        // A createInstallation request is in progress. Wait until it finishes.
                        return [4 /*yield*/, registrationPromise];
                    case 2:
                        // A createInstallation request is in progress. Wait until it finishes.
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteInstallationRequest(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, request, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = getDeleteEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        request = {
                            method: 'DELETE',
                            headers: headers
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _a.sent();
                        if (!!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, getErrorFromResponse('Delete Installation', response)];
                    case 2: throw _a.sent();
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    function getDeleteEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteInstallation(dependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var appConfig, entry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        appConfig = dependencies.appConfig;
                        return [4 /*yield*/, update$1(appConfig, function (oldEntry) {
                                if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {
                                    // Delete the unregistered entry without sending a deleteInstallation request.
                                    return undefined;
                                }
                                return oldEntry;
                            })];
                    case 1:
                        entry = _a.sent();
                        if (!entry) return [3 /*break*/, 6];
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 2];
                        // Can't delete while trying to register.
                        throw ERROR_FACTORY$1.create("delete-pending-registration" /* DELETE_PENDING_REGISTRATION */);
                    case 2:
                        if (!(entry.registrationStatus === 2 /* COMPLETED */)) return [3 /*break*/, 6];
                        if (!!navigator.onLine) return [3 /*break*/, 3];
                        throw ERROR_FACTORY$1.create("app-offline" /* APP_OFFLINE */);
                    case 3: return [4 /*yield*/, deleteInstallationRequest(appConfig, entry)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, remove(appConfig)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sets a new callback that will get called when Installation ID changes.
     * Returns an unsubscribe function that will remove the callback when called.
     */
    function onIdChange(_a, callback) {
        var appConfig = _a.appConfig;
        addCallback(appConfig, callback);
        return function () {
            removeCallback(appConfig, callback);
        };
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function extractAppConfig(app) {
        var e_1, _a;
        if (!app || !app.options) {
            throw getMissingValueError('App Configuration');
        }
        if (!app.name) {
            throw getMissingValueError('App Name');
        }
        // Required app config keys
        var configKeys = [
            'projectId',
            'apiKey',
            'appId'
        ];
        try {
            for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                var keyName = configKeys_1_1.value;
                if (!app.options[keyName]) {
                    throw getMissingValueError(keyName);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            appName: app.name,
            projectId: app.options.projectId,
            apiKey: app.options.apiKey,
            appId: app.options.appId
        };
    }
    function getMissingValueError(valueName) {
        return ERROR_FACTORY$1.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
            valueName: valueName
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerInstallations(instance) {
        var installationsName = 'installations';
        instance.INTERNAL.registerComponent(new Component(installationsName, function (container) {
            var app = container.getProvider('app').getImmediate();
            // Throws if app isn't configured properly.
            var appConfig = extractAppConfig(app);
            var platformLoggerProvider = container.getProvider('platform-logger');
            var dependencies = {
                appConfig: appConfig,
                platformLoggerProvider: platformLoggerProvider
            };
            var installations = {
                app: app,
                getId: function () { return getId(dependencies); },
                getToken: function (forceRefresh) {
                    return getToken(dependencies, forceRefresh);
                },
                delete: function () { return deleteInstallation(dependencies); },
                onIdChange: function (callback) {
                    return onIdChange(dependencies, callback);
                }
            };
            return installations;
        }, "PUBLIC" /* PUBLIC */));
        instance.registerVersion(name$f, version$4);
    }
    registerInstallations(firebase$1);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$4;
    var ERROR_MAP = (_a$4 = {},
        _a$4["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
        _a$4["only-available-in-window" /* AVAILABLE_IN_WINDOW */] = 'This method is available in a Window context.',
        _a$4["only-available-in-sw" /* AVAILABLE_IN_SW */] = 'This method is available in a service worker context.',
        _a$4["permission-default" /* PERMISSION_DEFAULT */] = 'The notification permission was not granted and dismissed instead.',
        _a$4["permission-blocked" /* PERMISSION_BLOCKED */] = 'The notification permission was not granted and blocked instead.',
        _a$4["unsupported-browser" /* UNSUPPORTED_BROWSER */] = "This browser doesn't support the API's required to use the firebase SDK.",
        _a$4["failed-service-worker-registration" /* FAILED_DEFAULT_REGISTRATION */] = 'We are unable to register the default service worker. {$browserErrorMessage}',
        _a$4["token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */] = 'A problem occurred while subscribing the user to FCM: {$errorInfo}',
        _a$4["token-subscribe-no-token" /* TOKEN_SUBSCRIBE_NO_TOKEN */] = 'FCM returned no token when subscribing the user to push.',
        _a$4["token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */] = 'A problem occurred while unsubscribing the ' +
            'user from FCM: {$errorInfo}',
        _a$4["token-update-failed" /* TOKEN_UPDATE_FAILED */] = 'A problem occurred while updating the user from FCM: {$errorInfo}',
        _a$4["token-update-no-token" /* TOKEN_UPDATE_NO_TOKEN */] = 'FCM returned no token when updating the user to push.',
        _a$4["use-sw-after-get-token" /* USE_SW_AFTER_GET_TOKEN */] = 'The useServiceWorker() method may only be called once and must be ' +
            'called before calling getToken() to ensure your service worker is used.',
        _a$4["invalid-sw-registration" /* INVALID_SW_REGISTRATION */] = 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',
        _a$4["invalid-bg-handler" /* INVALID_BG_HANDLER */] = 'The input to setBackgroundMessageHandler() must be a function.',
        _a$4["invalid-vapid-key" /* INVALID_VAPID_KEY */] = 'The public VAPID key must be a string.',
        _a$4["use-vapid-key-after-get-token" /* USE_VAPID_KEY_AFTER_GET_TOKEN */] = 'The usePublicVapidKey() method may only be called once and must be ' +
            'called before calling getToken() to ensure your VAPID key is used.',
        _a$4);
    var ERROR_FACTORY$2 = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_SW_PATH = '/firebase-messaging-sw.js';
    var DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';
    var DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';
    var ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';
    // Key of FCM Payload in Notification's data field.
    var FCM_MSG = 'FCM_MSG';
    var TAG = 'FirebaseMessaging: ';
    // Set to '1' if Analytics is enabled for the campaign
    var CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';
    var CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';
    var CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';
    var CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';
    // Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push
    // warning might be shown by the browser if the callback fails to completes by the end of onPush.
    // Experiments were ran to determine the majority onBackground message clock time. This brief
    // blocking time would allow majority of the onBackgroundMessage callback to finish.
    var BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;
    // Preparation time for client to initialize and set up the message handler.
    var FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
     * in compliance with the License. You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under the License
     * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
     * or implied. See the License for the specific language governing permissions and limitations under
     * the License.
     */
    var MessageType;
    (function (MessageType) {
        MessageType["PUSH_RECEIVED"] = "push-received";
        MessageType["NOTIFICATION_CLICKED"] = "notification-clicked";
    })(MessageType || (MessageType = {}));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function arrayToBase64(array) {
        var uint8Array = new Uint8Array(array);
        var base64String = btoa(String.fromCharCode.apply(String, __spread(uint8Array)));
        return base64String.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
    }
    function base64ToArray(base64String) {
        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);
        var base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');
        var rawData = atob(base64);
        var outputArray = new Uint8Array(rawData.length);
        for (var i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var OLD_DB_NAME = 'fcm_token_details_db';
    /**
     * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade
     * callback is called for all versions of the old DB.
     */
    var OLD_DB_VERSION = 5;
    var OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';
    function migrateOldDatabase(senderId) {
        return __awaiter(this, void 0, void 0, function () {
            var databases, dbNames, tokenDetails, db;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!('databases' in indexedDB)) return [3 /*break*/, 2];
                        return [4 /*yield*/, indexedDB.databases()];
                    case 1:
                        databases = _a.sent();
                        dbNames = databases.map(function (db) { return db.name; });
                        if (!dbNames.includes(OLD_DB_NAME)) {
                            // old DB didn't exist, no need to open.
                            return [2 /*return*/, null];
                        }
                        _a.label = 2;
                    case 2:
                        tokenDetails = null;
                        return [4 /*yield*/, idb.openDb(OLD_DB_NAME, OLD_DB_VERSION, function (db) { return __awaiter(_this, void 0, void 0, function () {
                                var objectStore, value, oldDetails, oldDetails, oldDetails;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            if (db.oldVersion < 2) {
                                                // Database too old, skip migration.
                                                return [2 /*return*/];
                                            }
                                            if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
                                                // Database did not exist. Nothing to do.
                                                return [2 /*return*/];
                                            }
                                            objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);
                                            return [4 /*yield*/, objectStore.index('fcmSenderId').get(senderId)];
                                        case 1:
                                            value = _b.sent();
                                            return [4 /*yield*/, objectStore.clear()];
                                        case 2:
                                            _b.sent();
                                            if (!value) {
                                                // No entry in the database, nothing to migrate.
                                                return [2 /*return*/];
                                            }
                                            if (db.oldVersion === 2) {
                                                oldDetails = value;
                                                if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {
                                                    return [2 /*return*/];
                                                }
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),
                                                    subscriptionOptions: {
                                                        auth: oldDetails.auth,
                                                        p256dh: oldDetails.p256dh,
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: typeof oldDetails.vapidKey === 'string'
                                                            ? oldDetails.vapidKey
                                                            : arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            }
                                            else if (db.oldVersion === 3) {
                                                oldDetails = value;
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: oldDetails.createTime,
                                                    subscriptionOptions: {
                                                        auth: arrayToBase64(oldDetails.auth),
                                                        p256dh: arrayToBase64(oldDetails.p256dh),
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            }
                                            else if (db.oldVersion === 4) {
                                                oldDetails = value;
                                                tokenDetails = {
                                                    token: oldDetails.fcmToken,
                                                    createTime: oldDetails.createTime,
                                                    subscriptionOptions: {
                                                        auth: arrayToBase64(oldDetails.auth),
                                                        p256dh: arrayToBase64(oldDetails.p256dh),
                                                        endpoint: oldDetails.endpoint,
                                                        swScope: oldDetails.swScope,
                                                        vapidKey: arrayToBase64(oldDetails.vapidKey)
                                                    }
                                                };
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 3:
                        db = _a.sent();
                        db.close();
                        // Delete all old databases.
                        return [4 /*yield*/, idb.deleteDb(OLD_DB_NAME)];
                    case 4:
                        // Delete all old databases.
                        _a.sent();
                        return [4 /*yield*/, idb.deleteDb('fcm_vapid_details_db')];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, idb.deleteDb('undefined')];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, checkTokenDetails(tokenDetails) ? tokenDetails : null];
                }
            });
        });
    }
    function checkTokenDetails(tokenDetails) {
        if (!tokenDetails || !tokenDetails.subscriptionOptions) {
            return false;
        }
        var subscriptionOptions = tokenDetails.subscriptionOptions;
        return (typeof tokenDetails.createTime === 'number' &&
            tokenDetails.createTime > 0 &&
            typeof tokenDetails.token === 'string' &&
            tokenDetails.token.length > 0 &&
            typeof subscriptionOptions.auth === 'string' &&
            subscriptionOptions.auth.length > 0 &&
            typeof subscriptionOptions.p256dh === 'string' &&
            subscriptionOptions.p256dh.length > 0 &&
            typeof subscriptionOptions.endpoint === 'string' &&
            subscriptionOptions.endpoint.length > 0 &&
            typeof subscriptionOptions.swScope === 'string' &&
            subscriptionOptions.swScope.length > 0 &&
            typeof subscriptionOptions.vapidKey === 'string' &&
            subscriptionOptions.vapidKey.length > 0);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Exported for tests.
    var DATABASE_NAME$1 = 'firebase-messaging-database';
    var DATABASE_VERSION$1 = 1;
    var OBJECT_STORE_NAME$1 = 'firebase-messaging-store';
    var dbPromise$1 = null;
    function getDbPromise$1() {
        if (!dbPromise$1) {
            dbPromise$1 = idb.openDb(DATABASE_NAME$1, DATABASE_VERSION$1, function (upgradeDb) {
                // We don't use 'break' in this switch statement, the fall-through behavior is what we want,
                // because if there are multiple versions between the old version and the current version, we
                // want ALL the migrations that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (upgradeDb.oldVersion) {
                    case 0:
                        upgradeDb.createObjectStore(OBJECT_STORE_NAME$1);
                }
            });
        }
        return dbPromise$1;
    }
    /** Gets record(s) from the objectStore that match the given key. */
    function dbGet(firebaseDependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tokenDetails, oldTokenDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$3(firebaseDependencies);
                        return [4 /*yield*/, getDbPromise$1()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db
                                .transaction(OBJECT_STORE_NAME$1)
                                .objectStore(OBJECT_STORE_NAME$1)
                                .get(key)];
                    case 2:
                        tokenDetails = _a.sent();
                        if (!tokenDetails) return [3 /*break*/, 3];
                        return [2 /*return*/, tokenDetails];
                    case 3: return [4 /*yield*/, migrateOldDatabase(firebaseDependencies.appConfig.senderId)];
                    case 4:
                        oldTokenDetails = _a.sent();
                        if (!oldTokenDetails) return [3 /*break*/, 6];
                        return [4 /*yield*/, dbSet(firebaseDependencies, oldTokenDetails)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, oldTokenDetails];
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    /** Assigns or overwrites the record for the given key with the given value. */
    function dbSet(firebaseDependencies, tokenDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$3(firebaseDependencies);
                        return [4 /*yield*/, getDbPromise$1()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME$1, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME$1).put(tokenDetails, key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, tokenDetails];
                }
            });
        });
    }
    /** Removes record(s) from the objectStore that match the given key. */
    function dbRemove(firebaseDependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey$3(firebaseDependencies);
                        return [4 /*yield*/, getDbPromise$1()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME$1, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME$1).delete(key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    function getKey$3(_a) {
        var appConfig = _a.appConfig;
        return appConfig.appId;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function requestGetToken(firebaseDependencies, subscriptionOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, body, subscribeOptions, responseData, response, err_1, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getHeaders$1(firebaseDependencies)];
                    case 1:
                        headers = _a.sent();
                        body = getBody(subscriptionOptions);
                        subscribeOptions = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _a.sent();
                        throw ERROR_FACTORY$2.create("token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */, {
                            errorInfo: err_1
                        });
                    case 6:
                        if (responseData.error) {
                            message = responseData.error.message;
                            throw ERROR_FACTORY$2.create("token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */, {
                                errorInfo: message
                            });
                        }
                        if (!responseData.token) {
                            throw ERROR_FACTORY$2.create("token-subscribe-no-token" /* TOKEN_SUBSCRIBE_NO_TOKEN */);
                        }
                        return [2 /*return*/, responseData.token];
                }
            });
        });
    }
    function requestUpdateToken(firebaseDependencies, tokenDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, body, updateOptions, responseData, response, err_2, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getHeaders$1(firebaseDependencies)];
                    case 1:
                        headers = _a.sent();
                        body = getBody(tokenDetails.subscriptionOptions);
                        updateOptions = {
                            method: 'PATCH',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + tokenDetails.token, updateOptions)];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_2 = _a.sent();
                        throw ERROR_FACTORY$2.create("token-update-failed" /* TOKEN_UPDATE_FAILED */, {
                            errorInfo: err_2
                        });
                    case 6:
                        if (responseData.error) {
                            message = responseData.error.message;
                            throw ERROR_FACTORY$2.create("token-update-failed" /* TOKEN_UPDATE_FAILED */, {
                                errorInfo: message
                            });
                        }
                        if (!responseData.token) {
                            throw ERROR_FACTORY$2.create("token-update-no-token" /* TOKEN_UPDATE_NO_TOKEN */);
                        }
                        return [2 /*return*/, responseData.token];
                }
            });
        });
    }
    function requestDeleteToken(firebaseDependencies, token) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, unsubscribeOptions, response, responseData, message, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getHeaders$1(firebaseDependencies)];
                    case 1:
                        headers = _a.sent();
                        unsubscribeOptions = {
                            method: 'DELETE',
                            headers: headers
                        };
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + token, unsubscribeOptions)];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 4:
                        responseData = _a.sent();
                        if (responseData.error) {
                            message = responseData.error.message;
                            throw ERROR_FACTORY$2.create("token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */, {
                                errorInfo: message
                            });
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        err_3 = _a.sent();
                        throw ERROR_FACTORY$2.create("token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */, {
                            errorInfo: err_3
                        });
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    function getEndpoint(_a) {
        var projectId = _a.projectId;
        return ENDPOINT + "/projects/" + projectId + "/registrations";
    }
    function getHeaders$1(_a) {
        var appConfig = _a.appConfig, installations = _a.installations;
        return __awaiter(this, void 0, void 0, function () {
            var authToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, installations.getToken()];
                    case 1:
                        authToken = _b.sent();
                        return [2 /*return*/, new Headers({
                                'Content-Type': 'application/json',
                                Accept: 'application/json',
                                'x-goog-api-key': appConfig.apiKey,
                                'x-goog-firebase-installations-auth': "FIS " + authToken
                            })];
                }
            });
        });
    }
    function getBody(_a) {
        var p256dh = _a.p256dh, auth = _a.auth, endpoint = _a.endpoint, vapidKey = _a.vapidKey;
        var body = {
            web: {
                endpoint: endpoint,
                auth: auth,
                p256dh: p256dh
            }
        };
        if (vapidKey !== DEFAULT_VAPID_KEY) {
            body.web.applicationPubKey = vapidKey;
        }
        return body;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** UpdateRegistration will be called once every week. */
    var TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days
    function getToken$1(firebaseDependencies, swRegistration, vapidKey) {
        return __awaiter(this, void 0, void 0, function () {
            var pushSubscription, tokenDetails, subscriptionOptions, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (Notification.permission !== 'granted') {
                            throw ERROR_FACTORY$2.create("permission-blocked" /* PERMISSION_BLOCKED */);
                        }
                        return [4 /*yield*/, getPushSubscription(swRegistration, vapidKey)];
                    case 1:
                        pushSubscription = _a.sent();
                        return [4 /*yield*/, dbGet(firebaseDependencies)];
                    case 2:
                        tokenDetails = _a.sent();
                        subscriptionOptions = {
                            vapidKey: vapidKey,
                            swScope: swRegistration.scope,
                            endpoint: pushSubscription.endpoint,
                            auth: arrayToBase64(pushSubscription.getKey('auth')),
                            p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))
                        };
                        if (!!tokenDetails) return [3 /*break*/, 3];
                        // No token, get a new one.
                        return [2 /*return*/, getNewToken(firebaseDependencies, subscriptionOptions)];
                    case 3:
                        if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) return [3 /*break*/, 8];
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, requestDeleteToken(firebaseDependencies, tokenDetails.token)];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        // Suppress errors because of #2364
                        console.warn(e_1);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/, getNewToken(firebaseDependencies, subscriptionOptions)];
                    case 8:
                        if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {
                            // Weekly token refresh
                            return [2 /*return*/, updateToken({
                                    token: tokenDetails.token,
                                    createTime: Date.now(),
                                    subscriptionOptions: subscriptionOptions
                                }, firebaseDependencies, swRegistration)];
                        }
                        else {
                            // Valid token, nothing to do.
                            return [2 /*return*/, tokenDetails.token];
                        }
                    case 9: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters
     * the push subscription if it exists.
     */
    function deleteToken(firebaseDependencies, swRegistration) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenDetails, pushSubscription;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, dbGet(firebaseDependencies)];
                    case 1:
                        tokenDetails = _a.sent();
                        if (!tokenDetails) return [3 /*break*/, 4];
                        return [4 /*yield*/, requestDeleteToken(firebaseDependencies, tokenDetails.token)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, dbRemove(firebaseDependencies)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, swRegistration.pushManager.getSubscription()];
                    case 5:
                        pushSubscription = _a.sent();
                        if (pushSubscription) {
                            return [2 /*return*/, pushSubscription.unsubscribe()];
                        }
                        // If there's no SW, consider it a success.
                        return [2 /*return*/, true];
                }
            });
        });
    }
    function updateToken(tokenDetails, firebaseDependencies, swRegistration) {
        return __awaiter(this, void 0, void 0, function () {
            var updatedToken, updatedTokenDetails, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 5]);
                        return [4 /*yield*/, requestUpdateToken(firebaseDependencies, tokenDetails)];
                    case 1:
                        updatedToken = _a.sent();
                        updatedTokenDetails = __assign(__assign({}, tokenDetails), { token: updatedToken, createTime: Date.now() });
                        return [4 /*yield*/, dbSet(firebaseDependencies, updatedTokenDetails)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, updatedToken];
                    case 3:
                        e_2 = _a.sent();
                        return [4 /*yield*/, deleteToken(firebaseDependencies, swRegistration)];
                    case 4:
                        _a.sent();
                        throw e_2;
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function getNewToken(firebaseDependencies, subscriptionOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var token, tokenDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, requestGetToken(firebaseDependencies, subscriptionOptions)];
                    case 1:
                        token = _a.sent();
                        tokenDetails = {
                            token: token,
                            createTime: Date.now(),
                            subscriptionOptions: subscriptionOptions
                        };
                        return [4 /*yield*/, dbSet(firebaseDependencies, tokenDetails)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, tokenDetails.token];
                }
            });
        });
    }
    /**
     * Gets a PushSubscription for the current user.
     */
    function getPushSubscription(swRegistration, vapidKey) {
        return __awaiter(this, void 0, void 0, function () {
            var subscription;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, swRegistration.pushManager.getSubscription()];
                    case 1:
                        subscription = _a.sent();
                        if (subscription) {
                            return [2 /*return*/, subscription];
                        }
                        return [2 /*return*/, swRegistration.pushManager.subscribe({
                                userVisibleOnly: true,
                                // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key
                                // submitted to pushManager#subscribe must be of type Uint8Array.
                                applicationServerKey: base64ToArray(vapidKey)
                            })];
                }
            });
        });
    }
    /**
     * Checks if the saved tokenDetails object matches the configuration provided.
     */
    function isTokenValid(dbOptions, currentOptions) {
        var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;
        var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;
        var isAuthEqual = currentOptions.auth === dbOptions.auth;
        var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
        return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function externalizePayload(internalPayload) {
        var payload = {
            from: internalPayload.from,
            // eslint-disable-next-line camelcase
            collapseKey: internalPayload.collapse_key
        };
        propagateNotificationPayload(payload, internalPayload);
        propagateDataPayload(payload, internalPayload);
        propagateFcmOptions(payload, internalPayload);
        return payload;
    }
    function propagateNotificationPayload(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.notification) {
            return;
        }
        payload.notification = {};
        var title = messagePayloadInternal.notification.title;
        if (!!title) {
            payload.notification.title = title;
        }
        var body = messagePayloadInternal.notification.body;
        if (!!body) {
            payload.notification.body = body;
        }
        var image = messagePayloadInternal.notification.image;
        if (!!image) {
            payload.notification.image = image;
        }
    }
    function propagateDataPayload(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.data) {
            return;
        }
        payload.data = messagePayloadInternal.data;
    }
    function propagateFcmOptions(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.fcmOptions) {
            return;
        }
        payload.fcmOptions = {};
        var link = messagePayloadInternal.fcmOptions.link;
        if (!!link) {
            payload.fcmOptions.link = link;
        }
        // eslint-disable-next-line camelcase
        var analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;
        if (!!analyticsLabel) {
            payload.fcmOptions.analyticsLabel = analyticsLabel;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isConsoleMessage(data) {
        // This message has a campaign ID, meaning it was sent using the Firebase Console.
        return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a promise that resolves after given time passes. */
    function sleep$1(ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SwController = /** @class */ (function () {
        function SwController(firebaseDependencies) {
            var _this = this;
            this.firebaseDependencies = firebaseDependencies;
            // A boolean flag to determine wether an app is using onBackgroundMessage or
            // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if
            // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the
            // MessagePayload if a NotificationPayload is included.
            this.isOnBackgroundMessageUsed = null;
            this.vapidKey = null;
            this.bgMessageHandler = null;
            self.addEventListener('push', function (e) {
                e.waitUntil(_this.onPush(e));
            });
            self.addEventListener('pushsubscriptionchange', function (e) {
                e.waitUntil(_this.onSubChange(e));
            });
            self.addEventListener('notificationclick', function (e) {
                e.waitUntil(_this.onNotificationClick(e));
            });
        }
        Object.defineProperty(SwController.prototype, "app", {
            get: function () {
                return this.firebaseDependencies.app;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):
         * Unsubscribe instead.
         *
         * Calling setBackgroundMessageHandler will opt in to some specific behaviors.
         *
         * 1.) If a notification doesn't need to be shown due to a window already being visible, then push
         * messages will be sent to the page. 2.) If a notification needs to be shown, and the message
         * contains no notification data this method will be called and the promise it returns will be
         * passed to event.waitUntil. If you do not set this callback then all push messages will let and
         * the developer can handle them in a their own 'push' event callback
         *
         * @param callback The callback to be called when a push message is received and a notification
         * must be shown. The callback will be given the data from the push message.
         */
        SwController.prototype.setBackgroundMessageHandler = function (callback) {
            this.isOnBackgroundMessageUsed = false;
            if (!callback || typeof callback !== 'function') {
                throw ERROR_FACTORY$2.create("invalid-bg-handler" /* INVALID_BG_HANDLER */);
            }
            this.bgMessageHandler = callback;
        };
        SwController.prototype.onBackgroundMessage = function (nextOrObserver) {
            var _this = this;
            this.isOnBackgroundMessageUsed = true;
            this.bgMessageHandler = nextOrObserver;
            return function () {
                _this.bgMessageHandler = null;
            };
        };
        // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of
        // trouble.
        SwController.prototype.getToken = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var tokenDetails;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!this.vapidKey) return [3 /*break*/, 2];
                            return [4 /*yield*/, dbGet(this.firebaseDependencies)];
                        case 1:
                            tokenDetails = _c.sent();
                            this.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;
                            _c.label = 2;
                        case 2: return [2 /*return*/, getToken$1(this.firebaseDependencies, self.registration, this.vapidKey)];
                    }
                });
            });
        };
        // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of
        // trouble.
        SwController.prototype.deleteToken = function () {
            return deleteToken(this.firebaseDependencies, self.registration);
        };
        SwController.prototype.requestPermission = function () {
            throw ERROR_FACTORY$2.create("only-available-in-window" /* AVAILABLE_IN_WINDOW */);
        };
        // TODO: Remove this together with getToken from SW Controller.
        SwController.prototype.usePublicVapidKey = function (vapidKey) {
            if (this.vapidKey !== null) {
                throw ERROR_FACTORY$2.create("use-vapid-key-after-get-token" /* USE_VAPID_KEY_AFTER_GET_TOKEN */);
            }
            if (typeof vapidKey !== 'string' || vapidKey.length === 0) {
                throw ERROR_FACTORY$2.create("invalid-vapid-key" /* INVALID_VAPID_KEY */);
            }
            this.vapidKey = vapidKey;
        };
        SwController.prototype.useServiceWorker = function () {
            throw ERROR_FACTORY$2.create("only-available-in-window" /* AVAILABLE_IN_WINDOW */);
        };
        SwController.prototype.onMessage = function () {
            throw ERROR_FACTORY$2.create("only-available-in-window" /* AVAILABLE_IN_WINDOW */);
        };
        SwController.prototype.onTokenRefresh = function () {
            throw ERROR_FACTORY$2.create("only-available-in-window" /* AVAILABLE_IN_WINDOW */);
        };
        /**
         * A handler for push events that shows notifications based on the content of the payload.
         *
         * The payload must be a JSON-encoded Object with a `notification` key. The value of the
         * `notification` property will be used as the NotificationOptions object passed to
         * showNotification. Additionally, the `title` property of the notification object will be used as
         * the title.
         *
         * If there is no notification data in the payload then no notification will be shown.
         */
        SwController.prototype.onPush = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var internalPayload, clientList, isNotificationShown, payload;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            internalPayload = getMessagePayloadInternal(event);
                            if (!internalPayload) {
                                console.debug(TAG +
                                    'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.');
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, getClientList()];
                        case 1:
                            clientList = _a.sent();
                            if (hasVisibleClients(clientList)) {
                                return [2 /*return*/, sendMessagePayloadInternalToWindows(clientList, internalPayload)];
                            }
                            isNotificationShown = false;
                            if (!!!internalPayload.notification) return [3 /*break*/, 3];
                            return [4 /*yield*/, showNotification(wrapInternalPayload(internalPayload))];
                        case 2:
                            _a.sent();
                            isNotificationShown = true;
                            _a.label = 3;
                        case 3:
                            // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for
                            // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.
                            if (isNotificationShown === true &&
                                this.isOnBackgroundMessageUsed === false) {
                                return [2 /*return*/];
                            }
                            if (!!this.bgMessageHandler) {
                                payload = externalizePayload(internalPayload);
                                if (typeof this.bgMessageHandler === 'function') {
                                    this.bgMessageHandler(payload);
                                }
                                else {
                                    this.bgMessageHandler.next(payload);
                                }
                            }
                            // wait briefly to allow onBackgroundMessage to complete
                            return [4 /*yield*/, sleep$1(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS)];
                        case 4:
                            // wait briefly to allow onBackgroundMessage to complete
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SwController.prototype.onSubChange = function (event) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var newSubscription, tokenDetails;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            newSubscription = event.newSubscription;
                            if (!!newSubscription) return [3 /*break*/, 2];
                            // Subscription revoked, delete token
                            return [4 /*yield*/, deleteToken(this.firebaseDependencies, self.registration)];
                        case 1:
                            // Subscription revoked, delete token
                            _c.sent();
                            return [2 /*return*/];
                        case 2: return [4 /*yield*/, dbGet(this.firebaseDependencies)];
                        case 3:
                            tokenDetails = _c.sent();
                            return [4 /*yield*/, deleteToken(this.firebaseDependencies, self.registration)];
                        case 4:
                            _c.sent();
                            return [4 /*yield*/, getToken$1(this.firebaseDependencies, self.registration, (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY)];
                        case 5:
                            _c.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SwController.prototype.onNotificationClick = function (event) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var internalPayload, link, url, originUrl, client;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            internalPayload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];
                            if (!internalPayload) {
                                return [2 /*return*/];
                            }
                            else if (event.action) {
                                // User clicked on an action button. This will allow developers to act on action button clicks
                                // by using a custom onNotificationClick listener that they define.
                                return [2 /*return*/];
                            }
                            // Prevent other listeners from receiving the event
                            event.stopImmediatePropagation();
                            event.notification.close();
                            link = getLink(internalPayload);
                            if (!link) {
                                return [2 /*return*/];
                            }
                            url = new URL(link, self.location.href);
                            originUrl = new URL(self.location.origin);
                            if (url.host !== originUrl.host) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, getWindowClient(url)];
                        case 1:
                            client = _c.sent();
                            if (!!client) return [3 /*break*/, 4];
                            return [4 /*yield*/, self.clients.openWindow(link)];
                        case 2:
                            client = _c.sent();
                            // Wait three seconds for the client to initialize and set up the message handler so that it
                            // can receive the message.
                            return [4 /*yield*/, sleep$1(FOREGROUND_HANDLE_PREPARATION_TIME_MS)];
                        case 3:
                            // Wait three seconds for the client to initialize and set up the message handler so that it
                            // can receive the message.
                            _c.sent();
                            return [3 /*break*/, 6];
                        case 4: return [4 /*yield*/, client.focus()];
                        case 5:
                            client = _c.sent();
                            _c.label = 6;
                        case 6:
                            if (!client) {
                                // Window Client will not be returned if it's for a third party origin.
                                return [2 /*return*/];
                            }
                            internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;
                            internalPayload.isFirebaseMessaging = true;
                            return [2 /*return*/, client.postMessage(internalPayload)];
                    }
                });
            });
        };
        return SwController;
    }());
    function wrapInternalPayload(internalPayload) {
        var _a;
        var wrappedInternalPayload = __assign({}, internalPayload.notification);
        // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM
        // notification vs a notification from somewhere else (i.e. normal web push or developer generated
        // notification).
        wrappedInternalPayload.data = (_a = {},
            _a[FCM_MSG] = internalPayload,
            _a);
        return wrappedInternalPayload;
    }
    function getMessagePayloadInternal(_a) {
        var data = _a.data;
        if (!data) {
            return null;
        }
        try {
            return data.json();
        }
        catch (err) {
            // Not JSON so not an FCM message.
            return null;
        }
    }
    /**
     * @param url The URL to look for when focusing a client.
     * @return Returns an existing window client or a newly opened WindowClient.
     */
    function getWindowClient(url) {
        return __awaiter(this, void 0, void 0, function () {
            var clientList, clientList_1, clientList_1_1, client, clientUrl;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getClientList()];
                    case 1:
                        clientList = _b.sent();
                        try {
                            for (clientList_1 = __values(clientList), clientList_1_1 = clientList_1.next(); !clientList_1_1.done; clientList_1_1 = clientList_1.next()) {
                                client = clientList_1_1.value;
                                clientUrl = new URL(client.url, self.location.href);
                                if (url.host === clientUrl.host) {
                                    return [2 /*return*/, client];
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (clientList_1_1 && !clientList_1_1.done && (_a = clientList_1.return)) _a.call(clientList_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    }
    /**
     * @returns If there is currently a visible WindowClient, this method will resolve to true,
     * otherwise false.
     */
    function hasVisibleClients(clientList) {
        return clientList.some(function (client) {
            return client.visibilityState === 'visible' &&
                // Ignore chrome-extension clients as that matches the background pages of extensions, which
                // are always considered visible for some reason.
                !client.url.startsWith('chrome-extension://');
        });
    }
    function sendMessagePayloadInternalToWindows(clientList, internalPayload) {
        var e_2, _a;
        internalPayload.isFirebaseMessaging = true;
        internalPayload.messageType = MessageType.PUSH_RECEIVED;
        try {
            for (var clientList_2 = __values(clientList), clientList_2_1 = clientList_2.next(); !clientList_2_1.done; clientList_2_1 = clientList_2.next()) {
                var client = clientList_2_1.value;
                client.postMessage(internalPayload);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (clientList_2_1 && !clientList_2_1.done && (_a = clientList_2.return)) _a.call(clientList_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    function getClientList() {
        return self.clients.matchAll({
            type: 'window',
            includeUncontrolled: true
            // TS doesn't know that "type: 'window'" means it'll return WindowClient[]
        });
    }
    function showNotification(notificationPayloadInternal) {
        var _a;
        // Note: Firefox does not support the maxActions property.
        // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions
        var actions = notificationPayloadInternal.actions;
        var maxActions = Notification.maxActions;
        if (actions && maxActions && actions.length > maxActions) {
            console.warn("This browser only supports " + maxActions + " actions. The remaining actions will not be displayed.");
        }
        return self.registration.showNotification((_a = 
        /* title= */ notificationPayloadInternal.title) !== null && _a !== void 0 ? _a : '', notificationPayloadInternal);
    }
    function getLink(payload) {
        var _a, _b, _c;
        // eslint-disable-next-line camelcase
        var link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;
        if (link) {
            return link;
        }
        if (isConsoleMessage(payload.data)) {
            // Notification created in the Firebase Console. Redirect to origin.
            return self.location.origin;
        }
        else {
            return null;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var WindowController = /** @class */ (function () {
        function WindowController(firebaseDependencies) {
            var _this = this;
            this.firebaseDependencies = firebaseDependencies;
            this.vapidKey = null;
            this.onMessageCallback = null;
            navigator.serviceWorker.addEventListener('message', function (e) {
                return _this.messageEventListener(e);
            });
        }
        Object.defineProperty(WindowController.prototype, "app", {
            get: function () {
                return this.firebaseDependencies.app;
            },
            enumerable: false,
            configurable: true
        });
        WindowController.prototype.messageEventListener = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var internalPayload, dataPayload;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            internalPayload = event.data;
                            if (!internalPayload.isFirebaseMessaging) {
                                return [2 /*return*/];
                            }
                            // onMessageCallback is either a function or observer/subscriber.
                            // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to
                            // the legacy payload where some fields are in snake cases.
                            if (this.onMessageCallback &&
                                internalPayload.messageType === MessageType.PUSH_RECEIVED) {
                                if (typeof this.onMessageCallback === 'function') {
                                    this.onMessageCallback(stripInternalFields(Object.assign({}, internalPayload)));
                                }
                                else {
                                    this.onMessageCallback.next(Object.assign({}, internalPayload));
                                }
                            }
                            dataPayload = internalPayload.data;
                            if (!(isConsoleMessage(dataPayload) &&
                                dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1')) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.logEvent(internalPayload.messageType, dataPayload)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        WindowController.prototype.getVapidKey = function () {
            return this.vapidKey;
        };
        WindowController.prototype.getSwReg = function () {
            return this.swRegistration;
        };
        WindowController.prototype.getToken = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(Notification.permission === 'default')) return [3 /*break*/, 2];
                            return [4 /*yield*/, Notification.requestPermission()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            if (Notification.permission !== 'granted') {
                                throw ERROR_FACTORY$2.create("permission-blocked" /* PERMISSION_BLOCKED */);
                            }
                            return [4 /*yield*/, this.updateVapidKey(options === null || options === void 0 ? void 0 : options.vapidKey)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.updateSwReg(options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration)];
                        case 4:
                            _a.sent();
                            return [2 /*return*/, getToken$1(this.firebaseDependencies, this.swRegistration, this.vapidKey)];
                    }
                });
            });
        };
        WindowController.prototype.updateVapidKey = function (vapidKey) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!!vapidKey) {
                        this.vapidKey = vapidKey;
                    }
                    else if (!this.vapidKey) {
                        this.vapidKey = DEFAULT_VAPID_KEY;
                    }
                    return [2 /*return*/];
                });
            });
        };
        WindowController.prototype.updateSwReg = function (swRegistration) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(!swRegistration && !this.swRegistration)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.registerDefaultSw()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            if (!swRegistration && !!this.swRegistration) {
                                return [2 /*return*/];
                            }
                            if (!(swRegistration instanceof ServiceWorkerRegistration)) {
                                throw ERROR_FACTORY$2.create("invalid-sw-registration" /* INVALID_SW_REGISTRATION */);
                            }
                            this.swRegistration = swRegistration;
                            return [2 /*return*/];
                    }
                });
            });
        };
        WindowController.prototype.registerDefaultSw = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, e_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, , 3]);
                            _a = this;
                            return [4 /*yield*/, navigator.serviceWorker.register(DEFAULT_SW_PATH, {
                                    scope: DEFAULT_SW_SCOPE
                                })];
                        case 1:
                            _a.swRegistration = _b.sent();
                            // The timing when browser updates sw when sw has an update is unreliable by my experiment. It
                            // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw
                            // is stuck with the old version. For example,
                            // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates
                            // sw if there was an update.
                            this.swRegistration.update().catch(function () {
                                /* it is non blocking and we don't care if it failed */
                            });
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _b.sent();
                            throw ERROR_FACTORY$2.create("failed-service-worker-registration" /* FAILED_DEFAULT_REGISTRATION */, {
                                browserErrorMessage: e_1.message
                            });
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        WindowController.prototype.deleteToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.swRegistration) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.registerDefaultSw()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/, deleteToken(this.firebaseDependencies, this.swRegistration)];
                    }
                });
            });
        };
        /**
         * Request permission if it is not currently granted.
         *
         * @return Resolves if the permission was granted, rejects otherwise.
         *
         * @deprecated Use Notification.requestPermission() instead.
         * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission
         */
        WindowController.prototype.requestPermission = function () {
            return __awaiter(this, void 0, void 0, function () {
                var permissionResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (Notification.permission === 'granted') {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, Notification.requestPermission()];
                        case 1:
                            permissionResult = _a.sent();
                            if (permissionResult === 'granted') {
                                return [2 /*return*/];
                            }
                            else if (permissionResult === 'denied') {
                                throw ERROR_FACTORY$2.create("permission-blocked" /* PERMISSION_BLOCKED */);
                            }
                            else {
                                throw ERROR_FACTORY$2.create("permission-default" /* PERMISSION_DEFAULT */);
                            }
                    }
                });
            });
        };
        /**
         * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:
         * ServiceWorkerRegistration;}): Promise<string> instead.
         */
        WindowController.prototype.usePublicVapidKey = function (vapidKey) {
            if (this.vapidKey !== null) {
                throw ERROR_FACTORY$2.create("use-vapid-key-after-get-token" /* USE_VAPID_KEY_AFTER_GET_TOKEN */);
            }
            if (typeof vapidKey !== 'string' || vapidKey.length === 0) {
                throw ERROR_FACTORY$2.create("invalid-vapid-key" /* INVALID_VAPID_KEY */);
            }
            this.vapidKey = vapidKey;
        };
        /**
         * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:
         * ServiceWorkerRegistration;}): Promise<string> instead.
         */
        WindowController.prototype.useServiceWorker = function (swRegistration) {
            if (!(swRegistration instanceof ServiceWorkerRegistration)) {
                throw ERROR_FACTORY$2.create("invalid-sw-registration" /* INVALID_SW_REGISTRATION */);
            }
            if (this.swRegistration) {
                throw ERROR_FACTORY$2.create("use-sw-after-get-token" /* USE_SW_AFTER_GET_TOKEN */);
            }
            this.swRegistration = swRegistration;
        };
        /**
         * @param nextOrObserver An observer object or a function triggered on message.
         *
         * @return The unsubscribe function for the observer.
         */
        WindowController.prototype.onMessage = function (nextOrObserver) {
            var _this = this;
            this.onMessageCallback = nextOrObserver;
            return function () {
                _this.onMessageCallback = null;
            };
        };
        WindowController.prototype.setBackgroundMessageHandler = function () {
            throw ERROR_FACTORY$2.create("only-available-in-sw" /* AVAILABLE_IN_SW */);
        };
        WindowController.prototype.onBackgroundMessage = function () {
            throw ERROR_FACTORY$2.create("only-available-in-sw" /* AVAILABLE_IN_SW */);
        };
        /**
         * @deprecated No-op. It was initially designed with token rotation requests from server in mind.
         * However, the plan to implement such feature was abandoned.
         */
        WindowController.prototype.onTokenRefresh = function () {
            return function () { };
        };
        WindowController.prototype.logEvent = function (messageType, data) {
            return __awaiter(this, void 0, void 0, function () {
                var eventType, analytics;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            eventType = getEventType(messageType);
                            return [4 /*yield*/, this.firebaseDependencies.analyticsProvider.get()];
                        case 1:
                            analytics = _a.sent();
                            analytics.logEvent(eventType, {
                                /* eslint-disable camelcase */
                                message_id: data[CONSOLE_CAMPAIGN_ID],
                                message_name: data[CONSOLE_CAMPAIGN_NAME],
                                message_time: data[CONSOLE_CAMPAIGN_TIME],
                                message_device_time: Math.floor(Date.now() / 1000)
                                /* eslint-enable camelcase */
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        return WindowController;
    }());
    function getEventType(messageType) {
        switch (messageType) {
            case MessageType.NOTIFICATION_CLICKED:
                return 'notification_open';
            case MessageType.PUSH_RECEIVED:
                return 'notification_foreground';
            default:
                throw new Error();
        }
    }
    function stripInternalFields(internalPayload) {
        delete internalPayload.messageType;
        delete internalPayload.isFirebaseMessaging;
        return internalPayload;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function extractAppConfig$1(app) {
        var e_1, _a;
        if (!app || !app.options) {
            throw getMissingValueError$1('App Configuration Object');
        }
        if (!app.name) {
            throw getMissingValueError$1('App Name');
        }
        // Required app config keys
        var configKeys = [
            'projectId',
            'apiKey',
            'appId',
            'messagingSenderId'
        ];
        var options = app.options;
        try {
            for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                var keyName = configKeys_1_1.value;
                if (!options[keyName]) {
                    throw getMissingValueError$1(keyName);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            appName: app.name,
            projectId: options.projectId,
            apiKey: options.apiKey,
            appId: options.appId,
            senderId: options.messagingSenderId
        };
    }
    function getMissingValueError$1(valueName) {
        return ERROR_FACTORY$2.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
            valueName: valueName
        });
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MESSAGING_NAME = 'messaging';
    function factoryMethod(container) {
        // Dependencies.
        var app = container.getProvider('app').getImmediate();
        var appConfig = extractAppConfig$1(app);
        var installations = container.getProvider('installations').getImmediate();
        var analyticsProvider = container.getProvider('analytics-internal');
        var firebaseDependencies = {
            app: app,
            appConfig: appConfig,
            installations: installations,
            analyticsProvider: analyticsProvider
        };
        if (!isSupported()) {
            throw ERROR_FACTORY$2.create("unsupported-browser" /* UNSUPPORTED_BROWSER */);
        }
        if (self && 'ServiceWorkerGlobalScope' in self) {
            // Running in ServiceWorker context
            return new SwController(firebaseDependencies);
        }
        else {
            // Assume we are in the window context.
            return new WindowController(firebaseDependencies);
        }
    }
    var NAMESPACE_EXPORTS = {
        isSupported: isSupported
    };
    firebase$1.INTERNAL.registerComponent(new Component(MESSAGING_NAME, factoryMethod, "PUBLIC" /* PUBLIC */).setServiceProps(NAMESPACE_EXPORTS));
    function isSupported() {
        if (self && 'ServiceWorkerGlobalScope' in self) {
            // Running in ServiceWorker context
            return isSWControllerSupported();
        }
        else {
            // Assume we are in the window context.
            return isWindowControllerSupported();
        }
    }
    /**
     * Checks to see if the required APIs exist.
     */
    function isWindowControllerSupported() {
        return ('indexedDB' in window &&
            indexedDB !== null &&
            navigator.cookieEnabled &&
            'serviceWorker' in navigator &&
            'PushManager' in window &&
            'Notification' in window &&
            'fetch' in window &&
            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&
            PushSubscription.prototype.hasOwnProperty('getKey'));
    }
    /**
     * Checks to see if the required APIs exist within SW Context.
     */
    function isSWControllerSupported() {
        return ('indexedDB' in self &&
            indexedDB !== null &&
            'PushManager' in self &&
            'Notification' in self &&
            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&
            PushSubscription.prototype.hasOwnProperty('getKey'));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Constants used in the Firebase Storage library.
     */
    /**
     * Domain name for firebase storage.
     */
    var DEFAULT_HOST = 'firebasestorage.googleapis.com';
    /**
     * The key in Firebase config json for the storage bucket.
     */
    var CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
    /**
     * 2 minutes
     *
     * The timeout for all operations except upload.
     */
    var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
    /**
     * 10 minutes
     *
     * The timeout for upload.
     */
    var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;

    var FirebaseStorageError = /** @class */ (function (_super) {
        __extends$1d(FirebaseStorageError, _super);
        function FirebaseStorageError(code, message) {
            var _this = _super.call(this, prependCode(code), "Firebase Storage: " + message + " (" + prependCode(code) + ")") || this;
            _this.customData = { serverResponse: null };
            // Without this, `instanceof FirebaseStorageError`, in tests for example,
            // returns false.
            Object.setPrototypeOf(_this, FirebaseStorageError.prototype);
            return _this;
        }
        FirebaseStorageError.prototype.codeEquals = function (code) {
            return prependCode(code) === this.code;
        };
        Object.defineProperty(FirebaseStorageError.prototype, "message", {
            get: function () {
                if (this.customData.serverResponse) {
                    return this.message + "\n" + this.customData.serverResponse;
                }
                else {
                    return this.message;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
            get: function () {
                return this.customData.serverResponse;
            },
            set: function (serverResponse) {
                this.customData.serverResponse = serverResponse;
            },
            enumerable: false,
            configurable: true
        });
        return FirebaseStorageError;
    }(FirebaseError));
    var Code = {
        // Shared between all platforms
        UNKNOWN: 'unknown',
        OBJECT_NOT_FOUND: 'object-not-found',
        BUCKET_NOT_FOUND: 'bucket-not-found',
        PROJECT_NOT_FOUND: 'project-not-found',
        QUOTA_EXCEEDED: 'quota-exceeded',
        UNAUTHENTICATED: 'unauthenticated',
        UNAUTHORIZED: 'unauthorized',
        RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
        INVALID_CHECKSUM: 'invalid-checksum',
        CANCELED: 'canceled',
        // JS specific
        INVALID_EVENT_NAME: 'invalid-event-name',
        INVALID_URL: 'invalid-url',
        INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
        NO_DEFAULT_BUCKET: 'no-default-bucket',
        CANNOT_SLICE_BLOB: 'cannot-slice-blob',
        SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
        NO_DOWNLOAD_URL: 'no-download-url',
        INVALID_ARGUMENT: 'invalid-argument',
        INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
        APP_DELETED: 'app-deleted',
        INVALID_ROOT_OPERATION: 'invalid-root-operation',
        INVALID_FORMAT: 'invalid-format',
        INTERNAL_ERROR: 'internal-error',
        UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'
    };
    function prependCode(code) {
        return 'storage/' + code;
    }
    function unknown() {
        var message = 'An unknown error occurred, please check the error payload for ' +
            'server response.';
        return new FirebaseStorageError(Code.UNKNOWN, message);
    }
    function objectNotFound(path) {
        return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
    }
    function quotaExceeded(bucket) {
        return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" +
            bucket +
            "' exceeded, please view quota on " +
            'https://firebase.google.com/pricing/.');
    }
    function unauthenticated() {
        var message = 'User is not authenticated, please authenticate using Firebase ' +
            'Authentication and try again.';
        return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
    }
    function unauthorized(path) {
        return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
    }
    function retryLimitExceeded() {
        return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
    }
    function canceled() {
        return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');
    }
    function invalidUrl(url) {
        return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
    }
    function invalidDefaultBucket(bucket) {
        return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
    }
    function noDefaultBucket() {
        return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' +
            "found. Did you set the '" +
            CONFIG_STORAGE_BUCKET_KEY +
            "' property when initializing the app?");
    }
    function cannotSliceBlob() {
        return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
    }
    function serverFileWrongSize() {
        return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
    }
    function noDownloadURL() {
        return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
    }
    function invalidArgument(message) {
        return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);
    }
    function appDeleted() {
        return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');
    }
    /**
     * @param name - The name of the operation that was invalid.
     */
    function invalidRootOperation(name) {
        return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" +
            name +
            "' cannot be performed on a root reference, create a non-root " +
            "reference using child, such as .child('file.png').");
    }
    /**
     * @param format - The format that was not valid.
     * @param message - A message describing the format violation.
     */
    function invalidFormat(format, message) {
        return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
    }
    /**
     * @param message - A message describing the internal error.
     */
    function internalError(message) {
        throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StringFormat = {
        RAW: 'raw',
        BASE64: 'base64',
        BASE64URL: 'base64url',
        DATA_URL: 'data_url'
    };
    var StringData = /** @class */ (function () {
        function StringData(data, contentType) {
            this.data = data;
            this.contentType = contentType || null;
        }
        return StringData;
    }());
    function dataFromString(format, stringData) {
        switch (format) {
            case StringFormat.RAW:
                return new StringData(utf8Bytes_(stringData));
            case StringFormat.BASE64:
            case StringFormat.BASE64URL:
                return new StringData(base64Bytes_(format, stringData));
            case StringFormat.DATA_URL:
                return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
            // do nothing
        }
        // assert(false);
        throw unknown();
    }
    function utf8Bytes_(value) {
        var b = [];
        for (var i = 0; i < value.length; i++) {
            var c = value.charCodeAt(i);
            if (c <= 127) {
                b.push(c);
            }
            else {
                if (c <= 2047) {
                    b.push(192 | (c >> 6), 128 | (c & 63));
                }
                else {
                    if ((c & 64512) === 55296) {
                        // The start of a surrogate pair.
                        var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
                        if (!valid) {
                            // The second surrogate wasn't there.
                            b.push(239, 191, 189);
                        }
                        else {
                            var hi = c;
                            var lo = value.charCodeAt(++i);
                            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                            b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
                        }
                    }
                    else {
                        if ((c & 64512) === 56320) {
                            // Invalid low surrogate.
                            b.push(239, 191, 189);
                        }
                        else {
                            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
                        }
                    }
                }
            }
        }
        return new Uint8Array(b);
    }
    function percentEncodedBytes_(value) {
        var decoded;
        try {
            decoded = decodeURIComponent(value);
        }
        catch (e) {
            throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
        }
        return utf8Bytes_(decoded);
    }
    function base64Bytes_(format, value) {
        switch (format) {
            case StringFormat.BASE64: {
                var hasMinus = value.indexOf('-') !== -1;
                var hasUnder = value.indexOf('_') !== -1;
                if (hasMinus || hasUnder) {
                    var invalidChar = hasMinus ? '-' : '_';
                    throw invalidFormat(format, "Invalid character '" +
                        invalidChar +
                        "' found: is it base64url encoded?");
                }
                break;
            }
            case StringFormat.BASE64URL: {
                var hasPlus = value.indexOf('+') !== -1;
                var hasSlash = value.indexOf('/') !== -1;
                if (hasPlus || hasSlash) {
                    var invalidChar = hasPlus ? '+' : '/';
                    throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
                }
                value = value.replace(/-/g, '+').replace(/_/g, '/');
                break;
            }
            // do nothing
        }
        var bytes;
        try {
            bytes = atob(value);
        }
        catch (e) {
            throw invalidFormat(format, 'Invalid character found');
        }
        var array = new Uint8Array(bytes.length);
        for (var i = 0; i < bytes.length; i++) {
            array[i] = bytes.charCodeAt(i);
        }
        return array;
    }
    var DataURLParts = /** @class */ (function () {
        function DataURLParts(dataURL) {
            this.base64 = false;
            this.contentType = null;
            var matches = dataURL.match(/^data:([^,]+)?,/);
            if (matches === null) {
                throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
            }
            var middle = matches[1] || null;
            if (middle != null) {
                this.base64 = endsWith(middle, ';base64');
                this.contentType = this.base64
                    ? middle.substring(0, middle.length - ';base64'.length)
                    : middle;
            }
            this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
        }
        return DataURLParts;
    }());
    function dataURLBytes_(dataUrl) {
        var parts = new DataURLParts(dataUrl);
        if (parts.base64) {
            return base64Bytes_(StringFormat.BASE64, parts.rest);
        }
        else {
            return percentEncodedBytes_(parts.rest);
        }
    }
    function dataURLContentType_(dataUrl) {
        var parts = new DataURLParts(dataUrl);
        return parts.contentType;
    }
    function endsWith(s, end) {
        var longEnough = s.length >= end.length;
        if (!longEnough) {
            return false;
        }
        return s.substring(s.length - end.length) === end;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskEvent = {
        /** Triggered whenever the task changes or progress is updated. */
        STATE_CHANGED: 'state_changed'
    };
    var InternalTaskState = {
        RUNNING: 'running',
        PAUSING: 'pausing',
        PAUSED: 'paused',
        SUCCESS: 'success',
        CANCELING: 'canceling',
        CANCELED: 'canceled',
        ERROR: 'error'
    };
    var TaskState = {
        /** The task is currently transferring data. */
        RUNNING: 'running',
        /** The task was paused by the user. */
        PAUSED: 'paused',
        /** The task completed successfully. */
        SUCCESS: 'success',
        /** The task was canceled. */
        CANCELED: 'canceled',
        /** The task failed with an error. */
        ERROR: 'error'
    };
    function taskStateFromInternalTaskState(state) {
        switch (state) {
            case InternalTaskState.RUNNING:
            case InternalTaskState.PAUSING:
            case InternalTaskState.CANCELING:
                return TaskState.RUNNING;
            case InternalTaskState.PAUSED:
                return TaskState.PAUSED;
            case InternalTaskState.SUCCESS:
                return TaskState.SUCCESS;
            case InternalTaskState.CANCELED:
                return TaskState.CANCELED;
            case InternalTaskState.ERROR:
                return TaskState.ERROR;
            default:
                // TODO(andysoto): assert(false);
                return TaskState.ERROR;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ErrorCode$1;
    (function (ErrorCode) {
        ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
        ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
        ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
    })(ErrorCode$1 || (ErrorCode$1 = {}));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
     * doesn't work in React Native on Android.
     */
    var NetworkXhrIo = /** @class */ (function () {
        function NetworkXhrIo() {
            var _this = this;
            this.sent_ = false;
            this.xhr_ = new XMLHttpRequest();
            this.errorCode_ = ErrorCode$1.NO_ERROR;
            this.sendPromise_ = new Promise(function (resolve) {
                _this.xhr_.addEventListener('abort', function () {
                    _this.errorCode_ = ErrorCode$1.ABORT;
                    resolve(_this);
                });
                _this.xhr_.addEventListener('error', function () {
                    _this.errorCode_ = ErrorCode$1.NETWORK_ERROR;
                    resolve(_this);
                });
                _this.xhr_.addEventListener('load', function () {
                    resolve(_this);
                });
            });
        }
        /**
         * @override
         */
        NetworkXhrIo.prototype.send = function (url, method, body, headers) {
            if (this.sent_) {
                throw internalError('cannot .send() more than once');
            }
            this.sent_ = true;
            this.xhr_.open(method, url, true);
            if (headers !== undefined) {
                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        this.xhr_.setRequestHeader(key, headers[key].toString());
                    }
                }
            }
            if (body !== undefined) {
                this.xhr_.send(body);
            }
            else {
                this.xhr_.send();
            }
            return this.sendPromise_;
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.getErrorCode = function () {
            if (!this.sent_) {
                throw internalError('cannot .getErrorCode() before sending');
            }
            return this.errorCode_;
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.getStatus = function () {
            if (!this.sent_) {
                throw internalError('cannot .getStatus() before sending');
            }
            try {
                return this.xhr_.status;
            }
            catch (e) {
                return -1;
            }
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.getResponseText = function () {
            if (!this.sent_) {
                throw internalError('cannot .getResponseText() before sending');
            }
            return this.xhr_.responseText;
        };
        /**
         * Aborts the request.
         * @override
         */
        NetworkXhrIo.prototype.abort = function () {
            this.xhr_.abort();
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.getResponseHeader = function (header) {
            return this.xhr_.getResponseHeader(header);
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
            if (this.xhr_.upload != null) {
                this.xhr_.upload.addEventListener('progress', listener);
            }
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
            if (this.xhr_.upload != null) {
                this.xhr_.upload.removeEventListener('progress', listener);
            }
        };
        return NetworkXhrIo;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Factory-like class for creating XhrIo instances.
     */
    var XhrIoPool = /** @class */ (function () {
        function XhrIoPool() {
        }
        XhrIoPool.prototype.createXhrIo = function () {
            return new NetworkXhrIo();
        };
        return XhrIoPool;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isJustDef(p) {
        return p !== void 0;
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    function isFunction(p) {
        return typeof p === 'function';
    }
    function isNonArrayObject(p) {
        return typeof p === 'object' && !Array.isArray(p);
    }
    function isString(p) {
        return typeof p === 'string' || p instanceof String;
    }
    function isNativeBlob(p) {
        return isNativeBlobDefined() && p instanceof Blob;
    }
    function isNativeBlobDefined() {
        return typeof Blob !== 'undefined';
    }
    function validateNumber(argument, minValue, maxValue, value) {
        if (value < minValue) {
            throw new FirebaseStorageError(Code.INVALID_ARGUMENT, "Invalid value for '" + argument + "'. Expected " + minValue + " or greater.");
        }
        if (value > maxValue) {
            throw new FirebaseStorageError(Code.INVALID_ARGUMENT, "Invalid value for '" + argument + "'. Expected " + maxValue + " or less.");
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getBlobBuilder() {
        if (typeof BlobBuilder !== 'undefined') {
            return BlobBuilder;
        }
        else if (typeof WebKitBlobBuilder !== 'undefined') {
            return WebKitBlobBuilder;
        }
        else {
            return undefined;
        }
    }
    /**
     * Concatenates one or more values together and converts them to a Blob.
     *
     * @param args The values that will make up the resulting blob.
     * @return The blob.
     */
    function getBlob() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var BlobBuilder = getBlobBuilder();
        if (BlobBuilder !== undefined) {
            var bb = new BlobBuilder();
            for (var i = 0; i < args.length; i++) {
                bb.append(args[i]);
            }
            return bb.getBlob();
        }
        else {
            if (isNativeBlobDefined()) {
                return new Blob(args);
            }
            else {
                throw new FirebaseStorageError(Code.UNSUPPORTED_ENVIRONMENT, "This browser doesn't seem to support creating Blobs");
            }
        }
    }
    /**
     * Slices the blob. The returned blob contains data from the start byte
     * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
     *
     * @param blob The blob to be sliced.
     * @param start Index of the starting byte.
     * @param end Index of the ending byte.
     * @return The blob slice or null if not supported.
     */
    function sliceBlob(blob, start, end) {
        if (blob.webkitSlice) {
            return blob.webkitSlice(start, end);
        }
        else if (blob.mozSlice) {
            return blob.mozSlice(start, end);
        }
        else if (blob.slice) {
            return blob.slice(start, end);
        }
        return null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param opt_elideCopy - If true, doesn't copy mutable input data
     *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
     *     modified after this blob's construction.
     */
    var FbsBlob = /** @class */ (function () {
        function FbsBlob(data, elideCopy) {
            var size = 0;
            var blobType = '';
            if (isNativeBlob(data)) {
                this.data_ = data;
                size = data.size;
                blobType = data.type;
            }
            else if (data instanceof ArrayBuffer) {
                if (elideCopy) {
                    this.data_ = new Uint8Array(data);
                }
                else {
                    this.data_ = new Uint8Array(data.byteLength);
                    this.data_.set(new Uint8Array(data));
                }
                size = this.data_.length;
            }
            else if (data instanceof Uint8Array) {
                if (elideCopy) {
                    this.data_ = data;
                }
                else {
                    this.data_ = new Uint8Array(data.length);
                    this.data_.set(data);
                }
                size = data.length;
            }
            this.size_ = size;
            this.type_ = blobType;
        }
        FbsBlob.prototype.size = function () {
            return this.size_;
        };
        FbsBlob.prototype.type = function () {
            return this.type_;
        };
        FbsBlob.prototype.slice = function (startByte, endByte) {
            if (isNativeBlob(this.data_)) {
                var realBlob = this.data_;
                var sliced = sliceBlob(realBlob, startByte, endByte);
                if (sliced === null) {
                    return null;
                }
                return new FbsBlob(sliced);
            }
            else {
                var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
                return new FbsBlob(slice, true);
            }
        };
        FbsBlob.getBlob = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (isNativeBlobDefined()) {
                var blobby = args.map(function (val) {
                    if (val instanceof FbsBlob) {
                        return val.data_;
                    }
                    else {
                        return val;
                    }
                });
                return new FbsBlob(getBlob.apply(null, blobby));
            }
            else {
                var uint8Arrays = args.map(function (val) {
                    if (isString(val)) {
                        return dataFromString(StringFormat.RAW, val).data;
                    }
                    else {
                        // Blobs don't exist, so this has to be a Uint8Array.
                        return val.data_;
                    }
                });
                var finalLength_1 = 0;
                uint8Arrays.forEach(function (array) {
                    finalLength_1 += array.byteLength;
                });
                var merged_1 = new Uint8Array(finalLength_1);
                var index_1 = 0;
                uint8Arrays.forEach(function (array) {
                    for (var i = 0; i < array.length; i++) {
                        merged_1[index_1++] = array[i];
                    }
                });
                return new FbsBlob(merged_1, true);
            }
        };
        FbsBlob.prototype.uploadData = function () {
            return this.data_;
        };
        return FbsBlob;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Location = /** @class */ (function () {
        function Location(bucket, path) {
            this.bucket = bucket;
            this.path_ = path;
        }
        Object.defineProperty(Location.prototype, "path", {
            get: function () {
                return this.path_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Location.prototype, "isRoot", {
            get: function () {
                return this.path.length === 0;
            },
            enumerable: false,
            configurable: true
        });
        Location.prototype.fullServerUrl = function () {
            var encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
        };
        Location.prototype.bucketOnlyServerUrl = function () {
            var encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o';
        };
        Location.makeFromBucketSpec = function (bucketString) {
            var bucketLocation;
            try {
                bucketLocation = Location.makeFromUrl(bucketString);
            }
            catch (e) {
                // Not valid URL, use as-is. This lets you put bare bucket names in
                // config.
                return new Location(bucketString, '');
            }
            if (bucketLocation.path === '') {
                return bucketLocation;
            }
            else {
                throw invalidDefaultBucket(bucketString);
            }
        };
        Location.makeFromUrl = function (url) {
            var location = null;
            var bucketDomain = '([A-Za-z0-9.\\-_]+)';
            function gsModify(loc) {
                if (loc.path.charAt(loc.path.length - 1) === '/') {
                    loc.path_ = loc.path_.slice(0, -1);
                }
            }
            var gsPath = '(/(.*))?$';
            var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
            var gsIndices = { bucket: 1, path: 3 };
            function httpModify(loc) {
                loc.path_ = decodeURIComponent(loc.path);
            }
            var version = 'v[A-Za-z0-9_]+';
            var firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\.');
            var firebaseStoragePath = '(/([^?#]*).*)?$';
            var firebaseStorageRegExp = new RegExp("^https?://" + firebaseStorageHost + "/" + version + "/b/" + bucketDomain + "/o" + firebaseStoragePath, 'i');
            var firebaseStorageIndices = { bucket: 1, path: 3 };
            var cloudStorageHost = '(?:storage.googleapis.com|storage.cloud.google.com)';
            var cloudStoragePath = '([^?#]*)';
            var cloudStorageRegExp = new RegExp("^https?://" + cloudStorageHost + "/" + bucketDomain + "/" + cloudStoragePath, 'i');
            var cloudStorageIndices = { bucket: 1, path: 2 };
            var groups = [
                { regex: gsRegex, indices: gsIndices, postModify: gsModify },
                {
                    regex: firebaseStorageRegExp,
                    indices: firebaseStorageIndices,
                    postModify: httpModify
                },
                {
                    regex: cloudStorageRegExp,
                    indices: cloudStorageIndices,
                    postModify: httpModify
                }
            ];
            for (var i = 0; i < groups.length; i++) {
                var group = groups[i];
                var captures = group.regex.exec(url);
                if (captures) {
                    var bucketValue = captures[group.indices.bucket];
                    var pathValue = captures[group.indices.path];
                    if (!pathValue) {
                        pathValue = '';
                    }
                    location = new Location(bucketValue, pathValue);
                    group.postModify(location);
                    break;
                }
            }
            if (location == null) {
                throw invalidUrl(url);
            }
            return location;
        };
        return Location;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns the Object resulting from parsing the given JSON, or null if the
     * given string does not represent a JSON object.
     */
    function jsonObjectOrNull(s) {
        var obj;
        try {
            obj = JSON.parse(s);
        }
        catch (e) {
            return null;
        }
        if (isNonArrayObject(obj)) {
            return obj;
        }
        else {
            return null;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Contains helper methods for manipulating paths.
     */
    /**
     * @return Null if the path is already at the root.
     */
    function parent(path) {
        if (path.length === 0) {
            return null;
        }
        var index = path.lastIndexOf('/');
        if (index === -1) {
            return '';
        }
        var newPath = path.slice(0, index);
        return newPath;
    }
    function child(path, childPath) {
        var canonicalChildPath = childPath
            .split('/')
            .filter(function (component) { return component.length > 0; })
            .join('/');
        if (path.length === 0) {
            return canonicalChildPath;
        }
        else {
            return path + '/' + canonicalChildPath;
        }
    }
    /**
     * Returns the last component of a path.
     * '/foo/bar' -> 'bar'
     * '/foo/bar/baz/' -> 'baz/'
     * '/a' -> 'a'
     */
    function lastComponent(path) {
        var index = path.lastIndexOf('/', path.length - 2);
        if (index === -1) {
            return path;
        }
        else {
            return path.slice(index + 1);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function makeUrl(urlPart) {
        return "https://" + DEFAULT_HOST + "/v0" + urlPart;
    }
    function makeQueryString(params) {
        var encode = encodeURIComponent;
        var queryPart = '?';
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var nextPart = encode(key) + '=' + encode(params[key]);
                queryPart = queryPart + nextPart + '&';
            }
        }
        // Chop off the extra '&' or '?' on the end
        queryPart = queryPart.slice(0, -1);
        return queryPart;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function noXform_(metadata, value) {
        return value;
    }
    var Mapping = /** @class */ (function () {
        function Mapping(server, local, writable, xform) {
            this.server = server;
            this.local = local || server;
            this.writable = !!writable;
            this.xform = xform || noXform_;
        }
        return Mapping;
    }());
    var mappings_ = null;
    function xformPath(fullPath) {
        if (!isString(fullPath) || fullPath.length < 2) {
            return fullPath;
        }
        else {
            return lastComponent(fullPath);
        }
    }
    function getMappings() {
        if (mappings_) {
            return mappings_;
        }
        var mappings = [];
        mappings.push(new Mapping('bucket'));
        mappings.push(new Mapping('generation'));
        mappings.push(new Mapping('metageneration'));
        mappings.push(new Mapping('name', 'fullPath', true));
        function mappingsXformPath(_metadata, fullPath) {
            return xformPath(fullPath);
        }
        var nameMapping = new Mapping('name');
        nameMapping.xform = mappingsXformPath;
        mappings.push(nameMapping);
        /**
         * Coerces the second param to a number, if it is defined.
         */
        function xformSize(_metadata, size) {
            if (size !== undefined) {
                return Number(size);
            }
            else {
                return size;
            }
        }
        var sizeMapping = new Mapping('size');
        sizeMapping.xform = xformSize;
        mappings.push(sizeMapping);
        mappings.push(new Mapping('timeCreated'));
        mappings.push(new Mapping('updated'));
        mappings.push(new Mapping('md5Hash', null, true));
        mappings.push(new Mapping('cacheControl', null, true));
        mappings.push(new Mapping('contentDisposition', null, true));
        mappings.push(new Mapping('contentEncoding', null, true));
        mappings.push(new Mapping('contentLanguage', null, true));
        mappings.push(new Mapping('contentType', null, true));
        mappings.push(new Mapping('metadata', 'customMetadata', true));
        mappings_ = mappings;
        return mappings_;
    }
    function addRef(metadata, service) {
        function generateRef() {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var loc = new Location(bucket, path);
            return service.makeStorageReference(loc);
        }
        Object.defineProperty(metadata, 'ref', { get: generateRef });
    }
    function fromResource(service, resource, mappings) {
        var metadata = {};
        metadata['type'] = 'file';
        var len = mappings.length;
        for (var i = 0; i < len; i++) {
            var mapping = mappings[i];
            metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
        }
        addRef(metadata, service);
        return metadata;
    }
    function fromResourceString(service, resourceString, mappings) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        var resource = obj;
        return fromResource(service, resource, mappings);
    }
    function downloadUrlFromResourceString(metadata, resourceString) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        if (!isString(obj['downloadTokens'])) {
            // This can happen if objects are uploaded through GCS and retrieved
            // through list, so we don't want to throw an Error.
            return null;
        }
        var tokens = obj['downloadTokens'];
        if (tokens.length === 0) {
            return null;
        }
        var encode = encodeURIComponent;
        var tokensList = tokens.split(',');
        var urls = tokensList.map(function (token) {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
            var base = makeUrl(urlPart);
            var queryString = makeQueryString({
                alt: 'media',
                token: token
            });
            return base + queryString;
        });
        return urls[0];
    }
    function toResourceString(metadata, mappings) {
        var resource = {};
        var len = mappings.length;
        for (var i = 0; i < len; i++) {
            var mapping = mappings[i];
            if (mapping.writable) {
                resource[mapping.server] = metadata[mapping.local];
            }
        }
        return JSON.stringify(resource);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PREFIXES_KEY = 'prefixes';
    var ITEMS_KEY = 'items';
    function fromBackendResponse(service, bucket, resource) {
        var listResult = {
            prefixes: [],
            items: [],
            nextPageToken: resource['nextPageToken']
        };
        if (resource[PREFIXES_KEY]) {
            for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {
                var path = _a[_i];
                var pathWithoutTrailingSlash = path.replace(/\/$/, '');
                var reference = service.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
                listResult.prefixes.push(reference);
            }
        }
        if (resource[ITEMS_KEY]) {
            for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {
                var item = _c[_b];
                var reference = service.makeStorageReference(new Location(bucket, item['name']));
                listResult.items.push(reference);
            }
        }
        return listResult;
    }
    function fromResponseString(service, bucket, resourceString) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        var resource = obj;
        return fromBackendResponse(service, bucket, resource);
    }

    var RequestInfo = /** @class */ (function () {
        function RequestInfo(url, method, 
        /**
         * Returns the value with which to resolve the request's promise. Only called
         * if the request is successful. Throw from this function to reject the
         * returned Request's promise with the thrown error.
         * Note: The XhrIo passed to this function may be reused after this callback
         * returns. Do not keep a reference to it in any way.
         */
        handler, timeout) {
            this.url = url;
            this.method = method;
            this.handler = handler;
            this.timeout = timeout;
            this.urlParams = {};
            this.headers = {};
            this.body = null;
            this.errorHandler = null;
            /**
             * Called with the current number of bytes uploaded and total size (-1 if not
             * computable) of the request body (i.e. used to report upload progress).
             */
            this.progressCallback = null;
            this.successCodes = [200];
            this.additionalRetryCodes = [];
        }
        return RequestInfo;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws the UNKNOWN FirebaseStorageError if cndn is false.
     */
    function handlerCheck(cndn) {
        if (!cndn) {
            throw unknown();
        }
    }
    function metadataHandler(service, mappings) {
        function handler(xhr, text) {
            var metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return metadata;
        }
        return handler;
    }
    function listHandler(service, bucket) {
        function handler(xhr, text) {
            var listResult = fromResponseString(service, bucket, text);
            handlerCheck(listResult !== null);
            return listResult;
        }
        return handler;
    }
    function downloadUrlHandler(service, mappings) {
        function handler(xhr, text) {
            var metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return downloadUrlFromResourceString(metadata, text);
        }
        return handler;
    }
    function sharedErrorHandler(location) {
        function errorHandler(xhr, err) {
            var newErr;
            if (xhr.getStatus() === 401) {
                newErr = unauthenticated();
            }
            else {
                if (xhr.getStatus() === 402) {
                    newErr = quotaExceeded(location.bucket);
                }
                else {
                    if (xhr.getStatus() === 403) {
                        newErr = unauthorized(location.path);
                    }
                    else {
                        newErr = err;
                    }
                }
            }
            newErr.serverResponse = err.serverResponse;
            return newErr;
        }
        return errorHandler;
    }
    function objectErrorHandler(location) {
        var shared = sharedErrorHandler(location);
        function errorHandler(xhr, err) {
            var newErr = shared(xhr, err);
            if (xhr.getStatus() === 404) {
                newErr = objectNotFound(location.path);
            }
            newErr.serverResponse = err.serverResponse;
            return newErr;
        }
        return errorHandler;
    }
    function getMetadata(service, location, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function list(service, location, delimiter, pageToken, maxResults) {
        var urlParams = {};
        if (location.isRoot) {
            urlParams['prefix'] = '';
        }
        else {
            urlParams['prefix'] = location.path + '/';
        }
        if (delimiter && delimiter.length > 0) {
            urlParams['delimiter'] = delimiter;
        }
        if (pageToken) {
            urlParams['pageToken'] = pageToken;
        }
        if (maxResults) {
            urlParams['maxResults'] = maxResults;
        }
        var urlPart = location.bucketOnlyServerUrl();
        var url = makeUrl(urlPart);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    function getDownloadUrl(service, location, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function updateMetadata(service, location, metadata, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart);
        var method = 'PATCH';
        var body = toResourceString(metadata, mappings);
        var headers = { 'Content-Type': 'application/json; charset=utf-8' };
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function deleteObject(service, location) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart);
        var method = 'DELETE';
        var timeout = service.maxOperationRetryTime;
        function handler(_xhr, _text) { }
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.successCodes = [200, 204];
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function determineContentType_(metadata, blob) {
        return ((metadata && metadata['contentType']) ||
            (blob && blob.type()) ||
            'application/octet-stream');
    }
    function metadataForUpload_(location, blob, metadata) {
        var metadataClone = Object.assign({}, metadata);
        metadataClone['fullPath'] = location.path;
        metadataClone['size'] = blob.size();
        if (!metadataClone['contentType']) {
            metadataClone['contentType'] = determineContentType_(null, blob);
        }
        return metadataClone;
    }
    function multipartUpload(service, location, mappings, blob, metadata) {
        var urlPart = location.bucketOnlyServerUrl();
        var headers = {
            'X-Goog-Upload-Protocol': 'multipart'
        };
        function genBoundary() {
            var str = '';
            for (var i = 0; i < 2; i++) {
                str = str + Math.random().toString().slice(2);
            }
            return str;
        }
        var boundary = genBoundary();
        headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
        var metadata_ = metadataForUpload_(location, blob, metadata);
        var metadataString = toResourceString(metadata_, mappings);
        var preBlobPart = '--' +
            boundary +
            '\r\n' +
            'Content-Type: application/json; charset=utf-8\r\n\r\n' +
            metadataString +
            '\r\n--' +
            boundary +
            '\r\n' +
            'Content-Type: ' +
            metadata_['contentType'] +
            '\r\n\r\n';
        var postBlobPart = '\r\n--' + boundary + '--';
        var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
        if (body === null) {
            throw cannotSliceBlob();
        }
        var urlParams = { name: metadata_['fullPath'] };
        var url = makeUrl(urlPart);
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * @param current The number of bytes that have been uploaded so far.
     * @param total The total number of bytes in the upload.
     * @param opt_finalized True if the server has finished the upload.
     * @param opt_metadata The upload metadata, should
     *     only be passed if opt_finalized is true.
     */
    var ResumableUploadStatus = /** @class */ (function () {
        function ResumableUploadStatus(current, total, finalized, metadata) {
            this.current = current;
            this.total = total;
            this.finalized = !!finalized;
            this.metadata = metadata || null;
        }
        return ResumableUploadStatus;
    }());
    function checkResumeHeader_(xhr, allowed) {
        var status = null;
        try {
            status = xhr.getResponseHeader('X-Goog-Upload-Status');
        }
        catch (e) {
            handlerCheck(false);
        }
        var allowedStatus = allowed || ['active'];
        handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
        return status;
    }
    function createResumableUpload(service, location, mappings, blob, metadata) {
        var urlPart = location.bucketOnlyServerUrl();
        var metadataForUpload = metadataForUpload_(location, blob, metadata);
        var urlParams = { name: metadataForUpload['fullPath'] };
        var url = makeUrl(urlPart);
        var method = 'POST';
        var headers = {
            'X-Goog-Upload-Protocol': 'resumable',
            'X-Goog-Upload-Command': 'start',
            'X-Goog-Upload-Header-Content-Length': blob.size(),
            'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
            'Content-Type': 'application/json; charset=utf-8'
        };
        var body = toResourceString(metadataForUpload, mappings);
        var timeout = service.maxUploadRetryTime;
        function handler(xhr) {
            checkResumeHeader_(xhr);
            var url;
            try {
                url = xhr.getResponseHeader('X-Goog-Upload-URL');
            }
            catch (e) {
                handlerCheck(false);
            }
            handlerCheck(isString(url));
            return url;
        }
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * @param url From a call to fbs.requests.createResumableUpload.
     */
    function getResumableUploadStatus(service, location, url, blob) {
        var headers = { 'X-Goog-Upload-Command': 'query' };
        function handler(xhr) {
            var status = checkResumeHeader_(xhr, ['active', 'final']);
            var sizeString = null;
            try {
                sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
            }
            catch (e) {
                handlerCheck(false);
            }
            if (!sizeString) {
                // null or empty string
                handlerCheck(false);
            }
            var size = Number(sizeString);
            handlerCheck(!isNaN(size));
            return new ResumableUploadStatus(size, blob.size(), status === 'final');
        }
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * Any uploads via the resumable upload API must transfer a number of bytes
     * that is a multiple of this number.
     */
    var resumableUploadChunkSize = 256 * 1024;
    /**
     * @param url From a call to fbs.requests.createResumableUpload.
     * @param chunkSize Number of bytes to upload.
     * @param status The previous status.
     *     If not passed or null, we start from the beginning.
     * @throws fbs.Error If the upload is already complete, the passed in status
     *     has a final size inconsistent with the blob, or the blob cannot be sliced
     *     for upload.
     */
    function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
        // TODO(andysoto): standardize on internal asserts
        // assert(!(opt_status && opt_status.finalized));
        var status_ = new ResumableUploadStatus(0, 0);
        if (status) {
            status_.current = status.current;
            status_.total = status.total;
        }
        else {
            status_.current = 0;
            status_.total = blob.size();
        }
        if (blob.size() !== status_.total) {
            throw serverFileWrongSize();
        }
        var bytesLeft = status_.total - status_.current;
        var bytesToUpload = bytesLeft;
        if (chunkSize > 0) {
            bytesToUpload = Math.min(bytesToUpload, chunkSize);
        }
        var startByte = status_.current;
        var endByte = startByte + bytesToUpload;
        var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
        var headers = {
            'X-Goog-Upload-Command': uploadCommand,
            'X-Goog-Upload-Offset': status_.current
        };
        var body = blob.slice(startByte, endByte);
        if (body === null) {
            throw cannotSliceBlob();
        }
        function handler(xhr, text) {
            // TODO(andysoto): Verify the MD5 of each uploaded range:
            // the 'x-range-md5' header comes back with status code 308 responses.
            // We'll only be able to bail out though, because you can't re-upload a
            // range that you previously uploaded.
            var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
            var newCurrent = status_.current + bytesToUpload;
            var size = blob.size();
            var metadata;
            if (uploadStatus === 'final') {
                metadata = metadataHandler(service, mappings)(xhr, text);
            }
            else {
                metadata = null;
            }
            return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
        }
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.progressCallback = progressCallback || null;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Observer = /** @class */ (function () {
        function Observer(nextOrObserver, error, complete) {
            var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;
            if (asFunctions) {
                this.next = nextOrObserver;
                this.error = error;
                this.complete = complete;
            }
            else {
                var observer = nextOrObserver;
                this.next = observer.next;
                this.error = observer.error;
                this.complete = observer.complete;
            }
        }
        return Observer;
    }());

    var UploadTaskSnapshot = /** @class */ (function () {
        function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
            this.bytesTransferred = bytesTransferred;
            this.totalBytes = totalBytes;
            this.state = state;
            this.metadata = metadata;
            this.task = task;
            this.ref = ref;
        }
        return UploadTaskSnapshot;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a function that invokes f with its arguments asynchronously as a
     * microtask, i.e. as soon as possible after the current script returns back
     * into browser code.
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    function async(f) {
        return function () {
            var argsToForward = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                argsToForward[_i] = arguments[_i];
            }
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve().then(function () { return f.apply(void 0, argsToForward); });
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a blob being uploaded. Can be used to pause/resume/cancel the
     * upload and manage callbacks for various events.
     */
    var UploadTask = /** @class */ (function () {
        /**
         * @param ref - The firebaseStorage.Reference object this task came
         *     from, untyped to avoid cyclic dependencies.
         * @param blob - The blob to upload.
         */
        function UploadTask(ref, blob, metadata) {
            var _this = this;
            if (metadata === void 0) { metadata = null; }
            /**
             * @internal
             */
            this._transferred = 0;
            this._needToFetchStatus = false;
            this._needToFetchMetadata = false;
            this._observers = [];
            this._error = undefined;
            this._uploadUrl = undefined;
            this._request = undefined;
            this._chunkMultiplier = 1;
            this._resolve = undefined;
            this._reject = undefined;
            this._ref = ref;
            this._blob = blob;
            this._metadata = metadata;
            this._mappings = getMappings();
            this._resumable = this._shouldDoResumable(this._blob);
            this._state = InternalTaskState.RUNNING;
            this._errorHandler = function (error) {
                _this._request = undefined;
                _this._chunkMultiplier = 1;
                if (error.codeEquals(Code.CANCELED)) {
                    _this._needToFetchStatus = true;
                    _this.completeTransitions_();
                }
                else {
                    _this._error = error;
                    _this._transition(InternalTaskState.ERROR);
                }
            };
            this._metadataErrorHandler = function (error) {
                _this._request = undefined;
                if (error.codeEquals(Code.CANCELED)) {
                    _this.completeTransitions_();
                }
                else {
                    _this._error = error;
                    _this._transition(InternalTaskState.ERROR);
                }
            };
            this._promise = new Promise(function (resolve, reject) {
                _this._resolve = resolve;
                _this._reject = reject;
                _this._start();
            });
            // Prevent uncaught rejections on the internal promise from bubbling out
            // to the top level with a dummy handler.
            this._promise.then(null, function () { });
        }
        UploadTask.prototype._makeProgressCallback = function () {
            var _this = this;
            var sizeBefore = this._transferred;
            return function (loaded) { return _this._updateProgress(sizeBefore + loaded); };
        };
        UploadTask.prototype._shouldDoResumable = function (blob) {
            return blob.size() > 256 * 1024;
        };
        UploadTask.prototype._start = function () {
            if (this._state !== InternalTaskState.RUNNING) {
                // This can happen if someone pauses us in a resume callback, for example.
                return;
            }
            if (this._request !== undefined) {
                return;
            }
            if (this._resumable) {
                if (this._uploadUrl === undefined) {
                    this._createResumable();
                }
                else {
                    if (this._needToFetchStatus) {
                        this._fetchStatus();
                    }
                    else {
                        if (this._needToFetchMetadata) {
                            // Happens if we miss the metadata on upload completion.
                            this._fetchMetadata();
                        }
                        else {
                            this._continueUpload();
                        }
                    }
                }
            }
            else {
                this._oneShotUpload();
            }
        };
        UploadTask.prototype._resolveToken = function (callback) {
            var _this = this;
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this._ref.storage.getAuthToken().then(function (authToken) {
                switch (_this._state) {
                    case InternalTaskState.RUNNING:
                        callback(authToken);
                        break;
                    case InternalTaskState.CANCELING:
                        _this._transition(InternalTaskState.CANCELED);
                        break;
                    case InternalTaskState.PAUSING:
                        _this._transition(InternalTaskState.PAUSED);
                        break;
                }
            });
        };
        // TODO(andysoto): assert false
        UploadTask.prototype._createResumable = function () {
            var _this = this;
            this._resolveToken(function (authToken) {
                var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
                var createRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
                _this._request = createRequest;
                createRequest.getPromise().then(function (url) {
                    _this._request = undefined;
                    _this._uploadUrl = url;
                    _this._needToFetchStatus = false;
                    _this.completeTransitions_();
                }, _this._errorHandler);
            });
        };
        UploadTask.prototype._fetchStatus = function () {
            var _this = this;
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            var url = this._uploadUrl;
            this._resolveToken(function (authToken) {
                var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);
                var statusRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
                _this._request = statusRequest;
                statusRequest.getPromise().then(function (status) {
                    status = status;
                    _this._request = undefined;
                    _this._updateProgress(status.current);
                    _this._needToFetchStatus = false;
                    if (status.finalized) {
                        _this._needToFetchMetadata = true;
                    }
                    _this.completeTransitions_();
                }, _this._errorHandler);
            });
        };
        UploadTask.prototype._continueUpload = function () {
            var _this = this;
            var chunkSize = resumableUploadChunkSize * this._chunkMultiplier;
            var status = new ResumableUploadStatus(this._transferred, this._blob.size());
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            var url = this._uploadUrl;
            this._resolveToken(function (authToken) {
                var requestInfo;
                try {
                    requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());
                }
                catch (e) {
                    _this._error = e;
                    _this._transition(InternalTaskState.ERROR);
                    return;
                }
                var uploadRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
                _this._request = uploadRequest;
                uploadRequest
                    .getPromise()
                    .then(function (newStatus) {
                    _this._increaseMultiplier();
                    _this._request = undefined;
                    _this._updateProgress(newStatus.current);
                    if (newStatus.finalized) {
                        _this._metadata = newStatus.metadata;
                        _this._transition(InternalTaskState.SUCCESS);
                    }
                    else {
                        _this.completeTransitions_();
                    }
                }, _this._errorHandler);
            });
        };
        UploadTask.prototype._increaseMultiplier = function () {
            var currentSize = resumableUploadChunkSize * this._chunkMultiplier;
            // Max chunk size is 32M.
            if (currentSize < 32 * 1024 * 1024) {
                this._chunkMultiplier *= 2;
            }
        };
        UploadTask.prototype._fetchMetadata = function () {
            var _this = this;
            this._resolveToken(function (authToken) {
                var requestInfo = getMetadata(_this._ref.storage, _this._ref._location, _this._mappings);
                var metadataRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
                _this._request = metadataRequest;
                metadataRequest.getPromise().then(function (metadata) {
                    _this._request = undefined;
                    _this._metadata = metadata;
                    _this._transition(InternalTaskState.SUCCESS);
                }, _this._metadataErrorHandler);
            });
        };
        UploadTask.prototype._oneShotUpload = function () {
            var _this = this;
            this._resolveToken(function (authToken) {
                var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
                var multipartRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
                _this._request = multipartRequest;
                multipartRequest.getPromise().then(function (metadata) {
                    _this._request = undefined;
                    _this._metadata = metadata;
                    _this._updateProgress(_this._blob.size());
                    _this._transition(InternalTaskState.SUCCESS);
                }, _this._errorHandler);
            });
        };
        UploadTask.prototype._updateProgress = function (transferred) {
            var old = this._transferred;
            this._transferred = transferred;
            // A progress update can make the "transferred" value smaller (e.g. a
            // partial upload not completed by server, after which the "transferred"
            // value may reset to the value at the beginning of the request).
            if (this._transferred !== old) {
                this._notifyObservers();
            }
        };
        UploadTask.prototype._transition = function (state) {
            if (this._state === state) {
                return;
            }
            switch (state) {
                case InternalTaskState.CANCELING:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING);
                    this._state = state;
                    if (this._request !== undefined) {
                        this._request.cancel();
                    }
                    break;
                case InternalTaskState.PAUSING:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING);
                    this._state = state;
                    if (this._request !== undefined) {
                        this._request.cancel();
                    }
                    break;
                case InternalTaskState.RUNNING:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSED ||
                    //        this.state_ === InternalTaskState.PAUSING);
                    var wasPaused = this._state === InternalTaskState.PAUSED;
                    this._state = state;
                    if (wasPaused) {
                        this._notifyObservers();
                        this._start();
                    }
                    break;
                case InternalTaskState.PAUSED:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSING);
                    this._state = state;
                    this._notifyObservers();
                    break;
                case InternalTaskState.CANCELED:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSED ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._error = canceled();
                    this._state = state;
                    this._notifyObservers();
                    break;
                case InternalTaskState.ERROR:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._state = state;
                    this._notifyObservers();
                    break;
                case InternalTaskState.SUCCESS:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this._state = state;
                    this._notifyObservers();
                    break;
            }
        };
        UploadTask.prototype.completeTransitions_ = function () {
            switch (this._state) {
                case InternalTaskState.PAUSING:
                    this._transition(InternalTaskState.PAUSED);
                    break;
                case InternalTaskState.CANCELING:
                    this._transition(InternalTaskState.CANCELED);
                    break;
                case InternalTaskState.RUNNING:
                    this._start();
                    break;
            }
        };
        Object.defineProperty(UploadTask.prototype, "snapshot", {
            get: function () {
                var externalState = taskStateFromInternalTaskState(this._state);
                return new UploadTaskSnapshot(this._transferred, this._blob.size(), externalState, this._metadata, this, this._ref);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a callback for an event.
         * @param type - The type of event to listen for.
         */
        UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
            var _this = this;
            var observer = new Observer(nextOrObserver, error, completed);
            this._addObserver(observer);
            return function () {
                _this._removeObserver(observer);
            };
        };
        /**
         * This object behaves like a Promise, and resolves with its snapshot data
         * when the upload completes.
         * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
         * @param onRejected - The rejection callback.
         */
        UploadTask.prototype.then = function (onFulfilled, onRejected) {
            // These casts are needed so that TypeScript can infer the types of the
            // resulting Promise.
            return this._promise.then(onFulfilled, onRejected);
        };
        /**
         * Equivalent to calling `then(null, onRejected)`.
         */
        UploadTask.prototype.catch = function (onRejected) {
            return this.then(null, onRejected);
        };
        /**
         * Adds the given observer.
         */
        UploadTask.prototype._addObserver = function (observer) {
            this._observers.push(observer);
            this._notifyObserver(observer);
        };
        /**
         * Removes the given observer.
         */
        UploadTask.prototype._removeObserver = function (observer) {
            var i = this._observers.indexOf(observer);
            if (i !== -1) {
                this._observers.splice(i, 1);
            }
        };
        UploadTask.prototype._notifyObservers = function () {
            var _this = this;
            this._finishPromise();
            var observers = this._observers.slice();
            observers.forEach(function (observer) {
                _this._notifyObserver(observer);
            });
        };
        UploadTask.prototype._finishPromise = function () {
            if (this._resolve !== undefined) {
                var triggered = true;
                switch (taskStateFromInternalTaskState(this._state)) {
                    case TaskState.SUCCESS:
                        async(this._resolve.bind(null, this.snapshot))();
                        break;
                    case TaskState.CANCELED:
                    case TaskState.ERROR:
                        var toCall = this._reject;
                        async(toCall.bind(null, this._error))();
                        break;
                    default:
                        triggered = false;
                        break;
                }
                if (triggered) {
                    this._resolve = undefined;
                    this._reject = undefined;
                }
            }
        };
        UploadTask.prototype._notifyObserver = function (observer) {
            var externalState = taskStateFromInternalTaskState(this._state);
            switch (externalState) {
                case TaskState.RUNNING:
                case TaskState.PAUSED:
                    if (observer.next) {
                        async(observer.next.bind(observer, this.snapshot))();
                    }
                    break;
                case TaskState.SUCCESS:
                    if (observer.complete) {
                        async(observer.complete.bind(observer))();
                    }
                    break;
                case TaskState.CANCELED:
                case TaskState.ERROR:
                    if (observer.error) {
                        async(observer.error.bind(observer, this._error))();
                    }
                    break;
                default:
                    // TODO(andysoto): assert(false);
                    if (observer.error) {
                        async(observer.error.bind(observer, this._error))();
                    }
            }
        };
        /**
         * Resumes a paused task. Has no effect on a currently running or failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.resume = function () {
            var valid = this._state === InternalTaskState.PAUSED ||
                this._state === InternalTaskState.PAUSING;
            if (valid) {
                this._transition(InternalTaskState.RUNNING);
            }
            return valid;
        };
        /**
         * Pauses a currently running task. Has no effect on a paused or failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.pause = function () {
            var valid = this._state === InternalTaskState.RUNNING;
            if (valid) {
                this._transition(InternalTaskState.PAUSING);
            }
            return valid;
        };
        /**
         * Cancels a currently running or paused task. Has no effect on a complete or
         * failed task.
         * @returns True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.cancel = function () {
            var valid = this._state === InternalTaskState.RUNNING ||
                this._state === InternalTaskState.PAUSING;
            if (valid) {
                this._transition(InternalTaskState.CANCELING);
            }
            return valid;
        };
        return UploadTask;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides methods to interact with a bucket in the Firebase Storage service.
     * @param location - An fbs.location, or the URL at
     *     which to base this object, in one of the following forms:
     *         gs://<bucket>/<object-path>
     *         http[s]://firebasestorage.googleapis.com/
     *                     <api-version>/b/<bucket>/o/<object-path>
     *     Any query or fragment strings will be ignored in the http[s]
     *     format. If no value is passed, the storage object will use a URL based on
     *     the project ID of the base firebase.App instance.
     */
    var Reference$1 = /** @class */ (function () {
        function Reference(_service, location) {
            this._service = _service;
            if (location instanceof Location) {
                this._location = location;
            }
            else {
                this._location = Location.makeFromUrl(location);
            }
        }
        /**
         * @returns The URL for the bucket and path this object references,
         *     in the form gs://<bucket>/<object-path>
         * @override
         */
        Reference.prototype.toString = function () {
            return 'gs://' + this._location.bucket + '/' + this._location.path;
        };
        Reference.prototype.newRef = function (service, location) {
            return new Reference(service, location);
        };
        Object.defineProperty(Reference.prototype, "root", {
            /**
             * @returns An reference to the root of this
             *     object's bucket.
             */
            get: function () {
                var location = new Location(this._location.bucket, '');
                return this.newRef(this._service, location);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "bucket", {
            get: function () {
                return this._location.bucket;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "fullPath", {
            get: function () {
                return this._location.path;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "name", {
            get: function () {
                return lastComponent(this._location.path);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "storage", {
            get: function () {
                return this._service;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "parent", {
            get: function () {
                var newPath = parent(this._location.path);
                if (newPath === null) {
                    return null;
                }
                var location = new Location(this._location.bucket, newPath);
                return new Reference(this._service, location);
            },
            enumerable: false,
            configurable: true
        });
        Reference.prototype._throwIfRoot = function (name) {
            if (this._location.path === '') {
                throw invalidRootOperation(name);
            }
        };
        return Reference;
    }());
    /**
     * Uploads a blob to this object's location.
     * @public
     * @param ref - Storage Reference where data should be uploaded.
     * @param data - The data to upload.
     * @param metadata - Metadata for the newly uploaded string.
     * @returns An UploadTask that lets you control and
     *     observe the upload.
     */
    function uploadBytesResumable(ref, data, metadata) {
        if (metadata === void 0) { metadata = null; }
        ref._throwIfRoot('uploadBytesResumable');
        return new UploadTask(ref, new FbsBlob(data), metadata);
    }
    /**
     * Uploads a string to this object's location.
     * @public
     * @param ref - Storage Reference where string should be uploaded.
     * @param value - The string to upload.
     * @param format - The format of the string to upload.
     * @param metadata - Metadata for the newly uploaded object.
     * @returns An UploadTask that lets you control and
     *     observe the upload.
     */
    function uploadString(ref, value, format, metadata) {
        if (format === void 0) { format = StringFormat.RAW; }
        ref._throwIfRoot('putString');
        var data = dataFromString(format, value);
        var metadataClone = __assign({}, metadata);
        if (metadataClone['contentType'] == null && data.contentType != null) {
            metadataClone['contentType'] = data.contentType;
        }
        return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);
    }
    /**
     * List all items (files) and prefixes (folders) under this storage reference.
     *
     * This is a helper method for calling list() repeatedly until there are
     * no more results. The default pagination size is 1000.
     *
     * Note: The results may not be consistent if objects are changed while this
     * operation is running.
     *
     * Warning: listAll may potentially consume too many resources if there are
     * too many results.
     * @public
     * @param ref - Storage Reference to get list from.
     *
     * @returns A Promise that resolves with all the items and prefixes under
     *      the current storage reference. `prefixes` contains references to
     *      sub-directories and `items` contains references to objects in this
     *      folder. `nextPageToken` is never returned.
     */
    function listAll(ref) {
        var accumulator = {
            prefixes: [],
            items: []
        };
        return listAllHelper(ref, accumulator).then(function () { return accumulator; });
    }
    /**
     * Separated from listAll because async functions can't use "arguments".
     * @internal
     * @param ref
     * @param accumulator
     * @param pageToken
     */
    function listAllHelper(ref, accumulator, pageToken) {
        return __awaiter(this, void 0, void 0, function () {
            var opt, nextPage;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        opt = {
                            // maxResults is 1000 by default.
                            pageToken: pageToken
                        };
                        return [4 /*yield*/, list$1(ref, opt)];
                    case 1:
                        nextPage = _c.sent();
                        (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);
                        (_b = accumulator.items).push.apply(_b, nextPage.items);
                        if (!(nextPage.nextPageToken != null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, listAllHelper(ref, accumulator, nextPage.nextPageToken)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * List items (files) and prefixes (folders) under this storage reference.
     *
     * List API is only available for Firebase Rules Version 2.
     *
     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
     * delimited folder structure.
     * Refer to GCS's List API if you want to learn more.
     *
     * To adhere to Firebase Rules's Semantics, Firebase Storage does not
     * support objects whose paths end with "/" or contain two consecutive
     * "/"s. Firebase Storage List API will filter these unsupported objects.
     * list() may fail if there are too many unsupported objects in the bucket.
     * @public
     *
     * @param ref - Storage Reference to get list from.
     * @param options - See ListOptions for details.
     * @returns A Promise that resolves with the items and prefixes.
     *      `prefixes` contains references to sub-folders and `items`
     *      contains references to objects in this folder. `nextPageToken`
     *      can be used to get the rest of the results.
     */
    function list$1(ref, options) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, op, requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options != null) {
                            if (typeof options.maxResults === 'number') {
                                validateNumber('options.maxResults', 
                                /* minValue= */ 1, 
                                /* maxValue= */ 1000, options.maxResults);
                            }
                        }
                        return [4 /*yield*/, ref.storage.getAuthToken()];
                    case 1:
                        authToken = _a.sent();
                        op = options || {};
                        requestInfo = list(ref.storage, ref._location, 
                        /*delimiter= */ '/', op.pageToken, op.maxResults);
                        return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise()];
                }
            });
        });
    }
    /**
     * A promise that resolves with the metadata for this object. If this
     * object doesn't exist or metadata cannot be retreived, the promise is
     * rejected.
     * @public
     * @param ref - Storage Reference to get metadata from.
     */
    function getMetadata$1(ref) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref._throwIfRoot('getMetadata');
                        return [4 /*yield*/, ref.storage.getAuthToken()];
                    case 1:
                        authToken = _a.sent();
                        requestInfo = getMetadata(ref.storage, ref._location, getMappings());
                        return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise()];
                }
            });
        });
    }
    /**
     * Updates the metadata for this object.
     * @public
     * @param ref - Storage Reference to update metadata for.
     * @param metadata - The new metadata for the object.
     *     Only values that have been explicitly set will be changed. Explicitly
     *     setting a value to null will remove the metadata.
     * @returns A promise that resolves
     *     with the new metadata for this object.
     *     See `firebaseStorage.Reference.prototype.getMetadata`
     */
    function updateMetadata$1(ref, metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref._throwIfRoot('updateMetadata');
                        return [4 /*yield*/, ref.storage.getAuthToken()];
                    case 1:
                        authToken = _a.sent();
                        requestInfo = updateMetadata(ref.storage, ref._location, metadata, getMappings());
                        return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise()];
                }
            });
        });
    }
    /**
     * Returns the download URL for the given Reference.
     * @public
     * @returns A promise that resolves with the download
     *     URL for this object.
     */
    function getDownloadURL(ref) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref._throwIfRoot('getDownloadURL');
                        return [4 /*yield*/, ref.storage.getAuthToken()];
                    case 1:
                        authToken = _a.sent();
                        requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());
                        return [2 /*return*/, ref.storage
                                .makeRequest(requestInfo, authToken)
                                .getPromise()
                                .then(function (url) {
                                if (url === null) {
                                    throw noDownloadURL();
                                }
                                return url;
                            })];
                }
            });
        });
    }
    /**
     * Deletes the object at this location.
     * @public
     * @param ref - Storage Reference for object to delete.
     * @returns A promise that resolves if the deletion succeeds.
     */
    function deleteObject$1(ref) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, requestInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref._throwIfRoot('deleteObject');
                        return [4 /*yield*/, ref.storage.getAuthToken()];
                    case 1:
                        authToken = _a.sent();
                        requestInfo = deleteObject(ref.storage, ref._location);
                        return [2 /*return*/, ref.storage.makeRequest(requestInfo, authToken).getPromise()];
                }
            });
        });
    }
    /**
     * Returns reference for object obtained by appending `childPath` to `ref`.
     * @internal
     *
     * @param ref - Storage Reference to get child of.
     * @param childPath - Child path from provided ref.
     * @returns A reference to the object obtained by
     * appending childPath, removing any duplicate, beginning, or trailing
     * slashes.
     */
    function getChild(ref, childPath) {
        var newPath = child(ref._location.path, childPath);
        var location = new Location(ref._location.bucket, newPath);
        return new Reference$1(ref.storage, location);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UploadTaskSnapshotCompat = /** @class */ (function () {
        function UploadTaskSnapshotCompat(_delegate, task, ref) {
            this._delegate = _delegate;
            this.task = task;
            this.ref = ref;
        }
        Object.defineProperty(UploadTaskSnapshotCompat.prototype, "bytesTransferred", {
            get: function () {
                return this._delegate.bytesTransferred;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UploadTaskSnapshotCompat.prototype, "metadata", {
            get: function () {
                return this._delegate.metadata;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UploadTaskSnapshotCompat.prototype, "state", {
            get: function () {
                return this._delegate.state;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UploadTaskSnapshotCompat.prototype, "totalBytes", {
            get: function () {
                return this._delegate.totalBytes;
            },
            enumerable: false,
            configurable: true
        });
        return UploadTaskSnapshotCompat;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UploadTaskCompat = /** @class */ (function () {
        function UploadTaskCompat(_delegate, _ref) {
            this._delegate = _delegate;
            this._ref = _ref;
            this.cancel = this._delegate.cancel.bind(this._delegate);
            this.catch = this._delegate.catch.bind(this._delegate);
            this.pause = this._delegate.pause.bind(this._delegate);
            this.resume = this._delegate.resume.bind(this._delegate);
            this._snapshot = new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);
        }
        Object.defineProperty(UploadTaskCompat.prototype, "snapshot", {
            get: function () {
                return this._snapshot;
            },
            enumerable: false,
            configurable: true
        });
        UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {
            var _this = this;
            return this._delegate.then(function (snapshot) {
                if (onFulfilled) {
                    return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));
                }
            }, onRejected);
        };
        UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {
            var _this = this;
            var wrappedNextOrObserver = undefined;
            if (!!nextOrObserver) {
                if (typeof nextOrObserver === 'function') {
                    wrappedNextOrObserver = function (taskSnapshot) {
                        return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
                    };
                }
                else {
                    wrappedNextOrObserver = {
                        next: !!nextOrObserver.next
                            ? function (taskSnapshot) {
                                return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
                            }
                            : undefined,
                        complete: nextOrObserver.complete || undefined,
                        error: nextOrObserver.error || undefined
                    };
                }
            }
            return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);
        };
        return UploadTaskCompat;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ListResultCompat = /** @class */ (function () {
        function ListResultCompat(_delegate, _service) {
            this._delegate = _delegate;
            this._service = _service;
        }
        Object.defineProperty(ListResultCompat.prototype, "prefixes", {
            get: function () {
                var _this = this;
                return this._delegate.prefixes.map(function (ref) { return new ReferenceCompat(ref, _this._service); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListResultCompat.prototype, "items", {
            get: function () {
                var _this = this;
                return this._delegate.items.map(function (ref) { return new ReferenceCompat(ref, _this._service); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListResultCompat.prototype, "nextPageToken", {
            get: function () {
                return this._delegate.nextPageToken || null;
            },
            enumerable: false,
            configurable: true
        });
        return ListResultCompat;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *  http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ReferenceCompat = /** @class */ (function () {
        function ReferenceCompat(_delegate, storage) {
            this._delegate = _delegate;
            this.storage = storage;
        }
        Object.defineProperty(ReferenceCompat.prototype, "name", {
            get: function () {
                return this._delegate.name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReferenceCompat.prototype, "bucket", {
            get: function () {
                return this._delegate.bucket;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReferenceCompat.prototype, "fullPath", {
            get: function () {
                return this._delegate.fullPath;
            },
            enumerable: false,
            configurable: true
        });
        ReferenceCompat.prototype.toString = function () {
            return this._delegate.toString();
        };
        /**
         * @returns A reference to the object obtained by
         * appending childPath, removing any duplicate, beginning, or trailing
         * slashes.
         */
        ReferenceCompat.prototype.child = function (childPath) {
            var reference = getChild(this._delegate, childPath);
            return new ReferenceCompat(reference, this.storage);
        };
        Object.defineProperty(ReferenceCompat.prototype, "root", {
            get: function () {
                return new ReferenceCompat(this._delegate.root, this.storage);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReferenceCompat.prototype, "parent", {
            /**
             * @returns A reference to the parent of the
             * current object, or null if the current object is the root.
             */
            get: function () {
                var reference = this._delegate.parent;
                if (reference == null) {
                    return null;
                }
                return new ReferenceCompat(reference, this.storage);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Uploads a blob to this object's location.
         * @param data - The blob to upload.
         * @returns An UploadTask that lets you control and
         * observe the upload.
         */
        ReferenceCompat.prototype.put = function (data, metadata) {
            this._throwIfRoot('put');
            return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);
        };
        /**
         * Uploads a string to this object's location.
         * @param value - The string to upload.
         * @param format - The format of the string to upload.
         * @returns An UploadTask that lets you control and
         * observe the upload.
         */
        ReferenceCompat.prototype.putString = function (value, format, metadata) {
            if (format === void 0) { format = StringFormat.RAW; }
            this._throwIfRoot('putString');
            return new UploadTaskCompat(uploadString(this._delegate, value, format, metadata), this);
        };
        /**
         * List all items (files) and prefixes (folders) under this storage reference.
         *
         * This is a helper method for calling list() repeatedly until there are
         * no more results. The default pagination size is 1000.
         *
         * Note: The results may not be consistent if objects are changed while this
         * operation is running.
         *
         * Warning: listAll may potentially consume too many resources if there are
         * too many results.
         *
         * @returns A Promise that resolves with all the items and prefixes under
         *  the current storage reference. `prefixes` contains references to
         *  sub-directories and `items` contains references to objects in this
         *  folder. `nextPageToken` is never returned.
         */
        ReferenceCompat.prototype.listAll = function () {
            var _this = this;
            return listAll(this._delegate).then(function (r) { return new ListResultCompat(r, _this.storage); });
        };
        /**
         * List items (files) and prefixes (folders) under this storage reference.
         *
         * List API is only available for Firebase Rules Version 2.
         *
         * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
         * delimited folder structure. Refer to GCS's List API if you want to learn more.
         *
         * To adhere to Firebase Rules's Semantics, Firebase Storage does not
         * support objects whose paths end with "/" or contain two consecutive
         * "/"s. Firebase Storage List API will filter these unsupported objects.
         * list() may fail if there are too many unsupported objects in the bucket.
         *
         * @param options - See ListOptions for details.
         * @returns A Promise that resolves with the items and prefixes.
         * `prefixes` contains references to sub-folders and `items`
         * contains references to objects in this folder. `nextPageToken`
         * can be used to get the rest of the results.
         */
        ReferenceCompat.prototype.list = function (options) {
            var _this = this;
            return list$1(this._delegate, options).then(function (r) { return new ListResultCompat(r, _this.storage); });
        };
        /**
         * A promise that resolves with the metadata for this object. If this
         * object doesn't exist or metadata cannot be retreived, the promise is
         * rejected.
         */
        ReferenceCompat.prototype.getMetadata = function () {
            return getMetadata$1(this._delegate);
        };
        /**
         * Updates the metadata for this object.
         * @param metadata - The new metadata for the object.
         * Only values that have been explicitly set will be changed. Explicitly
         * setting a value to null will remove the metadata.
         * @returns A promise that resolves
         * with the new metadata for this object.
         * @see firebaseStorage.Reference.prototype.getMetadata
         */
        ReferenceCompat.prototype.updateMetadata = function (metadata) {
            return updateMetadata$1(this._delegate, metadata);
        };
        /**
         * @returns A promise that resolves with the download
         * URL for this object.
         */
        ReferenceCompat.prototype.getDownloadURL = function () {
            return getDownloadURL(this._delegate);
        };
        /**
         * Deletes the object at this location.
         * @returns A promise that resolves if the deletion succeeds.
         */
        ReferenceCompat.prototype.delete = function () {
            this._throwIfRoot('delete');
            return deleteObject$1(this._delegate);
        };
        ReferenceCompat.prototype._throwIfRoot = function (name) {
            if (this._delegate._location.path === '') {
                throw invalidRootOperation(name);
            }
        };
        return ReferenceCompat;
    }());

    /**
     * A request whose promise always fails.
     */
    var FailRequest = /** @class */ (function () {
        function FailRequest(error) {
            this.promise_ = Promise.reject(error);
        }
        /** @inheritDoc */
        FailRequest.prototype.getPromise = function () {
            return this.promise_;
        };
        /** @inheritDoc */
        FailRequest.prototype.cancel = function (_appDelete) {
        };
        return FailRequest;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param f May be invoked
     *     before the function returns.
     * @param callback Get all the arguments passed to the function
     *     passed to f, including the initial boolean.
     */
    function start(f, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback, timeout) {
        // TODO(andysoto): make this code cleaner (probably refactor into an actual
        // type instead of a bunch of functions with state shared in the closure)
        var waitSeconds = 1;
        // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
        // TODO: find a way to exclude Node type definition for storage because storage only works in browser
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var timeoutId = null;
        var hitTimeout = false;
        var cancelState = 0;
        function canceled() {
            return cancelState === 2;
        }
        var triggeredCallback = false;
        function triggerCallback() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!triggeredCallback) {
                triggeredCallback = true;
                callback.apply(null, args);
            }
        }
        function callWithDelay(millis) {
            timeoutId = setTimeout(function () {
                timeoutId = null;
                f(handler, canceled());
            }, millis);
        }
        function handler(success) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (triggeredCallback) {
                return;
            }
            if (success) {
                triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));
                return;
            }
            var mustStop = canceled() || hitTimeout;
            if (mustStop) {
                triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));
                return;
            }
            if (waitSeconds < 64) {
                /* TODO(andysoto): don't back off so quickly if we know we're offline. */
                waitSeconds *= 2;
            }
            var waitMillis;
            if (cancelState === 1) {
                cancelState = 2;
                waitMillis = 0;
            }
            else {
                waitMillis = (waitSeconds + Math.random()) * 1000;
            }
            callWithDelay(waitMillis);
        }
        var stopped = false;
        function stop(wasTimeout) {
            if (stopped) {
                return;
            }
            stopped = true;
            if (triggeredCallback) {
                return;
            }
            if (timeoutId !== null) {
                if (!wasTimeout) {
                    cancelState = 2;
                }
                clearTimeout(timeoutId);
                callWithDelay(0);
            }
            else {
                if (!wasTimeout) {
                    cancelState = 1;
                }
            }
        }
        callWithDelay(0);
        setTimeout(function () {
            hitTimeout = true;
            stop(true);
        }, timeout);
        return stop;
    }
    /**
     * Stops the retry loop from repeating.
     * If the function is currently "in between" retries, it is invoked immediately
     * with the second parameter as "true". Otherwise, it will be invoked once more
     * after the current invocation finishes iff the current invocation would have
     * triggered another retry.
     */
    function stop(id) {
        id(false);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NetworkRequest = /** @class */ (function () {
        function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
            var _this = this;
            this.pendingXhr_ = null;
            this.backoffId_ = null;
            this.canceled_ = false;
            this.appDelete_ = false;
            this.url_ = url;
            this.method_ = method;
            this.headers_ = headers;
            this.body_ = body;
            this.successCodes_ = successCodes.slice();
            this.additionalRetryCodes_ = additionalRetryCodes.slice();
            this.callback_ = callback;
            this.errorCallback_ = errorCallback;
            this.progressCallback_ = progressCallback;
            this.timeout_ = timeout;
            this.pool_ = pool;
            this.promise_ = new Promise(function (resolve, reject) {
                _this.resolve_ = resolve;
                _this.reject_ = reject;
                _this.start_();
            });
        }
        /**
         * Actually starts the retry loop.
         */
        NetworkRequest.prototype.start_ = function () {
            var self = this;
            function doTheRequest(backoffCallback, canceled) {
                if (canceled) {
                    backoffCallback(false, new RequestEndStatus(false, null, true));
                    return;
                }
                var xhr = self.pool_.createXhrIo();
                self.pendingXhr_ = xhr;
                function progressListener(progressEvent) {
                    var loaded = progressEvent.loaded;
                    var total = progressEvent.lengthComputable ? progressEvent.total : -1;
                    if (self.progressCallback_ !== null) {
                        self.progressCallback_(loaded, total);
                    }
                }
                if (self.progressCallback_ !== null) {
                    xhr.addUploadProgressListener(progressListener);
                }
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                xhr
                    .send(self.url_, self.method_, self.body_, self.headers_)
                    .then(function (xhr) {
                    if (self.progressCallback_ !== null) {
                        xhr.removeUploadProgressListener(progressListener);
                    }
                    self.pendingXhr_ = null;
                    xhr = xhr;
                    var hitServer = xhr.getErrorCode() === ErrorCode$1.NO_ERROR;
                    var status = xhr.getStatus();
                    if (!hitServer || self.isRetryStatusCode_(status)) {
                        var wasCanceled = xhr.getErrorCode() === ErrorCode$1.ABORT;
                        backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                        return;
                    }
                    var successCode = self.successCodes_.indexOf(status) !== -1;
                    backoffCallback(true, new RequestEndStatus(successCode, xhr));
                });
            }
            /**
             * @param requestWentThrough - True if the request eventually went
             *     through, false if it hit the retry limit or was canceled.
             */
            function backoffDone(requestWentThrough, status) {
                var resolve = self.resolve_;
                var reject = self.reject_;
                var xhr = status.xhr;
                if (status.wasSuccessCode) {
                    try {
                        var result = self.callback_(xhr, xhr.getResponseText());
                        if (isJustDef(result)) {
                            resolve(result);
                        }
                        else {
                            resolve();
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                }
                else {
                    if (xhr !== null) {
                        var err = unknown();
                        err.serverResponse = xhr.getResponseText();
                        if (self.errorCallback_) {
                            reject(self.errorCallback_(xhr, err));
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        if (status.canceled) {
                            var err = self.appDelete_ ? appDeleted() : canceled();
                            reject(err);
                        }
                        else {
                            var err = retryLimitExceeded();
                            reject(err);
                        }
                    }
                }
            }
            if (this.canceled_) {
                backoffDone(false, new RequestEndStatus(false, null, true));
            }
            else {
                this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
            }
        };
        /** @inheritDoc */
        NetworkRequest.prototype.getPromise = function () {
            return this.promise_;
        };
        /** @inheritDoc */
        NetworkRequest.prototype.cancel = function (appDelete) {
            this.canceled_ = true;
            this.appDelete_ = appDelete || false;
            if (this.backoffId_ !== null) {
                stop(this.backoffId_);
            }
            if (this.pendingXhr_ !== null) {
                this.pendingXhr_.abort();
            }
        };
        NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
            // The codes for which to retry came from this page:
            // https://cloud.google.com/storage/docs/exponential-backoff
            var isFiveHundredCode = status >= 500 && status < 600;
            var extraRetryCodes = [
                // Request Timeout: web server didn't receive full request in time.
                408,
                // Too Many Requests: you're getting rate-limited, basically.
                429
            ];
            var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
            var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
            return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
        };
        return NetworkRequest;
    }());
    /**
     * A collection of information about the result of a network request.
     * @param opt_canceled - Defaults to false.
     */
    var RequestEndStatus = /** @class */ (function () {
        function RequestEndStatus(wasSuccessCode, xhr, canceled) {
            this.wasSuccessCode = wasSuccessCode;
            this.xhr = xhr;
            this.canceled = !!canceled;
        }
        return RequestEndStatus;
    }());
    function addAuthHeader_(headers, authToken) {
        if (authToken !== null && authToken.length > 0) {
            headers['Authorization'] = 'Firebase ' + authToken;
        }
    }
    function addVersionHeader_(headers) {
        var version = typeof firebase$1 !== 'undefined' ? firebase$1.SDK_VERSION : 'AppManager';
        headers['X-Firebase-Storage-Version'] = 'webjs/' + version;
    }
    function addGmpidHeader_(headers, appId) {
        if (appId) {
            headers['X-Firebase-GMPID'] = appId;
        }
    }
    function makeRequest(requestInfo, appId, authToken, pool) {
        var queryPart = makeQueryString(requestInfo.urlParams);
        var url = requestInfo.url + queryPart;
        var headers = Object.assign({}, requestInfo.headers);
        addGmpidHeader_(headers, appId);
        addAuthHeader_(headers, authToken);
        addVersionHeader_(headers);
        return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isUrl(path) {
        return /^[A-Za-z]+:\/\//.test(path);
    }
    /**
     * Returns a firebaseStorage.Reference for the given url.
     */
    function refFromURL(service, url) {
        return new Reference$1(service, url);
    }
    /**
     * Returns a firebaseStorage.Reference for the given path in the default
     * bucket.
     */
    function refFromPath(ref, path) {
        if (ref instanceof StorageService) {
            var service = ref;
            if (service._bucket == null) {
                throw noDefaultBucket();
            }
            var reference = new Reference$1(service, service._bucket);
            if (path != null) {
                return refFromPath(reference, path);
            }
            else {
                return reference;
            }
        }
        else {
            // ref is a Reference
            if (path !== undefined) {
                if (path.includes('..')) {
                    throw invalidArgument('`path` param cannot contain ".."');
                }
                return getChild(ref, path);
            }
            else {
                return ref;
            }
        }
    }
    function ref(serviceOrRef, pathOrUrl) {
        if (pathOrUrl && isUrl(pathOrUrl)) {
            if (serviceOrRef instanceof StorageService) {
                return refFromURL(serviceOrRef, pathOrUrl);
            }
            else {
                throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');
            }
        }
        else {
            return refFromPath(serviceOrRef, pathOrUrl);
        }
    }
    function extractBucket(config) {
        var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];
        if (bucketString == null) {
            return null;
        }
        return Location.makeFromBucketSpec(bucketString);
    }
    /**
     * A service that provides Firebase Storage Reference instances.
     * @param opt_url - gs:// url to a custom Storage Bucket
     */
    var StorageService = /** @class */ (function () {
        function StorageService(app, 
        /**
         * @internal
         */
        _authProvider, 
        /**
         * @internal
         */
        _pool, 
        /**
         * @internal
         */
        _url) {
            this.app = app;
            this._authProvider = _authProvider;
            this._pool = _pool;
            this._url = _url;
            /**
             * @internal
             */
            this._bucket = null;
            this._appId = null;
            this._deleted = false;
            this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
            this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
            this._requests = new Set();
            if (_url != null) {
                this._bucket = Location.makeFromBucketSpec(_url);
            }
            else {
                this._bucket = extractBucket(this.app.options);
            }
        }
        Object.defineProperty(StorageService.prototype, "maxUploadRetryTime", {
            get: function () {
                return this._maxUploadRetryTime;
            },
            set: function (time) {
                validateNumber('time', 
                /* minValue=*/ 0, 
                /* maxValue= */ Number.POSITIVE_INFINITY, time);
                this._maxUploadRetryTime = time;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StorageService.prototype, "maxOperationRetryTime", {
            get: function () {
                return this._maxOperationRetryTime;
            },
            set: function (time) {
                validateNumber('time', 
                /* minValue=*/ 0, 
                /* maxValue= */ Number.POSITIVE_INFINITY, time);
                this._maxOperationRetryTime = time;
            },
            enumerable: false,
            configurable: true
        });
        StorageService.prototype.getAuthToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                var auth, tokenData;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            auth = this._authProvider.getImmediate({ optional: true });
                            if (!auth) return [3 /*break*/, 2];
                            return [4 /*yield*/, auth.getToken()];
                        case 1:
                            tokenData = _a.sent();
                            if (tokenData !== null) {
                                return [2 /*return*/, tokenData.accessToken];
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/, null];
                    }
                });
            });
        };
        /**
         * Stop running requests and prevent more from being created.
         * @internal
         */
        StorageService.prototype._delete = function () {
            this._deleted = true;
            this._requests.forEach(function (request) { return request.cancel(); });
            this._requests.clear();
            return Promise.resolve();
        };
        /**
         * Returns a new firebaseStorage.Reference object referencing this StorageService
         * at the given Location.
         */
        StorageService.prototype.makeStorageReference = function (loc) {
            return new Reference$1(this, loc);
        };
        /**
         * @internal
         * @param requestInfo - HTTP RequestInfo object
         * @param authToken - Firebase auth token
         */
        StorageService.prototype.makeRequest = function (requestInfo, authToken) {
            var _this = this;
            if (!this._deleted) {
                var request_1 = makeRequest(requestInfo, this._appId, authToken, this._pool);
                this._requests.add(request_1);
                // Request removes itself from set when complete.
                request_1.getPromise().then(function () { return _this._requests.delete(request_1); }, function () { return _this._requests.delete(request_1); });
                return request_1;
            }
            else {
                return new FailRequest(appDeleted());
            }
        };
        return StorageService;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A service that provides firebaseStorage.Reference instances.
     * @param opt_url gs:// url to a custom Storage Bucket
     */
    var StorageServiceCompat = /** @class */ (function () {
        function StorageServiceCompat(app, _delegate) {
            var _this = this;
            this.app = app;
            this._delegate = _delegate;
            this.INTERNAL = {
                /**
                 * Called when the associated app is deleted.
                 */
                delete: function () {
                    return _this._delegate._delete();
                }
            };
        }
        Object.defineProperty(StorageServiceCompat.prototype, "maxOperationRetryTime", {
            get: function () {
                return this._delegate.maxOperationRetryTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StorageServiceCompat.prototype, "maxUploadRetryTime", {
            get: function () {
                return this._delegate.maxUploadRetryTime;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns a firebaseStorage.Reference for the given path in the default
         * bucket.
         */
        StorageServiceCompat.prototype.ref = function (path) {
            if (isUrl(path)) {
                throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');
            }
            return new ReferenceCompat(ref(this._delegate, path), this);
        };
        /**
         * Returns a firebaseStorage.Reference object for the given absolute URL,
         * which must be a gs:// or http[s]:// URL.
         */
        StorageServiceCompat.prototype.refFromURL = function (url) {
            if (!isUrl(url)) {
                throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');
            }
            try {
                Location.makeFromUrl(url);
            }
            catch (e) {
                throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');
            }
            return new ReferenceCompat(ref(this._delegate, url), this);
        };
        StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {
            this._delegate.maxUploadRetryTime = time;
        };
        StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {
            this._delegate.maxOperationRetryTime = time;
        };
        return StorageServiceCompat;
    }());

    var name$g = "@firebase/storage";
    var version$5 = "0.4.2";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Type constant for Firebase Storage.
     */
    var STORAGE_TYPE = 'storage';
    function factory(container, url) {
        // Dependencies
        // TODO: This should eventually be 'app-compat'
        var app = container.getProvider('app').getImmediate();
        var authProvider = container.getProvider('auth-internal');
        // TODO: get StorageService instance from component framework instead
        // of creating a new one.
        var storageServiceCompat = new StorageServiceCompat(app, new StorageService(app, authProvider, new XhrIoPool(), url));
        return storageServiceCompat;
    }
    function registerStorage(instance) {
        var namespaceExports = {
            // no-inline
            TaskState: TaskState,
            TaskEvent: TaskEvent,
            StringFormat: StringFormat,
            Storage: StorageService,
            Reference: ReferenceCompat
        };
        instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, "PUBLIC" /* PUBLIC */)
            .setServiceProps(namespaceExports)
            .setMultipleInstances(true));
        instance.registerVersion(name$g, version$5);
    }
    registerStorage(firebase$1);

    var name$h = "@firebase/performance";
    var version$6 = "0.4.5";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SDK_VERSION$1 = version$6;
    /** The prefix for start User Timing marks used for creating Traces. */
    var TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';
    /** The prefix for stop User Timing marks used for creating Traces. */
    var TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';
    /** The prefix for User Timing measure used for creating Traces. */
    var TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';
    /** The prefix for out of the box page load Trace name. */
    var OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';
    var FIRST_PAINT_COUNTER_NAME = '_fp';
    var FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';
    var FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';
    var CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';
    var CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';
    var SERVICE$1 = 'performance';
    var SERVICE_NAME$1 = 'Performance';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$5;
    var ERROR_DESCRIPTION_MAP$1 = (_a$5 = {},
        _a$5["trace started" /* TRACE_STARTED_BEFORE */] = 'Trace {$traceName} was started before.',
        _a$5["trace stopped" /* TRACE_STOPPED_BEFORE */] = 'Trace {$traceName} is not running.',
        _a$5["nonpositive trace startTime" /* NONPOSITIVE_TRACE_START_TIME */] = 'Trace {$traceName} startTime should be positive.',
        _a$5["nonpositive trace duration" /* NONPOSITIVE_TRACE_DURATION */] = 'Trace {$traceName} duration should be positive.',
        _a$5["no window" /* NO_WINDOW */] = 'Window is not available.',
        _a$5["no app id" /* NO_APP_ID */] = 'App id is not available.',
        _a$5["no project id" /* NO_PROJECT_ID */] = 'Project id is not available.',
        _a$5["no api key" /* NO_API_KEY */] = 'Api key is not available.',
        _a$5["invalid cc log" /* INVALID_CC_LOG */] = 'Attempted to queue invalid cc event',
        _a$5["FB not default" /* FB_NOT_DEFAULT */] = 'Performance can only start when Firebase app instance is the default one.',
        _a$5["RC response not ok" /* RC_NOT_OK */] = 'RC response is not ok',
        _a$5["invalid attribute name" /* INVALID_ATTRIBUTE_NAME */] = 'Attribute name {$attributeName} is invalid.',
        _a$5["invalid attribute value" /* INVALID_ATTRIBUTE_VALUE */] = 'Attribute value {$attributeValue} is invalid.',
        _a$5["invalid custom metric name" /* INVALID_CUSTOM_METRIC_NAME */] = 'Custom metric name {$customMetricName} is invalid',
        _a$5["invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */] = 'Input for String merger is invalid, contact support team to resolve.',
        _a$5);
    var ERROR_FACTORY$3 = new ErrorFactory(SERVICE$1, SERVICE_NAME$1, ERROR_DESCRIPTION_MAP$1);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var consoleLogger = new Logger(SERVICE_NAME$1);
    consoleLogger.logLevel = LogLevel.INFO;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var apiInstance;
    var windowInstance;
    /**
     * This class holds a reference to various browser related objects injected by
     * set methods.
     */
    var Api = /** @class */ (function () {
        function Api(window) {
            this.window = window;
            if (!window) {
                throw ERROR_FACTORY$3.create("no window" /* NO_WINDOW */);
            }
            this.performance = window.performance;
            this.PerformanceObserver = window.PerformanceObserver;
            this.windowLocation = window.location;
            this.navigator = window.navigator;
            this.document = window.document;
            if (this.navigator && this.navigator.cookieEnabled) {
                // If user blocks cookies on the browser, accessing localStorage will
                // throw an exception.
                this.localStorage = window.localStorage;
            }
            if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {
                this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;
            }
        }
        Api.prototype.getUrl = function () {
            // Do not capture the string query part of url.
            return this.windowLocation.href.split('?')[0];
        };
        Api.prototype.mark = function (name) {
            if (!this.performance || !this.performance.mark) {
                return;
            }
            this.performance.mark(name);
        };
        Api.prototype.measure = function (measureName, mark1, mark2) {
            if (!this.performance || !this.performance.measure) {
                return;
            }
            this.performance.measure(measureName, mark1, mark2);
        };
        Api.prototype.getEntriesByType = function (type) {
            if (!this.performance || !this.performance.getEntriesByType) {
                return [];
            }
            return this.performance.getEntriesByType(type);
        };
        Api.prototype.getEntriesByName = function (name) {
            if (!this.performance || !this.performance.getEntriesByName) {
                return [];
            }
            return this.performance.getEntriesByName(name);
        };
        Api.prototype.getTimeOrigin = function () {
            // Polyfill the time origin with performance.timing.navigationStart.
            return (this.performance &&
                (this.performance.timeOrigin || this.performance.timing.navigationStart));
        };
        Api.prototype.requiredApisAvailable = function () {
            if (!fetch ||
                !Promise ||
                !this.navigator ||
                !this.navigator.cookieEnabled) {
                consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');
                return false;
            }
            if (!isIndexedDBAvailable()) {
                consoleLogger.info('IndexedDB is not supported by current browswer');
                return false;
            }
            return true;
        };
        Api.prototype.setupObserver = function (entryType, callback) {
            if (!this.PerformanceObserver) {
                return;
            }
            var observer = new this.PerformanceObserver(function (list) {
                for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {
                    var entry = _a[_i];
                    // `entry` is a PerformanceEntry instance.
                    callback(entry);
                }
            });
            // Start observing the entry types you care about.
            observer.observe({ entryTypes: [entryType] });
        };
        Api.getInstance = function () {
            if (apiInstance === undefined) {
                apiInstance = new Api(windowInstance);
            }
            return apiInstance;
        };
        return Api;
    }());
    function setupApi(window) {
        windowInstance = window;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function mergeStrings(part1, part2) {
        var sizeDiff = part1.length - part2.length;
        if (sizeDiff < 0 || sizeDiff > 1) {
            throw ERROR_FACTORY$3.create("invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */);
        }
        var resultArray = [];
        for (var i = 0; i < part1.length; i++) {
            resultArray.push(part1.charAt(i));
            if (part2.length > i) {
                resultArray.push(part2.charAt(i));
            }
        }
        return resultArray.join('');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var settingsServiceInstance;
    var SettingsService = /** @class */ (function () {
        function SettingsService() {
            // The variable which controls logging of automatic traces and HTTP/S network monitoring.
            this.instrumentationEnabled = true;
            // The variable which controls logging of custom traces.
            this.dataCollectionEnabled = true;
            // Configuration flags set through remote config.
            this.loggingEnabled = false;
            // Sampling rate between 0 and 1.
            this.tracesSamplingRate = 1;
            this.networkRequestsSamplingRate = 1;
            // Address of logging service.
            this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';
            // Performance event transport endpoint URL which should be compatible with proto3.
            // New Address for transport service, not configurable via Remote Config.
            this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');
            this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');
            // Source type for performance event logs.
            this.logSource = 462;
            // Flags which control per session logging of traces and network requests.
            this.logTraceAfterSampling = false;
            this.logNetworkAfterSampling = false;
            // TTL of config retrieved from remote config in hours.
            this.configTimeToLive = 12;
        }
        SettingsService.prototype.getAppId = function () {
            var appId = this.firebaseAppInstance &&
                this.firebaseAppInstance.options &&
                this.firebaseAppInstance.options.appId;
            if (!appId) {
                throw ERROR_FACTORY$3.create("no app id" /* NO_APP_ID */);
            }
            return appId;
        };
        SettingsService.prototype.getProjectId = function () {
            var projectId = this.firebaseAppInstance &&
                this.firebaseAppInstance.options &&
                this.firebaseAppInstance.options.projectId;
            if (!projectId) {
                throw ERROR_FACTORY$3.create("no project id" /* NO_PROJECT_ID */);
            }
            return projectId;
        };
        SettingsService.prototype.getApiKey = function () {
            var apiKey = this.firebaseAppInstance &&
                this.firebaseAppInstance.options &&
                this.firebaseAppInstance.options.apiKey;
            if (!apiKey) {
                throw ERROR_FACTORY$3.create("no api key" /* NO_API_KEY */);
            }
            return apiKey;
        };
        SettingsService.prototype.getFlTransportFullUrl = function () {
            return this.flTransportEndpointUrl.concat('?key=', this.transportKey);
        };
        SettingsService.getInstance = function () {
            if (settingsServiceInstance === undefined) {
                settingsServiceInstance = new SettingsService();
            }
            return settingsServiceInstance;
        };
        return SettingsService;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var iid;
    function getIidPromise() {
        var iidPromise = SettingsService.getInstance().installationsService.getId();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        iidPromise.then(function (iidVal) {
            iid = iidVal;
        });
        return iidPromise;
    }
    // This method should be used after the iid is retrieved by getIidPromise method.
    function getIid() {
        return iid;
    }
    function getAuthTokenPromise() {
        var authTokenPromise = SettingsService.getInstance().installationsService.getToken();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        authTokenPromise.then(function (authTokenVal) {
        });
        return authTokenPromise;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VisibilityState;
    (function (VisibilityState) {
        VisibilityState[VisibilityState["UNKNOWN"] = 0] = "UNKNOWN";
        VisibilityState[VisibilityState["VISIBLE"] = 1] = "VISIBLE";
        VisibilityState[VisibilityState["HIDDEN"] = 2] = "HIDDEN";
    })(VisibilityState || (VisibilityState = {}));
    var RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];
    var ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\w*$');
    var MAX_ATTRIBUTE_NAME_LENGTH = 40;
    var MAX_ATTRIBUTE_VALUE_LENGTH = 100;
    function getServiceWorkerStatus() {
        var navigator = Api.getInstance().navigator;
        if ('serviceWorker' in navigator) {
            if (navigator.serviceWorker.controller) {
                return 2 /* CONTROLLED */;
            }
            else {
                return 3 /* UNCONTROLLED */;
            }
        }
        else {
            return 1 /* UNSUPPORTED */;
        }
    }
    function getVisibilityState() {
        var document = Api.getInstance().document;
        var visibilityState = document.visibilityState;
        switch (visibilityState) {
            case 'visible':
                return VisibilityState.VISIBLE;
            case 'hidden':
                return VisibilityState.HIDDEN;
            default:
                return VisibilityState.UNKNOWN;
        }
    }
    function getEffectiveConnectionType() {
        var navigator = Api.getInstance().navigator;
        var navigatorConnection = navigator.connection;
        var effectiveType = navigatorConnection && navigatorConnection.effectiveType;
        switch (effectiveType) {
            case 'slow-2g':
                return 1 /* CONNECTION_SLOW_2G */;
            case '2g':
                return 2 /* CONNECTION_2G */;
            case '3g':
                return 3 /* CONNECTION_3G */;
            case '4g':
                return 4 /* CONNECTION_4G */;
            default:
                return 0 /* UNKNOWN */;
        }
    }
    function isValidCustomAttributeName(name) {
        if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {
            return false;
        }
        var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {
            return name.startsWith(prefix);
        });
        return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);
    }
    function isValidCustomAttributeValue(value) {
        return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var REMOTE_CONFIG_SDK_VERSION = '0.0.1';
    // These values will be used if the remote config object is successfully
    // retrieved, but the template does not have these fields.
    var DEFAULT_CONFIGS = {
        loggingEnabled: true
    };
    var FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';
    function getConfig(iid) {
        var config = getStoredConfig();
        if (config) {
            processConfig(config);
            return Promise.resolve();
        }
        return getRemoteConfig(iid)
            .then(processConfig)
            .then(function (config) { return storeConfig(config); }, 
        /** Do nothing for error, use defaults set in settings service. */
        function () { });
    }
    function getStoredConfig() {
        var localStorage = Api.getInstance().localStorage;
        if (!localStorage) {
            return;
        }
        var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
        if (!expiryString || !configValid(expiryString)) {
            return;
        }
        var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);
        if (!configStringified) {
            return;
        }
        try {
            var configResponse = JSON.parse(configStringified);
            return configResponse;
        }
        catch (_a) {
            return;
        }
    }
    function storeConfig(config) {
        var localStorage = Api.getInstance().localStorage;
        if (!config || !localStorage) {
            return;
        }
        localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
        localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() +
            SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));
    }
    var COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';
    function getRemoteConfig(iid) {
        // Perf needs auth token only to retrieve remote config.
        return getAuthTokenPromise()
            .then(function (authToken) {
            var projectId = SettingsService.getInstance().getProjectId();
            var configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/" + projectId + "/namespaces/fireperf:fetch?key=" + SettingsService.getInstance().getApiKey();
            var request = new Request(configEndPoint, {
                method: 'POST',
                headers: { Authorization: FIS_AUTH_PREFIX + " " + authToken },
                /* eslint-disable camelcase */
                body: JSON.stringify({
                    app_instance_id: iid,
                    app_instance_id_token: authToken,
                    app_id: SettingsService.getInstance().getAppId(),
                    app_version: SDK_VERSION$1,
                    sdk_version: REMOTE_CONFIG_SDK_VERSION
                })
                /* eslint-enable camelcase */
            });
            return fetch(request).then(function (response) {
                if (response.ok) {
                    return response.json();
                }
                // In case response is not ok. This will be caught by catch.
                throw ERROR_FACTORY$3.create("RC response not ok" /* RC_NOT_OK */);
            });
        })
            .catch(function () {
            consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
            return undefined;
        });
    }
    /**
     * Processes config coming either from calling RC or from local storage.
     * This method only runs if call is successful or config in storage
     * is valid.
     */
    function processConfig(config) {
        if (!config) {
            return config;
        }
        var settingsServiceInstance = SettingsService.getInstance();
        var entries = config.entries || {};
        if (entries.fpr_enabled !== undefined) {
            // TODO: Change the assignment of loggingEnabled once the received type is
            // known.
            settingsServiceInstance.loggingEnabled =
                String(entries.fpr_enabled) === 'true';
        }
        else {
            // Config retrieved successfully, but there is no fpr_enabled in template.
            // Use secondary configs value.
            settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
        }
        if (entries.fpr_log_source) {
            settingsServiceInstance.logSource = Number(entries.fpr_log_source);
        }
        if (entries.fpr_log_endpoint_url) {
            settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;
        }
        // Key from Remote Config has to be non-empty string, otherwsie use local value.
        if (entries.fpr_log_transport_key) {
            settingsServiceInstance.transportKey = entries.fpr_log_transport_key;
        }
        if (entries.fpr_vc_network_request_sampling_rate !== undefined) {
            settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
        }
        if (entries.fpr_vc_trace_sampling_rate !== undefined) {
            settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
        }
        // Set the per session trace and network logging flags.
        settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);
        settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);
        return config;
    }
    function configValid(expiry) {
        return Number(expiry) > Date.now();
    }
    function shouldLogAfterSampling(samplingRate) {
        return Math.random() <= samplingRate;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var initializationStatus = 1 /* notInitialized */;
    var initializationPromise;
    function getInitializationPromise() {
        initializationStatus = 2 /* initializationPending */;
        initializationPromise = initializationPromise || initializePerf();
        return initializationPromise;
    }
    function isPerfInitialized() {
        return initializationStatus === 3 /* initialized */;
    }
    function initializePerf() {
        return getDocumentReadyComplete()
            .then(function () { return getIidPromise(); })
            .then(function (iid) { return getConfig(iid); })
            .then(function () { return changeInitializationStatus(); }, function () { return changeInitializationStatus(); });
    }
    /**
     * Returns a promise which resolves whenever the document readystate is complete or
     * immediately if it is called after page load complete.
     */
    function getDocumentReadyComplete() {
        var document = Api.getInstance().document;
        return new Promise(function (resolve) {
            if (document && document.readyState !== 'complete') {
                var handler_1 = function () {
                    if (document.readyState === 'complete') {
                        document.removeEventListener('readystatechange', handler_1);
                        resolve();
                    }
                };
                document.addEventListener('readystatechange', handler_1);
            }
            else {
                resolve();
            }
        });
    }
    function changeInitializationStatus() {
        initializationStatus = 3 /* initialized */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_SEND_INTERVAL_MS = 10 * 1000;
    var INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;
    // If end point does not work, the call will be tried for these many times.
    var DEFAULT_REMAINING_TRIES = 3;
    var MAX_EVENT_COUNT_PER_REQUEST = 1000;
    var remainingTries = DEFAULT_REMAINING_TRIES;
    /* eslint-enable camelcase */
    var queue = [];
    var isTransportSetup = false;
    function setupTransportService() {
        if (!isTransportSetup) {
            processQueue(INITIAL_SEND_TIME_DELAY_MS);
            isTransportSetup = true;
        }
    }
    function processQueue(timeOffset) {
        setTimeout(function () {
            // If there is no remainingTries left, stop retrying.
            if (remainingTries === 0) {
                return;
            }
            // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.
            if (!queue.length) {
                return processQueue(DEFAULT_SEND_INTERVAL_MS);
            }
            dispatchQueueEvents();
        }, timeOffset);
    }
    function dispatchQueueEvents() {
        // Extract events up to the maximum cap of single logRequest from top of "official queue".
        // The staged events will be used for current logRequest attempt, remaining events will be kept
        // for next attempt.
        var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);
        /* eslint-disable camelcase */
        // We will pass the JSON serialized event to the backend.
        var log_event = staged.map(function (evt) { return ({
            source_extension_json_proto3: evt.message,
            event_time_ms: String(evt.eventTime)
        }); });
        var data = {
            request_time_ms: String(Date.now()),
            client_info: {
                client_type: 1,
                js_client_info: {}
            },
            log_source: SettingsService.getInstance().logSource,
            log_event: log_event
        };
        /* eslint-enable camelcase */
        sendEventsToFl(data, staged).catch(function () {
            // If the request fails for some reason, add the events that were attempted
            // back to the primary queue to retry later.
            queue = __spreadArrays(staged, queue);
            remainingTries--;
            consoleLogger.info("Tries left: " + remainingTries + ".");
            processQueue(DEFAULT_SEND_INTERVAL_MS);
        });
    }
    function sendEventsToFl(data, staged) {
        return postToFlEndpoint(data)
            .then(function (res) {
            if (!res.ok) {
                consoleLogger.info('Call to Firebase backend failed.');
            }
            return res.json();
        })
            .then(function (res) {
            // Find the next call wait time from the response.
            var transportWait = Number(res.nextRequestWaitMillis);
            var requestOffset = DEFAULT_SEND_INTERVAL_MS;
            if (!isNaN(transportWait)) {
                requestOffset = Math.max(transportWait, requestOffset);
            }
            // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.
            // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.
            var logResponseDetails = res.logResponseDetails;
            if (Array.isArray(logResponseDetails) &&
                logResponseDetails.length > 0 &&
                logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {
                queue = __spreadArrays(staged, queue);
                consoleLogger.info("Retry transport request later.");
            }
            remainingTries = DEFAULT_REMAINING_TRIES;
            // Schedule the next process.
            processQueue(requestOffset);
        });
    }
    function postToFlEndpoint(data) {
        var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
        return fetch(flTransportFullUrl, {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }
    function addToQueue(evt) {
        if (!evt.eventTime || !evt.message) {
            throw ERROR_FACTORY$3.create("invalid cc log" /* INVALID_CC_LOG */);
        }
        // Add the new event to the queue.
        queue = __spreadArrays(queue, [evt]);
    }
    /** Log handler for cc service to send the performance logs to the server. */
    function transportHandler(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    serializer) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = serializer.apply(void 0, args);
            addToQueue({
                message: message,
                eventTime: Date.now()
            });
        };
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /* eslint-enble camelcase */
    var logger$2;
    // This method is not called before initialization.
    function sendLog(resource, resourceType) {
        if (!logger$2) {
            logger$2 = transportHandler(serializer);
        }
        logger$2(resource, resourceType);
    }
    function logTrace(trace) {
        var settingsService = SettingsService.getInstance();
        // Do not log if trace is auto generated and instrumentation is disabled.
        if (!settingsService.instrumentationEnabled && trace.isAuto) {
            return;
        }
        // Do not log if trace is custom and data collection is disabled.
        if (!settingsService.dataCollectionEnabled && !trace.isAuto) {
            return;
        }
        // Do not log if required apis are not available.
        if (!Api.getInstance().requiredApisAvailable()) {
            return;
        }
        // Only log the page load auto traces if page is visible.
        if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {
            return;
        }
        if (isPerfInitialized()) {
            sendTraceLog(trace);
        }
        else {
            // Custom traces can be used before the initialization but logging
            // should wait until after.
            getInitializationPromise().then(function () { return sendTraceLog(trace); }, function () { return sendTraceLog(trace); });
        }
    }
    function sendTraceLog(trace) {
        if (!getIid()) {
            return;
        }
        var settingsService = SettingsService.getInstance();
        if (!settingsService.loggingEnabled ||
            !settingsService.logTraceAfterSampling) {
            return;
        }
        setTimeout(function () { return sendLog(trace, 1 /* Trace */); }, 0);
    }
    function logNetworkRequest(networkRequest) {
        var settingsService = SettingsService.getInstance();
        // Do not log network requests if instrumentation is disabled.
        if (!settingsService.instrumentationEnabled) {
            return;
        }
        // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.
        // Need to blacklist both old and new endpoints to avoid migration gap.
        var networkRequestUrl = networkRequest.url;
        // Blacklist old log endpoint and new transport endpoint.
        // Because Performance SDK doesn't instrument requests sent from SDK itself.
        var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];
        var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];
        if (networkRequestUrl === logEndpointUrl ||
            networkRequestUrl === flEndpointUrl) {
            return;
        }
        if (!settingsService.loggingEnabled ||
            !settingsService.logNetworkAfterSampling) {
            return;
        }
        setTimeout(function () { return sendLog(networkRequest, 0 /* NetworkRequest */); }, 0);
    }
    function serializer(resource, resourceType) {
        if (resourceType === 0 /* NetworkRequest */) {
            return serializeNetworkRequest(resource);
        }
        return serializeTrace(resource);
    }
    function serializeNetworkRequest(networkRequest) {
        var networkRequestMetric = {
            url: networkRequest.url,
            http_method: networkRequest.httpMethod || 0,
            http_response_code: 200,
            response_payload_bytes: networkRequest.responsePayloadBytes,
            client_start_time_us: networkRequest.startTimeUs,
            time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
            time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
        };
        var perfMetric = {
            application_info: getApplicationInfo(),
            network_request_metric: networkRequestMetric
        };
        return JSON.stringify(perfMetric);
    }
    function serializeTrace(trace) {
        var traceMetric = {
            name: trace.name,
            is_auto: trace.isAuto,
            client_start_time_us: trace.startTimeUs,
            duration_us: trace.durationUs
        };
        if (Object.keys(trace.counters).length !== 0) {
            traceMetric.counters = trace.counters;
        }
        var customAttributes = trace.getAttributes();
        if (Object.keys(customAttributes).length !== 0) {
            traceMetric.custom_attributes = customAttributes;
        }
        var perfMetric = {
            application_info: getApplicationInfo(),
            trace_metric: traceMetric
        };
        return JSON.stringify(perfMetric);
    }
    function getApplicationInfo() {
        return {
            google_app_id: SettingsService.getInstance().getAppId(),
            app_instance_id: getIid(),
            web_app_info: {
                sdk_version: SDK_VERSION$1,
                page_url: Api.getInstance().getUrl(),
                service_worker_status: getServiceWorkerStatus(),
                visibility_state: getVisibilityState(),
                effective_connection_type: getEffectiveConnectionType()
            },
            application_process_state: 0
        };
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_METRIC_NAME_LENGTH = 100;
    var RESERVED_AUTO_PREFIX = '_';
    var oobMetrics = [
        FIRST_PAINT_COUNTER_NAME,
        FIRST_CONTENTFUL_PAINT_COUNTER_NAME,
        FIRST_INPUT_DELAY_COUNTER_NAME
    ];
    /**
     * Returns true if the metric is custom and does not start with reserved prefix, or if
     * the metric is one of out of the box page load trace metrics.
     */
    function isValidMetricName(name, traceName) {
        if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {
            return false;
        }
        return ((traceName &&
            traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&
            oobMetrics.indexOf(name) > -1) ||
            !name.startsWith(RESERVED_AUTO_PREFIX));
    }
    /**
     * Converts the provided value to an integer value to be used in case of a metric.
     * @param providedValue Provided number value of the metric that needs to be converted to an integer.
     *
     * @returns Converted integer number to be set for the metric.
     */
    function convertMetricValueToInteger(providedValue) {
        var valueAsInteger = Math.floor(providedValue);
        if (valueAsInteger < providedValue) {
            consoleLogger.info("Metric value should be an Integer, setting the value as : " + valueAsInteger + ".");
        }
        return valueAsInteger;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Trace = /** @class */ (function () {
        /**
         * @param name The name of the trace.
         * @param isAuto If the trace is auto-instrumented.
         * @param traceMeasureName The name of the measure marker in user timing specification. This field
         * is only set when the trace is built for logging when the user directly uses the user timing
         * api (performance.mark and performance.measure).
         */
        function Trace(name, isAuto, traceMeasureName) {
            if (isAuto === void 0) { isAuto = false; }
            this.name = name;
            this.isAuto = isAuto;
            this.state = 1 /* UNINITIALIZED */;
            this.customAttributes = {};
            this.counters = {};
            this.api = Api.getInstance();
            this.randomId = Math.floor(Math.random() * 1000000);
            if (!this.isAuto) {
                this.traceStartMark = TRACE_START_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
                this.traceStopMark = TRACE_STOP_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
                this.traceMeasure =
                    traceMeasureName ||
                        TRACE_MEASURE_PREFIX + "-" + this.randomId + "-" + this.name;
                if (traceMeasureName) {
                    // For the case of direct user timing traces, no start stop will happen. The measure object
                    // is already available.
                    this.calculateTraceMetrics();
                }
            }
        }
        /**
         * Starts a trace. The measurement of the duration starts at this point.
         */
        Trace.prototype.start = function () {
            if (this.state !== 1 /* UNINITIALIZED */) {
                throw ERROR_FACTORY$3.create("trace started" /* TRACE_STARTED_BEFORE */, {
                    traceName: this.name
                });
            }
            this.api.mark(this.traceStartMark);
            this.state = 2 /* RUNNING */;
        };
        /**
         * Stops the trace. The measurement of the duration of the trace stops at this point and trace
         * is logged.
         */
        Trace.prototype.stop = function () {
            if (this.state !== 2 /* RUNNING */) {
                throw ERROR_FACTORY$3.create("trace stopped" /* TRACE_STOPPED_BEFORE */, {
                    traceName: this.name
                });
            }
            this.state = 3 /* TERMINATED */;
            this.api.mark(this.traceStopMark);
            this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
            this.calculateTraceMetrics();
            logTrace(this);
        };
        /**
         * Records a trace with predetermined values. If this method is used a trace is created and logged
         * directly. No need to use start and stop methods.
         * @param startTime Trace start time since epoch in millisec
         * @param duration The duraction of the trace in millisec
         * @param options An object which can optionally hold maps of custom metrics and custom attributes
         */
        Trace.prototype.record = function (startTime, duration, options) {
            if (startTime <= 0) {
                throw ERROR_FACTORY$3.create("nonpositive trace startTime" /* NONPOSITIVE_TRACE_START_TIME */, {
                    traceName: this.name
                });
            }
            if (duration <= 0) {
                throw ERROR_FACTORY$3.create("nonpositive trace duration" /* NONPOSITIVE_TRACE_DURATION */, {
                    traceName: this.name
                });
            }
            this.durationUs = Math.floor(duration * 1000);
            this.startTimeUs = Math.floor(startTime * 1000);
            if (options && options.attributes) {
                this.customAttributes = __assign({}, options.attributes);
            }
            if (options && options.metrics) {
                for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {
                    var metric = _a[_i];
                    if (!isNaN(Number(options.metrics[metric]))) {
                        this.counters[metric] = Number(Math.floor(options.metrics[metric]));
                    }
                }
            }
            logTrace(this);
        };
        /**
         * Increments a custom metric by a certain number or 1 if number not specified. Will create a new
         * custom metric if one with the given name does not exist. The value will be floored down to an
         * integer.
         * @param counter Name of the custom metric
         * @param numAsInteger Increment by value
         */
        Trace.prototype.incrementMetric = function (counter, numAsInteger) {
            if (numAsInteger === void 0) { numAsInteger = 1; }
            if (this.counters[counter] === undefined) {
                this.putMetric(counter, numAsInteger);
            }
            else {
                this.putMetric(counter, this.counters[counter] + numAsInteger);
            }
        };
        /**
         * Sets a custom metric to a specified value. Will create a new custom metric if one with the
         * given name does not exist. The value will be floored down to an integer.
         * @param counter Name of the custom metric
         * @param numAsInteger Set custom metric to this value
         */
        Trace.prototype.putMetric = function (counter, numAsInteger) {
            if (isValidMetricName(counter, this.name)) {
                this.counters[counter] = convertMetricValueToInteger(numAsInteger);
            }
            else {
                throw ERROR_FACTORY$3.create("invalid custom metric name" /* INVALID_CUSTOM_METRIC_NAME */, {
                    customMetricName: counter
                });
            }
        };
        /**
         * Returns the value of the custom metric by that name. If a custom metric with that name does
         * not exist will return zero.
         * @param counter
         */
        Trace.prototype.getMetric = function (counter) {
            return this.counters[counter] || 0;
        };
        /**
         * Sets a custom attribute of a trace to a certain value.
         * @param attr
         * @param value
         */
        Trace.prototype.putAttribute = function (attr, value) {
            var isValidName = isValidCustomAttributeName(attr);
            var isValidValue = isValidCustomAttributeValue(value);
            if (isValidName && isValidValue) {
                this.customAttributes[attr] = value;
                return;
            }
            // Throw appropriate error when the attribute name or value is invalid.
            if (!isValidName) {
                throw ERROR_FACTORY$3.create("invalid attribute name" /* INVALID_ATTRIBUTE_NAME */, {
                    attributeName: attr
                });
            }
            if (!isValidValue) {
                throw ERROR_FACTORY$3.create("invalid attribute value" /* INVALID_ATTRIBUTE_VALUE */, {
                    attributeValue: value
                });
            }
        };
        /**
         * Retrieves the value a custom attribute of a trace is set to.
         * @param attr
         */
        Trace.prototype.getAttribute = function (attr) {
            return this.customAttributes[attr];
        };
        Trace.prototype.removeAttribute = function (attr) {
            if (this.customAttributes[attr] === undefined) {
                return;
            }
            delete this.customAttributes[attr];
        };
        Trace.prototype.getAttributes = function () {
            return __assign({}, this.customAttributes);
        };
        Trace.prototype.setStartTime = function (startTime) {
            this.startTimeUs = startTime;
        };
        Trace.prototype.setDuration = function (duration) {
            this.durationUs = duration;
        };
        /**
         * Calculates and assigns the duration and start time of the trace using the measure performance
         * entry.
         */
        Trace.prototype.calculateTraceMetrics = function () {
            var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
            var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];
            if (perfMeasureEntry) {
                this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);
                this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);
            }
        };
        /**
         * @param navigationTimings A single element array which contains the navigationTIming object of
         * the page load
         * @param paintTimings A array which contains paintTiming object of the page load
         * @param firstInputDelay First input delay in millisec
         */
        Trace.createOobTrace = function (navigationTimings, paintTimings, firstInputDelay) {
            var route = Api.getInstance().getUrl();
            if (!route) {
                return;
            }
            var trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
            var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);
            trace.setStartTime(timeOriginUs);
            // navigationTimings includes only one element.
            if (navigationTimings && navigationTimings[0]) {
                trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));
                trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));
                trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));
                trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));
            }
            var FIRST_PAINT = 'first-paint';
            var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';
            if (paintTimings) {
                var firstPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_PAINT; });
                if (firstPaint && firstPaint.startTime) {
                    trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));
                }
                var firstContentfulPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_CONTENTFUL_PAINT; });
                if (firstContentfulPaint && firstContentfulPaint.startTime) {
                    trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));
                }
                if (firstInputDelay) {
                    trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));
                }
            }
            logTrace(trace);
        };
        Trace.createUserTimingTrace = function (measureName) {
            var trace = new Trace(measureName, false, measureName);
            logTrace(trace);
        };
        return Trace;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createNetworkRequestEntry(entry) {
        var performanceEntry = entry;
        if (!performanceEntry || performanceEntry.responseStart === undefined) {
            return;
        }
        var timeOrigin = Api.getInstance().getTimeOrigin();
        var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);
        var timeToResponseInitiatedUs = performanceEntry.responseStart
            ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000)
            : undefined;
        var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);
        // Remove the query params from logged network request url.
        var url = performanceEntry.name && performanceEntry.name.split('?')[0];
        var networkRequest = {
            url: url,
            responsePayloadBytes: performanceEntry.transferSize,
            startTimeUs: startTimeUs,
            timeToResponseInitiatedUs: timeToResponseInitiatedUs,
            timeToResponseCompletedUs: timeToResponseCompletedUs
        };
        logNetworkRequest(networkRequest);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FID_WAIT_TIME_MS = 5000;
    function setupOobResources() {
        // Do not initialize unless iid is available.
        if (!getIid()) {
            return;
        }
        // The load event might not have fired yet, and that means performance navigation timing
        // object has a duration of 0. The setup should run after all current tasks in js queue.
        setTimeout(function () { return setupOobTraces(); }, 0);
        setTimeout(function () { return setupNetworkRequests(); }, 0);
        setTimeout(function () { return setupUserTimingTraces(); }, 0);
    }
    function setupNetworkRequests() {
        var api = Api.getInstance();
        var resources = api.getEntriesByType('resource');
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            createNetworkRequestEntry(resource);
        }
        api.setupObserver('resource', createNetworkRequestEntry);
    }
    function setupOobTraces() {
        var api = Api.getInstance();
        var navigationTimings = api.getEntriesByType('navigation');
        var paintTimings = api.getEntriesByType('paint');
        // If First Input Desly polyfill is added to the page, report the fid value.
        // https://github.com/GoogleChromeLabs/first-input-delay
        if (api.onFirstInputDelay) {
            // If the fid call back is not called for certain time, continue without it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var timeoutId_1 = setTimeout(function () {
                Trace.createOobTrace(navigationTimings, paintTimings);
                timeoutId_1 = undefined;
            }, FID_WAIT_TIME_MS);
            api.onFirstInputDelay(function (fid) {
                if (timeoutId_1) {
                    clearTimeout(timeoutId_1);
                    Trace.createOobTrace(navigationTimings, paintTimings, fid);
                }
            });
        }
        else {
            Trace.createOobTrace(navigationTimings, paintTimings);
        }
    }
    function setupUserTimingTraces() {
        var api = Api.getInstance();
        // Run through the measure performance entries collected up to this point.
        var measures = api.getEntriesByType('measure');
        for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {
            var measure = measures_1[_i];
            createUserTimingTrace(measure);
        }
        // Setup an observer to capture the measures from this point on.
        api.setupObserver('measure', createUserTimingTrace);
    }
    function createUserTimingTrace(measure) {
        var measureName = measure.name;
        // Do not create a trace, if the user timing marks and measures are created by the sdk itself.
        if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===
            TRACE_MEASURE_PREFIX) {
            return;
        }
        Trace.createUserTimingTrace(measureName);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PerformanceController = /** @class */ (function () {
        function PerformanceController(app) {
            this.app = app;
            if (Api.getInstance().requiredApisAvailable()) {
                validateIndexedDBOpenable()
                    .then(function (isAvailable) {
                    if (isAvailable) {
                        setupTransportService();
                        getInitializationPromise().then(setupOobResources, setupOobResources);
                    }
                })
                    .catch(function (error) {
                    consoleLogger.info("Environment doesn't support IndexedDB: " + error);
                });
            }
        }
        PerformanceController.prototype.trace = function (name) {
            return new Trace(name);
        };
        Object.defineProperty(PerformanceController.prototype, "instrumentationEnabled", {
            get: function () {
                return SettingsService.getInstance().instrumentationEnabled;
            },
            set: function (val) {
                SettingsService.getInstance().instrumentationEnabled = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PerformanceController.prototype, "dataCollectionEnabled", {
            get: function () {
                return SettingsService.getInstance().dataCollectionEnabled;
            },
            set: function (val) {
                SettingsService.getInstance().dataCollectionEnabled = val;
            },
            enumerable: false,
            configurable: true
        });
        return PerformanceController;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME$2 = '[DEFAULT]';
    function registerPerformance(instance) {
        var factoryMethod = function (app, installations) {
            if (app.name !== DEFAULT_ENTRY_NAME$2) {
                throw ERROR_FACTORY$3.create("FB not default" /* FB_NOT_DEFAULT */);
            }
            if (typeof window === 'undefined') {
                throw ERROR_FACTORY$3.create("no window" /* NO_WINDOW */);
            }
            setupApi(window);
            SettingsService.getInstance().firebaseAppInstance = app;
            SettingsService.getInstance().installationsService = installations;
            return new PerformanceController(app);
        };
        // Register performance with firebase-app.
        instance.INTERNAL.registerComponent(new Component('performance', function (container) {
            /* Dependencies */
            // getImmediate for FirebaseApp will always succeed
            var app = container.getProvider('app').getImmediate();
            // The following call will always succeed because perf has `import '@firebase/installations'`
            var installations = container
                .getProvider('installations')
                .getImmediate();
            return factoryMethod(app, installations);
        }, "PUBLIC" /* PUBLIC */));
        instance.registerVersion(name$h, version$6);
    }
    registerPerformance(firebase$1);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Key to attach FID to in gtag params.
    var GA_FID_KEY = 'firebase_id';
    var ORIGIN_KEY = 'origin';
    var FETCH_TIMEOUT_MILLIS = 60 * 1000;
    var DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
    var GTAG_URL = 'https://www.googletagmanager.com/gtag/js';
    var GtagCommand;
    (function (GtagCommand) {
        GtagCommand["EVENT"] = "event";
        GtagCommand["SET"] = "set";
        GtagCommand["CONFIG"] = "config";
    })(GtagCommand || (GtagCommand = {}));
    /*
     * Officially recommended event names for gtag.js
     * Any other string is also allowed.
     */
    var EventName;
    (function (EventName) {
        EventName["ADD_SHIPPING_INFO"] = "add_shipping_info";
        EventName["ADD_PAYMENT_INFO"] = "add_payment_info";
        EventName["ADD_TO_CART"] = "add_to_cart";
        EventName["ADD_TO_WISHLIST"] = "add_to_wishlist";
        EventName["BEGIN_CHECKOUT"] = "begin_checkout";
        /** @deprecated */
        EventName["CHECKOUT_PROGRESS"] = "checkout_progress";
        EventName["EXCEPTION"] = "exception";
        EventName["GENERATE_LEAD"] = "generate_lead";
        EventName["LOGIN"] = "login";
        EventName["PAGE_VIEW"] = "page_view";
        EventName["PURCHASE"] = "purchase";
        EventName["REFUND"] = "refund";
        EventName["REMOVE_FROM_CART"] = "remove_from_cart";
        EventName["SCREEN_VIEW"] = "screen_view";
        EventName["SEARCH"] = "search";
        EventName["SELECT_CONTENT"] = "select_content";
        EventName["SELECT_ITEM"] = "select_item";
        EventName["SELECT_PROMOTION"] = "select_promotion";
        /** @deprecated */
        EventName["SET_CHECKOUT_OPTION"] = "set_checkout_option";
        EventName["SHARE"] = "share";
        EventName["SIGN_UP"] = "sign_up";
        EventName["TIMING_COMPLETE"] = "timing_complete";
        EventName["VIEW_CART"] = "view_cart";
        EventName["VIEW_ITEM"] = "view_item";
        EventName["VIEW_ITEM_LIST"] = "view_item_list";
        EventName["VIEW_PROMOTION"] = "view_promotion";
        EventName["VIEW_SEARCH_RESULTS"] = "view_search_results";
    })(EventName || (EventName = {}));

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Logs an analytics event through the Firebase SDK.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param eventName Google Analytics event name, choose from standard list or use a custom string.
     * @param eventParams Analytics event parameters.
     */
    function logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction(GtagCommand.EVENT, eventName, eventParams);
                        return [2 /*return*/];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        params = __assign(__assign({}, eventParams), { 'send_to': measurementId });
                        gtagFunction(GtagCommand.EVENT, eventName, params);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set screen_name parameter for this Google Analytics ID.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param screenName Screen name string to set.
     */
    function setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction(GtagCommand.SET, { 'screen_name': screenName });
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        gtagFunction(GtagCommand.CONFIG, measurementId, {
                            update: true,
                            'screen_name': screenName
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set user_id parameter for this Google Analytics ID.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param id User ID string to set
     */
    function setUserId(gtagFunction, initializationPromise, id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        gtagFunction(GtagCommand.SET, { 'user_id': id });
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _a.sent();
                        gtagFunction(GtagCommand.CONFIG, measurementId, {
                            update: true,
                            'user_id': id
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set all other user properties other than user_id and screen_name.
     *
     * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
     * @param properties Map of user properties to set
     */
    function setUserProperties(gtagFunction, initializationPromise, properties, options) {
        return __awaiter(this, void 0, void 0, function () {
            var flatProperties, _i, _a, key, measurementId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(options && options.global)) return [3 /*break*/, 1];
                        flatProperties = {};
                        for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {
                            key = _a[_i];
                            // use dot notation for merge behavior in gtag.js
                            flatProperties["user_properties." + key] = properties[key];
                        }
                        gtagFunction(GtagCommand.SET, flatProperties);
                        return [2 /*return*/, Promise.resolve()];
                    case 1: return [4 /*yield*/, initializationPromise];
                    case 2:
                        measurementId = _b.sent();
                        gtagFunction(GtagCommand.CONFIG, measurementId, {
                            update: true,
                            'user_properties': properties
                        });
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Set whether collection is enabled for this ID.
     *
     * @param enabled If true, collection is enabled for this ID.
     */
    function setAnalyticsCollectionEnabled(initializationPromise, enabled) {
        return __awaiter(this, void 0, void 0, function () {
            var measurementId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initializationPromise];
                    case 1:
                        measurementId = _a.sent();
                        window["ga-disable-" + measurementId] = !enabled;
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$3 = new Logger('@firebase/analytics');

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Inserts gtag script tag into the page to asynchronously download gtag.
     * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
     */
    function insertScriptTag(dataLayerName) {
        var script = document.createElement('script');
        // We are not providing an analyticsId in the URL because it would trigger a `page_view`
        // without fid. We will initialize ga-id using gtag (config) command together with fid.
        script.src = GTAG_URL + "?l=" + dataLayerName;
        script.async = true;
        document.head.appendChild(script);
    }
    /**
     * Get reference to, or create, global datalayer.
     * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
     */
    function getOrCreateDataLayer(dataLayerName) {
        // Check for existing dataLayer and create if needed.
        var dataLayer = [];
        if (Array.isArray(window[dataLayerName])) {
            dataLayer = window[dataLayerName];
        }
        else {
            window[dataLayerName] = dataLayer;
        }
        return dataLayer;
    }
    /**
     * Wrapped gtag logic when gtag is called with 'config' command.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     * @param measurementId GA Measurement ID to set config for.
     * @param gtagParams Gtag config params to set.
     */
    function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
        return __awaiter(this, void 0, void 0, function () {
            var correspondingAppId, dynamicConfigResults, foundConfig, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        correspondingAppId = measurementIdToAppId[measurementId];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        if (!correspondingAppId) return [3 /*break*/, 3];
                        return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 3: return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];
                    case 4:
                        dynamicConfigResults = _a.sent();
                        foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === measurementId; });
                        if (!foundConfig) return [3 /*break*/, 6];
                        return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        e_1 = _a.sent();
                        logger$3.error(e_1);
                        return [3 /*break*/, 8];
                    case 8:
                        gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Wrapped gtag logic when gtag is called with 'event' command.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementId GA Measurement ID to log event to.
     * @param gtagParams Params to log with this event.
     */
    function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
        return __awaiter(this, void 0, void 0, function () {
            var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        initializationPromisesToWaitFor = [];
                        if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];
                        gaSendToList = gtagParams['send_to'];
                        // Make it an array if is isn't, so it can be dealt with the same way.
                        if (!Array.isArray(gaSendToList)) {
                            gaSendToList = [gaSendToList];
                        }
                        return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];
                    case 1:
                        dynamicConfigResults = _a.sent();
                        _loop_1 = function (sendToId) {
                            // Any fetched dynamic measurement ID that matches this 'send_to' ID
                            var foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === sendToId; });
                            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];
                            if (initializationPromise) {
                                initializationPromisesToWaitFor.push(initializationPromise);
                            }
                            else {
                                // Found an item in 'send_to' that is not associated
                                // directly with an FID, possibly a group.  Empty this array,
                                // exit the loop early, and let it get populated below.
                                initializationPromisesToWaitFor = [];
                                return "break";
                            }
                        };
                        for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {
                            sendToId = gaSendToList_1[_i];
                            state_1 = _loop_1(sendToId);
                            if (state_1 === "break")
                                break;
                        }
                        _a.label = 2;
                    case 2:
                        // This will be unpopulated if there was no 'send_to' field , or
                        // if not all entries in the 'send_to' field could be mapped to
                        // a FID. In these cases, wait on all pending initialization promises.
                        if (initializationPromisesToWaitFor.length === 0) {
                            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);
                        }
                        // Run core gtag function with args after all relevant initialization
                        // promises have been resolved.
                        return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];
                    case 3:
                        // Run core gtag function with args after all relevant initialization
                        // promises have been resolved.
                        _a.sent();
                        // Workaround for http://b/141370449 - third argument cannot be undefined.
                        gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        logger$3.error(e_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Wraps a standard gtag function with extra code to wait for completion of
     * relevant initialization promises before sending requests.
     *
     * @param gtagCore Basic gtag function that just appends to dataLayer.
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     */
    function wrapGtag(gtagCore, 
    /**
     * Allows wrapped gtag calls to wait on whichever intialization promises are required,
     * depending on the contents of the gtag params' `send_to` field, if any.
     */
    initializationPromisesMap, 
    /**
     * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
     * before determining what initialization promises (which include FIDs) to wait for.
     */
    dynamicConfigPromisesList, 
    /**
     * Wrapped gtag config calls can narrow down which initialization promise (with FID)
     * to wait for if the measurementId is already fetched, by getting the corresponding appId,
     * which is the key for the initialization promises map.
     */
    measurementIdToAppId) {
        /**
         * Wrapper around gtag that ensures FID is sent with gtag calls.
         * @param command Gtag command type.
         * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
         * @param gtagParams Params if event is EVENT/CONFIG.
         */
        function gtagWrapper(command, idOrNameOrParams, gtagParams) {
            return __awaiter(this, void 0, void 0, function () {
                var e_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 6, , 7]);
                            if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];
                            // If EVENT, second arg must be measurementId.
                            return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];
                        case 1:
                            // If EVENT, second arg must be measurementId.
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 2:
                            if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];
                            // If CONFIG, second arg must be measurementId.
                            return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];
                        case 3:
                            // If CONFIG, second arg must be measurementId.
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            // If SET, second arg must be params.
                            gtagCore(GtagCommand.SET, idOrNameOrParams);
                            _a.label = 5;
                        case 5: return [3 /*break*/, 7];
                        case 6:
                            e_3 = _a.sent();
                            logger$3.error(e_3);
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        }
        return gtagWrapper;
    }
    /**
     * Creates global gtag function or wraps existing one if found.
     * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
     * 'event' calls that belong to the GAID associated with this Firebase instance.
     *
     * @param initializationPromisesMap Map of appIds to their initialization promises.
     * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
     * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
     * @param dataLayerName Name of global GA datalayer array.
     * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
     */
    function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
        // Create a basic core gtag function
        var gtagCore = function () {
            var _args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _args[_i] = arguments[_i];
            }
            // Must push IArguments object, not an array.
            window[dataLayerName].push(arguments);
        };
        // Replace it with existing one if found
        if (window[gtagFunctionName] &&
            typeof window[gtagFunctionName] === 'function') {
            // @ts-ignore
            gtagCore = window[gtagFunctionName];
        }
        window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);
        return {
            gtagCore: gtagCore,
            wrappedGtag: window[gtagFunctionName]
        };
    }
    /**
     * Returns first script tag in DOM matching our gtag url pattern.
     */
    function findGtagScriptOnPage() {
        var scriptTags = window.document.getElementsByTagName('script');
        for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {
            var tag = _a[_i];
            if (tag.src && tag.src.includes(GTAG_URL)) {
                return tag;
            }
        }
        return null;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$6;
    var ERRORS$1 = (_a$6 = {},
        _a$6["already-exists" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' +
            ' already exists. ' +
            'Only one Firebase Analytics instance can be created for each appId.',
        _a$6["already-initialized" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +
            'settings() must be called before initializing any Analytics instance' +
            'or it will have no effect.',
        _a$6["interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
        _a$6["invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' +
            'Wrap initialization of analytics in analytics.isSupported() ' +
            'to prevent initialization in unsupported environments. Details: {$errorInfo}',
        _a$6["indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' +
            'Wrap initialization of analytics in analytics.isSupported() ' +
            'to prevent initialization in unsupported environments. Details: {$errorInfo}',
        _a$6["fetch-throttle" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +
            ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
        _a$6["config-fetch-failed" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
        _a$6["no-api-key" /* NO_API_KEY */] = 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
            'contain a valid API key.',
        _a$6["no-app-id" /* NO_APP_ID */] = 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
            'contain a valid app ID.',
        _a$6);
    var ERROR_FACTORY$4 = new ErrorFactory('analytics', 'Analytics', ERRORS$1);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Backoff factor for 503 errors, which we want to be conservative about
     * to avoid overloading servers. Each retry interval will be
     * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
     * will be ~30 seconds (with fuzzing).
     */
    var LONG_RETRY_FACTOR = 30;
    /**
     * Base wait interval to multiplied by backoffFactor^backoffCount.
     */
    var BASE_INTERVAL_MILLIS = 1000;
    /**
     * Stubbable retry data storage class.
     */
    var RetryData = /** @class */ (function () {
        function RetryData(throttleMetadata, intervalMillis) {
            if (throttleMetadata === void 0) { throttleMetadata = {}; }
            if (intervalMillis === void 0) { intervalMillis = BASE_INTERVAL_MILLIS; }
            this.throttleMetadata = throttleMetadata;
            this.intervalMillis = intervalMillis;
        }
        RetryData.prototype.getThrottleMetadata = function (appId) {
            return this.throttleMetadata[appId];
        };
        RetryData.prototype.setThrottleMetadata = function (appId, metadata) {
            this.throttleMetadata[appId] = metadata;
        };
        RetryData.prototype.deleteThrottleMetadata = function (appId) {
            delete this.throttleMetadata[appId];
        };
        return RetryData;
    }());
    var defaultRetryData = new RetryData();
    /**
     * Set GET request headers.
     * @param apiKey App API key.
     */
    function getHeaders$2(apiKey) {
        return new Headers({
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    /**
     * Fetches dynamic config from backend.
     * @param app Firebase app to fetch config for.
     */
    function fetchDynamicConfig(appFields) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        appId = appFields.appId, apiKey = appFields.apiKey;
                        request = {
                            method: 'GET',
                            headers: getHeaders$2(apiKey)
                        };
                        appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);
                        return [4 /*yield*/, fetch(appUrl, request)];
                    case 1:
                        response = _b.sent();
                        if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];
                        errorMessage = '';
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, response.json()];
                    case 3:
                        jsonResponse = (_b.sent());
                        if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {
                            errorMessage = jsonResponse.error.message;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 5: throw ERROR_FACTORY$4.create("config-fetch-failed" /* CONFIG_FETCH_FAILED */, {
                        httpStatus: response.status,
                        responseMessage: errorMessage
                    });
                    case 6: return [2 /*return*/, response.json()];
                }
            });
        });
    }
    /**
     * Fetches dynamic config from backend, retrying if failed.
     * @param app Firebase app to fetch config for.
     */
    function fetchDynamicConfigWithRetry(app, 
    // retryData and timeoutMillis are parameterized to allow passing a different value for testing.
    retryData, timeoutMillis) {
        if (retryData === void 0) { retryData = defaultRetryData; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, appId, apiKey, measurementId, throttleMetadata, signal;
            var _this = this;
            return __generator(this, function (_b) {
                _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;
                if (!appId) {
                    throw ERROR_FACTORY$4.create("no-app-id" /* NO_APP_ID */);
                }
                if (!apiKey) {
                    if (measurementId) {
                        return [2 /*return*/, {
                                measurementId: measurementId,
                                appId: appId
                            }];
                    }
                    throw ERROR_FACTORY$4.create("no-api-key" /* NO_API_KEY */);
                }
                throttleMetadata = retryData.getThrottleMetadata(appId) || {
                    backoffCount: 0,
                    throttleEndTimeMillis: Date.now()
                };
                signal = new AnalyticsAbortSignal();
                setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
                        signal.abort();
                        return [2 /*return*/];
                    });
                }); }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
                return [2 /*return*/, attemptFetchDynamicConfigWithRetry({ appId: appId, apiKey: apiKey, measurementId: measurementId }, throttleMetadata, signal, retryData)];
            });
        });
    }
    /**
     * Runs one retry attempt.
     * @param appFields Necessary app config fields.
     * @param throttleMetadata Ongoing metadata to determine throttling times.
     * @param signal Abort signal.
     */
    function attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing
    ) {
        var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;
        if (retryData === void 0) { retryData = defaultRetryData; }
        return __awaiter(this, void 0, void 0, function () {
            var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        appId = appFields.appId, measurementId = appFields.measurementId;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _b.sent();
                        if (measurementId) {
                            logger$3.warn("Timed out fetching this Firebase app's measurement ID from the server." +
                                (" Falling back to the measurement ID " + measurementId) +
                                (" provided in the \"measurementId\" field in the local Firebase config. [" + e_1.message + "]"));
                            return [2 /*return*/, { appId: appId, measurementId: measurementId }];
                        }
                        throw e_1;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, fetchDynamicConfig(appFields)];
                    case 5:
                        response = _b.sent();
                        // Note the SDK only clears throttle state if response is success or non-retriable.
                        retryData.deleteThrottleMetadata(appId);
                        return [2 /*return*/, response];
                    case 6:
                        e_2 = _b.sent();
                        if (!isRetriableError(e_2)) {
                            retryData.deleteThrottleMetadata(appId);
                            if (measurementId) {
                                logger$3.warn("Failed to fetch this Firebase app's measurement ID from the server." +
                                    (" Falling back to the measurement ID " + measurementId) +
                                    (" provided in the \"measurementId\" field in the local Firebase config. [" + e_2.message + "]"));
                                return [2 /*return*/, { appId: appId, measurementId: measurementId }];
                            }
                            else {
                                throw e_2;
                            }
                        }
                        backoffMillis = Number(e_2.customData.httpStatus) === 503
                            ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)
                            : calculateBackoffMillis(backoffCount, retryData.intervalMillis);
                        throttleMetadata = {
                            throttleEndTimeMillis: Date.now() + backoffMillis,
                            backoffCount: backoffCount + 1
                        };
                        // Persists state.
                        retryData.setThrottleMetadata(appId, throttleMetadata);
                        logger$3.debug("Calling attemptFetch again in " + backoffMillis + " millis");
                        return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Supports waiting on a backoff by:
     *
     * <ul>
     *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
     *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
     *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
     *       request appear the same.</li>
     * </ul>
     *
     * <p>Visible for testing.
     */
    function setAbortableTimeout(signal, throttleEndTimeMillis) {
        return new Promise(function (resolve, reject) {
            // Derives backoff from given end time, normalizing negative numbers to zero.
            var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
            var timeout = setTimeout(resolve, backoffMillis);
            // Adds listener, rather than sets onabort, because signal is a shared object.
            signal.addEventListener(function () {
                clearTimeout(timeout);
                // If the request completes before this timeout, the rejection has no effect.
                reject(ERROR_FACTORY$4.create("fetch-throttle" /* FETCH_THROTTLE */, {
                    throttleEndTimeMillis: throttleEndTimeMillis
                }));
            });
        });
    }
    /**
     * Returns true if the {@link Error} indicates a fetch request may succeed later.
     */
    function isRetriableError(e) {
        if (!(e instanceof FirebaseError) || !e.customData) {
            return false;
        }
        // Uses string index defined by ErrorData, which FirebaseError implements.
        var httpStatus = Number(e.customData['httpStatus']);
        return (httpStatus === 429 ||
            httpStatus === 500 ||
            httpStatus === 503 ||
            httpStatus === 504);
    }
    /**
     * Shims a minimal AbortSignal (copied from Remote Config).
     *
     * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
     * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
     * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
     * swapped out if/when we do.
     */
    var AnalyticsAbortSignal = /** @class */ (function () {
        function AnalyticsAbortSignal() {
            this.listeners = [];
        }
        AnalyticsAbortSignal.prototype.addEventListener = function (listener) {
            this.listeners.push(listener);
        };
        AnalyticsAbortSignal.prototype.abort = function () {
            this.listeners.forEach(function (listener) { return listener(); });
        };
        return AnalyticsAbortSignal;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function validateIndexedDB() {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!isIndexedDBAvailable()) return [3 /*break*/, 1];
                        logger$3.warn(ERROR_FACTORY$4.create("indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */, {
                            errorInfo: 'IndexedDB is not available in this environment.'
                        }).message);
                        return [2 /*return*/, false];
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, validateIndexedDBOpenable()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        logger$3.warn(ERROR_FACTORY$4.create("indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */, {
                            errorInfo: e_1
                        }).message);
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/, true];
                }
            });
        });
    }
    /**
     * Initialize the analytics instance in gtag.js by calling config command with fid.
     *
     * NOTE: We combine analytics initialization and setting fid together because we want fid to be
     * part of the `page_view` event that's sent during the initialization
     * @param app Firebase app
     * @param gtagCore The gtag function that's not wrapped.
     * @param dynamicConfigPromisesList Array of all dynamic config promises.
     * @param measurementIdToAppId Maps measurementID to appID.
     * @param installations FirebaseInstallations instance.
     *
     * @returns Measurement ID.
     */
    function initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore) {
        return __awaiter(this, void 0, void 0, function () {
            var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dynamicConfigPromise = fetchDynamicConfigWithRetry(app);
                        // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.
                        dynamicConfigPromise
                            .then(function (config) {
                            measurementIdToAppId[config.measurementId] = config.appId;
                            if (app.options.measurementId &&
                                config.measurementId !== app.options.measurementId) {
                                logger$3.warn("The measurement ID in the local Firebase config (" + app.options.measurementId + ")" +
                                    (" does not match the measurement ID fetched from the server (" + config.measurementId + ").") +
                                    " To ensure analytics events are always sent to the correct Analytics property," +
                                    " update the" +
                                    " measurement ID field in the local config or remove it from the local config.");
                            }
                        })
                            .catch(function (e) { return logger$3.error(e); });
                        // Add to list to track state of all dynamic config promises.
                        dynamicConfigPromisesList.push(dynamicConfigPromise);
                        fidPromise = validateIndexedDB().then(function (envIsValid) {
                            if (envIsValid) {
                                return installations.getId();
                            }
                            else {
                                return undefined;
                            }
                        });
                        return [4 /*yield*/, Promise.all([
                                dynamicConfigPromise,
                                fidPromise
                            ])];
                    case 1:
                        _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];
                        // This command initializes gtag.js and only needs to be called once for the entire web app,
                        // but since it is idempotent, we can call it multiple times.
                        // We keep it together with other initialization logic for better code structure.
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        gtagCore('js', new Date());
                        configProperties = (_b = {},
                            // guard against developers accidentally setting properties with prefix `firebase_`
                            _b[ORIGIN_KEY] = 'firebase',
                            _b.update = true,
                            _b);
                        if (fid != null) {
                            configProperties[GA_FID_KEY] = fid;
                        }
                        // It should be the first config command called on this GA-ID
                        // Initialize this GA-ID and set FID on it using the gtag config API.
                        gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);
                        return [2 /*return*/, dynamicConfig.measurementId];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Maps appId to full initialization promise. Wrapped gtag calls must wait on
     * all or some of these, depending on the call's `send_to` param and the status
     * of the dynamic config fetches (see below).
     */
    var initializationPromisesMap = {};
    /**
     * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
     * wait on all these to be complete in order to determine if it can selectively
     * wait for only certain initialization (FID) promises or if it must wait for all.
     */
    var dynamicConfigPromisesList = [];
    /**
     * Maps fetched measurementIds to appId. Populated when the app's dynamic config
     * fetch completes. If already populated, gtag config calls can use this to
     * selectively wait for only this app's initialization promise (FID) instead of all
     * initialization promises.
     */
    var measurementIdToAppId = {};
    /**
     * Name for window global data layer array used by GA: defaults to 'dataLayer'.
     */
    var dataLayerName = 'dataLayer';
    /**
     * Name for window global gtag function used by GA: defaults to 'gtag'.
     */
    var gtagName = 'gtag';
    /**
     * Reproduction of standard gtag function or reference to existing
     * gtag function on window object.
     */
    var gtagCoreFunction;
    /**
     * Wrapper around gtag function that ensures FID is sent with all
     * relevant event and config calls.
     */
    var wrappedGtagFunction;
    /**
     * Flag to ensure page initialization steps (creation or wrapping of
     * dataLayer and gtag script) are only run once per page load.
     */
    var globalInitDone = false;
    /**
     * This must be run before calling firebase.analytics() or it won't
     * have any effect.
     * @param options Custom gtag and dataLayer names.
     */
    function settings(options) {
        if (globalInitDone) {
            throw ERROR_FACTORY$4.create("already-initialized" /* ALREADY_INITIALIZED */);
        }
        if (options.dataLayerName) {
            dataLayerName = options.dataLayerName;
        }
        if (options.gtagName) {
            gtagName = options.gtagName;
        }
    }
    /**
     * Returns true if no environment mismatch is found.
     * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
     * error that also lists details for each mismatch found.
     */
    function warnOnBrowserContextMismatch() {
        var mismatchedEnvMessages = [];
        if (isBrowserExtension()) {
            mismatchedEnvMessages.push('This is a browser extension environment.');
        }
        if (!areCookiesEnabled()) {
            mismatchedEnvMessages.push('Cookies are not available.');
        }
        if (mismatchedEnvMessages.length > 0) {
            var details = mismatchedEnvMessages
                .map(function (message, index) { return "(" + (index + 1) + ") " + message; })
                .join(' ');
            var err = ERROR_FACTORY$4.create("invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */, {
                errorInfo: details
            });
            logger$3.warn(err.message);
        }
    }
    function factory$1(app, installations) {
        warnOnBrowserContextMismatch();
        var appId = app.options.appId;
        if (!appId) {
            throw ERROR_FACTORY$4.create("no-app-id" /* NO_APP_ID */);
        }
        if (!app.options.apiKey) {
            if (app.options.measurementId) {
                logger$3.warn("The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest" +
                    (" measurement ID for this Firebase app. Falling back to the measurement ID " + app.options.measurementId) +
                    " provided in the \"measurementId\" field in the local Firebase config.");
            }
            else {
                throw ERROR_FACTORY$4.create("no-api-key" /* NO_API_KEY */);
            }
        }
        if (initializationPromisesMap[appId] != null) {
            throw ERROR_FACTORY$4.create("already-exists" /* ALREADY_EXISTS */, {
                id: appId
            });
        }
        if (!globalInitDone) {
            // Steps here should only be done once per page: creation or wrapping
            // of dataLayer and global gtag function.
            // Detect if user has already put the gtag <script> tag on this page.
            if (!findGtagScriptOnPage()) {
                insertScriptTag(dataLayerName);
            }
            getOrCreateDataLayer(dataLayerName);
            var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;
            wrappedGtagFunction = wrappedGtag;
            gtagCoreFunction = gtagCore;
            globalInitDone = true;
        }
        // Async but non-blocking.
        // This map reflects the completion state of all promises for each appId.
        initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction);
        var analyticsInstance = {
            app: app,
            // Public methods return void for API simplicity and to better match gtag,
            // while internal implementations return promises.
            logEvent: function (eventName, eventParams, options) {
                logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) { return logger$3.error(e); });
            },
            setCurrentScreen: function (screenName, options) {
                setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) { return logger$3.error(e); });
            },
            setUserId: function (id, options) {
                setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) { return logger$3.error(e); });
            },
            setUserProperties: function (properties, options) {
                setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) { return logger$3.error(e); });
            },
            setAnalyticsCollectionEnabled: function (enabled) {
                setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) { return logger$3.error(e); });
            },
            INTERNAL: {
                delete: function () {
                    delete initializationPromisesMap[appId];
                    return Promise.resolve();
                }
            }
        };
        return analyticsInstance;
    }

    var name$i = "@firebase/analytics";
    var version$7 = "0.6.2";

    /**
     * Type constant for Firebase Analytics.
     */
    var ANALYTICS_TYPE = 'analytics';
    function registerAnalytics(instance) {
        instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {
            // getImmediate for FirebaseApp will always succeed
            var app = container.getProvider('app').getImmediate();
            var installations = container
                .getProvider('installations')
                .getImmediate();
            return factory$1(app, installations);
        }, "PUBLIC" /* PUBLIC */).setServiceProps({
            settings: settings,
            EventName: EventName,
            isSupported: isSupported$1
        }));
        instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, "PRIVATE" /* PRIVATE */));
        instance.registerVersion(name$i, version$7);
        function internalFactory(container) {
            try {
                var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
                return {
                    logEvent: analytics.logEvent
                };
            }
            catch (e) {
                throw ERROR_FACTORY$4.create("interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */, {
                    reason: e
                });
            }
        }
    }
    registerAnalytics(firebase$1);
    /**
     * this is a public static method provided to users that wraps four different checks:
     *
     * 1. check if it's not a browser extension environment.
     * 1. check if cookie is enabled in current browser.
     * 3. check if IndexedDB is supported by the browser environment.
     * 4. check if the current browser context is valid for using IndexedDB.
     *
     */
    function isSupported$1() {
        return __awaiter(this, void 0, void 0, function () {
            var isDBOpenable;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isBrowserExtension()) {
                            return [2 /*return*/, false];
                        }
                        if (!areCookiesEnabled()) {
                            return [2 /*return*/, false];
                        }
                        if (!isIndexedDBAvailable()) {
                            return [2 /*return*/, false];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, validateIndexedDBOpenable()];
                    case 2:
                        isDBOpenable = _a.sent();
                        return [2 /*return*/, isDBOpenable];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements the {@link RemoteConfigClient} abstraction with success response caching.
     *
     * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service
     * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the
     * Cache API doesn't support matching entries by time.
     */
    var CachingClient = /** @class */ (function () {
        function CachingClient(client, storage, storageCache, logger) {
            this.client = client;
            this.storage = storage;
            this.storageCache = storageCache;
            this.logger = logger;
        }
        /**
         * Returns true if the age of the cached fetched configs is less than or equal to
         * {@link Settings#minimumFetchIntervalInSeconds}.
         *
         * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the
         * native Fetch API.
         *
         * <p>Visible for testing.
         */
        CachingClient.prototype.isCachedDataFresh = function (cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {
            // Cache can only be fresh if it's populated.
            if (!lastSuccessfulFetchTimestampMillis) {
                this.logger.debug('Config fetch cache check. Cache unpopulated.');
                return false;
            }
            // Calculates age of cache entry.
            var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;
            var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;
            this.logger.debug('Config fetch cache check.' +
                (" Cache age millis: " + cacheAgeMillis + ".") +
                (" Cache max age millis (minimumFetchIntervalMillis setting): " + cacheMaxAgeMillis + ".") +
                (" Is cache hit: " + isCachedDataFresh + "."));
            return isCachedDataFresh;
        };
        CachingClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                this.storage.getLastSuccessfulFetchTimestampMillis(),
                                this.storage.getLastSuccessfulFetchResponse()
                            ])];
                        case 1:
                            _a = _b.sent(), lastSuccessfulFetchTimestampMillis = _a[0], lastSuccessfulFetchResponse = _a[1];
                            // Exits early on cache hit.
                            if (lastSuccessfulFetchResponse &&
                                this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {
                                return [2 /*return*/, lastSuccessfulFetchResponse];
                            }
                            // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API
                            // that allows the caller to pass an ETag.
                            request.eTag =
                                lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;
                            return [4 /*yield*/, this.client.fetch(request)];
                        case 2:
                            response = _b.sent();
                            storageOperations = [
                                // Uses write-through cache for consistency with synchronous public API.
                                this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())
                            ];
                            if (response.status === 200) {
                                // Caches response only if it has changed, ie non-304 responses.
                                storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));
                            }
                            return [4 /*yield*/, Promise.all(storageOperations)];
                        case 3:
                            _b.sent();
                            return [2 /*return*/, response];
                    }
                });
            });
        };
        return CachingClient;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$7;
    var ERROR_DESCRIPTION_MAP$2 = (_a$7 = {},
        _a$7["registration-window" /* REGISTRATION_WINDOW */] = 'Undefined window object. This SDK only supports usage in a browser environment.',
        _a$7["registration-project-id" /* REGISTRATION_PROJECT_ID */] = 'Undefined project identifier. Check Firebase app initialization.',
        _a$7["registration-api-key" /* REGISTRATION_API_KEY */] = 'Undefined API key. Check Firebase app initialization.',
        _a$7["registration-app-id" /* REGISTRATION_APP_ID */] = 'Undefined app identifier. Check Firebase app initialization.',
        _a$7["storage-open" /* STORAGE_OPEN */] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',
        _a$7["storage-get" /* STORAGE_GET */] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',
        _a$7["storage-set" /* STORAGE_SET */] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',
        _a$7["storage-delete" /* STORAGE_DELETE */] = 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',
        _a$7["fetch-client-network" /* FETCH_NETWORK */] = 'Fetch client failed to connect to a network. Check Internet connection.' +
            ' Original error: {$originalErrorMessage}.',
        _a$7["fetch-timeout" /* FETCH_TIMEOUT */] = 'The config fetch request timed out. ' +
            ' Configure timeout using "fetchTimeoutMillis" SDK setting.',
        _a$7["fetch-throttle" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +
            ' Configure timeout using "fetchTimeoutMillis" SDK setting.' +
            ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
        _a$7["fetch-client-parse" /* FETCH_PARSE */] = 'Fetch client could not parse response.' +
            ' Original error: {$originalErrorMessage}.',
        _a$7["fetch-status" /* FETCH_STATUS */] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',
        _a$7);
    var ERROR_FACTORY$5 = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP$2);
    // Note how this is like typeof/instanceof, but for ErrorCode.
    function hasErrorCode(e, errorCode) {
        return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Attempts to get the most accurate browser language setting.
     *
     * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.
     *
     * <p>Defers default language specification to server logic for consistency.
     *
     * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.
     */
    function getUserLanguage(navigatorLanguage) {
        if (navigatorLanguage === void 0) { navigatorLanguage = navigator; }
        return (
        // Most reliable, but only supported in Chrome/Firefox.
        (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
            // Supported in most browsers, but returns the language of the browser
            // UI, not the language set in browser settings.
            navigatorLanguage.language
        // Polyfill otherwise.
        );
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements the Client abstraction for the Remote Config REST API.
     */
    var RestClient = /** @class */ (function () {
        function RestClient(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {
            this.firebaseInstallations = firebaseInstallations;
            this.sdkVersion = sdkVersion;
            this.namespace = namespace;
            this.projectId = projectId;
            this.apiKey = apiKey;
            this.appId = appId;
        }
        /**
         * Fetches from the Remote Config REST API.
         *
         * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't
         * connect to the network.
         * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the
         * fetch response.
         * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.
         */
        RestClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, originalError_1, errorCode, status, responseEtag, config, state, responseBody, originalError_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                this.firebaseInstallations.getId(),
                                this.firebaseInstallations.getToken()
                            ])];
                        case 1:
                            _a = _b.sent(), installationId = _a[0], installationToken = _a[1];
                            urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE ||
                                'https://firebaseremoteconfig.googleapis.com';
                            url = urlBase + "/v1/projects/" + this.projectId + "/namespaces/" + this.namespace + ":fetch?key=" + this.apiKey;
                            headers = {
                                'Content-Type': 'application/json',
                                'Content-Encoding': 'gzip',
                                // Deviates from pure decorator by not passing max-age header since we don't currently have
                                // service behavior using that header.
                                'If-None-Match': request.eTag || '*'
                            };
                            requestBody = {
                                /* eslint-disable camelcase */
                                sdk_version: this.sdkVersion,
                                app_instance_id: installationId,
                                app_instance_id_token: installationToken,
                                app_id: this.appId,
                                language_code: getUserLanguage()
                                /* eslint-enable camelcase */
                            };
                            options = {
                                method: 'POST',
                                headers: headers,
                                body: JSON.stringify(requestBody)
                            };
                            fetchPromise = fetch(url, options);
                            timeoutPromise = new Promise(function (_resolve, reject) {
                                // Maps async event listener to Promise API.
                                request.signal.addEventListener(function () {
                                    // Emulates https://heycam.github.io/webidl/#aborterror
                                    var error = new Error('The operation was aborted.');
                                    error.name = 'AbortError';
                                    reject(error);
                                });
                            });
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 5, , 6]);
                            return [4 /*yield*/, Promise.race([fetchPromise, timeoutPromise])];
                        case 3:
                            _b.sent();
                            return [4 /*yield*/, fetchPromise];
                        case 4:
                            response = _b.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            originalError_1 = _b.sent();
                            errorCode = "fetch-client-network" /* FETCH_NETWORK */;
                            if (originalError_1.name === 'AbortError') {
                                errorCode = "fetch-timeout" /* FETCH_TIMEOUT */;
                            }
                            throw ERROR_FACTORY$5.create(errorCode, {
                                originalErrorMessage: originalError_1.message
                            });
                        case 6:
                            status = response.status;
                            responseEtag = response.headers.get('ETag') || undefined;
                            if (!(response.status === 200)) return [3 /*break*/, 11];
                            responseBody = void 0;
                            _b.label = 7;
                        case 7:
                            _b.trys.push([7, 9, , 10]);
                            return [4 /*yield*/, response.json()];
                        case 8:
                            responseBody = _b.sent();
                            return [3 /*break*/, 10];
                        case 9:
                            originalError_2 = _b.sent();
                            throw ERROR_FACTORY$5.create("fetch-client-parse" /* FETCH_PARSE */, {
                                originalErrorMessage: originalError_2.message
                            });
                        case 10:
                            config = responseBody['entries'];
                            state = responseBody['state'];
                            _b.label = 11;
                        case 11:
                            // Normalizes based on legacy state.
                            if (state === 'INSTANCE_STATE_UNSPECIFIED') {
                                status = 500;
                            }
                            else if (state === 'NO_CHANGE') {
                                status = 304;
                            }
                            else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {
                                // These cases can be fixed remotely, so normalize to safe value.
                                config = {};
                            }
                            // Normalize to exception-based control flow for non-success cases.
                            // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for
                            // differentiating success states (200 from 304; the state body param is undefined in a
                            // standard 304).
                            if (status !== 304 && status !== 200) {
                                throw ERROR_FACTORY$5.create("fetch-status" /* FETCH_STATUS */, {
                                    httpStatus: status
                                });
                            }
                            return [2 /*return*/, { status: status, eTag: responseEtag, config: config }];
                    }
                });
            });
        };
        return RestClient;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Shims a minimal AbortSignal.
     *
     * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
     * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
     * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
     * swapped out if/when we do.
     */
    var RemoteConfigAbortSignal = /** @class */ (function () {
        function RemoteConfigAbortSignal() {
            this.listeners = [];
        }
        RemoteConfigAbortSignal.prototype.addEventListener = function (listener) {
            this.listeners.push(listener);
        };
        RemoteConfigAbortSignal.prototype.abort = function () {
            this.listeners.forEach(function (listener) { return listener(); });
        };
        return RemoteConfigAbortSignal;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_VALUE_FOR_BOOLEAN = false;
    var DEFAULT_VALUE_FOR_STRING = '';
    var DEFAULT_VALUE_FOR_NUMBER = 0;
    var BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];
    var Value = /** @class */ (function () {
        function Value(_source, _value) {
            if (_value === void 0) { _value = DEFAULT_VALUE_FOR_STRING; }
            this._source = _source;
            this._value = _value;
        }
        Value.prototype.asString = function () {
            return this._value;
        };
        Value.prototype.asBoolean = function () {
            if (this._source === 'static') {
                return DEFAULT_VALUE_FOR_BOOLEAN;
            }
            return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;
        };
        Value.prototype.asNumber = function () {
            if (this._source === 'static') {
                return DEFAULT_VALUE_FOR_NUMBER;
            }
            var num = Number(this._value);
            if (isNaN(num)) {
                num = DEFAULT_VALUE_FOR_NUMBER;
            }
            return num;
        };
        Value.prototype.getSource = function () {
            return this._source;
        };
        return Value;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute
    var DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.
    /**
     * Encapsulates business logic mapping network and storage dependencies to the public SDK API.
     *
     * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.
     */
    var RemoteConfig = /** @class */ (function () {
        function RemoteConfig(
        // Required by FirebaseServiceFactory interface.
        app, 
        // JS doesn't support private yet
        // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an
        // underscore prefix.
        _client, _storageCache, _storage, _logger) {
            this.app = app;
            this._client = _client;
            this._storageCache = _storageCache;
            this._storage = _storage;
            this._logger = _logger;
            // Tracks completion of initialization promise.
            this._isInitializationComplete = false;
            this.settings = {
                fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,
                minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS
            };
            this.defaultConfig = {};
        }
        // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels
        // to differentiate 2p and 3p use-cases.
        RemoteConfig.prototype.setLogLevel = function (logLevel) {
            switch (logLevel) {
                case 'debug':
                    this._logger.logLevel = LogLevel.DEBUG;
                    break;
                case 'silent':
                    this._logger.logLevel = LogLevel.SILENT;
                    break;
                default:
                    this._logger.logLevel = LogLevel.ERROR;
            }
        };
        Object.defineProperty(RemoteConfig.prototype, "fetchTimeMillis", {
            get: function () {
                return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RemoteConfig.prototype, "lastFetchStatus", {
            get: function () {
                return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';
            },
            enumerable: false,
            configurable: true
        });
        RemoteConfig.prototype.activate = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, lastSuccessfulFetchResponse, activeConfigEtag;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                this._storage.getLastSuccessfulFetchResponse(),
                                this._storage.getActiveConfigEtag()
                            ])];
                        case 1:
                            _a = _b.sent(), lastSuccessfulFetchResponse = _a[0], activeConfigEtag = _a[1];
                            if (!lastSuccessfulFetchResponse ||
                                !lastSuccessfulFetchResponse.config ||
                                !lastSuccessfulFetchResponse.eTag ||
                                lastSuccessfulFetchResponse.eTag === activeConfigEtag) {
                                // Either there is no successful fetched config, or is the same as current active
                                // config.
                                return [2 /*return*/, false];
                            }
                            return [4 /*yield*/, Promise.all([
                                    this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),
                                    this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)
                                ])];
                        case 2:
                            _b.sent();
                            return [2 /*return*/, true];
                    }
                });
            });
        };
        RemoteConfig.prototype.ensureInitialized = function () {
            var _this = this;
            if (!this._initializePromise) {
                this._initializePromise = this._storageCache
                    .loadFromStorage()
                    .then(function () {
                    _this._isInitializationComplete = true;
                });
            }
            return this._initializePromise;
        };
        /**
         * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than
         * {@link Settings.fetchTimeoutInSeconds} or
         * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.
         */
        RemoteConfig.prototype.fetch = function () {
            return __awaiter(this, void 0, void 0, function () {
                var abortSignal, e_1, lastFetchStatus;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            abortSignal = new RemoteConfigAbortSignal();
                            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
                                    abortSignal.abort();
                                    return [2 /*return*/];
                                });
                            }); }, this.settings.fetchTimeoutMillis);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 6]);
                            return [4 /*yield*/, this._client.fetch({
                                    cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,
                                    signal: abortSignal
                                })];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this._storageCache.setLastFetchStatus('success')];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 4:
                            e_1 = _a.sent();
                            lastFetchStatus = hasErrorCode(e_1, "fetch-throttle" /* FETCH_THROTTLE */)
                                ? 'throttle'
                                : 'failure';
                            return [4 /*yield*/, this._storageCache.setLastFetchStatus(lastFetchStatus)];
                        case 5:
                            _a.sent();
                            throw e_1;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        RemoteConfig.prototype.fetchAndActivate = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.fetch()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.activate()];
                    }
                });
            });
        };
        RemoteConfig.prototype.getAll = function () {
            var _this = this;
            return getAllKeys(this._storageCache.getActiveConfig(), this.defaultConfig).reduce(function (allConfigs, key) {
                allConfigs[key] = _this.getValue(key);
                return allConfigs;
            }, {});
        };
        RemoteConfig.prototype.getBoolean = function (key) {
            return this.getValue(key).asBoolean();
        };
        RemoteConfig.prototype.getNumber = function (key) {
            return this.getValue(key).asNumber();
        };
        RemoteConfig.prototype.getString = function (key) {
            return this.getValue(key).asString();
        };
        RemoteConfig.prototype.getValue = function (key) {
            if (!this._isInitializationComplete) {
                this._logger.debug("A value was requested for key \"" + key + "\" before SDK initialization completed." +
                    ' Await on ensureInitialized if the intent was to get a previously activated value.');
            }
            var activeConfig = this._storageCache.getActiveConfig();
            if (activeConfig && activeConfig[key] !== undefined) {
                return new Value('remote', activeConfig[key]);
            }
            else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {
                return new Value('default', String(this.defaultConfig[key]));
            }
            this._logger.debug("Returning static value for key \"" + key + "\"." +
                ' Define a default or remote value if this is unintentional.');
            return new Value('static');
        };
        return RemoteConfig;
    }());
    /**
     * Dedupes and returns an array of all the keys of the received objects.
     */
    function getAllKeys(obj1, obj2) {
        if (obj1 === void 0) { obj1 = {}; }
        if (obj2 === void 0) { obj2 = {}; }
        return Object.keys(__assign(__assign({}, obj1), obj2));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.
     */
    function toFirebaseError(event, errorCode) {
        var originalError = event.target.error || undefined;
        return ERROR_FACTORY$5.create(errorCode, {
            originalErrorMessage: originalError && originalError.message
        });
    }
    /**
     * A general-purpose store keyed by app + namespace + {@link
     * ProjectNamespaceKeyFieldValue}.
     *
     * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact
     * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys
     * for a set of key-value pairs. See {@link Storage#createCompositeKey}.
     *
     * <p>Visible for testing.
     */
    var APP_NAMESPACE_STORE = 'app_namespace_store';
    var DB_NAME = 'firebase_remote_config';
    var DB_VERSION = 1;
    // Visible for testing.
    function openDatabase() {
        return new Promise(function (resolve, reject) {
            var request = indexedDB.open(DB_NAME, DB_VERSION);
            request.onerror = function (event) {
                reject(toFirebaseError(event, "storage-open" /* STORAGE_OPEN */));
            };
            request.onsuccess = function (event) {
                resolve(event.target.result);
            };
            request.onupgradeneeded = function (event) {
                var db = event.target.result;
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (event.oldVersion) {
                    case 0:
                        db.createObjectStore(APP_NAMESPACE_STORE, {
                            keyPath: 'compositeKey'
                        });
                }
            };
        });
    }
    /**
     * Abstracts data persistence.
     */
    var Storage = /** @class */ (function () {
        /**
         * @param appId enables storage segmentation by app (ID + name).
         * @param appName enables storage segmentation by app (ID + name).
         * @param namespace enables storage segmentation by namespace.
         */
        function Storage(appId, appName, namespace, openDbPromise) {
            if (openDbPromise === void 0) { openDbPromise = openDatabase(); }
            this.appId = appId;
            this.appName = appName;
            this.namespace = namespace;
            this.openDbPromise = openDbPromise;
        }
        Storage.prototype.getLastFetchStatus = function () {
            return this.get('last_fetch_status');
        };
        Storage.prototype.setLastFetchStatus = function (status) {
            return this.set('last_fetch_status', status);
        };
        // This is comparable to a cache entry timestamp. If we need to expire other data, we could
        // consider adding timestamp to all storage records and an optional max age arg to getters.
        Storage.prototype.getLastSuccessfulFetchTimestampMillis = function () {
            return this.get('last_successful_fetch_timestamp_millis');
        };
        Storage.prototype.setLastSuccessfulFetchTimestampMillis = function (timestamp) {
            return this.set('last_successful_fetch_timestamp_millis', timestamp);
        };
        Storage.prototype.getLastSuccessfulFetchResponse = function () {
            return this.get('last_successful_fetch_response');
        };
        Storage.prototype.setLastSuccessfulFetchResponse = function (response) {
            return this.set('last_successful_fetch_response', response);
        };
        Storage.prototype.getActiveConfig = function () {
            return this.get('active_config');
        };
        Storage.prototype.setActiveConfig = function (config) {
            return this.set('active_config', config);
        };
        Storage.prototype.getActiveConfigEtag = function () {
            return this.get('active_config_etag');
        };
        Storage.prototype.setActiveConfigEtag = function (etag) {
            return this.set('active_config_etag', etag);
        };
        Storage.prototype.getThrottleMetadata = function () {
            return this.get('throttle_metadata');
        };
        Storage.prototype.setThrottleMetadata = function (metadata) {
            return this.set('throttle_metadata', metadata);
        };
        Storage.prototype.deleteThrottleMetadata = function () {
            return this.delete('throttle_metadata');
        };
        Storage.prototype.get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.get(compositeKey);
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-get" /* STORAGE_GET */));
                                        };
                                        request.onsuccess = function (event) {
                                            var result = event.target.result;
                                            if (result) {
                                                resolve(result.value);
                                            }
                                            else {
                                                resolve(undefined);
                                            }
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY$5.create("storage-get" /* STORAGE_GET */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        Storage.prototype.set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.put({
                                            compositeKey: compositeKey,
                                            value: value
                                        });
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-set" /* STORAGE_SET */));
                                        };
                                        request.onsuccess = function () {
                                            resolve();
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY$5.create("storage-set" /* STORAGE_SET */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        Storage.prototype.delete = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.delete(compositeKey);
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-delete" /* STORAGE_DELETE */));
                                        };
                                        request.onsuccess = function () {
                                            resolve();
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY$5.create("storage-delete" /* STORAGE_DELETE */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        // Facilitates composite key functionality (which is unsupported in IE).
        Storage.prototype.createCompositeKey = function (key) {
            return [this.appId, this.appName, this.namespace, key].join();
        };
        return Storage;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A memory cache layer over storage to support the SDK's synchronous read requirements.
     */
    var StorageCache = /** @class */ (function () {
        function StorageCache(storage) {
            this.storage = storage;
        }
        /**
         * Memory-only getters
         */
        StorageCache.prototype.getLastFetchStatus = function () {
            return this.lastFetchStatus;
        };
        StorageCache.prototype.getLastSuccessfulFetchTimestampMillis = function () {
            return this.lastSuccessfulFetchTimestampMillis;
        };
        StorageCache.prototype.getActiveConfig = function () {
            return this.activeConfig;
        };
        /**
         * Read-ahead getter
         */
        StorageCache.prototype.loadFromStorage = function () {
            return __awaiter(this, void 0, void 0, function () {
                var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            lastFetchStatusPromise = this.storage.getLastFetchStatus();
                            lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();
                            activeConfigPromise = this.storage.getActiveConfig();
                            return [4 /*yield*/, lastFetchStatusPromise];
                        case 1:
                            lastFetchStatus = _a.sent();
                            if (lastFetchStatus) {
                                this.lastFetchStatus = lastFetchStatus;
                            }
                            return [4 /*yield*/, lastSuccessfulFetchTimestampMillisPromise];
                        case 2:
                            lastSuccessfulFetchTimestampMillis = _a.sent();
                            if (lastSuccessfulFetchTimestampMillis) {
                                this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;
                            }
                            return [4 /*yield*/, activeConfigPromise];
                        case 3:
                            activeConfig = _a.sent();
                            if (activeConfig) {
                                this.activeConfig = activeConfig;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Write-through setters
         */
        StorageCache.prototype.setLastFetchStatus = function (status) {
            this.lastFetchStatus = status;
            return this.storage.setLastFetchStatus(status);
        };
        StorageCache.prototype.setLastSuccessfulFetchTimestampMillis = function (timestampMillis) {
            this.lastSuccessfulFetchTimestampMillis = timestampMillis;
            return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);
        };
        StorageCache.prototype.setActiveConfig = function (activeConfig) {
            this.activeConfig = activeConfig;
            return this.storage.setActiveConfig(activeConfig);
        };
        return StorageCache;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Supports waiting on a backoff by:
     *
     * <ul>
     *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
     *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
     *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
     *       request appear the same.</li>
     * </ul>
     *
     * <p>Visible for testing.
     */
    function setAbortableTimeout$1(signal, throttleEndTimeMillis) {
        return new Promise(function (resolve, reject) {
            // Derives backoff from given end time, normalizing negative numbers to zero.
            var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
            var timeout = setTimeout(resolve, backoffMillis);
            // Adds listener, rather than sets onabort, because signal is a shared object.
            signal.addEventListener(function () {
                clearTimeout(timeout);
                // If the request completes before this timeout, the rejection has no effect.
                reject(ERROR_FACTORY$5.create("fetch-throttle" /* FETCH_THROTTLE */, {
                    throttleEndTimeMillis: throttleEndTimeMillis
                }));
            });
        });
    }
    /**
     * Returns true if the {@link Error} indicates a fetch request may succeed later.
     */
    function isRetriableError$1(e) {
        if (!(e instanceof FirebaseError) || !e.customData) {
            return false;
        }
        // Uses string index defined by ErrorData, which FirebaseError implements.
        var httpStatus = Number(e.customData['httpStatus']);
        return (httpStatus === 429 ||
            httpStatus === 500 ||
            httpStatus === 503 ||
            httpStatus === 504);
    }
    /**
     * Decorates a Client with retry logic.
     *
     * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache
     * responses (because the SDK has no use for error responses).
     */
    var RetryingClient = /** @class */ (function () {
        function RetryingClient(client, storage) {
            this.client = client;
            this.storage = storage;
        }
        RetryingClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var throttleMetadata;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.storage.getThrottleMetadata()];
                        case 1:
                            throttleMetadata = (_a.sent()) || {
                                backoffCount: 0,
                                throttleEndTimeMillis: Date.now()
                            };
                            return [2 /*return*/, this.attemptFetch(request, throttleMetadata)];
                    }
                });
            });
        };
        /**
         * A recursive helper for attempting a fetch request repeatedly.
         *
         * @throws any non-retriable errors.
         */
        RetryingClient.prototype.attemptFetch = function (request, _a) {
            var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;
            return __awaiter(this, void 0, void 0, function () {
                var response, e_1, throttleMetadata;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: 
                        // Starts with a (potentially zero) timeout to support resumption from stored state.
                        // Ensures the throttle end time is honored if the last attempt timed out.
                        // Note the SDK will never make a request if the fetch timeout expires at this point.
                        return [4 /*yield*/, setAbortableTimeout$1(request.signal, throttleEndTimeMillis)];
                        case 1:
                            // Starts with a (potentially zero) timeout to support resumption from stored state.
                            // Ensures the throttle end time is honored if the last attempt timed out.
                            // Note the SDK will never make a request if the fetch timeout expires at this point.
                            _b.sent();
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 5, , 7]);
                            return [4 /*yield*/, this.client.fetch(request)];
                        case 3:
                            response = _b.sent();
                            // Note the SDK only clears throttle state if response is success or non-retriable.
                            return [4 /*yield*/, this.storage.deleteThrottleMetadata()];
                        case 4:
                            // Note the SDK only clears throttle state if response is success or non-retriable.
                            _b.sent();
                            return [2 /*return*/, response];
                        case 5:
                            e_1 = _b.sent();
                            if (!isRetriableError$1(e_1)) {
                                throw e_1;
                            }
                            throttleMetadata = {
                                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),
                                backoffCount: backoffCount + 1
                            };
                            // Persists state.
                            return [4 /*yield*/, this.storage.setThrottleMetadata(throttleMetadata)];
                        case 6:
                            // Persists state.
                            _b.sent();
                            return [2 /*return*/, this.attemptFetch(request, throttleMetadata)];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        return RetryingClient;
    }());

    var name$j = "@firebase/remote-config";
    var version$8 = "0.1.30";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerRemoteConfig(firebaseInstance) {
        firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig', remoteConfigFactory, "PUBLIC" /* PUBLIC */).setMultipleInstances(true));
        firebaseInstance.registerVersion(name$j, version$8);
        function remoteConfigFactory(container, namespace) {
            /* Dependencies */
            // getImmediate for FirebaseApp will always succeed
            var app = container.getProvider('app').getImmediate();
            // The following call will always succeed because rc has `import '@firebase/installations'`
            var installations = container.getProvider('installations').getImmediate();
            // Guards against the SDK being used in non-browser environments.
            if (typeof window === 'undefined') {
                throw ERROR_FACTORY$5.create("registration-window" /* REGISTRATION_WINDOW */);
            }
            // Normalizes optional inputs.
            var _a = app.options, projectId = _a.projectId, apiKey = _a.apiKey, appId = _a.appId;
            if (!projectId) {
                throw ERROR_FACTORY$5.create("registration-project-id" /* REGISTRATION_PROJECT_ID */);
            }
            if (!apiKey) {
                throw ERROR_FACTORY$5.create("registration-api-key" /* REGISTRATION_API_KEY */);
            }
            if (!appId) {
                throw ERROR_FACTORY$5.create("registration-app-id" /* REGISTRATION_APP_ID */);
            }
            namespace = namespace || 'firebase';
            var storage = new Storage(appId, app.name, namespace);
            var storageCache = new StorageCache(storage);
            var logger = new Logger(name$j);
            // Sets ERROR as the default log level.
            // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.
            logger.logLevel = LogLevel.ERROR;
            var restClient = new RestClient(installations, 
            // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.
            firebaseInstance.SDK_VERSION, namespace, projectId, apiKey, appId);
            var retryingClient = new RetryingClient(restClient, storage);
            var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);
            var remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);
            // Starts warming cache.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            remoteConfigInstance.ensureInitialized();
            return remoteConfigInstance;
        }
    }
    registerRemoteConfig(firebase$1);

    var name$k = "firebase";
    var version$9 = "8.2.6";

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    firebase$1.registerVersion(name$k, version$9, 'app');

    var name$1$1 = "firebase";
    var version$1$1 = "8.2.6";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    console.warn("\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n");
    firebase$1.registerVersion(name$1$1, version$1$1);

    /* src/state/auth.svelte generated by Svelte v3.32.1 */

    let user = null;
    const userStore = writable(user);

    userStore.subscribe(value => {
    	user = value;
    });

    const SETTINGS = {
    	projectId: "trilhos-2d2ef",
    	measurementId: "G-EN5WT801KX",
    	messagingSenderId: "457658473177",
    	storageBucket: "trilhos-2d2ef.appspot.com",
    	databaseURL: "https://trilhos-2d2ef-default-rtdb.europe-west1.firebasedatabase.app/",
    	authDomain: "trilhos-2d2ef.firebaseapp.com",
    	apiKey: "AIzaSyD-SYWfNzMuLdMS4ITKrXyVkk32MDGNKU8",
    	appId: "1:457658473177:web:e6b1cf14d16ebab90bbcc8"
    };

    const onError = ({ code, message }) => {
    	console.error(code, message);
    };

    const onAuthStateChanged = user => {
    	user
    	? console.log("user:", user.email)
    	: console.log("Not signed in :(");

    	userStore.set(user);
    };

    const subscribe = cb => userStore.subscribe(cb);

    const signIn = ({ email, password }) => {
    	firebase$1.auth().signInWithEmailAndPassword(email, password).then(onAuthStateChanged).catch(onError);
    };

    const signOut = () => {
    	firebase$1.auth().signOut().then(onAuthStateChanged).catch(onError);
    };

    const signUp = ({ email, password }) => {
    	firebase$1.auth().createUserWithEmailAndPassword(email, password).then(onAuthStateChanged).catch(onError);
    };

    const initialize = () => {
    	firebase$1.initializeApp(SETTINGS);
    	firebase$1.analytics();
    	firebase$1.auth().onAuthStateChanged(onAuthStateChanged);
    };

    /* src/state/tracks.svelte generated by Svelte v3.32.1 */

    let tracks = {};
    let tracksRef = null;
    const store = writable(tracks);
    store.subscribe(value => tracks = value);

    const onError$1 = ({ code, message }) => {
    	console.error(code, message);
    };

    const subscribe$1 = cb => {
    	if (tracksRef) return store.subscribe(cb);
    	tracksRef = firebase$1.database().ref(`tracks`);
    	store.subscribe(cb);

    	tracksRef.on("value", snapshot => {
    		const rawData = snapshot.val();
    		const data = {};

    		Object.keys(rawData).map(id => {
    			console.log(id, rawData[id]);
    			data[id] = { points: Object.values(rawData[id]), id };
    		});

    		store.set(data);
    	});
    };

    const newTrack = () => {
    	const trackId = v4();
    	firebase$1.database().ref(`tracks/${trackId}`).set([]).catch(onError$1);
    	return trackId;
    };

    const savePosition = (trackId, position) => {
    	firebase$1.database().ref(`tracks/${trackId}`).push(position).catch(onError$1);
    };

    /* src/components/Map.svelte generated by Svelte v3.32.1 */

    const { console: console_1 } = globals;
    const file = "src/components/Map.svelte";

    function create_fragment(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", "map");
    			attr_dev(div, "class", "map svelte-1y1l271");
    			add_location(div, file, 186, 0, 5252);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const deltaMean = 250; // the geolocation sampling period mean in ms

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Map", slots, []);
    	let { track } = $$props;
    	let { recording } = $$props;
    	let map = null;
    	let previousM = 0;
    	let geolocation = null;
    	const positions = new LineString([], "XYZM");
    	const trackFeature = new Feature();
    	const accuracyFeature = new Feature();

    	const positionFeature = new Feature({
    			style: {
    				image: new CircleStyle({
    						radius: 6,
    						fill: new Fill({ color: "#3399CC" }),
    						stroke: new Stroke({ color: "#fff", width: 2 })
    					})
    			}
    		});

    	const view = new View({
    			center: [0, 0],
    			zoom: 18,
    			tilePixelRatio: 2
    		});

    	const tileLayer = new TileLayer({ source: new OSM({ tilePixelRatio: 2 }) });

    	const outdoorsLayer = new TileLayer({
    			source: new XYZ({
    					url: "https://tile.thunderforest.com/outdoors/{z}/{x}/{y}.png?apikey=f22952a25e0249e8995aac2c056e0f1d",
    					tilePixelRatio: 2
    				})
    		});

    	const vectorLayer = new VectorLayer({
    			source: new VectorSource({
    					features: [accuracyFeature, positionFeature, trackFeature]
    				})
    		});

    	const mod = n => (n % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);

    	const getCorrectedHeading = (heading, prevHeading) => {
    		let headingDiff = heading - mod(prevHeading);

    		// force the rotation change to be less than 180°
    		if (Math.abs(headingDiff) > Math.PI) {
    			const sign = headingDiff >= 0 ? 1 : -1;
    			headingDiff = -sign * (2 * Math.PI - Math.abs(headingDiff));
    		}

    		return prevHeading + headingDiff;
    	};

    	// recenters the view by putting the given coordinates at 3/4 from the top or
    	// the screen
    	const getCenterWithHeading = ([x, y], rotation, resolution) => {
    		const [,height] = map.getSize();

    		return [
    			x - Math.sin(rotation) * height * resolution * 1 / 4,
    			y + Math.cos(rotation) * height * resolution * 1 / 4
    		];
    	};

    	const addPosition = (position, altitude, heading, speed, accuracy, m) => {
    		const x = position[0];
    		const y = position[1];
    		const fCoords = positions.getCoordinates();
    		const previous = fCoords[fCoords.length - 1];
    		const prevHeading = previous && previous[2];

    		const correctedHeading = !prevHeading
    		? heading
    		: getCorrectedHeading(heading, prevHeading);

    		positions.appendCoordinate([x, y, correctedHeading, m]);

    		// only keep the 20 last coordinates
    		positions.setCoordinates(positions.getCoordinates().slice(-20));

    		if (recording) {
    			const location = [...position, altitude, heading, speed, accuracy, m];
    			console.log("saving:", location);
    			savePosition(recording, location);
    		}
    	};

    	const onChangePosition = () => {
    		const speed = geolocation.getSpeed() || 0;
    		const heading = geolocation.getHeading() || 0;
    		const position = geolocation.getPosition();
    		const altitude = geolocation.getAltitude();
    		const accuracy = geolocation.getAccuracy();
    		addPosition(position, altitude, heading, speed, accuracy, Date.now());
    	};

    	const onChangeAccuracyGeometry = () => {
    		accuracyFeature.setGeometry(geolocation.getAccuracyGeometry());
    	};

    	const update = () => {
    		const m = Math.max(Date.now() - deltaMean * 1.5, previousM);
    		previousM = m;
    		const resolution = view.getResolution();
    		const coordinates = positions.getCoordinateAtM(m, true);
    		if (!coordinates) return;
    		positionFeature.setGeometry(new Point(coordinates));

    		if (!track) {
    			const [,,z] = coordinates;
    			view.setRotation(-z);
    			view.setCenter(getCenterWithHeading(coordinates, -z, resolution));
    		}
    	};

    	onMount(() => {
    		map = new Map$1({
    				view,
    				layers: [tileLayer, outdoorsLayer, vectorLayer],
    				target: "map"
    			});

    		geolocation = new Geolocation({
    				projection: view.getProjection(),
    				trackingOptions: { enableHighAccuracy: true }
    			});

    		geolocation.setTracking(true);
    		geolocation.on("change:position", onChangePosition);
    		geolocation.on("change:accuracyGeometry", onChangeAccuracyGeometry);
    		tileLayer.on("prerender", update);
    	});

    	const writable_props = ["track", "recording"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Map> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("track" in $$props) $$invalidate(0, track = $$props.track);
    		if ("recording" in $$props) $$invalidate(1, recording = $$props.recording);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		Map: Map$1,
    		View,
    		Feature,
    		Geolocation,
    		CircleStyle,
    		Fill,
    		Stroke,
    		Style,
    		Point,
    		MultiLineString,
    		LineString,
    		XYZ,
    		OSM,
    		VectorSource,
    		TileLayer,
    		VectorLayer,
    		savePosition,
    		track,
    		recording,
    		map,
    		previousM,
    		geolocation,
    		deltaMean,
    		positions,
    		trackFeature,
    		accuracyFeature,
    		positionFeature,
    		view,
    		tileLayer,
    		outdoorsLayer,
    		vectorLayer,
    		mod,
    		getCorrectedHeading,
    		getCenterWithHeading,
    		addPosition,
    		onChangePosition,
    		onChangeAccuracyGeometry,
    		update
    	});

    	$$self.$inject_state = $$props => {
    		if ("track" in $$props) $$invalidate(0, track = $$props.track);
    		if ("recording" in $$props) $$invalidate(1, recording = $$props.recording);
    		if ("map" in $$props) map = $$props.map;
    		if ("previousM" in $$props) previousM = $$props.previousM;
    		if ("geolocation" in $$props) geolocation = $$props.geolocation;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*track*/ 1) {
    			if (track) {
    				console.log(track);
    				const points = track.points.map(([x, y]) => [x, y]);
    				const polygon = new MultiLineString([points]);
    				trackFeature.setGeometry(polygon);
    				trackFeature.setStyle(new Style({ stroke: new Stroke({ width: 4 }) }));
    				view.fit(polygon, { padding: [10, 10, 10, 10] });
    			}
    		}
    	};

    	return [track, recording];
    }

    class Map_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { track: 0, recording: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Map_1",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*track*/ ctx[0] === undefined && !("track" in props)) {
    			console_1.warn("<Map> was created without expected prop 'track'");
    		}

    		if (/*recording*/ ctx[1] === undefined && !("recording" in props)) {
    			console_1.warn("<Map> was created without expected prop 'recording'");
    		}
    	}

    	get track() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set track(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get recording() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set recording(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }
    function quintOut(t) {
        return --t * t * t * t * t + 1;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function crossfade(_a) {
        var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
        const to_receive = new Map();
        const to_send = new Map();
        function crossfade(from, node, params) {
            const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);
            const to = node.getBoundingClientRect();
            const dx = from.left - to.left;
            const dy = from.top - to.top;
            const dw = from.width / to.width;
            const dh = from.height / to.height;
            const d = Math.sqrt(dx * dx + dy * dy);
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            const opacity = +style.opacity;
            return {
                delay,
                duration: is_function(duration) ? duration(d) : duration,
                easing,
                css: (t, u) => `
				opacity: ${t * opacity};
				transform-origin: top left;
				transform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});
			`
            };
        }
        function transition(items, counterparts, intro) {
            return (node, params) => {
                items.set(params.key, {
                    rect: node.getBoundingClientRect()
                });
                return () => {
                    if (counterparts.has(params.key)) {
                        const { rect } = counterparts.get(params.key);
                        counterparts.delete(params.key);
                        return crossfade(rect, node, params);
                    }
                    // if the node is disappearing altogether
                    // (i.e. wasn't claimed by the other list)
                    // then we need to supply an outro
                    items.delete(params.key);
                    return fallback && fallback(node, params, intro);
                };
            };
        }
        return [
            transition(to_send, to_receive, false),
            transition(to_receive, to_send, true)
        ];
    }

    function flip(node, animation, params = {}) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        const scaleX = animation.from.width / node.clientWidth;
        const scaleY = animation.from.height / node.clientHeight;
        const dx = (animation.from.left - animation.to.left) / scaleX;
        const dy = (animation.from.top - animation.to.top) / scaleY;
        const d = Math.sqrt(dx * dx + dy * dy);
        const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
        return {
            delay,
            duration: is_function(duration) ? duration(d) : duration,
            easing,
            css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
        };
    }

    /* src/components/Activity.svelte generated by Svelte v3.32.1 */
    const file$1 = "src/components/Activity.svelte";

    function create_fragment$1(ctx) {
    	let button;
    	let div;
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			t0 = text(/*size*/ ctx[1]);
    			t1 = text("m");
    			attr_dev(div, "id", /*id*/ ctx[0]);
    			attr_dev(div, "class", "map svelte-1q62iup");
    			add_location(div, file$1, 66, 2, 1437);
    			attr_dev(button, "class", "svelte-1q62iup");
    			add_location(button, file$1, 65, 0, 1417);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			append_dev(div, t0);
    			append_dev(div, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*size*/ 2) set_data_dev(t0, /*size*/ ctx[1]);

    			if (dirty & /*id*/ 1) {
    				attr_dev(div, "id", /*id*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let points;
    	let geometry;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Activity", slots, []);
    	let map;
    	let size;
    	let { id } = $$props;
    	let { track } = $$props;

    	const view = new View({
    			center: [0, 0],
    			zoom: 18,
    			tilePixelRatio: 2
    		});

    	const trackFeature = new Feature();

    	const vectorLayer = new VectorLayer({
    			source: new VectorSource({ features: [trackFeature] })
    		});

    	onMount(() => {
    		map = new Map$1({ view, layers: [vectorLayer], target: id });
    		$$invalidate(1, size = geometry.getLineStrings().reduce((size, line) => size + line.getLength(), 0));
    	});

    	const writable_props = ["id", "track"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Activity> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble($$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("track" in $$props) $$invalidate(2, track = $$props.track);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		Map: Map$1,
    		View,
    		Feature,
    		Stroke,
    		Style,
    		VectorLayer,
    		VectorSource,
    		MultiLineString,
    		map,
    		size,
    		id,
    		track,
    		view,
    		trackFeature,
    		vectorLayer,
    		points,
    		geometry
    	});

    	$$self.$inject_state = $$props => {
    		if ("map" in $$props) map = $$props.map;
    		if ("size" in $$props) $$invalidate(1, size = $$props.size);
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("track" in $$props) $$invalidate(2, track = $$props.track);
    		if ("points" in $$props) $$invalidate(3, points = $$props.points);
    		if ("geometry" in $$props) $$invalidate(4, geometry = $$props.geometry);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*track*/ 4) {
    			$$invalidate(3, points = track.points.map(([x, y]) => [x, y]));
    		}

    		if ($$self.$$.dirty & /*points*/ 8) {
    			$$invalidate(4, geometry = new MultiLineString([points]));
    		}

    		if ($$self.$$.dirty & /*geometry*/ 16) {
    			trackFeature.setGeometry(geometry);
    		}

    		if ($$self.$$.dirty & /*geometry*/ 16) {
    			view.fit(geometry, { padding: [10, 10, 10, 10] });
    		}
    	};

    	trackFeature.setStyle(new Style({ stroke: new Stroke({ width: 4 }) }));
    	return [id, size, track, points, geometry, click_handler];
    }

    class Activity extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { id: 0, track: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Activity",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
    			console.warn("<Activity> was created without expected prop 'id'");
    		}

    		if (/*track*/ ctx[2] === undefined && !("track" in props)) {
    			console.warn("<Activity> was created without expected prop 'track'");
    		}
    	}

    	get id() {
    		throw new Error("<Activity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Activity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get track() {
    		throw new Error("<Activity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set track(value) {
    		throw new Error("<Activity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Track.svelte generated by Svelte v3.32.1 */

    const file$2 = "src/components/Track.svelte";

    function create_fragment$2(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Track";
    			add_location(p, file$2, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Track", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Track> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Track extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Track",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/components/Feed.svelte generated by Svelte v3.32.1 */

    const { Map: Map_1$1, Object: Object_1, console: console_1$1 } = globals;
    const file$3 = "src/components/Feed.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (76:2) {#each selectedTracks as id (id)}
    function create_each_block_1(key_1, ctx) {
    	let div;
    	let t0_value = /*id*/ ctx[8] + "";
    	let t0;
    	let t1;
    	let map;
    	let t2;
    	let div_intro;
    	let div_outro;
    	let rect;
    	let stop_animation = noop;
    	let current;

    	map = new Map_1({
    			props: {
    				track: /*tracks*/ ctx[0][/*id*/ ctx[8]],
    				recording: false
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(map.$$.fragment);
    			t2 = space();
    			attr_dev(div, "class", "svelte-18n5cps");
    			add_location(div, file$3, 76, 4, 1635);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			mount_component(map, div, null);
    			append_dev(div, t2);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*selectedTracks*/ 4) && t0_value !== (t0_value = /*id*/ ctx[8] + "")) set_data_dev(t0, t0_value);
    			const map_changes = {};
    			if (dirty & /*tracks, selectedTracks*/ 5) map_changes.track = /*tracks*/ ctx[0][/*id*/ ctx[8]];
    			map.$set(map_changes);
    		},
    		r: function measure() {
    			rect = div.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div);
    			stop_animation();
    			add_transform(div, rect);
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div, rect, flip, {});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(map.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, /*receive*/ ctx[4], { key: /*id*/ ctx[8] });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(map.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, /*send*/ ctx[3], { key: /*id*/ ctx[8] });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(map);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(76:2) {#each selectedTracks as id (id)}",
    		ctx
    	});

    	return block;
    }

    // (85:2) {#each Object.keys(tracks).filter((trackId) => trackId !== (selected[0] && selected[0].id)) as id (id)}
    function create_each_block(key_1, ctx) {
    	let span;
    	let activity;
    	let t;
    	let span_intro;
    	let span_outro;
    	let rect;
    	let stop_animation = noop;
    	let current;

    	activity = new Activity({
    			props: {
    				track: /*tracks*/ ctx[0][/*id*/ ctx[8]],
    				id: /*id*/ ctx[8]
    			},
    			$$inline: true
    		});

    	activity.$on("click", function () {
    		if (is_function(/*showTrack*/ ctx[5](/*id*/ ctx[8]))) /*showTrack*/ ctx[5](/*id*/ ctx[8]).apply(this, arguments);
    	});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			span = element("span");
    			create_component(activity.$$.fragment);
    			t = space();
    			add_location(span, file$3, 85, 4, 1930);
    			this.first = span;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(activity, span, null);
    			append_dev(span, t);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const activity_changes = {};
    			if (dirty & /*tracks, selected*/ 3) activity_changes.track = /*tracks*/ ctx[0][/*id*/ ctx[8]];
    			if (dirty & /*tracks, selected*/ 3) activity_changes.id = /*id*/ ctx[8];
    			activity.$set(activity_changes);
    		},
    		r: function measure() {
    			rect = span.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(span);
    			stop_animation();
    			add_transform(span, rect);
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(span, rect, flip, {});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(activity.$$.fragment, local);

    			add_render_callback(() => {
    				if (span_outro) span_outro.end(1);
    				if (!span_intro) span_intro = create_in_transition(span, /*receive*/ ctx[4], { key: /*id*/ ctx[8] });
    				span_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(activity.$$.fragment, local);
    			if (span_intro) span_intro.invalidate();
    			span_outro = create_out_transition(span, /*send*/ ctx[3], { key: /*id*/ ctx[8] });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(activity);
    			if (detaching && span_outro) span_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(85:2) {#each Object.keys(tracks).filter((trackId) => trackId !== (selected[0] && selected[0].id)) as id (id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let ul0;
    	let t0;
    	let each_blocks_1 = [];
    	let each0_lookup = new Map_1$1();
    	let t1;
    	let ul1;
    	let t2;
    	let each_blocks = [];
    	let each1_lookup = new Map_1$1();
    	let current;
    	let each_value_1 = /*selectedTracks*/ ctx[2];
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*id*/ ctx[8];
    	validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each0_lookup.set(key, each_blocks_1[i] = create_each_block_1(key, child_ctx));
    	}

    	let each_value = Object.keys(/*tracks*/ ctx[0]).filter(/*func*/ ctx[6]);
    	validate_each_argument(each_value);
    	const get_key_1 = ctx => /*id*/ ctx[8];
    	validate_each_keys(ctx, each_value, get_each_context, get_key_1);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key_1(child_ctx);
    		each1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			ul0 = element("ul");
    			t0 = text("selected:\n  ");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t1 = space();
    			ul1 = element("ul");
    			t2 = text("not selected:\n  ");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul0, "class", "svelte-18n5cps");
    			add_location(ul0, file$3, 73, 0, 1578);
    			attr_dev(ul1, "class", "svelte-18n5cps");
    			add_location(ul1, file$3, 82, 0, 1799);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul0, anchor);
    			append_dev(ul0, t0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(ul0, null);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, ul1, anchor);
    			append_dev(ul1, t2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selectedTracks, tracks*/ 5) {
    				each_value_1 = /*selectedTracks*/ ctx[2];
    				validate_each_argument(each_value_1);
    				group_outros();
    				for (let i = 0; i < each_blocks_1.length; i += 1) each_blocks_1[i].r();
    				validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
    				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_1, each0_lookup, ul0, fix_and_outro_and_destroy_block, create_each_block_1, null, get_each_context_1);
    				for (let i = 0; i < each_blocks_1.length; i += 1) each_blocks_1[i].a();
    				check_outros();
    			}

    			if (dirty & /*Object, tracks, selected, showTrack*/ 35) {
    				each_value = Object.keys(/*tracks*/ ctx[0]).filter(/*func*/ ctx[6]);
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context, get_key_1);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value, each1_lookup, ul1, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].d();
    			}

    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(ul1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let selectedTracks;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Feed", slots, []);
    	let { tracks } = $$props;

    	const [send, receive] = crossfade({
    		fallback(node, params) {
    			const style = getComputedStyle(node);
    			const transform = style.transform === "none" ? "" : style.transform;

    			return {
    				duration: 600,
    				easing: quintOut,
    				css: t => `
					transform: ${transform} scale(${t});
					opacity: ${t}
				`
    			};
    		}
    	});

    	let selected = [];
    	const selectedStore = writable(selected);
    	selectedStore.subscribe(value => $$invalidate(1, selected = value));

    	const showTrack = trackId => () => {
    		console.log("show track", trackId);
    		selectedStore.set([tracks[trackId]]);
    	};

    	const writable_props = ["tracks"];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Feed> was created with unknown prop '${key}'`);
    	});

    	const func = trackId => trackId !== (selected[0] && selected[0].id);

    	$$self.$$set = $$props => {
    		if ("tracks" in $$props) $$invalidate(0, tracks = $$props.tracks);
    	};

    	$$self.$capture_state = () => ({
    		quintOut,
    		crossfade,
    		flip,
    		writable,
    		Activity,
    		Track,
    		Map: Map_1,
    		tracks,
    		send,
    		receive,
    		selected,
    		selectedStore,
    		showTrack,
    		selectedTracks
    	});

    	$$self.$inject_state = $$props => {
    		if ("tracks" in $$props) $$invalidate(0, tracks = $$props.tracks);
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    		if ("selectedTracks" in $$props) $$invalidate(2, selectedTracks = $$props.selectedTracks);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*tracks, selected*/ 3) {
    			$$invalidate(2, selectedTracks = Object.keys(tracks).filter(trackId => trackId === (selected[0] && selected[0].id)));
    		}
    	};

    	return [tracks, selected, selectedTracks, send, receive, showTrack, func];
    }

    class Feed extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { tracks: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Feed",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*tracks*/ ctx[0] === undefined && !("tracks" in props)) {
    			console_1$1.warn("<Feed> was created without expected prop 'tracks'");
    		}
    	}

    	get tracks() {
    		throw new Error("<Feed>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tracks(value) {
    		throw new Error("<Feed>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Auth.svelte generated by Svelte v3.32.1 */
    const file$4 = "src/components/Auth.svelte";

    function create_fragment$4(ctx) {
    	let form;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let label1;
    	let t4;
    	let input1;
    	let t5;
    	let div;
    	let button0;
    	let t7;
    	let button1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			label0 = element("label");
    			label0.textContent = "Email";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			label1 = element("label");
    			label1.textContent = "Password";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			div = element("div");
    			button0 = element("button");
    			button0.textContent = "Sign In";
    			t7 = space();
    			button1 = element("button");
    			button1.textContent = "Sign Up";
    			attr_dev(label0, "for", "email");
    			add_location(label0, file$4, 18, 2, 454);
    			attr_dev(input0, "type", "email");
    			attr_dev(input0, "name", "email");
    			attr_dev(input0, "placeholder", "Email");
    			add_location(input0, file$4, 19, 2, 489);
    			attr_dev(label1, "for", "password");
    			add_location(label1, file$4, 20, 2, 547);
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "name", "password");
    			add_location(input1, file$4, 21, 2, 588);
    			attr_dev(button0, "type", "button");
    			add_location(button0, file$4, 23, 4, 642);
    			attr_dev(button1, "type", "button");
    			add_location(button1, file$4, 24, 4, 718);
    			add_location(div, file$4, 22, 2, 632);
    			add_location(form, file$4, 17, 0, 399);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, label0);
    			append_dev(form, t1);
    			append_dev(form, input0);
    			append_dev(form, t2);
    			append_dev(form, label1);
    			append_dev(form, t4);
    			append_dev(form, input1);
    			append_dev(form, t5);
    			append_dev(form, div);
    			append_dev(div, button0);
    			append_dev(div, t7);
    			append_dev(div, button1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[3], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[4], false, false, false),
    					listen_dev(form, "submit", /*onSubmit*/ ctx[1], false, false, false),
    					listen_dev(form, "change", /*onChange*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Auth", slots, []);
    	let state = {};
    	const store = writable(state);
    	store.subscribe(value => $$invalidate(0, state = value));
    	const onSubmit = event => event.preventDefault();

    	const onChange = event => {
    		const { name, value } = event.target;
    		store.set({ ...state, [name]: value });
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Auth> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => signIn(state);
    	const click_handler_1 = () => signUp(state);

    	$$self.$capture_state = () => ({
    		writable,
    		signIn,
    		signUp,
    		state,
    		store,
    		onSubmit,
    		onChange
    	});

    	$$self.$inject_state = $$props => {
    		if ("state" in $$props) $$invalidate(0, state = $$props.state);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [state, onSubmit, onChange, click_handler, click_handler_1];
    }

    class Auth extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Auth",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/components/Icon/tracks.svelte generated by Svelte v3.32.1 */

    const file$5 = "src/components/Icon/tracks.svelte";

    function create_fragment$5(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M1.7453 27.774L1.96063 27.8176C5.82394 28.6012 8.3555 23.8964 5.57314 21.104V21.104C2.20604 17.7247 6.547 12.3599 10.5545 14.9478L18.0935 19.8162C22.6494 22.7582 27.7193 16.8829 24.142 12.8067V12.8067C20.7914 8.98885 24.2514 3.10751 29.2162 4.18161L34.1721 5.2538");
    			attr_dev(path, "stroke-width", "2");
    			attr_dev(path, "stroke-miterlimit", "10");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "class", "svelte-jetuy2");
    			add_location(path, file$5, 12, 2, 160);
    			attr_dev(svg, "width", "36");
    			attr_dev(svg, "height", "32");
    			attr_dev(svg, "viewBox", "0 0 36 32");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$5, 6, 0, 52);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Tracks", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tracks> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Tracks extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tracks",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src/components/Icon/start.svelte generated by Svelte v3.32.1 */

    const file$6 = "src/components/Icon/start.svelte";

    function create_fragment$6(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke", "none");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M20 28C24.4183 28 28 24.4183 28 20C28 15.5817 24.4183 12 20 12C15.5817 12 12 15.5817 12 20C12 24.4183 15.5817 28 20 28ZM20 40C31.0457 40 40 31.0457 40 20C40 8.9543 31.0457 0 20 0C8.9543 0 0 8.9543 0 20C0 31.0457 8.9543 40 20 40ZM20 9C13.9249 9 9 13.9249 9 20C9 26.0751 13.9249 31 20 31C26.0751 31 31 26.0751 31 20C31 13.9249 26.0751 9 20 9ZM6 20C6 12.268 12.268 6 20 6C27.732 6 34 12.268 34 20C34 27.732 27.732 34 20 34C12.268 34 6 27.732 6 20Z");
    			attr_dev(path, "fill", "#004FFF");
    			attr_dev(path, "class", "svelte-1icrnoj");
    			add_location(path, file$6, 7, 2, 128);
    			attr_dev(svg, "viewBox", "0 0 40 40");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "class", "svelte-1icrnoj");
    			add_location(svg, file$6, 6, 0, 53);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Start", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Start> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Start extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Start",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src/components/Icon/search.svelte generated by Svelte v3.32.1 */

    const file$7 = "src/components/Icon/search.svelte";

    function create_fragment$7(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M21 21L32 32");
    			attr_dev(path0, "stroke-width", "2");
    			attr_dev(path0, "stroke-miterlimit", "10");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "class", "svelte-jetuy2");
    			add_location(path0, file$7, 12, 2, 160);
    			attr_dev(path1, "d", "M12.5 24C18.8513 24 24 18.8513 24 12.5C24 6.14873 18.8513 1 12.5 1C6.14873 1 1 6.14873 1 12.5C1 18.8513 6.14873 24 12.5 24Z");
    			attr_dev(path1, "stroke-width", "2");
    			attr_dev(path1, "stroke-miterlimit", "10");
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "class", "svelte-jetuy2");
    			add_location(path1, file$7, 18, 2, 300);
    			attr_dev(svg, "width", "33");
    			attr_dev(svg, "height", "33");
    			attr_dev(svg, "viewBox", "0 0 33 33");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$7, 6, 0, 52);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Search", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Search> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Search extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Search",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* src/components/Icon/plus.svelte generated by Svelte v3.32.1 */

    const file$8 = "src/components/Icon/plus.svelte";

    function create_fragment$8(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M8.5 16.5C12.6421 16.5 16 13.1421 16 9C16 4.85786 12.6421 1.5 8.5 1.5C4.35786 1.5 1 4.85786 1 9C1 13.1421 4.35786 16.5 8.5 16.5Z");
    			attr_dev(path0, "stroke", "#F5FAFE");
    			attr_dev(path0, "stroke-width", "2");
    			attr_dev(path0, "stroke-miterlimit", "10");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			add_location(path0, file$8, 6, 2, 108);
    			attr_dev(path1, "d", "M12.5 9H4.5M8.5 5V13V5Z");
    			attr_dev(path1, "stroke", "#F5FAFE");
    			attr_dev(path1, "stroke-width", "2");
    			attr_dev(path1, "stroke-miterlimit", "10");
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			add_location(path1, file$8, 13, 2, 385);
    			attr_dev(svg, "width", "17");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "viewBox", "0 0 17 18");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$8, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Plus", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Plus> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Plus extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Plus",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src/components/Icon/home.svelte generated by Svelte v3.32.1 */

    const file$9 = "src/components/Icon/home.svelte";

    function create_fragment$9(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M4 13V33H28V17V13L16 1L4 13Z");
    			attr_dev(path, "stroke-width", "2");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "class", "svelte-jetuy2");
    			add_location(path, file$9, 12, 2, 160);
    			attr_dev(svg, "width", "32");
    			attr_dev(svg, "height", "34");
    			attr_dev(svg, "viewBox", "0 0 32 34");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$9, 6, 0, 52);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Home", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* src/components/Icon/bell.svelte generated by Svelte v3.32.1 */

    const file$a = "src/components/Icon/bell.svelte";

    function create_fragment$a(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M22.6667 11.6667L23.6523 11.8356C23.6619 11.7798 23.6667 11.7233 23.6667 11.6667H22.6667ZM5.33333 11.6667H4.33333C4.33333 11.7233 4.33814 11.7798 4.34771 11.8356L5.33333 11.6667ZM1 26.9048L0.229447 26.2674C-0.0174454 26.5659 -0.0697538 26.9801 0.0951861 27.3306C0.260126 27.6811 0.612642 27.9048 1 27.9048V26.9048ZM27 26.9048V27.9048C27.3874 27.9048 27.7399 27.6811 27.9048 27.3306C28.0698 26.9801 28.0174 26.5659 27.7706 26.2674L27 26.9048ZM22.6667 19.2857L21.7055 19.5618L22.6667 19.2857ZM5.33333 19.2857L6.29447 19.5618L5.33333 19.2857ZM19.7778 26.9048H20.7778V25.9048H19.7778V26.9048ZM8.22222 26.9048V25.9048H7.22222V26.9048H8.22222ZM6.33333 11.6667C6.33333 8.88262 7.06315 6.44527 8.36843 4.7297C9.65285 3.04154 11.5282 2 14 2V0C10.8876 0 8.4296 1.34628 6.77675 3.51869C5.14474 5.66369 4.33333 8.55967 4.33333 11.6667H6.33333ZM14 2C16.5468 2 18.4049 2.85682 19.651 4.39208C20.9235 5.95994 21.6667 8.36975 21.6667 11.6667H23.6667C23.6667 8.10645 22.8686 5.18291 21.2039 3.13173C19.5126 1.04794 17.0374 0 14 0V2ZM1 27.9048H27V25.9048H1V27.9048ZM27 26.9048C27.7706 26.2674 27.7706 26.2675 27.7707 26.2676C27.7707 26.2676 27.7708 26.2676 27.7708 26.2676C27.7708 26.2677 27.7708 26.2676 27.7707 26.2676C27.7705 26.2674 27.7702 26.2669 27.7696 26.2663C27.7686 26.265 27.7667 26.2627 27.7641 26.2595C27.7588 26.2531 27.7506 26.243 27.7395 26.2293C27.7173 26.2019 27.6836 26.1602 27.6399 26.1052C27.5525 25.9951 27.425 25.832 27.2681 25.6243C26.9539 25.2084 26.5235 24.6159 26.0618 23.9135C25.127 22.4913 24.1096 20.6869 23.6278 19.0096L21.7055 19.5618C22.2712 21.5312 23.4205 23.5363 24.3905 25.012C24.8811 25.7585 25.3377 26.3871 25.6723 26.8299C25.8398 27.0516 25.9772 27.2273 26.0736 27.3487C26.1218 27.4095 26.1598 27.4566 26.1862 27.4892C26.1994 27.5055 26.2097 27.5181 26.217 27.527C26.2206 27.5314 26.2235 27.5349 26.2256 27.5375C26.2266 27.5387 26.2275 27.5397 26.2281 27.5405C26.2284 27.5409 26.2287 27.5412 26.2289 27.5415C26.229 27.5416 26.2292 27.5418 26.2292 27.5419C26.2293 27.542 26.2294 27.5421 27 26.9048ZM23.6278 19.0096C23.2697 17.7629 23.2567 16.0058 23.3578 14.4742C23.4072 13.7257 23.4814 13.0619 23.5433 12.5856C23.5742 12.3478 23.6019 12.1576 23.6217 12.0282C23.6315 11.9635 23.6394 11.914 23.6447 11.8813C23.6474 11.865 23.6494 11.8529 23.6507 11.8452C23.6513 11.8414 23.6518 11.8386 23.6521 11.837C23.6522 11.8362 23.6523 11.8357 23.6523 11.8355C23.6523 11.8354 23.6523 11.8353 23.6523 11.8353C23.6523 11.8353 23.6523 11.8354 23.6523 11.8354C23.6523 11.8355 23.6523 11.8356 22.6667 11.6667C21.681 11.4977 21.681 11.4979 21.681 11.498C21.681 11.4981 21.6809 11.4983 21.6809 11.4984C21.6809 11.4988 21.6808 11.4991 21.6807 11.4996C21.6806 11.5005 21.6804 11.5017 21.6801 11.5032C21.6796 11.5063 21.6789 11.5104 21.678 11.5157C21.6763 11.5262 21.6738 11.5413 21.6706 11.5606C21.6643 11.5992 21.6555 11.655 21.6446 11.7263C21.6228 11.8689 21.593 12.0738 21.56 12.3279C21.4941 12.8352 21.4149 13.5422 21.3621 14.3425C21.2587 15.9086 21.2457 17.961 21.7055 19.5618L23.6278 19.0096ZM5.33333 11.6667C4.34771 11.8356 4.34769 11.8355 4.34768 11.8354C4.34767 11.8354 4.34766 11.8353 4.34766 11.8353C4.34766 11.8353 4.34766 11.8354 4.34768 11.8355C4.34772 11.8357 4.34781 11.8362 4.34795 11.837C4.34822 11.8386 4.34868 11.8414 4.34932 11.8452C4.35061 11.8529 4.35261 11.865 4.35526 11.8813C4.36057 11.914 4.36846 11.9635 4.37834 12.0282C4.3981 12.1576 4.4258 12.3478 4.45669 12.5856C4.51858 13.0619 4.59282 13.7257 4.64224 14.4742C4.74334 16.0058 4.73032 17.7629 4.3722 19.0096L6.29447 19.5618C6.7543 17.961 6.74128 15.9086 6.63789 14.3425C6.58506 13.5422 6.50594 12.8352 6.44002 12.3279C6.40702 12.0738 6.3772 11.8689 6.35543 11.7263C6.34454 11.655 6.33565 11.5992 6.32938 11.5606C6.32624 11.5413 6.32375 11.5262 6.32199 11.5157C6.32111 11.5104 6.32041 11.5063 6.3199 11.5032C6.31964 11.5017 6.31944 11.5005 6.31928 11.4996C6.3192 11.4991 6.31914 11.4988 6.31908 11.4984C6.31905 11.4983 6.31902 11.4981 6.31901 11.498C6.31898 11.4979 6.31896 11.4977 5.33333 11.6667ZM4.3722 19.0096C3.89042 20.6869 2.87302 22.4913 1.93822 23.9135C1.47647 24.6159 1.04614 25.2084 0.7319 25.6243C0.574959 25.832 0.447452 25.9951 0.360057 26.1052C0.316373 26.1602 0.282749 26.2019 0.260526 26.2293C0.249415 26.243 0.241158 26.2531 0.235921 26.2595C0.233303 26.2627 0.23144 26.265 0.230354 26.2663C0.229811 26.2669 0.229463 26.2674 0.22931 26.2676C0.229234 26.2676 0.229208 26.2677 0.22923 26.2676C0.229242 26.2676 0.229296 26.2676 0.229302 26.2676C0.229368 26.2675 0.229447 26.2674 1 26.9048C1.77055 27.5421 1.77066 27.542 1.77077 27.5419C1.77083 27.5418 1.77096 27.5416 1.77107 27.5415C1.77129 27.5412 1.77157 27.5409 1.77189 27.5405C1.77253 27.5397 1.77338 27.5387 1.77442 27.5375C1.7765 27.5349 1.77936 27.5314 1.78299 27.527C1.79026 27.5181 1.80058 27.5055 1.81379 27.4892C1.84021 27.4566 1.8782 27.4095 1.92641 27.3487C2.0228 27.2273 2.16019 27.0516 2.32766 26.8299C2.66225 26.3871 3.11885 25.7585 3.6095 25.012C4.57949 23.5363 5.72876 21.5312 6.29447 19.5618L4.3722 19.0096ZM18.7778 26.9048C18.7778 29.7699 16.589 32 14 32V34C17.793 34 20.7778 30.7723 20.7778 26.9048H18.7778ZM14 32C11.411 32 9.22222 29.7699 9.22222 26.9048H7.22222C7.22222 30.7723 10.207 34 14 34V32ZM8.22222 27.9048H19.7778V25.9048H8.22222V27.9048Z");
    			attr_dev(path, "fill", "#0C090D");
    			add_location(path, file$a, 1, 2, 75);
    			attr_dev(svg, "viewBox", "0 0 28 34");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$a, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Bell", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Bell> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Bell extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Bell",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src/components/Icon/arrowRight.svelte generated by Svelte v3.32.1 */

    const file$b = "src/components/Icon/arrowRight.svelte";

    function create_fragment$b(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "d", "M1.37168 17.887L1.47934 17.9088C3.41099 18.3006 4.67677 15.9482 3.2856 14.552V14.552C1.60204 12.8624 3.77253 10.1799 5.77626 11.4739L9.54579 13.9081C11.8237 15.3791 14.3587 12.4414 12.57 10.4034V10.4034C10.8947 8.49443 12.6247 5.55375 15.1071 6.09081L17.5851 6.6269");
    			attr_dev(path0, "stroke", "#0C090D");
    			attr_dev(path0, "stroke-width", "2");
    			attr_dev(path0, "stroke-miterlimit", "10");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			add_location(path0, file$b, 6, 2, 110);
    			attr_dev(path1, "d", "M33.884 6.88V8.368H30.924V18H29.1V8.368H26.124V6.88H33.884ZM37.5553 10.464C37.8219 10.016 38.1739 9.66933 38.6113 9.424C39.0593 9.168 39.5873 9.04 40.1953 9.04V10.928H39.7313C39.0166 10.928 38.4726 11.1093 38.0993 11.472C37.7366 11.8347 37.5553 12.464 37.5553 13.36V18H35.7313V9.184H37.5553V10.464ZM42.7999 8.016C42.4692 8.016 42.1919 7.904 41.9679 7.68C41.7439 7.456 41.6319 7.17867 41.6319 6.848C41.6319 6.51733 41.7439 6.24 41.9679 6.016C42.1919 5.792 42.4692 5.68 42.7999 5.68C43.1199 5.68 43.3919 5.792 43.6159 6.016C43.8399 6.24 43.9519 6.51733 43.9519 6.848C43.9519 7.17867 43.8399 7.456 43.6159 7.68C43.3919 7.904 43.1199 8.016 42.7999 8.016ZM43.6959 9.184V18H41.8719V9.184H43.6959ZM47.9146 6.16V18H46.0906V6.16H47.9146ZM54.8694 9.04C55.5414 9.04 56.1387 9.184 56.6614 9.472C57.1947 9.76 57.6107 10.1867 57.9094 10.752C58.2187 11.3173 58.3734 12 58.3734 12.8V18H56.5654V13.072C56.5654 12.2827 56.368 11.68 55.9734 11.264C55.5787 10.8373 55.04 10.624 54.3574 10.624C53.6747 10.624 53.1307 10.8373 52.7254 11.264C52.3307 11.68 52.1334 12.2827 52.1334 13.072V18H50.3094V6.16H52.1334V10.208C52.4427 9.83467 52.832 9.54667 53.3014 9.344C53.7814 9.14133 54.304 9.04 54.8694 9.04ZM64.524 18.144C63.692 18.144 62.94 17.9573 62.268 17.584C61.596 17.2 61.068 16.6667 60.684 15.984C60.3 15.2907 60.108 14.4907 60.108 13.584C60.108 12.688 60.3053 11.8933 60.7 11.2C61.0947 10.5067 61.6333 9.97333 62.316 9.6C62.9987 9.22667 63.7613 9.04 64.604 9.04C65.4467 9.04 66.2093 9.22667 66.892 9.6C67.5747 9.97333 68.1133 10.5067 68.508 11.2C68.9027 11.8933 69.1 12.688 69.1 13.584C69.1 14.48 68.8973 15.2747 68.492 15.968C68.0867 16.6613 67.532 17.2 66.828 17.584C66.1347 17.9573 65.3667 18.144 64.524 18.144ZM64.524 16.56C64.9933 16.56 65.4307 16.448 65.836 16.224C66.252 16 66.588 15.664 66.844 15.216C67.1 14.768 67.228 14.224 67.228 13.584C67.228 12.944 67.1053 12.4053 66.86 11.968C66.6147 11.52 66.2893 11.184 65.884 10.96C65.4787 10.736 65.0413 10.624 64.572 10.624C64.1027 10.624 63.6653 10.736 63.26 10.96C62.8653 11.184 62.5507 11.52 62.316 11.968C62.0813 12.4053 61.964 12.944 61.964 13.584C61.964 14.5333 62.204 15.2693 62.684 15.792C63.1747 16.304 63.788 16.56 64.524 16.56ZM74.4514 13.552C74.4514 12.6667 74.6327 11.8827 74.9954 11.2C75.3687 10.5173 75.87 9.98933 76.4994 9.616C77.1394 9.232 77.8487 9.04 78.6274 9.04C79.2034 9.04 79.7687 9.168 80.3234 9.424C80.8887 9.66933 81.3367 10 81.6674 10.416V6.16H83.5074V18H81.6674V16.672C81.3687 17.0987 80.9527 17.4507 80.4194 17.728C79.8967 18.0053 79.294 18.144 78.6114 18.144C77.8434 18.144 77.1394 17.952 76.4994 17.568C75.87 17.1733 75.3687 16.6293 74.9954 15.936C74.6327 15.232 74.4514 14.4373 74.4514 13.552ZM81.6674 13.584C81.6674 12.976 81.5394 12.448 81.2834 12C81.038 11.552 80.7127 11.2107 80.3074 10.976C79.902 10.7413 79.4647 10.624 78.9954 10.624C78.526 10.624 78.0887 10.7413 77.6834 10.976C77.278 11.2 76.9474 11.536 76.6914 11.984C76.446 12.4213 76.3234 12.944 76.3234 13.552C76.3234 14.16 76.446 14.6933 76.6914 15.152C76.9474 15.6107 77.278 15.9627 77.6834 16.208C78.0994 16.4427 78.5367 16.56 78.9954 16.56C79.4647 16.56 79.902 16.4427 80.3074 16.208C80.7127 15.9733 81.038 15.632 81.2834 15.184C81.5394 14.7253 81.6674 14.192 81.6674 13.584ZM89.7271 18.144C88.8951 18.144 88.1431 17.9573 87.4711 17.584C86.7991 17.2 86.2711 16.6667 85.8871 15.984C85.5031 15.2907 85.3111 14.4907 85.3111 13.584C85.3111 12.688 85.5085 11.8933 85.9031 11.2C86.2978 10.5067 86.8365 9.97333 87.5191 9.6C88.2018 9.22667 88.9645 9.04 89.8071 9.04C90.6498 9.04 91.4125 9.22667 92.0951 9.6C92.7778 9.97333 93.3165 10.5067 93.7111 11.2C94.1058 11.8933 94.3031 12.688 94.3031 13.584C94.3031 14.48 94.1005 15.2747 93.6951 15.968C93.2898 16.6613 92.7351 17.2 92.0311 17.584C91.3378 17.9573 90.5698 18.144 89.7271 18.144ZM89.7271 16.56C90.1965 16.56 90.6338 16.448 91.0391 16.224C91.4551 16 91.7911 15.664 92.0471 15.216C92.3031 14.768 92.4311 14.224 92.4311 13.584C92.4311 12.944 92.3085 12.4053 92.0631 11.968C91.8178 11.52 91.4925 11.184 91.0871 10.96C90.6818 10.736 90.2445 10.624 89.7751 10.624C89.3058 10.624 88.8685 10.736 88.4631 10.96C88.0685 11.184 87.7538 11.52 87.5191 11.968C87.2845 12.4053 87.1671 12.944 87.1671 13.584C87.1671 14.5333 87.4071 15.2693 87.8871 15.792C88.3778 16.304 88.9911 16.56 89.7271 16.56ZM103.927 18.112C103.18 18.112 102.508 17.984 101.911 17.728C101.313 17.4613 100.844 17.088 100.503 16.608C100.161 16.128 99.9905 15.568 99.9905 14.928H101.943C101.985 15.408 102.172 15.8027 102.503 16.112C102.844 16.4213 103.319 16.576 103.927 16.576C104.556 16.576 105.047 16.4267 105.399 16.128C105.751 15.8187 105.927 15.424 105.927 14.944C105.927 14.5707 105.815 14.2667 105.591 14.032C105.377 13.7973 105.105 13.616 104.775 13.488C104.455 13.36 104.007 13.2213 103.431 13.072C102.705 12.88 102.113 12.688 101.655 12.496C101.207 12.2933 100.823 11.984 100.503 11.568C100.183 11.152 100.023 10.5973 100.023 9.904C100.023 9.264 100.183 8.704 100.503 8.224C100.823 7.744 101.271 7.376 101.847 7.12C102.423 6.864 103.089 6.736 103.847 6.736C104.924 6.736 105.804 7.008 106.487 7.552C107.18 8.08533 107.564 8.82133 107.639 9.76H105.623C105.591 9.35467 105.399 9.008 105.047 8.72C104.695 8.432 104.231 8.288 103.655 8.288C103.132 8.288 102.705 8.42133 102.375 8.688C102.044 8.95467 101.879 9.33867 101.879 9.84C101.879 10.1813 101.98 10.464 102.183 10.688C102.396 10.9013 102.663 11.072 102.983 11.2C103.303 11.328 103.74 11.4667 104.295 11.616C105.031 11.8187 105.628 12.0213 106.087 12.224C106.556 12.4267 106.951 12.7413 107.271 13.168C107.601 13.584 107.767 14.144 107.767 14.848C107.767 15.4133 107.612 15.9467 107.303 16.448C107.004 16.9493 106.561 17.3547 105.975 17.664C105.399 17.9627 104.716 18.112 103.927 18.112ZM110.655 18.112C110.324 18.112 110.047 18 109.823 17.776C109.599 17.552 109.487 17.2747 109.487 16.944C109.487 16.6133 109.599 16.336 109.823 16.112C110.047 15.888 110.324 15.776 110.655 15.776C110.975 15.776 111.247 15.888 111.471 16.112C111.695 16.336 111.807 16.6133 111.807 16.944C111.807 17.2747 111.695 17.552 111.471 17.776C111.247 18 110.975 18.112 110.655 18.112ZM125.71 10.192C125.71 10.7573 125.577 11.2907 125.31 11.792C125.044 12.2933 124.617 12.704 124.03 13.024C123.444 13.3333 122.692 13.488 121.774 13.488H119.758V18H117.934V6.88H121.774C122.628 6.88 123.348 7.02933 123.934 7.328C124.532 7.616 124.974 8.01067 125.262 8.512C125.561 9.01333 125.71 9.57333 125.71 10.192ZM121.774 12C122.468 12 122.985 11.8453 123.326 11.536C123.668 11.216 123.838 10.768 123.838 10.192C123.838 8.976 123.15 8.368 121.774 8.368H119.758V12H121.774ZM135.53 13.376C135.53 13.7067 135.509 14.0053 135.466 14.272H128.73C128.783 14.976 129.045 15.5413 129.514 15.968C129.983 16.3947 130.559 16.608 131.242 16.608C132.223 16.608 132.917 16.1973 133.322 15.376H135.29C135.023 16.1867 134.538 16.8533 133.834 17.376C133.141 17.888 132.277 18.144 131.242 18.144C130.399 18.144 129.642 17.9573 128.97 17.584C128.309 17.2 127.786 16.6667 127.402 15.984C127.029 15.2907 126.842 14.4907 126.842 13.584C126.842 12.6773 127.023 11.8827 127.386 11.2C127.759 10.5067 128.277 9.97333 128.938 9.6C129.61 9.22667 130.378 9.04 131.242 9.04C132.074 9.04 132.815 9.22133 133.466 9.584C134.117 9.94667 134.623 10.4587 134.986 11.12C135.349 11.7707 135.53 12.5227 135.53 13.376ZM133.626 12.8C133.615 12.128 133.375 11.5893 132.906 11.184C132.437 10.7787 131.855 10.576 131.162 10.576C130.533 10.576 129.994 10.7787 129.546 11.184C129.098 11.5787 128.831 12.1173 128.746 12.8H133.626ZM136.717 13.552C136.717 12.6667 136.898 11.8827 137.261 11.2C137.634 10.5173 138.136 9.98933 138.765 9.616C139.405 9.232 140.114 9.04 140.893 9.04C141.469 9.04 142.034 9.168 142.589 9.424C143.154 9.66933 143.602 10 143.933 10.416V6.16H145.773V18H143.933V16.672C143.634 17.0987 143.218 17.4507 142.685 17.728C142.162 18.0053 141.56 18.144 140.877 18.144C140.109 18.144 139.405 17.952 138.765 17.568C138.136 17.1733 137.634 16.6293 137.261 15.936C136.898 15.232 136.717 14.4373 136.717 13.552ZM143.933 13.584C143.933 12.976 143.805 12.448 143.549 12C143.304 11.552 142.978 11.2107 142.573 10.976C142.168 10.7413 141.73 10.624 141.261 10.624C140.792 10.624 140.354 10.7413 139.949 10.976C139.544 11.2 139.213 11.536 138.957 11.984C138.712 12.4213 138.589 12.944 138.589 13.552C138.589 14.16 138.712 14.6933 138.957 15.152C139.213 15.6107 139.544 15.9627 139.949 16.208C140.365 16.4427 140.802 16.56 141.261 16.56C141.73 16.56 142.168 16.4427 142.573 16.208C142.978 15.9733 143.304 15.632 143.549 15.184C143.805 14.7253 143.933 14.192 143.933 13.584ZM149.993 10.464C150.259 10.016 150.611 9.66933 151.049 9.424C151.497 9.168 152.025 9.04 152.633 9.04V10.928H152.169C151.454 10.928 150.91 11.1093 150.537 11.472C150.174 11.8347 149.993 12.464 149.993 13.36V18H148.169V9.184H149.993V10.464ZM158.133 18.144C157.301 18.144 156.549 17.9573 155.877 17.584C155.205 17.2 154.677 16.6667 154.293 15.984C153.909 15.2907 153.717 14.4907 153.717 13.584C153.717 12.688 153.915 11.8933 154.309 11.2C154.704 10.5067 155.243 9.97333 155.925 9.6C156.608 9.22667 157.371 9.04 158.213 9.04C159.056 9.04 159.819 9.22667 160.501 9.6C161.184 9.97333 161.723 10.5067 162.117 11.2C162.512 11.8933 162.709 12.688 162.709 13.584C162.709 14.48 162.507 15.2747 162.101 15.968C161.696 16.6613 161.141 17.2 160.437 17.584C159.744 17.9573 158.976 18.144 158.133 18.144ZM158.133 16.56C158.603 16.56 159.04 16.448 159.445 16.224C159.861 16 160.197 15.664 160.453 15.216C160.709 14.768 160.837 14.224 160.837 13.584C160.837 12.944 160.715 12.4053 160.469 11.968C160.224 11.52 159.899 11.184 159.493 10.96C159.088 10.736 158.651 10.624 158.181 10.624C157.712 10.624 157.275 10.736 156.869 10.96C156.475 11.184 156.16 11.52 155.925 11.968C155.691 12.4053 155.573 12.944 155.573 13.584C155.573 14.5333 155.813 15.2693 156.293 15.792C156.784 16.304 157.397 16.56 158.133 16.56ZM177.805 18H175.981L170.493 9.696V18H168.669V6.864H170.493L175.981 15.152V6.864H177.805V18ZM184.024 18.144C183.192 18.144 182.44 17.9573 181.768 17.584C181.096 17.2 180.568 16.6667 180.184 15.984C179.8 15.2907 179.608 14.4907 179.608 13.584C179.608 12.688 179.805 11.8933 180.2 11.2C180.595 10.5067 181.133 9.97333 181.816 9.6C182.499 9.22667 183.261 9.04 184.104 9.04C184.947 9.04 185.709 9.22667 186.392 9.6C187.075 9.97333 187.613 10.5067 188.008 11.2C188.403 11.8933 188.6 12.688 188.6 13.584C188.6 14.48 188.397 15.2747 187.992 15.968C187.587 16.6613 187.032 17.2 186.328 17.584C185.635 17.9573 184.867 18.144 184.024 18.144ZM184.024 16.56C184.493 16.56 184.931 16.448 185.336 16.224C185.752 16 186.088 15.664 186.344 15.216C186.6 14.768 186.728 14.224 186.728 13.584C186.728 12.944 186.605 12.4053 186.36 11.968C186.115 11.52 185.789 11.184 185.384 10.96C184.979 10.736 184.541 10.624 184.072 10.624C183.603 10.624 183.165 10.736 182.76 10.96C182.365 11.184 182.051 11.52 181.816 11.968C181.581 12.4053 181.464 12.944 181.464 13.584C181.464 14.5333 181.704 15.2693 182.184 15.792C182.675 16.304 183.288 16.56 184.024 16.56ZM192.227 10.464C192.494 10.016 192.846 9.66933 193.283 9.424C193.731 9.168 194.259 9.04 194.867 9.04V10.928H194.403C193.688 10.928 193.144 11.1093 192.771 11.472C192.408 11.8347 192.227 12.464 192.227 13.36V18H190.403V9.184H192.227V10.464ZM198.672 10.672V15.552C198.672 15.8827 198.746 16.1227 198.896 16.272C199.056 16.4107 199.322 16.48 199.696 16.48H200.816V18H199.376C198.554 18 197.925 17.808 197.488 17.424C197.05 17.04 196.832 16.416 196.832 15.552V10.672H195.792V9.184H196.832V6.992H198.672V9.184H200.816V10.672H198.672ZM210.577 13.376C210.577 13.7067 210.556 14.0053 210.513 14.272H203.777C203.83 14.976 204.092 15.5413 204.561 15.968C205.03 16.3947 205.606 16.608 206.289 16.608C207.27 16.608 207.964 16.1973 208.369 15.376H210.337C210.07 16.1867 209.585 16.8533 208.881 17.376C208.188 17.888 207.324 18.144 206.289 18.144C205.446 18.144 204.689 17.9573 204.017 17.584C203.356 17.2 202.833 16.6667 202.449 15.984C202.076 15.2907 201.889 14.4907 201.889 13.584C201.889 12.6773 202.07 11.8827 202.433 11.2C202.806 10.5067 203.324 9.97333 203.985 9.6C204.657 9.22667 205.425 9.04 206.289 9.04C207.121 9.04 207.862 9.22133 208.513 9.584C209.164 9.94667 209.67 10.4587 210.033 11.12C210.396 11.7707 210.577 12.5227 210.577 13.376ZM208.673 12.8C208.662 12.128 208.422 11.5893 207.953 11.184C207.484 10.7787 206.902 10.576 206.209 10.576C205.58 10.576 205.041 10.7787 204.593 11.184C204.145 11.5787 203.878 12.1173 203.793 12.8H208.673Z");
    			attr_dev(path1, "fill", "#004FFF");
    			add_location(path1, file$b, 13, 2, 524);
    			attr_dev(path2, "d", "M343.5 18L350.25 12.003L343.5 6");
    			attr_dev(path2, "stroke", "#0C090D");
    			attr_dev(path2, "stroke-width", "2");
    			attr_dev(path2, "stroke-miterlimit", "10");
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			add_location(path2, file$b, 16, 2, 12912);
    			attr_dev(svg, "width", "352");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 352 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$b, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ArrowRight", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ArrowRight> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ArrowRight extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ArrowRight",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src/components/Icon/index.svelte generated by Svelte v3.32.1 */

    function create_fragment$c(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Icon", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Icon> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ArrowRight,
    		Bell,
    		Home,
    		Plus,
    		Search,
    		Start,
    		Tracks
    	});

    	return [];
    }

    class Icon$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    var Icons = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Icon$1,
        ArrowRight: ArrowRight,
        Bell: Bell,
        Home: Home,
        Plus: Plus,
        Search: Search,
        Start: Start,
        Tracks: Tracks
    });

    /* src/components/Navbar/Cell.svelte generated by Svelte v3.32.1 */

    const file$c = "src/components/Navbar/Cell.svelte";

    function create_fragment$d(ctx) {
    	let button;
    	let t0;
    	let t1;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*icon*/ ctx[1];

    	function switch_props(ctx) {
    		return { $$inline: true };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(/*name*/ ctx[0]);
    			t1 = space();
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(button, "class", "svelte-177bwxx");
    			toggle_class(button, "active", /*active*/ ctx[2]);
    			add_location(button, file$c, 42, 0, 619);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (switch_instance) {
    				mount_component(switch_instance, button, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*name*/ 1) set_data_dev(t0, /*name*/ ctx[0]);

    			if (switch_value !== (switch_value = /*icon*/ ctx[1])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, button, null);
    				} else {
    					switch_instance = null;
    				}
    			}

    			if (dirty & /*active*/ 4) {
    				toggle_class(button, "active", /*active*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Cell", slots, []);
    	let { name } = $$props, { icon } = $$props, { active = null } = $$props;
    	const writable_props = ["name", "icon", "active"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cell> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble($$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ("name" in $$props) $$invalidate(0, name = $$props.name);
    		if ("icon" in $$props) $$invalidate(1, icon = $$props.icon);
    		if ("active" in $$props) $$invalidate(2, active = $$props.active);
    	};

    	$$self.$capture_state = () => ({ name, icon, active });

    	$$self.$inject_state = $$props => {
    		if ("name" in $$props) $$invalidate(0, name = $$props.name);
    		if ("icon" in $$props) $$invalidate(1, icon = $$props.icon);
    		if ("active" in $$props) $$invalidate(2, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, icon, active, click_handler];
    }

    class Cell extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { name: 0, icon: 1, active: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cell",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
    			console.warn("<Cell> was created without expected prop 'name'");
    		}

    		if (/*icon*/ ctx[1] === undefined && !("icon" in props)) {
    			console.warn("<Cell> was created without expected prop 'icon'");
    		}
    	}

    	get name() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Navbar/index.svelte generated by Svelte v3.32.1 */
    const file$d = "src/components/Navbar/index.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i].name;
    	child_ctx[4] = list[i].icon;
    	return child_ctx;
    }

    // (21:2) {#each routes as { name, icon }
    function create_each_block$1(key_1, ctx) {
    	let first;
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				name: /*name*/ ctx[3],
    				icon: /*icon*/ ctx[4],
    				active: /*active*/ ctx[1] === /*name*/ ctx[3]
    			},
    			$$inline: true
    		});

    	cell.$on("click", function () {
    		if (is_function(/*navigateTo*/ ctx[2](/*name*/ ctx[3]))) /*navigateTo*/ ctx[2](/*name*/ ctx[3]).apply(this, arguments);
    	});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(cell.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const cell_changes = {};
    			if (dirty & /*routes*/ 1) cell_changes.name = /*name*/ ctx[3];
    			if (dirty & /*routes*/ 1) cell_changes.icon = /*icon*/ ctx[4];
    			if (dirty & /*active, routes*/ 3) cell_changes.active = /*active*/ ctx[1] === /*name*/ ctx[3];
    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(21:2) {#each routes as { name, icon }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let nav;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*routes*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*name*/ ctx[3];
    	validate_each_keys(ctx, each_value, get_each_context$1, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$1(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			nav = element("nav");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(nav, "class", "svelte-1hr68n8");
    			add_location(nav, file$d, 19, 0, 308);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(nav, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*routes, active, navigateTo*/ 7) {
    				each_value = /*routes*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$1, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, nav, outro_and_destroy_block, create_each_block$1, null, get_each_context$1);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Navbar", slots, []);
    	let { routes } = $$props, { active } = $$props, { navigateTo } = $$props;
    	const writable_props = ["routes", "active", "navigateTo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Navbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("routes" in $$props) $$invalidate(0, routes = $$props.routes);
    		if ("active" in $$props) $$invalidate(1, active = $$props.active);
    		if ("navigateTo" in $$props) $$invalidate(2, navigateTo = $$props.navigateTo);
    	};

    	$$self.$capture_state = () => ({ Cell, routes, active, navigateTo });

    	$$self.$inject_state = $$props => {
    		if ("routes" in $$props) $$invalidate(0, routes = $$props.routes);
    		if ("active" in $$props) $$invalidate(1, active = $$props.active);
    		if ("navigateTo" in $$props) $$invalidate(2, navigateTo = $$props.navigateTo);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [routes, active, navigateTo];
    }

    class Navbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { routes: 0, active: 1, navigateTo: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navbar",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*routes*/ ctx[0] === undefined && !("routes" in props)) {
    			console.warn("<Navbar> was created without expected prop 'routes'");
    		}

    		if (/*active*/ ctx[1] === undefined && !("active" in props)) {
    			console.warn("<Navbar> was created without expected prop 'active'");
    		}

    		if (/*navigateTo*/ ctx[2] === undefined && !("navigateTo" in props)) {
    			console.warn("<Navbar> was created without expected prop 'navigateTo'");
    		}
    	}

    	get routes() {
    		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get navigateTo() {
    		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set navigateTo(value) {
    		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Layout.svelte generated by Svelte v3.32.1 */

    const { console: console_1$2 } = globals;
    const file$e = "src/components/Layout.svelte";
    const get_header_slot_changes = dirty => ({});
    const get_header_slot_context = ctx => ({});

    // (51:24)        
    function fallback_block(ctx) {
    	let icons_start;
    	let t;
    	let icons_bell;
    	let current;
    	icons_start = new Start({ $$inline: true });
    	icons_bell = new Bell({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(icons_start.$$.fragment);
    			t = space();
    			create_component(icons_bell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icons_start, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(icons_bell, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icons_start.$$.fragment, local);
    			transition_in(icons_bell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icons_start.$$.fragment, local);
    			transition_out(icons_bell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icons_start, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(icons_bell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(51:24)        ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let nav;
    	let t0;
    	let section;
    	let t1;
    	let navbar;
    	let current;
    	const header_slot_template = /*#slots*/ ctx[4].header;
    	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[3], get_header_slot_context);
    	const header_slot_or_fallback = header_slot || fallback_block(ctx);
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	navbar = new Navbar({
    			props: {
    				routes: /*ROUTES*/ ctx[1],
    				active: /*active*/ ctx[0],
    				navigateTo: /*navigateTo*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			nav = element("nav");
    			if (header_slot_or_fallback) header_slot_or_fallback.c();
    			t0 = space();
    			section = element("section");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			create_component(navbar.$$.fragment);
    			attr_dev(nav, "class", "header svelte-164s9qx");
    			add_location(nav, file$e, 49, 2, 1108);
    			attr_dev(section, "class", "content svelte-164s9qx");
    			add_location(section, file$e, 56, 2, 1221);
    			attr_dev(div, "class", "root svelte-164s9qx");
    			add_location(div, file$e, 48, 0, 1087);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, nav);

    			if (header_slot_or_fallback) {
    				header_slot_or_fallback.m(nav, null);
    			}

    			append_dev(div, t0);
    			append_dev(div, section);

    			if (default_slot) {
    				default_slot.m(section, null);
    			}

    			append_dev(div, t1);
    			mount_component(navbar, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (header_slot) {
    				if (header_slot.p && dirty & /*$$scope*/ 8) {
    					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_header_slot_changes, get_header_slot_context);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 8) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
    				}
    			}

    			const navbar_changes = {};
    			if (dirty & /*active*/ 1) navbar_changes.active = /*active*/ ctx[0];
    			navbar.$set(navbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header_slot_or_fallback, local);
    			transition_in(default_slot, local);
    			transition_in(navbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header_slot_or_fallback, local);
    			transition_out(default_slot, local);
    			transition_out(navbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (header_slot_or_fallback) header_slot_or_fallback.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			destroy_component(navbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Layout", slots, ['header','default']);

    	const ROUTES = [
    		{
    			name: "Home",
    			component: null,
    			icon: Home
    		},
    		{
    			name: "Search",
    			component: null,
    			icon: Search
    		},
    		{
    			name: "Start",
    			component: null,
    			icon: Start
    		},
    		{
    			name: "Routes",
    			component: null,
    			icon: Tracks
    		},
    		{
    			name: "Profile",
    			component: null,
    			icon: null
    		}
    	];

    	let active = ROUTES[0].name;
    	const activeRouteStore = writable(active);
    	activeRouteStore.subscribe(value => $$invalidate(0, active = value));
    	const navigateTo = routeName => () => activeRouteStore.set(routeName);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<Layout> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		writable,
    		Icons,
    		Navbar,
    		ROUTES,
    		active,
    		activeRouteStore,
    		navigateTo
    	});

    	$$self.$inject_state = $$props => {
    		if ("active" in $$props) $$invalidate(0, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*active*/ 1) {
    			console.log(active);
    		}
    	};

    	return [active, ROUTES, navigateTo, $$scope, slots];
    }

    class Layout extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Layout",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.32.1 */
    const file$f = "src/App.svelte";

    // (74:4) {:else}
    function create_else_block(ctx) {
    	let auth;
    	let current;
    	auth = new Auth({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(auth.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(auth, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(auth.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(auth.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(auth, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(74:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (64:4) {#if isSignedIn}
    function create_if_block(ctx) {
    	let feed;
    	let current;

    	feed = new Feed({
    			props: { tracks: /*tracks*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(feed.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(feed, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const feed_changes = {};
    			if (dirty & /*tracks*/ 2) feed_changes.tracks = /*tracks*/ ctx[1];
    			feed.$set(feed_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(feed.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(feed.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(feed, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(64:4) {#if isSignedIn}",
    		ctx
    	});

    	return block;
    }

    // (63:2) <Layout>
    function create_default_slot(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isSignedIn*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(63:2) <Layout>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let main;
    	let layout;
    	let current;

    	layout = new Layout({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(layout.$$.fragment);
    			attr_dev(main, "class", "svelte-saymxz");
    			add_location(main, file$f, 61, 0, 1268);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(layout, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const layout_changes = {};

    			if (dirty & /*$$scope, tracks, isSignedIn*/ 131) {
    				layout_changes.$$scope = { dirty, ctx };
    			}

    			layout.$set(layout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(layout);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	let recording = false;
    	const store = writable(recording);
    	store.subscribe(value => recording = value);
    	let isSignedIn = false;
    	subscribe(value => $$invalidate(0, isSignedIn = !!value));
    	let tracks = {};
    	const onTracks = value => $$invalidate(1, tracks = value);

    	const start = () => {
    		const id = newTrack();
    		store.set(id);
    		selectedStore.set(null);
    	};

    	const stop = () => store.set(null);

    	onMount(() => {
    		initialize();
    		subscribe$1(onTracks);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		writable,
    		Map: Map_1,
    		Feed,
    		Auth,
    		Layout,
    		initialize,
    		onUserChange: subscribe,
    		signOut,
    		onTracksChange: subscribe$1,
    		newTrack,
    		recording,
    		store,
    		isSignedIn,
    		tracks,
    		onTracks,
    		start,
    		stop
    	});

    	$$self.$inject_state = $$props => {
    		if ("recording" in $$props) recording = $$props.recording;
    		if ("isSignedIn" in $$props) $$invalidate(0, isSignedIn = $$props.isSignedIn);
    		if ("tracks" in $$props) $$invalidate(1, tracks = $$props.tracks);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isSignedIn, tracks];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    const app = new App({
      target: document.body,
      props: {
        name: 'world',
      },
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
